// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
// ignore_for_file: constant_identifier_names
//const SDL_h_ = ;
//const SDL_assert_h_ = ;
//const SDL_ASSERT_LEVEL = SomeNumberBasedOnVariousFactors;
//const SDL_TriggerBreakpoint = () TriggerABreakpointInAPlatformSpecificManner;
//const SDL_FUNCTION = __FUNCTION__;
//const SDL_FILE = __FILE__;
//const SDL_LINE = __LINE__;
const SDL_NULL_WHILE_LOOP_CONDITION = (0);
//const SDL_disabled_assert = (condition) do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION);
const SDL_ASSERTION_RETRY = 0;
const SDL_ASSERTION_BREAK = 1;
const SDL_ASSERTION_ABORT = 2;
const SDL_ASSERTION_IGNORE = 3;
const SDL_ASSERTION_ALWAYS_IGNORE = 4;
//const SDL_AssertBreakpoint = () SDL_TriggerBreakpoint();
//const SDL_enabled_assert = (condition) do { while ( !(condition) ) { static struct SDL_AssertData sdl_assert_data = { 0, 0, #condition, 0, 0, 0, 0 }; const SDL_AssertState sdl_assert_state = SDL_ReportAssertion(&sdl_assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE); if (sdl_assert_state == SDL_ASSERTION_RETRY) { continue; } } while (SDL_NULL_WHILE_LOOP_CONDITION);
//const SDL_assert = (condition) if (assertion_enabled && (condition)) { trigger_assertion; };
//const SDL_assert_release = (condition) SDL_disabled_assert(condition);
//const SDL_assert_paranoid = (condition) SDL_disabled_assert(condition);
//const SDL_assert_always = (condition) SDL_enabled_assert(condition);
//const SDL_asyncio_h_ = ;
const SDL_ASYNCIO_TASK_READ = 0;
const SDL_ASYNCIO_TASK_WRITE = 1;
const SDL_ASYNCIO_TASK_CLOSE = 2;
const SDL_ASYNCIO_COMPLETE = 0;
const SDL_ASYNCIO_FAILURE = 1;
const SDL_ASYNCIO_CANCELED = 2;
//const SDL_atomic_h_ = ;
//const SDL_CompilerBarrier = () DoCompilerSpecificReadWriteBarrier();
//const SDL_MemoryBarrierRelease = () SDL_MemoryBarrierReleaseFunction();
//const SDL_MemoryBarrierAcquire = () SDL_MemoryBarrierAcquireFunction();
//const SDL_MEMORY_BARRIER_USES_FUNCTION = ;
//const SDL_CPUPauseInstruction = () DoACPUPauseInACompilerAndArchitectureSpecificWay;
//const SDL_AtomicIncRef = (a) SDL_AddAtomicInt(a, 1);
//const SDL_AtomicDecRef = (a) (SDL_AddAtomicInt(a, -1) == 1);
//const SDL_audio_h_ = ;
const SDL_AUDIO_MASK_BITSIZE = (0xFF);
const SDL_AUDIO_MASK_FLOAT = (1 << 8);
const SDL_AUDIO_MASK_BIG_ENDIAN = (1 << 12);
const SDL_AUDIO_MASK_SIGNED = (1 << 15);
//const SDL_DEFINE_AUDIO_FORMAT = (signed, bigendian, flt, size) (((Uint16)(signed) << 15) | ((Uint16)(bigendian) << 12) | ((Uint16)(flt) << 8) | ((size) & SDL_AUDIO_MASK_BITSIZE));
const SDL_AUDIO_UNKNOWN = 0x0000;
const SDL_AUDIO_U8 = 0x0008;
const SDL_AUDIO_S8 = 0x8008;
const SDL_AUDIO_S16LE = 0x8010;
const SDL_AUDIO_S16BE = 0x9010;
const SDL_AUDIO_S32LE = 0x8020;
const SDL_AUDIO_S32BE = 0x9020;
const SDL_AUDIO_F32LE = 0x8120;
const SDL_AUDIO_F32BE = 0x9120;
//const SDL_AUDIO_BITSIZE = (x) ((x) & SDL_AUDIO_MASK_BITSIZE);
//const SDL_AUDIO_BYTESIZE = (x) (SDL_AUDIO_BITSIZE(x) / 8);
//const SDL_AUDIO_ISFLOAT = (x) ((x) & SDL_AUDIO_MASK_FLOAT);
//const SDL_AUDIO_ISBIGENDIAN = (x) ((x) & SDL_AUDIO_MASK_BIG_ENDIAN);
//const SDL_AUDIO_ISLITTLEENDIAN = (x) (!SDL_AUDIO_ISBIGENDIAN(x));
//const SDL_AUDIO_ISSIGNED = (x) ((x) & SDL_AUDIO_MASK_SIGNED);
//const SDL_AUDIO_ISINT = (x) (!SDL_AUDIO_ISFLOAT(x));
//const SDL_AUDIO_ISUNSIGNED = (x) (!SDL_AUDIO_ISSIGNED(x));
//const SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK = ((SDL_AudioDeviceID) 0xFFFFFFFF);
//const SDL_AUDIO_DEVICE_DEFAULT_RECORDING = ((SDL_AudioDeviceID) 0xFFFFFFFE);
//const SDL_AUDIO_FRAMESIZE = (x) (SDL_AUDIO_BYTESIZE((x).format) * (x).channels);
//const SDL_begin_code_h = ;
//const SDL_DEPRECATED = __attribute__((deprecated));
//const SDL_DECLSPEC = __attribute__ ((visibility("default")));
//const SDLCALL = __cdecl;
//const SDL_INLINE = __inline;
//const SDL_FORCE_INLINE = __forceinline;
//const SDL_NORETURN = __attribute__((noreturn));
//const SDL_ANALYZER_NORETURN = __attribute__((analyzer_noreturn));
//const SDL_FALLTHROUGH = [[fallthrough]];
//const SDL_NODISCARD = [[nodiscard]];
//const SDL_MALLOC = __declspec(allocator) __desclspec(restrict);
//const SDL_ALLOC_SIZE = (p) __attribute__((alloc_size(p)));
//const SDL_RESTRICT = __restrict__;
//const SDL_HAS_BUILTIN = (x) __has_builtin(x);
//const SDL_UNUSED = __attribute__((unused));
//const __inline__ = __inline;
const NULL = 0;
//const SDL_HAS_FALLTHROUGH = __has_attribute(__fallthrough__);
//const SDL_ALLOC_SIZE2 = (p1, p2) __attribute__((alloc_size(p1, p2)));
//const SDL_bits_h_ = ;
//const SDL_blendmode_h_ = ;
const SDL_BLENDMODE_NONE = 0x00000000;
const SDL_BLENDMODE_BLEND = 0x00000001;
const SDL_BLENDMODE_BLEND_PREMULTIPLIED = 0x00000010;
const SDL_BLENDMODE_ADD = 0x00000002;
const SDL_BLENDMODE_ADD_PREMULTIPLIED = 0x00000020;
const SDL_BLENDMODE_MOD = 0x00000004;
const SDL_BLENDMODE_MUL = 0x00000008;
const SDL_BLENDMODE_INVALID = 0x7FFFFFFF;
const SDL_BLENDOPERATION_ADD = 0x1;
const SDL_BLENDOPERATION_SUBTRACT = 0x2;
const SDL_BLENDOPERATION_REV_SUBTRACT = 0x3;
const SDL_BLENDOPERATION_MINIMUM = 0x4;
const SDL_BLENDOPERATION_MAXIMUM = 0x5;
const SDL_BLENDFACTOR_ZERO = 0x1;
const SDL_BLENDFACTOR_ONE = 0x2;
const SDL_BLENDFACTOR_SRC_COLOR = 0x3;
const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4;
const SDL_BLENDFACTOR_SRC_ALPHA = 0x5;
const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6;
const SDL_BLENDFACTOR_DST_COLOR = 0x7;
const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8;
const SDL_BLENDFACTOR_DST_ALPHA = 0x9;
const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA;
//const SDL_camera_h_ = ;
const SDL_CAMERA_POSITION_UNKNOWN = 0;
const SDL_CAMERA_POSITION_FRONT_FACING = 1;
const SDL_CAMERA_POSITION_BACK_FACING = 2;
//const SDL_clipboard_h_ = ;
//const SDL_cpuinfo_h_ = ;
const SDL_CACHELINE_SIZE = 128;
//const SDL_dialog_h_ = ;
const SDL_FILEDIALOG_OPENFILE = 0;
const SDL_FILEDIALOG_SAVEFILE = 1;
const SDL_FILEDIALOG_OPENFOLDER = 2;
const SDL_PROP_FILE_DIALOG_FILTERS_POINTER = 'SDL.filedialog.filters';
const SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER = 'SDL.filedialog.nfilters';
const SDL_PROP_FILE_DIALOG_WINDOW_POINTER = 'SDL.filedialog.window';
const SDL_PROP_FILE_DIALOG_LOCATION_STRING = 'SDL.filedialog.location';
const SDL_PROP_FILE_DIALOG_MANY_BOOLEAN = 'SDL.filedialog.many';
const SDL_PROP_FILE_DIALOG_TITLE_STRING = 'SDL.filedialog.title';
const SDL_PROP_FILE_DIALOG_ACCEPT_STRING = 'SDL.filedialog.accept';
const SDL_PROP_FILE_DIALOG_CANCEL_STRING = 'SDL.filedialog.cancel';
//const SDL_endian_h_ = ;
//const __PRFCHWINTRIN_H = ;
const SDL_LIL_ENDIAN = 1234;
const SDL_BIG_ENDIAN = 4321;
//const SDL_BYTEORDER = SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN;
//const SDL_FLOATWORDORDER = SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN;
//const HAS_BUILTIN_BSWAP16 = (SDL_HAS_BUILTIN(__builtin_bswap16)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8));
//const HAS_BUILTIN_BSWAP32 = (SDL_HAS_BUILTIN(__builtin_bswap32)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3));
//const HAS_BUILTIN_BSWAP64 = (SDL_HAS_BUILTIN(__builtin_bswap64)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3));
//const HAS_BROKEN_BSWAP = (__GNUC__ == 2 && __GNUC_MINOR__ <= 95);
//const SDL_Swap16 = (x) __builtin_bswap16(x);
//const SDL_Swap32 = (x) __builtin_bswap32(x);
//const SDL_Swap64 = (x) __builtin_bswap64(x);
//const SDL_Swap16LE = (x) SwapOnlyIfNecessary(x);
//const SDL_Swap32LE = (x) SwapOnlyIfNecessary(x);
//const SDL_Swap64LE = (x) SwapOnlyIfNecessary(x);
//const SDL_SwapFloatLE = (x) SwapOnlyIfNecessary(x);
//const SDL_Swap16BE = (x) SwapOnlyIfNecessary(x);
//const SDL_Swap32BE = (x) SwapOnlyIfNecessary(x);
//const SDL_Swap64BE = (x) SwapOnlyIfNecessary(x);
//const SDL_SwapFloatBE = (x) SwapOnlyIfNecessary(x);
//const SDL_error_h_ = ;
//const SDL_Unsupported = () SDL_SetError("That operation is not supported");
//const SDL_InvalidParamError = (param) SDL_SetError("Parameter '%s' is invalid", (param));
//const SDL_events_h_ = ;
const SDL_EVENT_FIRST = 0;
const SDL_EVENT_QUIT = 0x100;
const SDL_EVENT_TERMINATING = 0x100 + 1;
const SDL_EVENT_LOW_MEMORY = 0x100 + 2;
const SDL_EVENT_WILL_ENTER_BACKGROUND = 0x100 + 3;
const SDL_EVENT_DID_ENTER_BACKGROUND = 0x100 + 4;
const SDL_EVENT_WILL_ENTER_FOREGROUND = 0x100 + 5;
const SDL_EVENT_DID_ENTER_FOREGROUND = 0x100 + 6;
const SDL_EVENT_LOCALE_CHANGED = 0x100 + 7;
const SDL_EVENT_SYSTEM_THEME_CHANGED = 0x100 + 8;
const SDL_EVENT_DISPLAY_ORIENTATION = 0x151;
const SDL_EVENT_DISPLAY_ADDED = 0x151 + 1;
const SDL_EVENT_DISPLAY_REMOVED = 0x151 + 2;
const SDL_EVENT_DISPLAY_MOVED = 0x151 + 3;
const SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 0x151 + 4;
const SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 0x151 + 5;
const SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 0x151 + 6;
const SDL_EVENT_DISPLAY_FIRST = SDL_EVENT_DISPLAY_ORIENTATION;
const SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED;
const SDL_EVENT_WINDOW_SHOWN = 0x202;
const SDL_EVENT_WINDOW_HIDDEN = 0x202 + 1;
const SDL_EVENT_WINDOW_EXPOSED = 0x202 + 2;
const SDL_EVENT_WINDOW_MOVED = 0x202 + 3;
const SDL_EVENT_WINDOW_RESIZED = 0x202 + 4;
const SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 0x202 + 5;
const SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 0x202 + 6;
const SDL_EVENT_WINDOW_MINIMIZED = 0x202 + 7;
const SDL_EVENT_WINDOW_MAXIMIZED = 0x202 + 8;
const SDL_EVENT_WINDOW_RESTORED = 0x202 + 9;
const SDL_EVENT_WINDOW_MOUSE_ENTER = 0x202 + 10;
const SDL_EVENT_WINDOW_MOUSE_LEAVE = 0x202 + 11;
const SDL_EVENT_WINDOW_FOCUS_GAINED = 0x202 + 12;
const SDL_EVENT_WINDOW_FOCUS_LOST = 0x202 + 13;
const SDL_EVENT_WINDOW_CLOSE_REQUESTED = 0x202 + 14;
const SDL_EVENT_WINDOW_HIT_TEST = 0x202 + 15;
const SDL_EVENT_WINDOW_ICCPROF_CHANGED = 0x202 + 16;
const SDL_EVENT_WINDOW_DISPLAY_CHANGED = 0x202 + 17;
const SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 0x202 + 18;
const SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 0x202 + 19;
const SDL_EVENT_WINDOW_OCCLUDED = 0x202 + 20;
const SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 0x202 + 21;
const SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 0x202 + 22;
const SDL_EVENT_WINDOW_DESTROYED = 0x202 + 23;
const SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 0x202 + 24;
const SDL_EVENT_WINDOW_FIRST = SDL_EVENT_WINDOW_SHOWN;
const SDL_EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_HDR_STATE_CHANGED;
const SDL_EVENT_KEY_DOWN = 0x300;
const SDL_EVENT_KEY_UP = 0x300 + 1;
const SDL_EVENT_TEXT_EDITING = 0x300 + 2;
const SDL_EVENT_TEXT_INPUT = 0x300 + 3;
const SDL_EVENT_KEYMAP_CHANGED = 0x300 + 4;
const SDL_EVENT_KEYBOARD_ADDED = 0x300 + 5;
const SDL_EVENT_KEYBOARD_REMOVED = 0x300 + 6;
const SDL_EVENT_TEXT_EDITING_CANDIDATES = 0x300 + 7;
const SDL_EVENT_MOUSE_MOTION = 0x400;
const SDL_EVENT_MOUSE_BUTTON_DOWN = 0x400 + 1;
const SDL_EVENT_MOUSE_BUTTON_UP = 0x400 + 2;
const SDL_EVENT_MOUSE_WHEEL = 0x400 + 3;
const SDL_EVENT_MOUSE_ADDED = 0x400 + 4;
const SDL_EVENT_MOUSE_REMOVED = 0x400 + 5;
const SDL_EVENT_JOYSTICK_AXIS_MOTION = 0x600;
const SDL_EVENT_JOYSTICK_BALL_MOTION = 0x600 + 1;
const SDL_EVENT_JOYSTICK_HAT_MOTION = 0x600 + 2;
const SDL_EVENT_JOYSTICK_BUTTON_DOWN = 0x600 + 3;
const SDL_EVENT_JOYSTICK_BUTTON_UP = 0x600 + 4;
const SDL_EVENT_JOYSTICK_ADDED = 0x600 + 5;
const SDL_EVENT_JOYSTICK_REMOVED = 0x600 + 6;
const SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 0x600 + 7;
const SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 0x600 + 8;
const SDL_EVENT_GAMEPAD_AXIS_MOTION = 0x650;
const SDL_EVENT_GAMEPAD_BUTTON_DOWN = 0x650 + 1;
const SDL_EVENT_GAMEPAD_BUTTON_UP = 0x650 + 2;
const SDL_EVENT_GAMEPAD_ADDED = 0x650 + 3;
const SDL_EVENT_GAMEPAD_REMOVED = 0x650 + 4;
const SDL_EVENT_GAMEPAD_REMAPPED = 0x650 + 5;
const SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 0x650 + 6;
const SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 0x650 + 7;
const SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 0x650 + 8;
const SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 0x650 + 9;
const SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 0x650 + 10;
const SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 0x650 + 11;
const SDL_EVENT_FINGER_DOWN = 0x700;
const SDL_EVENT_FINGER_UP = 0x700 + 1;
const SDL_EVENT_FINGER_MOTION = 0x700 + 2;
const SDL_EVENT_FINGER_CANCELED = 0x700 + 3;
const SDL_EVENT_CLIPBOARD_UPDATE = 0x900;
const SDL_EVENT_DROP_FILE = 0x1000;
const SDL_EVENT_DROP_TEXT = 0x1000 + 1;
const SDL_EVENT_DROP_BEGIN = 0x1000 + 2;
const SDL_EVENT_DROP_COMPLETE = 0x1000 + 3;
const SDL_EVENT_DROP_POSITION = 0x1000 + 4;
const SDL_EVENT_AUDIO_DEVICE_ADDED = 0x1100;
const SDL_EVENT_AUDIO_DEVICE_REMOVED = 0x1100 + 1;
const SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 0x1100 + 2;
const SDL_EVENT_SENSOR_UPDATE = 0x1200;
const SDL_EVENT_PEN_PROXIMITY_IN = 0x1300;
const SDL_EVENT_PEN_PROXIMITY_OUT = 0x1300 + 1;
const SDL_EVENT_PEN_DOWN = 0x1300 + 2;
const SDL_EVENT_PEN_UP = 0x1300 + 3;
const SDL_EVENT_PEN_BUTTON_DOWN = 0x1300 + 4;
const SDL_EVENT_PEN_BUTTON_UP = 0x1300 + 5;
const SDL_EVENT_PEN_MOTION = 0x1300 + 6;
const SDL_EVENT_PEN_AXIS = 0x1300 + 7;
const SDL_EVENT_CAMERA_DEVICE_ADDED = 0x1400;
const SDL_EVENT_CAMERA_DEVICE_REMOVED = 0x1400 + 1;
const SDL_EVENT_CAMERA_DEVICE_APPROVED = 0x1400 + 2;
const SDL_EVENT_CAMERA_DEVICE_DENIED = 0x1400 + 3;
const SDL_EVENT_RENDER_TARGETS_RESET = 0x2000;
const SDL_EVENT_RENDER_DEVICE_RESET = 0x2000 + 1;
const SDL_EVENT_RENDER_DEVICE_LOST = 0x2000 + 2;
const SDL_EVENT_PRIVATE0 = 0x4000;
const SDL_EVENT_PRIVATE1 = 0x4000 + 1;
const SDL_EVENT_PRIVATE2 = 0x4000 + 2;
const SDL_EVENT_PRIVATE3 = 0x4000 + 3;
const SDL_EVENT_POLL_SENTINEL = 0x7F00;
const SDL_EVENT_USER = 0x8000;
const SDL_EVENT_LAST = 0xFFFF;
const SDL_EVENT_ENUM_PADDING = 0x7FFFFFFF;
const SDL_ADDEVENT = 0;
const SDL_PEEKEVENT = 1;
const SDL_GETEVENT = 2;
//const SDL_filesystem_h_ = ;
const SDL_FOLDER_HOME = 0;
const SDL_FOLDER_DESKTOP = 1;
const SDL_FOLDER_DOCUMENTS = 2;
const SDL_FOLDER_DOWNLOADS = 3;
const SDL_FOLDER_MUSIC = 4;
const SDL_FOLDER_PICTURES = 5;
const SDL_FOLDER_PUBLICSHARE = 6;
const SDL_FOLDER_SAVEDGAMES = 7;
const SDL_FOLDER_SCREENSHOTS = 8;
const SDL_FOLDER_TEMPLATES = 9;
const SDL_FOLDER_VIDEOS = 10;
const SDL_FOLDER_COUNT = 11;
const SDL_PATHTYPE_NONE = 0;
const SDL_PATHTYPE_FILE = 1;
const SDL_PATHTYPE_DIRECTORY = 2;
const SDL_PATHTYPE_OTHER = 3;
const SDL_GLOB_CASEINSENSITIVE = (1 << 0);
const SDL_ENUM_CONTINUE = 0;
const SDL_ENUM_SUCCESS = 1;
const SDL_ENUM_FAILURE = 2;
//const SDL_gamepad_h_ = ;
const SDL_GAMEPAD_TYPE_UNKNOWN = 0;
const SDL_GAMEPAD_TYPE_STANDARD = 0 + 1;
const SDL_GAMEPAD_TYPE_XBOX360 = 0 + 2;
const SDL_GAMEPAD_TYPE_XBOXONE = 0 + 3;
const SDL_GAMEPAD_TYPE_PS3 = 0 + 4;
const SDL_GAMEPAD_TYPE_PS4 = 0 + 5;
const SDL_GAMEPAD_TYPE_PS5 = 0 + 6;
const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 0 + 7;
const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 0 + 8;
const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 0 + 9;
const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 0 + 10;
const SDL_GAMEPAD_TYPE_GAMECUBE = 0 + 11;
const SDL_GAMEPAD_TYPE_COUNT = 0 + 12;
const SDL_GAMEPAD_BUTTON_INVALID = -1;
const SDL_GAMEPAD_BUTTON_SOUTH = -1 + 1;
const SDL_GAMEPAD_BUTTON_EAST = -1 + 2;
const SDL_GAMEPAD_BUTTON_WEST = -1 + 3;
const SDL_GAMEPAD_BUTTON_NORTH = -1 + 4;
const SDL_GAMEPAD_BUTTON_BACK = -1 + 5;
const SDL_GAMEPAD_BUTTON_GUIDE = -1 + 6;
const SDL_GAMEPAD_BUTTON_START = -1 + 7;
const SDL_GAMEPAD_BUTTON_LEFT_STICK = -1 + 8;
const SDL_GAMEPAD_BUTTON_RIGHT_STICK = -1 + 9;
const SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = -1 + 10;
const SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = -1 + 11;
const SDL_GAMEPAD_BUTTON_DPAD_UP = -1 + 12;
const SDL_GAMEPAD_BUTTON_DPAD_DOWN = -1 + 13;
const SDL_GAMEPAD_BUTTON_DPAD_LEFT = -1 + 14;
const SDL_GAMEPAD_BUTTON_DPAD_RIGHT = -1 + 15;
const SDL_GAMEPAD_BUTTON_MISC1 = -1 + 16;
const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = -1 + 17;
const SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = -1 + 18;
const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = -1 + 19;
const SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = -1 + 20;
const SDL_GAMEPAD_BUTTON_TOUCHPAD = -1 + 21;
const SDL_GAMEPAD_BUTTON_MISC2 = -1 + 22;
const SDL_GAMEPAD_BUTTON_MISC3 = -1 + 23;
const SDL_GAMEPAD_BUTTON_MISC4 = -1 + 24;
const SDL_GAMEPAD_BUTTON_MISC5 = -1 + 25;
const SDL_GAMEPAD_BUTTON_MISC6 = -1 + 26;
const SDL_GAMEPAD_BUTTON_COUNT = -1 + 27;
const SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0;
const SDL_GAMEPAD_BUTTON_LABEL_A = 1;
const SDL_GAMEPAD_BUTTON_LABEL_B = 2;
const SDL_GAMEPAD_BUTTON_LABEL_X = 3;
const SDL_GAMEPAD_BUTTON_LABEL_Y = 4;
const SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5;
const SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6;
const SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7;
const SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8;
const SDL_GAMEPAD_AXIS_INVALID = -1;
const SDL_GAMEPAD_AXIS_LEFTX = -1 + 1;
const SDL_GAMEPAD_AXIS_LEFTY = -1 + 2;
const SDL_GAMEPAD_AXIS_RIGHTX = -1 + 3;
const SDL_GAMEPAD_AXIS_RIGHTY = -1 + 4;
const SDL_GAMEPAD_AXIS_LEFT_TRIGGER = -1 + 5;
const SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = -1 + 6;
const SDL_GAMEPAD_AXIS_COUNT = -1 + 7;
const SDL_GAMEPAD_BINDTYPE_NONE = 0;
const SDL_GAMEPAD_BINDTYPE_BUTTON = 0 + 1;
const SDL_GAMEPAD_BINDTYPE_AXIS = 0 + 2;
const SDL_GAMEPAD_BINDTYPE_HAT = 0 + 3;
//const SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN;
//const SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN;
//const SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN;
//const SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN;
//const SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN;
//const SDL_gpu_h_ = ;
const SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0;
const SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1;
const SDL_GPU_PRIMITIVETYPE_LINELIST = 2;
const SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3;
const SDL_GPU_PRIMITIVETYPE_POINTLIST = 4;
const SDL_GPU_LOADOP_LOAD = 0;
const SDL_GPU_LOADOP_CLEAR = 1;
const SDL_GPU_LOADOP_DONT_CARE = 2;
const SDL_GPU_STOREOP_STORE = 0;
const SDL_GPU_STOREOP_DONT_CARE = 1;
const SDL_GPU_STOREOP_RESOLVE = 2;
const SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3;
const SDL_GPU_INDEXELEMENTSIZE_16BIT = 0;
const SDL_GPU_INDEXELEMENTSIZE_32BIT = 1;
const SDL_GPU_TEXTUREFORMAT_INVALID = 0;
const SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1;
const SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2;
const SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3;
const SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4;
const SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5;
const SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6;
const SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7;
const SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8;
const SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9;
const SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10;
const SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11;
const SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12;
const SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13;
const SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14;
const SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15;
const SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16;
const SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17;
const SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18;
const SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19;
const SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20;
const SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21;
const SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22;
const SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23;
const SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24;
const SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25;
const SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26;
const SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27;
const SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28;
const SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29;
const SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30;
const SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31;
const SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32;
const SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33;
const SDL_GPU_TEXTUREFORMAT_R8_UINT = 34;
const SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35;
const SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36;
const SDL_GPU_TEXTUREFORMAT_R16_UINT = 37;
const SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38;
const SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39;
const SDL_GPU_TEXTUREFORMAT_R32_UINT = 40;
const SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41;
const SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42;
const SDL_GPU_TEXTUREFORMAT_R8_INT = 43;
const SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44;
const SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45;
const SDL_GPU_TEXTUREFORMAT_R16_INT = 46;
const SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47;
const SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48;
const SDL_GPU_TEXTUREFORMAT_R32_INT = 49;
const SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50;
const SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51;
const SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52;
const SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53;
const SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54;
const SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55;
const SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56;
const SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57;
const SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58;
const SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59;
const SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60;
const SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61;
const SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62;
const SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76;
const SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90;
const SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92;
const SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94;
const SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97;
const SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101;
const SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103;
const SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104;
const SDL_GPU_TEXTUREUSAGE_SAMPLER = (1 << 0);
const SDL_GPU_TEXTUREUSAGE_COLOR_TARGET = (1 << 1);
const SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = (1 << 2);
const SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = (1 << 3);
const SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = (1 << 4);
const SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = (1 << 5);
const SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = (1 << 6);
const SDL_GPU_TEXTURETYPE_2D = 0;
const SDL_GPU_TEXTURETYPE_2D_ARRAY = 1;
const SDL_GPU_TEXTURETYPE_3D = 2;
const SDL_GPU_TEXTURETYPE_CUBE = 3;
const SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4;
const SDL_GPU_SAMPLECOUNT_1 = 0;
const SDL_GPU_SAMPLECOUNT_2 = 1;
const SDL_GPU_SAMPLECOUNT_4 = 2;
const SDL_GPU_SAMPLECOUNT_8 = 3;
const SDL_GPU_CUBEMAPFACE_POSITIVEX = 0;
const SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1;
const SDL_GPU_CUBEMAPFACE_POSITIVEY = 2;
const SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3;
const SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4;
const SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5;
const SDL_GPU_BUFFERUSAGE_VERTEX = (1 << 0);
const SDL_GPU_BUFFERUSAGE_INDEX = (1 << 1);
const SDL_GPU_BUFFERUSAGE_INDIRECT = (1 << 2);
const SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = (1 << 3);
const SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = (1 << 4);
const SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = (1 << 5);
const SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0;
const SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1;
const SDL_GPU_SHADERSTAGE_VERTEX = 0;
const SDL_GPU_SHADERSTAGE_FRAGMENT = 1;
const SDL_GPU_SHADERFORMAT_INVALID = 0;
const SDL_GPU_SHADERFORMAT_PRIVATE = (1 << 0);
const SDL_GPU_SHADERFORMAT_SPIRV = (1 << 1);
const SDL_GPU_SHADERFORMAT_DXBC = (1 << 2);
const SDL_GPU_SHADERFORMAT_DXIL = (1 << 3);
const SDL_GPU_SHADERFORMAT_MSL = (1 << 4);
const SDL_GPU_SHADERFORMAT_METALLIB = (1 << 5);
const SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0;
const SDL_GPU_VERTEXELEMENTFORMAT_INT = 1;
const SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2;
const SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3;
const SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4;
const SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5;
const SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6;
const SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7;
const SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8;
const SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9;
const SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10;
const SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11;
const SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12;
const SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13;
const SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14;
const SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15;
const SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16;
const SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17;
const SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18;
const SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19;
const SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20;
const SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21;
const SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22;
const SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23;
const SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24;
const SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25;
const SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26;
const SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27;
const SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28;
const SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29;
const SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30;
const SDL_GPU_VERTEXINPUTRATE_VERTEX = 0;
const SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1;
const SDL_GPU_FILLMODE_FILL = 0;
const SDL_GPU_FILLMODE_LINE = 1;
const SDL_GPU_CULLMODE_NONE = 0;
const SDL_GPU_CULLMODE_FRONT = 1;
const SDL_GPU_CULLMODE_BACK = 2;
const SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0;
const SDL_GPU_FRONTFACE_CLOCKWISE = 1;
const SDL_GPU_COMPAREOP_INVALID = 0;
const SDL_GPU_COMPAREOP_NEVER = 1;
const SDL_GPU_COMPAREOP_LESS = 2;
const SDL_GPU_COMPAREOP_EQUAL = 3;
const SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4;
const SDL_GPU_COMPAREOP_GREATER = 5;
const SDL_GPU_COMPAREOP_NOT_EQUAL = 6;
const SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7;
const SDL_GPU_COMPAREOP_ALWAYS = 8;
const SDL_GPU_STENCILOP_INVALID = 0;
const SDL_GPU_STENCILOP_KEEP = 1;
const SDL_GPU_STENCILOP_ZERO = 2;
const SDL_GPU_STENCILOP_REPLACE = 3;
const SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4;
const SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5;
const SDL_GPU_STENCILOP_INVERT = 6;
const SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7;
const SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8;
const SDL_GPU_BLENDOP_INVALID = 0;
const SDL_GPU_BLENDOP_ADD = 1;
const SDL_GPU_BLENDOP_SUBTRACT = 2;
const SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3;
const SDL_GPU_BLENDOP_MIN = 4;
const SDL_GPU_BLENDOP_MAX = 5;
const SDL_GPU_BLENDFACTOR_INVALID = 0;
const SDL_GPU_BLENDFACTOR_ZERO = 1;
const SDL_GPU_BLENDFACTOR_ONE = 2;
const SDL_GPU_BLENDFACTOR_SRC_COLOR = 3;
const SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
const SDL_GPU_BLENDFACTOR_DST_COLOR = 5;
const SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6;
const SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7;
const SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8;
const SDL_GPU_BLENDFACTOR_DST_ALPHA = 9;
const SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;
const SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11;
const SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12;
const SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13;
const SDL_GPU_COLORCOMPONENT_R = (1 << 0);
const SDL_GPU_COLORCOMPONENT_G = (1 << 1);
const SDL_GPU_COLORCOMPONENT_B = (1 << 2);
const SDL_GPU_COLORCOMPONENT_A = (1 << 3);
const SDL_GPU_FILTER_NEAREST = 0;
const SDL_GPU_FILTER_LINEAR = 1;
const SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0;
const SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1;
const SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0;
const SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1;
const SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2;
const SDL_GPU_PRESENTMODE_VSYNC = 0;
const SDL_GPU_PRESENTMODE_IMMEDIATE = 1;
const SDL_GPU_PRESENTMODE_MAILBOX = 2;
const SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0;
const SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1;
const SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2;
const SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084 = 3;
const SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN =
    'SDL.gpu.device.create.debugmode';
const SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN =
    'SDL.gpu.device.create.preferlowpower';
const SDL_PROP_GPU_DEVICE_CREATE_VERBOSE_BOOLEAN =
    'SDL.gpu.device.create.verbose';
const SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING = 'SDL.gpu.device.create.name';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN =
    'SDL.gpu.device.create.shaders.private';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN =
    'SDL.gpu.device.create.shaders.spirv';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN =
    'SDL.gpu.device.create.shaders.dxbc';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN =
    'SDL.gpu.device.create.shaders.dxil';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN =
    'SDL.gpu.device.create.shaders.msl';
const SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN =
    'SDL.gpu.device.create.shaders.metallib';
const SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING =
    'SDL.gpu.device.create.d3d12.semantic';
const SDL_PROP_GPU_DEVICE_NAME_STRING = 'SDL.gpu.device.name';
const SDL_PROP_GPU_DEVICE_DRIVER_NAME_STRING = 'SDL.gpu.device.driver_name';
const SDL_PROP_GPU_DEVICE_DRIVER_VERSION_STRING =
    'SDL.gpu.device.driver_version';
const SDL_PROP_GPU_DEVICE_DRIVER_INFO_STRING = 'SDL.gpu.device.driver_info';
const SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING =
    'SDL.gpu.computepipeline.create.name';
const SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING =
    'SDL.gpu.graphicspipeline.create.name';
const SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING = 'SDL.gpu.sampler.create.name';
const SDL_PROP_GPU_SHADER_CREATE_NAME_STRING = 'SDL.gpu.shader.create.name';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT =
    'SDL.gpu.texture.create.d3d12.clear.r';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT =
    'SDL.gpu.texture.create.d3d12.clear.g';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT =
    'SDL.gpu.texture.create.d3d12.clear.b';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT =
    'SDL.gpu.texture.create.d3d12.clear.a';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT =
    'SDL.gpu.texture.create.d3d12.clear.depth';
const SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER =
    'SDL.gpu.texture.create.d3d12.clear.stencil';
const SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING = 'SDL.gpu.texture.create.name';
const SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING = 'SDL.gpu.buffer.create.name';
const SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING =
    'SDL.gpu.transferbuffer.create.name';
//const SDL_guid_h_ = ;
//const SDL_haptic_h_ = ;
const SDL_HAPTIC_INFINITY = 4294967295;
const SDL_HAPTIC_CONSTANT = (1 << 0);
const SDL_HAPTIC_SINE = (1 << 1);
const SDL_HAPTIC_SQUARE = (1 << 2);
const SDL_HAPTIC_TRIANGLE = (1 << 3);
const SDL_HAPTIC_SAWTOOTHUP = (1 << 4);
const SDL_HAPTIC_SAWTOOTHDOWN = (1 << 5);
const SDL_HAPTIC_RAMP = (1 << 6);
const SDL_HAPTIC_SPRING = (1 << 7);
const SDL_HAPTIC_DAMPER = (1 << 8);
const SDL_HAPTIC_INERTIA = (1 << 9);
const SDL_HAPTIC_FRICTION = (1 << 10);
const SDL_HAPTIC_LEFTRIGHT = (1 << 11);
const SDL_HAPTIC_RESERVED1 = (1 << 12);
const SDL_HAPTIC_RESERVED2 = (1 << 13);
const SDL_HAPTIC_RESERVED3 = (1 << 14);
const SDL_HAPTIC_CUSTOM = (1 << 15);
const SDL_HAPTIC_GAIN = (1 << 16);
const SDL_HAPTIC_AUTOCENTER = (1 << 17);
const SDL_HAPTIC_STATUS = (1 << 18);
const SDL_HAPTIC_PAUSE = (1 << 19);
const SDL_HAPTIC_POLAR = 0;
const SDL_HAPTIC_CARTESIAN = 1;
const SDL_HAPTIC_SPHERICAL = 2;
const SDL_HAPTIC_STEERING_AXIS = 3;
//const SDL_hidapi_h_ = ;
const SDL_HID_API_BUS_UNKNOWN = 0x00;
const SDL_HID_API_BUS_USB = 0x01;
const SDL_HID_API_BUS_BLUETOOTH = 0x02;
const SDL_HID_API_BUS_I2C = 0x03;
const SDL_HID_API_BUS_SPI = 0x04;
//const SDL_hints_h_ = ;
const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = 'SDL_ALLOW_ALT_TAB_WHILE_GRABBED';
const SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY =
    'SDL_ANDROID_ALLOW_RECREATE_ACTIVITY';
const SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';
const SDL_HINT_ANDROID_LOW_LATENCY_AUDIO = 'SDL_ANDROID_LOW_LATENCY_AUDIO';
const SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';
const SDL_HINT_APP_ID = 'SDL_APP_ID';
const SDL_HINT_APP_NAME = 'SDL_APP_NAME';
const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS =
    'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';
const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION =
    'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';
const SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE = 'SDL_AUDIO_ALSA_DEFAULT_DEVICE';
const SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE =
    'SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE';
const SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE =
    'SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE';
const SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';
const SDL_HINT_AUDIO_CHANNELS = 'SDL_AUDIO_CHANNELS';
const SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = 'SDL_AUDIO_DEVICE_APP_ICON_NAME';
const SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = 'SDL_AUDIO_DEVICE_SAMPLE_FRAMES';
const SDL_HINT_AUDIO_DEVICE_STREAM_NAME = 'SDL_AUDIO_DEVICE_STREAM_NAME';
const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = 'SDL_AUDIO_DEVICE_STREAM_ROLE';
const SDL_HINT_AUDIO_DISK_INPUT_FILE = 'SDL_AUDIO_DISK_INPUT_FILE';
const SDL_HINT_AUDIO_DISK_OUTPUT_FILE = 'SDL_AUDIO_DISK_OUTPUT_FILE';
const SDL_HINT_AUDIO_DISK_TIMESCALE = 'SDL_AUDIO_DISK_TIMESCALE';
const SDL_HINT_AUDIO_DRIVER = 'SDL_AUDIO_DRIVER';
const SDL_HINT_AUDIO_DUMMY_TIMESCALE = 'SDL_AUDIO_DUMMY_TIMESCALE';
const SDL_HINT_AUDIO_FORMAT = 'SDL_AUDIO_FORMAT';
const SDL_HINT_AUDIO_FREQUENCY = 'SDL_AUDIO_FREQUENCY';
const SDL_HINT_AUDIO_INCLUDE_MONITORS = 'SDL_AUDIO_INCLUDE_MONITORS';
const SDL_HINT_AUTO_UPDATE_JOYSTICKS = 'SDL_AUTO_UPDATE_JOYSTICKS';
const SDL_HINT_AUTO_UPDATE_SENSORS = 'SDL_AUTO_UPDATE_SENSORS';
const SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';
const SDL_HINT_CAMERA_DRIVER = 'SDL_CAMERA_DRIVER';
const SDL_HINT_CPU_FEATURE_MASK = 'SDL_CPU_FEATURE_MASK';
const SDL_HINT_JOYSTICK_DIRECTINPUT = 'SDL_JOYSTICK_DIRECTINPUT';
const SDL_HINT_FILE_DIALOG_DRIVER = 'SDL_FILE_DIALOG_DRIVER';
const SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';
const SDL_HINT_EMSCRIPTEN_ASYNCIFY = 'SDL_EMSCRIPTEN_ASYNCIFY';
const SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = 'SDL_EMSCRIPTEN_CANVAS_SELECTOR';
const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = 'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';
const SDL_HINT_ENABLE_SCREEN_KEYBOARD = 'SDL_ENABLE_SCREEN_KEYBOARD';
const SDL_HINT_EVDEV_DEVICES = 'SDL_EVDEV_DEVICES';
const SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';
const SDL_HINT_FORCE_RAISEWINDOW = 'SDL_FORCE_RAISEWINDOW';
const SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
const SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
const SDL_HINT_GAMECONTROLLERCONFIG_FILE = 'SDL_GAMECONTROLLERCONFIG_FILE';
const SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';
const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES =
    'SDL_GAMECONTROLLER_IGNORE_DEVICES';
const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT =
    'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';
const SDL_HINT_GAMECONTROLLER_SENSOR_FUSION =
    'SDL_GAMECONTROLLER_SENSOR_FUSION';
const SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = 'SDL_GDK_TEXTINPUT_DEFAULT_TEXT';
const SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = 'SDL_GDK_TEXTINPUT_DESCRIPTION';
const SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = 'SDL_GDK_TEXTINPUT_MAX_LENGTH';
const SDL_HINT_GDK_TEXTINPUT_SCOPE = 'SDL_GDK_TEXTINPUT_SCOPE';
const SDL_HINT_GDK_TEXTINPUT_TITLE = 'SDL_GDK_TEXTINPUT_TITLE';
const SDL_HINT_HIDAPI_LIBUSB = 'SDL_HIDAPI_LIBUSB';
const SDL_HINT_HIDAPI_LIBUSB_WHITELIST = 'SDL_HIDAPI_LIBUSB_WHITELIST';
const SDL_HINT_HIDAPI_UDEV = 'SDL_HIDAPI_UDEV';
const SDL_HINT_GPU_DRIVER = 'SDL_GPU_DRIVER';
const SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS =
    'SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS';
const SDL_HINT_HIDAPI_IGNORE_DEVICES = 'SDL_HIDAPI_IGNORE_DEVICES';
const SDL_HINT_IME_IMPLEMENTED_UI = 'SDL_IME_IMPLEMENTED_UI';
const SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';
const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS =
    'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES =
    'SDL_JOYSTICK_ARCADESTICK_DEVICES';
const SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = 'SDL_JOYSTICK_BLACKLIST_DEVICES';
const SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_DEVICE = 'SDL_JOYSTICK_DEVICE';
const SDL_HINT_JOYSTICK_ENHANCED_REPORTS = 'SDL_JOYSTICK_ENHANCED_REPORTS';
const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES =
    'SDL_JOYSTICK_FLIGHTSTICK_DEVICES';
const SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_GAMEINPUT = 'SDL_JOYSTICK_GAMEINPUT';
const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = 'SDL_JOYSTICK_GAMECUBE_DEVICES';
const SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';
const SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS =
    'SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS';
const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';
const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE =
    'SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE';
const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_JOY_CONS';
const SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED =
    'SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED';
const SDL_HINT_JOYSTICK_HIDAPI_LUNA = 'SDL_JOYSTICK_HIDAPI_LUNA';
const SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC =
    'SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC';
const SDL_HINT_JOYSTICK_HIDAPI_PS3 = 'SDL_JOYSTICK_HIDAPI_PS3';
const SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER =
    'SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER';
const SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';
const SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL =
    'SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL';
const SDL_HINT_JOYSTICK_HIDAPI_PS5 = 'SDL_JOYSTICK_HIDAPI_PS5';
const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED =
    'SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED';
const SDL_HINT_JOYSTICK_HIDAPI_SHIELD = 'SDL_JOYSTICK_HIDAPI_SHIELD';
const SDL_HINT_JOYSTICK_HIDAPI_STADIA = 'SDL_JOYSTICK_HIDAPI_STADIA';
const SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';
const SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED =
    'SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED';
const SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = 'SDL_JOYSTICK_HIDAPI_STEAMDECK';
const SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI = 'SDL_JOYSTICK_HIDAPI_STEAM_HORI';
const SDL_HINT_JOYSTICK_HIDAPI_LG4FF = 'SDL_JOYSTICK_HIDAPI_LG4FF';
const SDL_HINT_JOYSTICK_HIDAPI_8BITDO = 'SDL_JOYSTICK_HIDAPI_8BITDO';
const SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';
const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED =
    'SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED';
const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED =
    'SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED';
const SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS =
    'SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS';
const SDL_HINT_JOYSTICK_HIDAPI_WII = 'SDL_JOYSTICK_HIDAPI_WII';
const SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED =
    'SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = 'SDL_JOYSTICK_HIDAPI_XBOX_360';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED =
    'SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS =
    'SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = 'SDL_JOYSTICK_HIDAPI_XBOX_ONE';
const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED =
    'SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED';
const SDL_HINT_JOYSTICK_HIDAPI_GIP = 'SDL_JOYSTICK_HIDAPI_GIP';
const SDL_HINT_JOYSTICK_HIDAPI_GIP_RESET_FOR_METADATA =
    'SDL_JOYSTICK_HIDAPI_GIP_RESET_FOR_METADATA';
const SDL_HINT_JOYSTICK_IOKIT = 'SDL_JOYSTICK_IOKIT';
const SDL_HINT_JOYSTICK_LINUX_CLASSIC = 'SDL_JOYSTICK_LINUX_CLASSIC';
const SDL_HINT_JOYSTICK_LINUX_DEADZONES = 'SDL_JOYSTICK_LINUX_DEADZONES';
const SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = 'SDL_JOYSTICK_LINUX_DIGITAL_HATS';
const SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES =
    'SDL_JOYSTICK_LINUX_HAT_DEADZONES';
const SDL_HINT_JOYSTICK_MFI = 'SDL_JOYSTICK_MFI';
const SDL_HINT_JOYSTICK_RAWINPUT = 'SDL_JOYSTICK_RAWINPUT';
const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT =
    'SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT';
const SDL_HINT_JOYSTICK_ROG_CHAKRAM = 'SDL_JOYSTICK_ROG_CHAKRAM';
const SDL_HINT_JOYSTICK_THREAD = 'SDL_JOYSTICK_THREAD';
const SDL_HINT_JOYSTICK_THROTTLE_DEVICES = 'SDL_JOYSTICK_THROTTLE_DEVICES';
const SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_WGI = 'SDL_JOYSTICK_WGI';
const SDL_HINT_JOYSTICK_WHEEL_DEVICES = 'SDL_JOYSTICK_WHEEL_DEVICES';
const SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED =
    'SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED';
const SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES =
    'SDL_JOYSTICK_ZERO_CENTERED_DEVICES';
const SDL_HINT_JOYSTICK_HAPTIC_AXES = 'SDL_JOYSTICK_HAPTIC_AXES';
const SDL_HINT_KEYCODE_OPTIONS = 'SDL_KEYCODE_OPTIONS';
const SDL_HINT_KMSDRM_DEVICE_INDEX = 'SDL_KMSDRM_DEVICE_INDEX';
const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = 'SDL_KMSDRM_REQUIRE_DRM_MASTER';
const SDL_HINT_LOGGING = 'SDL_LOGGING';
const SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';
const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK =
    'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';
const SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = 'SDL_MAC_OPENGL_ASYNC_DISPATCH';
const SDL_HINT_MAC_OPTION_AS_ALT = 'SDL_MAC_OPTION_AS_ALT';
const SDL_HINT_MAC_SCROLL_MOMENTUM = 'SDL_MAC_SCROLL_MOMENTUM';
const SDL_HINT_MAIN_CALLBACK_RATE = 'SDL_MAIN_CALLBACK_RATE';
const SDL_HINT_MOUSE_AUTO_CAPTURE = 'SDL_MOUSE_AUTO_CAPTURE';
const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = 'SDL_MOUSE_DOUBLE_CLICK_RADIUS';
const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';
const SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR = 'SDL_MOUSE_DEFAULT_SYSTEM_CURSOR';
const SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE =
    'SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE';
const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';
const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';
const SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = 'SDL_MOUSE_RELATIVE_MODE_CENTER';
const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = 'SDL_MOUSE_RELATIVE_SPEED_SCALE';
const SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = 'SDL_MOUSE_RELATIVE_SYSTEM_SCALE';
const SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = 'SDL_MOUSE_RELATIVE_WARP_MOTION';
const SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE =
    'SDL_MOUSE_RELATIVE_CURSOR_VISIBLE';
const SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';
const SDL_HINT_MUTE_CONSOLE_KEYBOARD = 'SDL_MUTE_CONSOLE_KEYBOARD';
const SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';
const SDL_HINT_OPENGL_LIBRARY = 'SDL_OPENGL_LIBRARY';
const SDL_HINT_EGL_LIBRARY = 'SDL_EGL_LIBRARY';
const SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';
const SDL_HINT_OPENVR_LIBRARY = 'SDL_OPENVR_LIBRARY';
const SDL_HINT_ORIENTATIONS = 'SDL_ORIENTATIONS';
const SDL_HINT_POLL_SENTINEL = 'SDL_POLL_SENTINEL';
const SDL_HINT_PREFERRED_LOCALES = 'SDL_PREFERRED_LOCALES';
const SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = 'SDL_QUIT_ON_LAST_WINDOW_CLOSE';
const SDL_HINT_RENDER_DIRECT3D_THREADSAFE = 'SDL_RENDER_DIRECT3D_THREADSAFE';
const SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';
const SDL_HINT_RENDER_VULKAN_DEBUG = 'SDL_RENDER_VULKAN_DEBUG';
const SDL_HINT_RENDER_GPU_DEBUG = 'SDL_RENDER_GPU_DEBUG';
const SDL_HINT_RENDER_GPU_LOW_POWER = 'SDL_RENDER_GPU_LOW_POWER';
const SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
const SDL_HINT_RENDER_LINE_METHOD = 'SDL_RENDER_LINE_METHOD';
const SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE =
    'SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE';
const SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
const SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';
const SDL_HINT_ROG_GAMEPAD_MICE = 'SDL_ROG_GAMEPAD_MICE';
const SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = 'SDL_ROG_GAMEPAD_MICE_EXCLUDED';
const SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';
const SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME =
    'SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME';
const SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = 'SDL_SHUTDOWN_DBUS_ON_QUIT';
const SDL_HINT_STORAGE_TITLE_DRIVER = 'SDL_STORAGE_TITLE_DRIVER';
const SDL_HINT_STORAGE_USER_DRIVER = 'SDL_STORAGE_USER_DRIVER';
const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL =
    'SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL';
const SDL_HINT_THREAD_PRIORITY_POLICY = 'SDL_THREAD_PRIORITY_POLICY';
const SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
const SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';
const SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = 'SDL_TRACKPAD_IS_TOUCH_ONLY';
const SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';
const SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';
const SDL_HINT_VIDEO_DISPLAY_PRIORITY = 'SDL_VIDEO_DISPLAY_PRIORITY';
const SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';
const SDL_HINT_VIDEO_DRIVER = 'SDL_VIDEO_DRIVER';
const SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES = 'SDL_VIDEO_DUMMY_SAVE_FRAMES';
const SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK =
    'SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK';
const SDL_HINT_VIDEO_FORCE_EGL = 'SDL_VIDEO_FORCE_EGL';
const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = 'SDL_VIDEO_MAC_FULLSCREEN_SPACES';
const SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY =
    'SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY';
const SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE =
    'SDL_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE';
const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS =
    'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
const SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES = 'SDL_VIDEO_OFFSCREEN_SAVE_FRAMES';
const SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS =
    'SDL_VIDEO_SYNC_WINDOW_OPERATIONS';
const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR =
    'SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR';
const SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION =
    'SDL_VIDEO_WAYLAND_MODE_EMULATION';
const SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = 'SDL_VIDEO_WAYLAND_MODE_SCALING';
const SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR =
    'SDL_VIDEO_WAYLAND_PREFER_LIBDECOR';
const SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY =
    'SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY';
const SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';
const SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT =
    'SDL_VIDEO_X11_EXTERNAL_WINDOW_INPUT';
const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR =
    'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';
const SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';
const SDL_HINT_VIDEO_X11_NODIRECTCOLOR = 'SDL_VIDEO_X11_NODIRECTCOLOR';
const SDL_HINT_VIDEO_X11_SCALING_FACTOR = 'SDL_VIDEO_X11_SCALING_FACTOR';
const SDL_HINT_VIDEO_X11_VISUALID = 'SDL_VIDEO_X11_VISUALID';
const SDL_HINT_VIDEO_X11_WINDOW_VISUALID = 'SDL_VIDEO_X11_WINDOW_VISUALID';
const SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
const SDL_HINT_VITA_ENABLE_BACK_TOUCH = 'SDL_VITA_ENABLE_BACK_TOUCH';
const SDL_HINT_VITA_ENABLE_FRONT_TOUCH = 'SDL_VITA_ENABLE_FRONT_TOUCH';
const SDL_HINT_VITA_MODULE_PATH = 'SDL_VITA_MODULE_PATH';
const SDL_HINT_VITA_PVR_INIT = 'SDL_VITA_PVR_INIT';
const SDL_HINT_VITA_RESOLUTION = 'SDL_VITA_RESOLUTION';
const SDL_HINT_VITA_PVR_OPENGL = 'SDL_VITA_PVR_OPENGL';
const SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = 'SDL_VITA_TOUCH_MOUSE_DEVICE';
const SDL_HINT_VULKAN_DISPLAY = 'SDL_VULKAN_DISPLAY';
const SDL_HINT_VULKAN_LIBRARY = 'SDL_VULKAN_LIBRARY';
const SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';
const SDL_HINT_WAVE_CHUNK_LIMIT = 'SDL_WAVE_CHUNK_LIMIT';
const SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';
const SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';
const SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = 'SDL_WINDOW_ACTIVATE_WHEN_RAISED';
const SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = 'SDL_WINDOW_ACTIVATE_WHEN_SHOWN';
const SDL_HINT_WINDOW_ALLOW_TOPMOST = 'SDL_WINDOW_ALLOW_TOPMOST';
const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN =
    'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';
const SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = 'SDL_WINDOWS_CLOSE_ON_ALT_F4';
const SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS =
    'SDL_WINDOWS_ENABLE_MENU_MNEMONICS';
const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = 'SDL_WINDOWS_ENABLE_MESSAGELOOP';
const SDL_HINT_WINDOWS_GAMEINPUT = 'SDL_WINDOWS_GAMEINPUT';
const SDL_HINT_WINDOWS_RAW_KEYBOARD = 'SDL_WINDOWS_RAW_KEYBOARD';
const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL =
    'SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL';
const SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';
const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL =
    'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';
const SDL_HINT_WINDOWS_USE_D3D9EX = 'SDL_WINDOWS_USE_D3D9EX';
const SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE =
    'SDL_WINDOWS_ERASE_BACKGROUND_MODE';
const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = 'SDL_X11_FORCE_OVERRIDE_REDIRECT';
const SDL_HINT_X11_WINDOW_TYPE = 'SDL_X11_WINDOW_TYPE';
const SDL_HINT_X11_XCB_LIBRARY = 'SDL_X11_XCB_LIBRARY';
const SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
const SDL_HINT_ASSERT = 'SDL_ASSERT';
const SDL_HINT_PEN_MOUSE_EVENTS = 'SDL_PEN_MOUSE_EVENTS';
const SDL_HINT_PEN_TOUCH_EVENTS = 'SDL_PEN_TOUCH_EVENTS';
const SDL_HINT_DEFAULT = 0;
const SDL_HINT_NORMAL = 1;
const SDL_HINT_OVERRIDE = 2;
//const SDL_init_h_ = ;
const SDL_INIT_AUDIO = 0x00000010;
const SDL_INIT_VIDEO = 0x00000020;
const SDL_INIT_JOYSTICK = 0x00000200;
const SDL_INIT_HAPTIC = 0x00001000;
const SDL_INIT_GAMEPAD = 0x00002000;
const SDL_INIT_EVENTS = 0x00004000;
const SDL_INIT_SENSOR = 0x00008000;
const SDL_INIT_CAMERA = 0x00010000;
const SDL_APP_CONTINUE = 0;
const SDL_APP_SUCCESS = 1;
const SDL_APP_FAILURE = 2;
const SDL_PROP_APP_METADATA_NAME_STRING = 'SDL.app.metadata.name';
const SDL_PROP_APP_METADATA_VERSION_STRING = 'SDL.app.metadata.version';
const SDL_PROP_APP_METADATA_IDENTIFIER_STRING = 'SDL.app.metadata.identifier';
const SDL_PROP_APP_METADATA_CREATOR_STRING = 'SDL.app.metadata.creator';
const SDL_PROP_APP_METADATA_COPYRIGHT_STRING = 'SDL.app.metadata.copyright';
const SDL_PROP_APP_METADATA_URL_STRING = 'SDL.app.metadata.url';
const SDL_PROP_APP_METADATA_TYPE_STRING = 'SDL.app.metadata.type';
//const SDL_intrin_h_ = ;
const SDL_LSX_INTRINSICS = 1;
const SDL_LASX_INTRINSICS = 1;
const SDL_NEON_INTRINSICS = 1;
const SDL_ALTIVEC_INTRINSICS = 1;
const SDL_MMX_INTRINSICS = 1;
const SDL_SSE_INTRINSICS = 1;
const SDL_SSE2_INTRINSICS = 1;
const SDL_SSE3_INTRINSICS = 1;
const SDL_SSE4_1_INTRINSICS = 1;
const SDL_SSE4_2_INTRINSICS = 1;
const SDL_AVX_INTRINSICS = 1;
const SDL_AVX2_INTRINSICS = 1;
const SDL_AVX512F_INTRINSICS = 1;
//const __ARM_NEON = 1;
//const __ARM_ARCH = 8;
//const SDL_HAS_TARGET_ATTRIBS = ;
//const SDL_TARGETING = (x) __attribute__((target(x)));
//const SDL_DISABLE_AVX = /* see https:;
//const SDL_DISABLE_AVX2 = /* see https:;
//const SDL_DISABLE_AVX512F = /* see https:;
//const SDL_iostream_h_ = ;
const SDL_IO_STATUS_READY = 0;
const SDL_IO_STATUS_ERROR = 1;
const SDL_IO_STATUS_EOF = 2;
const SDL_IO_STATUS_NOT_READY = 3;
const SDL_IO_STATUS_READONLY = 4;
const SDL_IO_STATUS_WRITEONLY = 5;
const SDL_IO_SEEK_SET = 0;
const SDL_IO_SEEK_CUR = 1;
const SDL_IO_SEEK_END = 2;
const SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = 'SDL.iostream.windows.handle';
const SDL_PROP_IOSTREAM_STDIO_FILE_POINTER = 'SDL.iostream.stdio.file';
const SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER = 'SDL.iostream.file_descriptor';
const SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER = 'SDL.iostream.android.aasset';
const SDL_PROP_IOSTREAM_MEMORY_POINTER = 'SDL.iostream.memory.base';
const SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER = 'SDL.iostream.memory.size';
const SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = 'SDL.iostream.dynamic.memory';
const SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER =
    'SDL.iostream.dynamic.chunksize';
//const SDL_joystick_h_ = ;
const SDL_JOYSTICK_TYPE_UNKNOWN = 0;
const SDL_JOYSTICK_TYPE_GAMEPAD = 1;
const SDL_JOYSTICK_TYPE_WHEEL = 2;
const SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
const SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
const SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
const SDL_JOYSTICK_TYPE_GUITAR = 6;
const SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
const SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
const SDL_JOYSTICK_TYPE_THROTTLE = 9;
const SDL_JOYSTICK_TYPE_COUNT = 10;
const SDL_JOYSTICK_CONNECTION_INVALID = -1;
const SDL_JOYSTICK_CONNECTION_UNKNOWN = -1 + 1;
const SDL_JOYSTICK_CONNECTION_WIRED = -1 + 2;
const SDL_JOYSTICK_CONNECTION_WIRELESS = -1 + 3;
const SDL_JOYSTICK_AXIS_MAX = 32767;
const SDL_JOYSTICK_AXIS_MIN = -32768;
const SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = 'SDL.joystick.cap.mono_led';
const SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = 'SDL.joystick.cap.rgb_led';
const SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = 'SDL.joystick.cap.player_led';
const SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = 'SDL.joystick.cap.rumble';
const SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN =
    'SDL.joystick.cap.trigger_rumble';
const SDL_HAT_CENTERED = 0x00;
const SDL_HAT_UP = 0x01;
const SDL_HAT_RIGHT = 0x02;
const SDL_HAT_DOWN = 0x04;
const SDL_HAT_LEFT = 0x08;
const SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT | SDL_HAT_UP);
const SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT | SDL_HAT_DOWN);
const SDL_HAT_LEFTUP = (SDL_HAT_LEFT | SDL_HAT_UP);
const SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT | SDL_HAT_DOWN);
//const SDL_keyboard_h_ = ;
const SDL_TEXTINPUT_TYPE_TEXT = 0;
const SDL_TEXTINPUT_TYPE_TEXT_NAME = 1;
const SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2;
const SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3;
const SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4;
const SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5;
const SDL_TEXTINPUT_TYPE_NUMBER = 6;
const SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7;
const SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8;
const SDL_CAPITALIZE_NONE = 0;
const SDL_CAPITALIZE_SENTENCES = 1;
const SDL_CAPITALIZE_WORDS = 2;
const SDL_CAPITALIZE_LETTERS = 3;
const SDL_PROP_TEXTINPUT_TYPE_NUMBER = 'SDL.textinput.type';
const SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER = 'SDL.textinput.capitalization';
const SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN = 'SDL.textinput.autocorrect';
const SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN = 'SDL.textinput.multiline';
const SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER =
    'SDL.textinput.android.inputtype';
//const SDL_keycode_h_ = ;
const SDLK_EXTENDED_MASK = (1 << 29);
const SDLK_SCANCODE_MASK = (1 << 30);
//const SDL_SCANCODE_TO_KEYCODE = (X) (X | SDLK_SCANCODE_MASK);
const SDLK_UNKNOWN = 0x00000000;
const SDLK_RETURN = 0x0000000d;
const SDLK_ESCAPE = 0x0000001b;
const SDLK_BACKSPACE = 0x00000008;
const SDLK_TAB = 0x00000009;
const SDLK_SPACE = 0x00000020;
const SDLK_EXCLAIM = 0x00000021;
const SDLK_DBLAPOSTROPHE = 0x00000022;
const SDLK_HASH = 0x00000023;
const SDLK_DOLLAR = 0x00000024;
const SDLK_PERCENT = 0x00000025;
const SDLK_AMPERSAND = 0x00000026;
const SDLK_APOSTROPHE = 0x00000027;
const SDLK_LEFTPAREN = 0x00000028;
const SDLK_RIGHTPAREN = 0x00000029;
const SDLK_ASTERISK = 0x0000002a;
const SDLK_PLUS = 0x0000002b;
const SDLK_COMMA = 0x0000002c;
const SDLK_MINUS = 0x0000002d;
const SDLK_PERIOD = 0x0000002e;
const SDLK_SLASH = 0x0000002f;
const SDLK_0 = 0x00000030;
const SDLK_1 = 0x00000031;
const SDLK_2 = 0x00000032;
const SDLK_3 = 0x00000033;
const SDLK_4 = 0x00000034;
const SDLK_5 = 0x00000035;
const SDLK_6 = 0x00000036;
const SDLK_7 = 0x00000037;
const SDLK_8 = 0x00000038;
const SDLK_9 = 0x00000039;
const SDLK_COLON = 0x0000003a;
const SDLK_SEMICOLON = 0x0000003b;
const SDLK_LESS = 0x0000003c;
const SDLK_EQUALS = 0x0000003d;
const SDLK_GREATER = 0x0000003e;
const SDLK_QUESTION = 0x0000003f;
const SDLK_AT = 0x00000040;
const SDLK_LEFTBRACKET = 0x0000005b;
const SDLK_BACKSLASH = 0x0000005c;
const SDLK_RIGHTBRACKET = 0x0000005d;
const SDLK_CARET = 0x0000005e;
const SDLK_UNDERSCORE = 0x0000005f;
const SDLK_GRAVE = 0x00000060;
const SDLK_A = 0x00000061;
const SDLK_B = 0x00000062;
const SDLK_C = 0x00000063;
const SDLK_D = 0x00000064;
const SDLK_E = 0x00000065;
const SDLK_F = 0x00000066;
const SDLK_G = 0x00000067;
const SDLK_H = 0x00000068;
const SDLK_I = 0x00000069;
const SDLK_J = 0x0000006a;
const SDLK_K = 0x0000006b;
const SDLK_L = 0x0000006c;
const SDLK_M = 0x0000006d;
const SDLK_N = 0x0000006e;
const SDLK_O = 0x0000006f;
const SDLK_P = 0x00000070;
const SDLK_Q = 0x00000071;
const SDLK_R = 0x00000072;
const SDLK_S = 0x00000073;
const SDLK_T = 0x00000074;
const SDLK_U = 0x00000075;
const SDLK_V = 0x00000076;
const SDLK_W = 0x00000077;
const SDLK_X = 0x00000078;
const SDLK_Y = 0x00000079;
const SDLK_Z = 0x0000007a;
const SDLK_LEFTBRACE = 0x0000007b;
const SDLK_PIPE = 0x0000007c;
const SDLK_RIGHTBRACE = 0x0000007d;
const SDLK_TILDE = 0x0000007e;
const SDLK_DELETE = 0x0000007f;
const SDLK_PLUSMINUS = 0x000000b1;
const SDLK_CAPSLOCK = 0x40000039;
const SDLK_F1 = 0x4000003a;
const SDLK_F2 = 0x4000003b;
const SDLK_F3 = 0x4000003c;
const SDLK_F4 = 0x4000003d;
const SDLK_F5 = 0x4000003e;
const SDLK_F6 = 0x4000003f;
const SDLK_F7 = 0x40000040;
const SDLK_F8 = 0x40000041;
const SDLK_F9 = 0x40000042;
const SDLK_F10 = 0x40000043;
const SDLK_F11 = 0x40000044;
const SDLK_F12 = 0x40000045;
const SDLK_PRINTSCREEN = 0x40000046;
const SDLK_SCROLLLOCK = 0x40000047;
const SDLK_PAUSE = 0x40000048;
const SDLK_INSERT = 0x40000049;
const SDLK_HOME = 0x4000004a;
const SDLK_PAGEUP = 0x4000004b;
const SDLK_END = 0x4000004d;
const SDLK_PAGEDOWN = 0x4000004e;
const SDLK_RIGHT = 0x4000004f;
const SDLK_LEFT = 0x40000050;
const SDLK_DOWN = 0x40000051;
const SDLK_UP = 0x40000052;
const SDLK_NUMLOCKCLEAR = 0x40000053;
const SDLK_KP_DIVIDE = 0x40000054;
const SDLK_KP_MULTIPLY = 0x40000055;
const SDLK_KP_MINUS = 0x40000056;
const SDLK_KP_PLUS = 0x40000057;
const SDLK_KP_ENTER = 0x40000058;
const SDLK_KP_1 = 0x40000059;
const SDLK_KP_2 = 0x4000005a;
const SDLK_KP_3 = 0x4000005b;
const SDLK_KP_4 = 0x4000005c;
const SDLK_KP_5 = 0x4000005d;
const SDLK_KP_6 = 0x4000005e;
const SDLK_KP_7 = 0x4000005f;
const SDLK_KP_8 = 0x40000060;
const SDLK_KP_9 = 0x40000061;
const SDLK_KP_0 = 0x40000062;
const SDLK_KP_PERIOD = 0x40000063;
const SDLK_APPLICATION = 0x40000065;
const SDLK_POWER = 0x40000066;
const SDLK_KP_EQUALS = 0x40000067;
const SDLK_F13 = 0x40000068;
const SDLK_F14 = 0x40000069;
const SDLK_F15 = 0x4000006a;
const SDLK_F16 = 0x4000006b;
const SDLK_F17 = 0x4000006c;
const SDLK_F18 = 0x4000006d;
const SDLK_F19 = 0x4000006e;
const SDLK_F20 = 0x4000006f;
const SDLK_F21 = 0x40000070;
const SDLK_F22 = 0x40000071;
const SDLK_F23 = 0x40000072;
const SDLK_F24 = 0x40000073;
const SDLK_EXECUTE = 0x40000074;
const SDLK_HELP = 0x40000075;
const SDLK_MENU = 0x40000076;
const SDLK_SELECT = 0x40000077;
const SDLK_STOP = 0x40000078;
const SDLK_AGAIN = 0x40000079;
const SDLK_UNDO = 0x4000007a;
const SDLK_CUT = 0x4000007b;
const SDLK_COPY = 0x4000007c;
const SDLK_PASTE = 0x4000007d;
const SDLK_FIND = 0x4000007e;
const SDLK_MUTE = 0x4000007f;
const SDLK_VOLUMEUP = 0x40000080;
const SDLK_VOLUMEDOWN = 0x40000081;
const SDLK_KP_COMMA = 0x40000085;
const SDLK_KP_EQUALSAS400 = 0x40000086;
const SDLK_ALTERASE = 0x40000099;
const SDLK_SYSREQ = 0x4000009a;
const SDLK_CANCEL = 0x4000009b;
const SDLK_CLEAR = 0x4000009c;
const SDLK_PRIOR = 0x4000009d;
const SDLK_RETURN2 = 0x4000009e;
const SDLK_SEPARATOR = 0x4000009f;
const SDLK_OUT = 0x400000a0;
const SDLK_OPER = 0x400000a1;
const SDLK_CLEARAGAIN = 0x400000a2;
const SDLK_CRSEL = 0x400000a3;
const SDLK_EXSEL = 0x400000a4;
const SDLK_KP_00 = 0x400000b0;
const SDLK_KP_000 = 0x400000b1;
const SDLK_THOUSANDSSEPARATOR = 0x400000b2;
const SDLK_DECIMALSEPARATOR = 0x400000b3;
const SDLK_CURRENCYUNIT = 0x400000b4;
const SDLK_CURRENCYSUBUNIT = 0x400000b5;
const SDLK_KP_LEFTPAREN = 0x400000b6;
const SDLK_KP_RIGHTPAREN = 0x400000b7;
const SDLK_KP_LEFTBRACE = 0x400000b8;
const SDLK_KP_RIGHTBRACE = 0x400000b9;
const SDLK_KP_TAB = 0x400000ba;
const SDLK_KP_BACKSPACE = 0x400000bb;
const SDLK_KP_A = 0x400000bc;
const SDLK_KP_B = 0x400000bd;
const SDLK_KP_C = 0x400000be;
const SDLK_KP_D = 0x400000bf;
const SDLK_KP_E = 0x400000c0;
const SDLK_KP_F = 0x400000c1;
const SDLK_KP_XOR = 0x400000c2;
const SDLK_KP_POWER = 0x400000c3;
const SDLK_KP_PERCENT = 0x400000c4;
const SDLK_KP_LESS = 0x400000c5;
const SDLK_KP_GREATER = 0x400000c6;
const SDLK_KP_AMPERSAND = 0x400000c7;
const SDLK_KP_DBLAMPERSAND = 0x400000c8;
const SDLK_KP_VERTICALBAR = 0x400000c9;
const SDLK_KP_DBLVERTICALBAR = 0x400000ca;
const SDLK_KP_COLON = 0x400000cb;
const SDLK_KP_HASH = 0x400000cc;
const SDLK_KP_SPACE = 0x400000cd;
const SDLK_KP_AT = 0x400000ce;
const SDLK_KP_EXCLAM = 0x400000cf;
const SDLK_KP_MEMSTORE = 0x400000d0;
const SDLK_KP_MEMRECALL = 0x400000d1;
const SDLK_KP_MEMCLEAR = 0x400000d2;
const SDLK_KP_MEMADD = 0x400000d3;
const SDLK_KP_MEMSUBTRACT = 0x400000d4;
const SDLK_KP_MEMMULTIPLY = 0x400000d5;
const SDLK_KP_MEMDIVIDE = 0x400000d6;
const SDLK_KP_PLUSMINUS = 0x400000d7;
const SDLK_KP_CLEAR = 0x400000d8;
const SDLK_KP_CLEARENTRY = 0x400000d9;
const SDLK_KP_BINARY = 0x400000da;
const SDLK_KP_OCTAL = 0x400000db;
const SDLK_KP_DECIMAL = 0x400000dc;
const SDLK_KP_HEXADECIMAL = 0x400000dd;
const SDLK_LCTRL = 0x400000e0;
const SDLK_LSHIFT = 0x400000e1;
const SDLK_LALT = 0x400000e2;
const SDLK_LGUI = 0x400000e3;
const SDLK_RCTRL = 0x400000e4;
const SDLK_RSHIFT = 0x400000e5;
const SDLK_RALT = 0x400000e6;
const SDLK_RGUI = 0x400000e7;
const SDLK_MODE = 0x40000101;
const SDLK_SLEEP = 0x40000102;
const SDLK_WAKE = 0x40000103;
const SDLK_CHANNEL_INCREMENT = 0x40000104;
const SDLK_CHANNEL_DECREMENT = 0x40000105;
const SDLK_MEDIA_PLAY = 0x40000106;
const SDLK_MEDIA_PAUSE = 0x40000107;
const SDLK_MEDIA_RECORD = 0x40000108;
const SDLK_MEDIA_FAST_FORWARD = 0x40000109;
const SDLK_MEDIA_REWIND = 0x4000010a;
const SDLK_MEDIA_NEXT_TRACK = 0x4000010b;
const SDLK_MEDIA_PREVIOUS_TRACK = 0x4000010c;
const SDLK_MEDIA_STOP = 0x4000010d;
const SDLK_MEDIA_EJECT = 0x4000010e;
const SDLK_MEDIA_PLAY_PAUSE = 0x4000010f;
const SDLK_MEDIA_SELECT = 0x40000110;
const SDLK_AC_NEW = 0x40000111;
const SDLK_AC_OPEN = 0x40000112;
const SDLK_AC_CLOSE = 0x40000113;
const SDLK_AC_EXIT = 0x40000114;
const SDLK_AC_SAVE = 0x40000115;
const SDLK_AC_PRINT = 0x40000116;
const SDLK_AC_PROPERTIES = 0x40000117;
const SDLK_AC_SEARCH = 0x40000118;
const SDLK_AC_HOME = 0x40000119;
const SDLK_AC_BACK = 0x4000011a;
const SDLK_AC_FORWARD = 0x4000011b;
const SDLK_AC_STOP = 0x4000011c;
const SDLK_AC_REFRESH = 0x4000011d;
const SDLK_AC_BOOKMARKS = 0x4000011e;
const SDLK_SOFTLEFT = 0x4000011f;
const SDLK_SOFTRIGHT = 0x40000120;
const SDLK_CALL = 0x40000121;
const SDLK_ENDCALL = 0x40000122;
const SDLK_LEFT_TAB = 0x20000001;
const SDLK_LEVEL5_SHIFT = 0x20000002;
const SDLK_MULTI_KEY_COMPOSE = 0x20000003;
const SDLK_LMETA = 0x20000004;
const SDLK_RMETA = 0x20000005;
const SDLK_LHYPER = 0x20000006;
const SDLK_RHYPER = 0x20000007;
const SDL_KMOD_NONE = 0x0000;
const SDL_KMOD_LSHIFT = 0x0001;
const SDL_KMOD_RSHIFT = 0x0002;
const SDL_KMOD_LEVEL5 = 0x0004;
const SDL_KMOD_LCTRL = 0x0040;
const SDL_KMOD_RCTRL = 0x0080;
const SDL_KMOD_LALT = 0x0100;
const SDL_KMOD_RALT = 0x0200;
const SDL_KMOD_LGUI = 0x0400;
const SDL_KMOD_RGUI = 0x0800;
const SDL_KMOD_NUM = 0x1000;
const SDL_KMOD_CAPS = 0x2000;
const SDL_KMOD_MODE = 0x4000;
const SDL_KMOD_SCROLL = 0x8000;
const SDL_KMOD_CTRL = (SDL_KMOD_LCTRL | SDL_KMOD_RCTRL);
const SDL_KMOD_SHIFT = (SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT);
const SDL_KMOD_ALT = (SDL_KMOD_LALT | SDL_KMOD_RALT);
const SDL_KMOD_GUI = (SDL_KMOD_LGUI | SDL_KMOD_RGUI);
//const SDL_loadso_h_ = ;
//const SDL_locale_h = ;
//const SDL_log_h_ = ;
const SDL_LOG_CATEGORY_APPLICATION = 0;
const SDL_LOG_CATEGORY_ERROR = 1;
const SDL_LOG_CATEGORY_ASSERT = 2;
const SDL_LOG_CATEGORY_SYSTEM = 3;
const SDL_LOG_CATEGORY_AUDIO = 4;
const SDL_LOG_CATEGORY_VIDEO = 5;
const SDL_LOG_CATEGORY_RENDER = 6;
const SDL_LOG_CATEGORY_INPUT = 7;
const SDL_LOG_CATEGORY_TEST = 8;
const SDL_LOG_CATEGORY_GPU = 9;
const SDL_LOG_CATEGORY_RESERVED2 = 10;
const SDL_LOG_CATEGORY_RESERVED3 = 11;
const SDL_LOG_CATEGORY_RESERVED4 = 12;
const SDL_LOG_CATEGORY_RESERVED5 = 13;
const SDL_LOG_CATEGORY_RESERVED6 = 14;
const SDL_LOG_CATEGORY_RESERVED7 = 15;
const SDL_LOG_CATEGORY_RESERVED8 = 16;
const SDL_LOG_CATEGORY_RESERVED9 = 17;
const SDL_LOG_CATEGORY_RESERVED10 = 18;
const SDL_LOG_CATEGORY_CUSTOM = 19;
const SDL_LOG_PRIORITY_INVALID = 0;
const SDL_LOG_PRIORITY_TRACE = 1;
const SDL_LOG_PRIORITY_VERBOSE = 2;
const SDL_LOG_PRIORITY_DEBUG = 3;
const SDL_LOG_PRIORITY_INFO = 4;
const SDL_LOG_PRIORITY_WARN = 5;
const SDL_LOG_PRIORITY_ERROR = 6;
const SDL_LOG_PRIORITY_CRITICAL = 7;
const SDL_LOG_PRIORITY_COUNT = 8;
//const SDL_main_h_ = ;
const SDL_MAIN_HANDLED = 1;
const SDL_MAIN_USE_CALLBACKS = 1;
//const SDL_MAIN_AVAILABLE = ;
//const SDL_MAIN_NEEDED = ;
//const SDL_PLATFORM_PRIVATE_MAIN = ;
//const SDL_MAIN_EXPORTED = ;
//const SDL_PS2_SKIP_IOP_RESET = () void reset_IOP(); void reset_IOP() {};
//const SDLMAIN_DECLSPEC = ;
//const main = SDL_main;
//const SDL_main_impl_h_ = ;
const SDL_MAIN_CALLBACK_STANDARD = 1;
//const WINAPI = __stdcall;
//const SDL_messagebox_h_ = ;
const SDL_MESSAGEBOX_ERROR = 0x00000010;
const SDL_MESSAGEBOX_WARNING = 0x00000020;
const SDL_MESSAGEBOX_INFORMATION = 0x00000040;
const SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 0x00000080;
const SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 0x00000100;
const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001;
const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002;
const SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
const SDL_MESSAGEBOX_COLOR_TEXT = 1;
const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
const SDL_MESSAGEBOX_COLOR_COUNT = 5;
//const SDL_metal_h_ = ;
//const SDL_misc_h_ = ;
//const SDL_mouse_h_ = ;
const SDL_SYSTEM_CURSOR_DEFAULT = 0;
const SDL_SYSTEM_CURSOR_TEXT = 1;
const SDL_SYSTEM_CURSOR_WAIT = 2;
const SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
const SDL_SYSTEM_CURSOR_PROGRESS = 4;
const SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5;
const SDL_SYSTEM_CURSOR_NESW_RESIZE = 6;
const SDL_SYSTEM_CURSOR_EW_RESIZE = 7;
const SDL_SYSTEM_CURSOR_NS_RESIZE = 8;
const SDL_SYSTEM_CURSOR_MOVE = 9;
const SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10;
const SDL_SYSTEM_CURSOR_POINTER = 11;
const SDL_SYSTEM_CURSOR_NW_RESIZE = 12;
const SDL_SYSTEM_CURSOR_N_RESIZE = 13;
const SDL_SYSTEM_CURSOR_NE_RESIZE = 14;
const SDL_SYSTEM_CURSOR_E_RESIZE = 15;
const SDL_SYSTEM_CURSOR_SE_RESIZE = 16;
const SDL_SYSTEM_CURSOR_S_RESIZE = 17;
const SDL_SYSTEM_CURSOR_SW_RESIZE = 18;
const SDL_SYSTEM_CURSOR_W_RESIZE = 19;
const SDL_SYSTEM_CURSOR_COUNT = 20;
const SDL_MOUSEWHEEL_NORMAL = 0;
const SDL_MOUSEWHEEL_FLIPPED = 1;
const SDL_BUTTON_LEFT = 1;
const SDL_BUTTON_MIDDLE = 2;
const SDL_BUTTON_RIGHT = 3;
const SDL_BUTTON_X1 = 4;
const SDL_BUTTON_X2 = 5;
//const SDL_BUTTON_MASK = (X) (1 << ((X)-1));
//const SDL_BUTTON_LMASK = SDL_BUTTON_MASK(SDL_BUTTON_LEFT);
//const SDL_BUTTON_MMASK = SDL_BUTTON_MASK(SDL_BUTTON_MIDDLE);
//const SDL_BUTTON_RMASK = SDL_BUTTON_MASK(SDL_BUTTON_RIGHT);
//const SDL_BUTTON_X1MASK = SDL_BUTTON_MASK(SDL_BUTTON_X1);
//const SDL_BUTTON_X2MASK = SDL_BUTTON_MASK(SDL_BUTTON_X2);
//const SDL_mutex_h_ = ;
//const SDL_THREAD_ANNOTATION_ATTRIBUTE__ = (x) __attribute__((x));
//const SDL_CAPABILITY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(capability(x));
//const SDL_SCOPED_CAPABILITY = SDL_THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable);
//const SDL_GUARDED_BY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x));
//const SDL_PT_GUARDED_BY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x));
//const SDL_ACQUIRED_BEFORE = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(x));
//const SDL_ACQUIRED_AFTER = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(x));
//const SDL_REQUIRES = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(x));
//const SDL_REQUIRES_SHARED = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(x));
//const SDL_ACQUIRE = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(x));
//const SDL_ACQUIRE_SHARED = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(x));
//const SDL_RELEASE = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_capability(x));
//const SDL_RELEASE_SHARED = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(x));
//const SDL_RELEASE_GENERIC = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_generic_capability(x));
//const SDL_TRY_ACQUIRE = (x, y) SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(x, y));
//const SDL_TRY_ACQUIRE_SHARED = (x, y) SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(x, y));
//const SDL_EXCLUDES = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(x));
//const SDL_ASSERT_CAPABILITY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x));
//const SDL_ASSERT_SHARED_CAPABILITY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x));
//const SDL_RETURN_CAPABILITY = (x) SDL_THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x));
//const SDL_NO_THREAD_SAFETY_ANALYSIS = SDL_THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis);
const SDL_INIT_STATUS_UNINITIALIZED = 0;
const SDL_INIT_STATUS_INITIALIZING = 1;
const SDL_INIT_STATUS_INITIALIZED = 2;
const SDL_INIT_STATUS_UNINITIALIZING = 3;
//const SDL_pen_h_ = ;
//const SDL_PEN_MOUSEID = ((SDL_MouseID)-2);
//const SDL_PEN_TOUCHID = ((SDL_TouchID)-2);
const SDL_PEN_INPUT_DOWN = (1 << 0);
const SDL_PEN_INPUT_BUTTON_1 = (1 << 1);
const SDL_PEN_INPUT_BUTTON_2 = (1 << 2);
const SDL_PEN_INPUT_BUTTON_3 = (1 << 3);
const SDL_PEN_INPUT_BUTTON_4 = (1 << 4);
const SDL_PEN_INPUT_BUTTON_5 = (1 << 5);
const SDL_PEN_INPUT_ERASER_TIP = (1 << 30);
const SDL_PEN_AXIS_PRESSURE = 0;
const SDL_PEN_AXIS_XTILT = 1;
const SDL_PEN_AXIS_YTILT = 2;
const SDL_PEN_AXIS_DISTANCE = 3;
const SDL_PEN_AXIS_ROTATION = 4;
const SDL_PEN_AXIS_SLIDER = 5;
const SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6;
const SDL_PEN_AXIS_COUNT = 7;
//const SDL_pixels_h_ = ;
const SDL_ALPHA_OPAQUE = 255;
const SDL_ALPHA_OPAQUE_FLOAT = 1.0;
const SDL_ALPHA_TRANSPARENT = 0;
const SDL_ALPHA_TRANSPARENT_FLOAT = 0.0;
const SDL_PIXELTYPE_UNKNOWN = 0;
const SDL_PIXELTYPE_INDEX1 = 1;
const SDL_PIXELTYPE_INDEX4 = 2;
const SDL_PIXELTYPE_INDEX8 = 3;
const SDL_PIXELTYPE_PACKED8 = 4;
const SDL_PIXELTYPE_PACKED16 = 5;
const SDL_PIXELTYPE_PACKED32 = 6;
const SDL_PIXELTYPE_ARRAYU8 = 7;
const SDL_PIXELTYPE_ARRAYU16 = 8;
const SDL_PIXELTYPE_ARRAYU32 = 9;
const SDL_PIXELTYPE_ARRAYF16 = 10;
const SDL_PIXELTYPE_ARRAYF32 = 11;
const SDL_PIXELTYPE_INDEX2 = 12;
const SDL_BITMAPORDER_NONE = 0;
const SDL_BITMAPORDER_4321 = 1;
const SDL_BITMAPORDER_1234 = 2;
const SDL_PACKEDORDER_NONE = 0;
const SDL_PACKEDORDER_XRGB = 1;
const SDL_PACKEDORDER_RGBX = 2;
const SDL_PACKEDORDER_ARGB = 3;
const SDL_PACKEDORDER_RGBA = 4;
const SDL_PACKEDORDER_XBGR = 5;
const SDL_PACKEDORDER_BGRX = 6;
const SDL_PACKEDORDER_ABGR = 7;
const SDL_PACKEDORDER_BGRA = 8;
const SDL_ARRAYORDER_NONE = 0;
const SDL_ARRAYORDER_RGB = 1;
const SDL_ARRAYORDER_RGBA = 2;
const SDL_ARRAYORDER_ARGB = 3;
const SDL_ARRAYORDER_BGR = 4;
const SDL_ARRAYORDER_BGRA = 5;
const SDL_ARRAYORDER_ABGR = 6;
const SDL_PACKEDLAYOUT_NONE = 0;
const SDL_PACKEDLAYOUT_332 = 1;
const SDL_PACKEDLAYOUT_4444 = 2;
const SDL_PACKEDLAYOUT_1555 = 3;
const SDL_PACKEDLAYOUT_5551 = 4;
const SDL_PACKEDLAYOUT_565 = 5;
const SDL_PACKEDLAYOUT_8888 = 6;
const SDL_PACKEDLAYOUT_2101010 = 7;
const SDL_PACKEDLAYOUT_1010102 = 8;
//const SDL_DEFINE_PIXELFOURCC = (A, B, C, D) SDL_FOURCC(A, B, C, D);
//const SDL_DEFINE_PIXELFORMAT = (type, order, layout, bits, bytes) ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | ((bits) << 8) | ((bytes) << 0));
//const SDL_PIXELFLAG = (format) (((format) >> 28) & 0x0);
//const SDL_PIXELTYPE = (format) (((format) >> 24) & 0x0);
//const SDL_PIXELORDER = (format) (((format) >> 20) & 0x0);
//const SDL_PIXELLAYOUT = (format) (((format) >> 16) & 0x0);
//const SDL_BITSPERPIXEL = (format) (SDL_ISPIXELFORMAT_FOURCC(format) ? 0 : (((format) >> 8) & 0xFF));
//const SDL_BYTESPERPIXEL = (format) (SDL_ISPIXELFORMAT_FOURCC(format) ? ((((format) == SDL_PIXELFORMAT_YUY2) || ((format) == SDL_PIXELFORMAT_UYVY) || ((format) == SDL_PIXELFORMAT_YVYU) || ((format) == SDL_PIXELFORMAT_P010)) ? 2 : 1) : (((format) >> 0) & 0xFF));
//const SDL_ISPIXELFORMAT_INDEXED = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)));
//const SDL_ISPIXELFORMAT_PACKED = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32)));
//const SDL_ISPIXELFORMAT_ARRAY = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)));
//const SDL_ISPIXELFORMAT_10BIT = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) && (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010)));
//const SDL_ISPIXELFORMAT_FLOAT = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)));
//const SDL_ISPIXELFORMAT_ALPHA = (format) ((SDL_ISPIXELFORMAT_PACKED(format) && ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) || (SDL_ISPIXELFORMAT_ARRAY(format) && ((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) || (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA) || (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR) || (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA))));
//const SDL_ISPIXELFORMAT_FOURCC = (format) ((format) && (SDL_PIXELFLAG(format) != 1));
const SDL_PIXELFORMAT_UNKNOWN = 0;
const SDL_PIXELFORMAT_INDEX1LSB = 0x11100100;
const SDL_PIXELFORMAT_INDEX1MSB = 0x11200100;
const SDL_PIXELFORMAT_INDEX2LSB = 0x1c100200;
const SDL_PIXELFORMAT_INDEX2MSB = 0x1c200200;
const SDL_PIXELFORMAT_INDEX4LSB = 0x12100400;
const SDL_PIXELFORMAT_INDEX4MSB = 0x12200400;
const SDL_PIXELFORMAT_INDEX8 = 0x13000801;
const SDL_PIXELFORMAT_RGB332 = 0x14110801;
const SDL_PIXELFORMAT_XRGB4444 = 0x15120c02;
const SDL_PIXELFORMAT_XBGR4444 = 0x15520c02;
const SDL_PIXELFORMAT_XRGB1555 = 0x15130f02;
const SDL_PIXELFORMAT_XBGR1555 = 0x15530f02;
const SDL_PIXELFORMAT_ARGB4444 = 0x15321002;
const SDL_PIXELFORMAT_RGBA4444 = 0x15421002;
const SDL_PIXELFORMAT_ABGR4444 = 0x15721002;
const SDL_PIXELFORMAT_BGRA4444 = 0x15821002;
const SDL_PIXELFORMAT_ARGB1555 = 0x15331002;
const SDL_PIXELFORMAT_RGBA5551 = 0x15441002;
const SDL_PIXELFORMAT_ABGR1555 = 0x15731002;
const SDL_PIXELFORMAT_BGRA5551 = 0x15841002;
const SDL_PIXELFORMAT_RGB565 = 0x15151002;
const SDL_PIXELFORMAT_BGR565 = 0x15551002;
const SDL_PIXELFORMAT_RGB24 = 0x17101803;
const SDL_PIXELFORMAT_BGR24 = 0x17401803;
const SDL_PIXELFORMAT_XRGB8888 = 0x16161804;
const SDL_PIXELFORMAT_RGBX8888 = 0x16261804;
const SDL_PIXELFORMAT_XBGR8888 = 0x16561804;
const SDL_PIXELFORMAT_BGRX8888 = 0x16661804;
const SDL_PIXELFORMAT_ARGB8888 = 0x16362004;
const SDL_PIXELFORMAT_RGBA8888 = 0x16462004;
const SDL_PIXELFORMAT_ABGR8888 = 0x16762004;
const SDL_PIXELFORMAT_BGRA8888 = 0x16862004;
const SDL_PIXELFORMAT_XRGB2101010 = 0x16172004;
const SDL_PIXELFORMAT_XBGR2101010 = 0x16572004;
const SDL_PIXELFORMAT_ARGB2101010 = 0x16372004;
const SDL_PIXELFORMAT_ABGR2101010 = 0x16772004;
const SDL_PIXELFORMAT_RGB48 = 0x18103006;
const SDL_PIXELFORMAT_BGR48 = 0x18403006;
const SDL_PIXELFORMAT_RGBA64 = 0x18204008;
const SDL_PIXELFORMAT_ARGB64 = 0x18304008;
const SDL_PIXELFORMAT_BGRA64 = 0x18504008;
const SDL_PIXELFORMAT_ABGR64 = 0x18604008;
const SDL_PIXELFORMAT_RGB48_FLOAT = 0x1a103006;
const SDL_PIXELFORMAT_BGR48_FLOAT = 0x1a403006;
const SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1a204008;
const SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1a304008;
const SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1a504008;
const SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1a604008;
const SDL_PIXELFORMAT_RGB96_FLOAT = 0x1b10600c;
const SDL_PIXELFORMAT_BGR96_FLOAT = 0x1b40600c;
const SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1b208010;
const SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1b308010;
const SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1b508010;
const SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1b608010;
const SDL_PIXELFORMAT_YV12 = 0x32315659;
const SDL_PIXELFORMAT_IYUV = 0x56555949;
const SDL_PIXELFORMAT_YUY2 = 0x32595559;
const SDL_PIXELFORMAT_UYVY = 0x59565955;
const SDL_PIXELFORMAT_YVYU = 0x55595659;
const SDL_PIXELFORMAT_NV12 = 0x3231564e;
const SDL_PIXELFORMAT_NV21 = 0x3132564e;
const SDL_PIXELFORMAT_P010 = 0x30313050;
const SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454f;
const SDL_PIXELFORMAT_MJPG = 0x47504a4d;
const SDL_COLOR_TYPE_UNKNOWN = 0;
const SDL_COLOR_TYPE_RGB = 1;
const SDL_COLOR_TYPE_YCBCR = 2;
const SDL_COLOR_RANGE_UNKNOWN = 0;
const SDL_COLOR_RANGE_LIMITED = 1;
const SDL_COLOR_RANGE_FULL = 2;
const SDL_COLOR_PRIMARIES_UNKNOWN = 0;
const SDL_COLOR_PRIMARIES_BT709 = 1;
const SDL_COLOR_PRIMARIES_UNSPECIFIED = 2;
const SDL_COLOR_PRIMARIES_BT470M = 4;
const SDL_COLOR_PRIMARIES_BT470BG = 5;
const SDL_COLOR_PRIMARIES_BT601 = 6;
const SDL_COLOR_PRIMARIES_SMPTE240 = 7;
const SDL_COLOR_PRIMARIES_GENERIC_FILM = 8;
const SDL_COLOR_PRIMARIES_BT2020 = 9;
const SDL_COLOR_PRIMARIES_XYZ = 10;
const SDL_COLOR_PRIMARIES_SMPTE431 = 11;
const SDL_COLOR_PRIMARIES_SMPTE432 = 12;
const SDL_COLOR_PRIMARIES_EBU3213 = 22;
const SDL_COLOR_PRIMARIES_CUSTOM = 31;
const SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0;
const SDL_TRANSFER_CHARACTERISTICS_BT709 = 1;
const SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2;
const SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4;
const SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5;
const SDL_TRANSFER_CHARACTERISTICS_BT601 = 6;
const SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7;
const SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8;
const SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9;
const SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10;
const SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11;
const SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12;
const SDL_TRANSFER_CHARACTERISTICS_SRGB = 13;
const SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14;
const SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15;
const SDL_TRANSFER_CHARACTERISTICS_PQ = 16;
const SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17;
const SDL_TRANSFER_CHARACTERISTICS_HLG = 18;
const SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31;
const SDL_MATRIX_COEFFICIENTS_IDENTITY = 0;
const SDL_MATRIX_COEFFICIENTS_BT709 = 1;
const SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2;
const SDL_MATRIX_COEFFICIENTS_FCC = 4;
const SDL_MATRIX_COEFFICIENTS_BT470BG = 5;
const SDL_MATRIX_COEFFICIENTS_BT601 = 6;
const SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7;
const SDL_MATRIX_COEFFICIENTS_YCGCO = 8;
const SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9;
const SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10;
const SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11;
const SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12;
const SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13;
const SDL_MATRIX_COEFFICIENTS_ICTCP = 14;
const SDL_MATRIX_COEFFICIENTS_CUSTOM = 31;
const SDL_CHROMA_LOCATION_NONE = 0;
const SDL_CHROMA_LOCATION_LEFT = 1;
const SDL_CHROMA_LOCATION_CENTER = 2;
const SDL_CHROMA_LOCATION_TOPLEFT = 3;
//const SDL_DEFINE_COLORSPACE = (type, range, primaries, transfer, matrix, chroma) (((Uint32)(type) << 28) | ((Uint32)(range) << 24) | ((Uint32)(chroma) << 20) | ((Uint32)(primaries) << 10) | ((Uint32)(transfer) << 5) | ((Uint32)(matrix) << 0));
//const SDL_COLORSPACETYPE = (cspace) (SDL_ColorType)(((cspace) >> 28) & 0x0);
//const SDL_COLORSPACERANGE = (cspace) (SDL_ColorRange)(((cspace) >> 24) & 0x0);
//const SDL_COLORSPACECHROMA = (cspace) (SDL_ChromaLocation)(((cspace) >> 20) & 0x0);
//const SDL_COLORSPACEPRIMARIES = (cspace) (SDL_ColorPrimaries)(((cspace) >> 10) & 0x1);
//const SDL_COLORSPACETRANSFER = (cspace) (SDL_TransferCharacteristics)(((cspace) >> 5) & 0x1);
//const SDL_COLORSPACEMATRIX = (cspace) (SDL_MatrixCoefficients)((cspace) & 0x1);
//const SDL_ISCOLORSPACE_MATRIX_BT601 = (cspace) (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT601 || SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT470BG);
//const SDL_ISCOLORSPACE_MATRIX_BT709 = (cspace) (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT709);
//const SDL_ISCOLORSPACE_MATRIX_BT2020_NCL = (cspace) (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL);
//const SDL_ISCOLORSPACE_LIMITED_RANGE = (cspace) (SDL_COLORSPACERANGE(cspace) != SDL_COLOR_RANGE_FULL);
//const SDL_ISCOLORSPACE_FULL_RANGE = (cspace) (SDL_COLORSPACERANGE(cspace) == SDL_COLOR_RANGE_FULL);
const SDL_COLORSPACE_UNKNOWN = 0;
const SDL_COLORSPACE_SRGB = 0x120005a0;
const SDL_COLORSPACE_SRGB_LINEAR = 0x12000500;
const SDL_COLORSPACE_HDR10 = 0x12002600;
const SDL_COLORSPACE_JPEG = 0x220004c6;
const SDL_COLORSPACE_BT601_LIMITED = 0x211018c6;
const SDL_COLORSPACE_BT601_FULL = 0x221018c6;
const SDL_COLORSPACE_BT709_LIMITED = 0x21100421;
const SDL_COLORSPACE_BT709_FULL = 0x22100421;
const SDL_COLORSPACE_BT2020_LIMITED = 0x21102609;
const SDL_COLORSPACE_BT2020_FULL = 0x22102609;
const SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB;
const SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG;
//const SDL_platform_h_ = ;
//const SDL_platform_defines_h_ = ;
const SDL_PLATFORM_AIX = 1;
const SDL_PLATFORM_HAIKU = 1;
const SDL_PLATFORM_BSDI = 1;
const SDL_PLATFORM_FREEBSD = 1;
const SDL_PLATFORM_HPUX = 1;
const SDL_PLATFORM_IRIX = 1;
const SDL_PLATFORM_LINUX = 1;
const SDL_PLATFORM_ANDROID = 1;
const SDL_PLATFORM_UNIX = 1;
const SDL_PLATFORM_APPLE = 1;
//const __has_extension = (x) 0;
const TARGET_OS_MACCATALYST = 0;
const TARGET_OS_IOS = 0;
const TARGET_OS_IPHONE = 0;
const TARGET_OS_TV = 0;
const TARGET_OS_SIMULATOR = 0;
const TARGET_OS_VISION = 0;
const SDL_PLATFORM_TVOS = 1;
const SDL_PLATFORM_VISIONOS = 1;
const SDL_PLATFORM_IOS = 1;
const SDL_PLATFORM_MACOS = 1;
const SDL_PLATFORM_EMSCRIPTEN = 1;
const SDL_PLATFORM_NETBSD = 1;
const SDL_PLATFORM_OPENBSD = 1;
const SDL_PLATFORM_OS2 = 1;
const SDL_PLATFORM_OSF = 1;
const SDL_PLATFORM_QNXNTO = 1;
const SDL_PLATFORM_RISCOS = 1;
const SDL_PLATFORM_SOLARIS = 1;
const SDL_PLATFORM_CYGWIN = 1;
const SDL_PLATFORM_WINDOWS = 1;
const HAVE_WINAPIFAMILY_H = 1;
//const WINAPI_FAMILY_WINRT = (!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP));
//const SDL_WINAPI_FAMILY_PHONE = (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP);
const SDL_PLATFORM_WINGDK = 1;
const SDL_PLATFORM_XBOXONE = 1;
const SDL_PLATFORM_XBOXSERIES = 1;
const SDL_PLATFORM_WIN32 = 1;
const SDL_PLATFORM_GDK = 1;
const SDL_PLATFORM_PSP = 1;
const SDL_PLATFORM_PS2 = 1;
const SDL_PLATFORM_VITA = 1;
const SDL_PLATFORM_3DS = 1;
//const SDL_power_h_ = ;
const SDL_POWERSTATE_ERROR = -1;
const SDL_POWERSTATE_UNKNOWN = -1 + 1;
const SDL_POWERSTATE_ON_BATTERY = -1 + 2;
const SDL_POWERSTATE_NO_BATTERY = -1 + 3;
const SDL_POWERSTATE_CHARGING = -1 + 4;
const SDL_POWERSTATE_CHARGED = -1 + 5;
//const SDL_process_h_ = ;
const SDL_PROCESS_STDIO_INHERITED = 0;
const SDL_PROCESS_STDIO_NULL = 1;
const SDL_PROCESS_STDIO_APP = 2;
const SDL_PROCESS_STDIO_REDIRECT = 3;
const SDL_PROP_PROCESS_CREATE_ARGS_POINTER = 'SDL.process.create.args';
const SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER =
    'SDL.process.create.environment';
const SDL_PROP_PROCESS_CREATE_WORKING_DIRECTORY_STRING =
    'SDL.process.create.working_directory';
const SDL_PROP_PROCESS_CREATE_STDIN_NUMBER = 'SDL.process.create.stdin_option';
const SDL_PROP_PROCESS_CREATE_STDIN_POINTER = 'SDL.process.create.stdin_source';
const SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER =
    'SDL.process.create.stdout_option';
const SDL_PROP_PROCESS_CREATE_STDOUT_POINTER =
    'SDL.process.create.stdout_source';
const SDL_PROP_PROCESS_CREATE_STDERR_NUMBER =
    'SDL.process.create.stderr_option';
const SDL_PROP_PROCESS_CREATE_STDERR_POINTER =
    'SDL.process.create.stderr_source';
const SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN =
    'SDL.process.create.stderr_to_stdout';
const SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN =
    'SDL.process.create.background';
const SDL_PROP_PROCESS_PID_NUMBER = 'SDL.process.pid';
const SDL_PROP_PROCESS_STDIN_POINTER = 'SDL.process.stdin';
const SDL_PROP_PROCESS_STDOUT_POINTER = 'SDL.process.stdout';
const SDL_PROP_PROCESS_STDERR_POINTER = 'SDL.process.stderr';
const SDL_PROP_PROCESS_BACKGROUND_BOOLEAN = 'SDL.process.background';
//const SDL_properties_h_ = ;
const SDL_PROPERTY_TYPE_INVALID = 0;
const SDL_PROPERTY_TYPE_POINTER = 1;
const SDL_PROPERTY_TYPE_STRING = 2;
const SDL_PROPERTY_TYPE_NUMBER = 3;
const SDL_PROPERTY_TYPE_FLOAT = 4;
const SDL_PROPERTY_TYPE_BOOLEAN = 5;
//const SDL_rect_h_ = ;
//const SDL_render_h_ = ;
const SDL_SOFTWARE_RENDERER = 'software';
const SDL_TEXTUREACCESS_STATIC = 0;
const SDL_TEXTUREACCESS_STREAMING = 1;
const SDL_TEXTUREACCESS_TARGET = 2;
const SDL_TEXTURE_ADDRESS_INVALID = -1;
const SDL_TEXTURE_ADDRESS_AUTO = -1 + 1;
const SDL_TEXTURE_ADDRESS_CLAMP = -1 + 2;
const SDL_TEXTURE_ADDRESS_WRAP = -1 + 3;
const SDL_LOGICAL_PRESENTATION_DISABLED = 0;
const SDL_LOGICAL_PRESENTATION_STRETCH = 1;
const SDL_LOGICAL_PRESENTATION_LETTERBOX = 2;
const SDL_LOGICAL_PRESENTATION_OVERSCAN = 3;
const SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4;
const SDL_PROP_RENDERER_CREATE_NAME_STRING = 'SDL.renderer.create.name';
const SDL_PROP_RENDERER_CREATE_WINDOW_POINTER = 'SDL.renderer.create.window';
const SDL_PROP_RENDERER_CREATE_SURFACE_POINTER = 'SDL.renderer.create.surface';
const SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER =
    'SDL.renderer.create.output_colorspace';
const SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER =
    'SDL.renderer.create.present_vsync';
const SDL_PROP_RENDERER_CREATE_GPU_SHADERS_SPIRV_BOOLEAN =
    'SDL.renderer.create.gpu.shaders_spirv';
const SDL_PROP_RENDERER_CREATE_GPU_SHADERS_DXIL_BOOLEAN =
    'SDL.renderer.create.gpu.shaders_dxil';
const SDL_PROP_RENDERER_CREATE_GPU_SHADERS_MSL_BOOLEAN =
    'SDL.renderer.create.gpu.shaders_msl';
const SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER =
    'SDL.renderer.create.vulkan.instance';
const SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER =
    'SDL.renderer.create.vulkan.surface';
const SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER =
    'SDL.renderer.create.vulkan.physical_device';
const SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER =
    'SDL.renderer.create.vulkan.device';
const SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER =
    'SDL.renderer.create.vulkan.graphics_queue_family_index';
const SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER =
    'SDL.renderer.create.vulkan.present_queue_family_index';
const SDL_PROP_RENDERER_NAME_STRING = 'SDL.renderer.name';
const SDL_PROP_RENDERER_WINDOW_POINTER = 'SDL.renderer.window';
const SDL_PROP_RENDERER_SURFACE_POINTER = 'SDL.renderer.surface';
const SDL_PROP_RENDERER_VSYNC_NUMBER = 'SDL.renderer.vsync';
const SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER =
    'SDL.renderer.max_texture_size';
const SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER =
    'SDL.renderer.texture_formats';
const SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER =
    'SDL.renderer.output_colorspace';
const SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN = 'SDL.renderer.HDR_enabled';
const SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT = 'SDL.renderer.SDR_white_point';
const SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT = 'SDL.renderer.HDR_headroom';
const SDL_PROP_RENDERER_D3D9_DEVICE_POINTER = 'SDL.renderer.d3d9.device';
const SDL_PROP_RENDERER_D3D11_DEVICE_POINTER = 'SDL.renderer.d3d11.device';
const SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER =
    'SDL.renderer.d3d11.swap_chain';
const SDL_PROP_RENDERER_D3D12_DEVICE_POINTER = 'SDL.renderer.d3d12.device';
const SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER =
    'SDL.renderer.d3d12.swap_chain';
const SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER =
    'SDL.renderer.d3d12.command_queue';
const SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER =
    'SDL.renderer.vulkan.instance';
const SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER = 'SDL.renderer.vulkan.surface';
const SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER =
    'SDL.renderer.vulkan.physical_device';
const SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER = 'SDL.renderer.vulkan.device';
const SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER =
    'SDL.renderer.vulkan.graphics_queue_family_index';
const SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER =
    'SDL.renderer.vulkan.present_queue_family_index';
const SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER =
    'SDL.renderer.vulkan.swapchain_image_count';
const SDL_PROP_RENDERER_GPU_DEVICE_POINTER = 'SDL.renderer.gpu.device';
const SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER =
    'SDL.texture.create.colorspace';
const SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER = 'SDL.texture.create.format';
const SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER = 'SDL.texture.create.access';
const SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER = 'SDL.texture.create.width';
const SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER = 'SDL.texture.create.height';
const SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT =
    'SDL.texture.create.SDR_white_point';
const SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT =
    'SDL.texture.create.HDR_headroom';
const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER =
    'SDL.texture.create.d3d11.texture';
const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER =
    'SDL.texture.create.d3d11.texture_u';
const SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER =
    'SDL.texture.create.d3d11.texture_v';
const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER =
    'SDL.texture.create.d3d12.texture';
const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER =
    'SDL.texture.create.d3d12.texture_u';
const SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER =
    'SDL.texture.create.d3d12.texture_v';
const SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER =
    'SDL.texture.create.metal.pixelbuffer';
const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER =
    'SDL.texture.create.opengl.texture';
const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER =
    'SDL.texture.create.opengl.texture_uv';
const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER =
    'SDL.texture.create.opengl.texture_u';
const SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER =
    'SDL.texture.create.opengl.texture_v';
const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER =
    'SDL.texture.create.opengles2.texture';
const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER =
    'SDL.texture.create.opengles2.texture_uv';
const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER =
    'SDL.texture.create.opengles2.texture_u';
const SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER =
    'SDL.texture.create.opengles2.texture_v';
const SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER =
    'SDL.texture.create.vulkan.texture';
const SDL_PROP_TEXTURE_COLORSPACE_NUMBER = 'SDL.texture.colorspace';
const SDL_PROP_TEXTURE_FORMAT_NUMBER = 'SDL.texture.format';
const SDL_PROP_TEXTURE_ACCESS_NUMBER = 'SDL.texture.access';
const SDL_PROP_TEXTURE_WIDTH_NUMBER = 'SDL.texture.width';
const SDL_PROP_TEXTURE_HEIGHT_NUMBER = 'SDL.texture.height';
const SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = 'SDL.texture.SDR_white_point';
const SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT = 'SDL.texture.HDR_headroom';
const SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER = 'SDL.texture.d3d11.texture';
const SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = 'SDL.texture.d3d11.texture_u';
const SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = 'SDL.texture.d3d11.texture_v';
const SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER = 'SDL.texture.d3d12.texture';
const SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = 'SDL.texture.d3d12.texture_u';
const SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = 'SDL.texture.d3d12.texture_v';
const SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = 'SDL.texture.opengl.texture';
const SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER =
    'SDL.texture.opengl.texture_uv';
const SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = 'SDL.texture.opengl.texture_u';
const SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = 'SDL.texture.opengl.texture_v';
const SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER =
    'SDL.texture.opengl.target';
const SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT = 'SDL.texture.opengl.tex_w';
const SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT = 'SDL.texture.opengl.tex_h';
const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER =
    'SDL.texture.opengles2.texture';
const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER =
    'SDL.texture.opengles2.texture_uv';
const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER =
    'SDL.texture.opengles2.texture_u';
const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER =
    'SDL.texture.opengles2.texture_v';
const SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER =
    'SDL.texture.opengles2.target';
const SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = 'SDL.texture.vulkan.texture';
const SDL_RENDERER_VSYNC_DISABLED = 0;
const SDL_RENDERER_VSYNC_ADAPTIVE = (-1);
const SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE = 8;
//const SDL_revision_h_ = ;
const SDL_REVISION =
    'SDL3-3.3.0-release-3.2.6-452-g15c6acf74 (" SDL_VENDOR_INFO ")';
//const SDL_scancode_h_ = ;
const SDL_SCANCODE_UNKNOWN = 0;
const SDL_SCANCODE_A = 4;
const SDL_SCANCODE_B = 5;
const SDL_SCANCODE_C = 6;
const SDL_SCANCODE_D = 7;
const SDL_SCANCODE_E = 8;
const SDL_SCANCODE_F = 9;
const SDL_SCANCODE_G = 10;
const SDL_SCANCODE_H = 11;
const SDL_SCANCODE_I = 12;
const SDL_SCANCODE_J = 13;
const SDL_SCANCODE_K = 14;
const SDL_SCANCODE_L = 15;
const SDL_SCANCODE_M = 16;
const SDL_SCANCODE_N = 17;
const SDL_SCANCODE_O = 18;
const SDL_SCANCODE_P = 19;
const SDL_SCANCODE_Q = 20;
const SDL_SCANCODE_R = 21;
const SDL_SCANCODE_S = 22;
const SDL_SCANCODE_T = 23;
const SDL_SCANCODE_U = 24;
const SDL_SCANCODE_V = 25;
const SDL_SCANCODE_W = 26;
const SDL_SCANCODE_X = 27;
const SDL_SCANCODE_Y = 28;
const SDL_SCANCODE_Z = 29;
const SDL_SCANCODE_1 = 30;
const SDL_SCANCODE_2 = 31;
const SDL_SCANCODE_3 = 32;
const SDL_SCANCODE_4 = 33;
const SDL_SCANCODE_5 = 34;
const SDL_SCANCODE_6 = 35;
const SDL_SCANCODE_7 = 36;
const SDL_SCANCODE_8 = 37;
const SDL_SCANCODE_9 = 38;
const SDL_SCANCODE_0 = 39;
const SDL_SCANCODE_RETURN = 40;
const SDL_SCANCODE_ESCAPE = 41;
const SDL_SCANCODE_BACKSPACE = 42;
const SDL_SCANCODE_TAB = 43;
const SDL_SCANCODE_SPACE = 44;
const SDL_SCANCODE_MINUS = 45;
const SDL_SCANCODE_EQUALS = 46;
const SDL_SCANCODE_LEFTBRACKET = 47;
const SDL_SCANCODE_RIGHTBRACKET = 48;
const SDL_SCANCODE_BACKSLASH = 49;
const SDL_SCANCODE_NONUSHASH = 50;
const SDL_SCANCODE_SEMICOLON = 51;
const SDL_SCANCODE_APOSTROPHE = 52;
const SDL_SCANCODE_GRAVE = 53;
const SDL_SCANCODE_COMMA = 54;
const SDL_SCANCODE_PERIOD = 55;
const SDL_SCANCODE_SLASH = 56;
const SDL_SCANCODE_CAPSLOCK = 57;
const SDL_SCANCODE_F1 = 58;
const SDL_SCANCODE_F2 = 59;
const SDL_SCANCODE_F3 = 60;
const SDL_SCANCODE_F4 = 61;
const SDL_SCANCODE_F5 = 62;
const SDL_SCANCODE_F6 = 63;
const SDL_SCANCODE_F7 = 64;
const SDL_SCANCODE_F8 = 65;
const SDL_SCANCODE_F9 = 66;
const SDL_SCANCODE_F10 = 67;
const SDL_SCANCODE_F11 = 68;
const SDL_SCANCODE_F12 = 69;
const SDL_SCANCODE_PRINTSCREEN = 70;
const SDL_SCANCODE_SCROLLLOCK = 71;
const SDL_SCANCODE_PAUSE = 72;
const SDL_SCANCODE_INSERT = 73;
const SDL_SCANCODE_HOME = 74;
const SDL_SCANCODE_PAGEUP = 75;
const SDL_SCANCODE_DELETE = 76;
const SDL_SCANCODE_END = 77;
const SDL_SCANCODE_PAGEDOWN = 78;
const SDL_SCANCODE_RIGHT = 79;
const SDL_SCANCODE_LEFT = 80;
const SDL_SCANCODE_DOWN = 81;
const SDL_SCANCODE_UP = 82;
const SDL_SCANCODE_NUMLOCKCLEAR = 83;
const SDL_SCANCODE_KP_DIVIDE = 84;
const SDL_SCANCODE_KP_MULTIPLY = 85;
const SDL_SCANCODE_KP_MINUS = 86;
const SDL_SCANCODE_KP_PLUS = 87;
const SDL_SCANCODE_KP_ENTER = 88;
const SDL_SCANCODE_KP_1 = 89;
const SDL_SCANCODE_KP_2 = 90;
const SDL_SCANCODE_KP_3 = 91;
const SDL_SCANCODE_KP_4 = 92;
const SDL_SCANCODE_KP_5 = 93;
const SDL_SCANCODE_KP_6 = 94;
const SDL_SCANCODE_KP_7 = 95;
const SDL_SCANCODE_KP_8 = 96;
const SDL_SCANCODE_KP_9 = 97;
const SDL_SCANCODE_KP_0 = 98;
const SDL_SCANCODE_KP_PERIOD = 99;
const SDL_SCANCODE_NONUSBACKSLASH = 100;
const SDL_SCANCODE_APPLICATION = 101;
const SDL_SCANCODE_POWER = 102;
const SDL_SCANCODE_KP_EQUALS = 103;
const SDL_SCANCODE_F13 = 104;
const SDL_SCANCODE_F14 = 105;
const SDL_SCANCODE_F15 = 106;
const SDL_SCANCODE_F16 = 107;
const SDL_SCANCODE_F17 = 108;
const SDL_SCANCODE_F18 = 109;
const SDL_SCANCODE_F19 = 110;
const SDL_SCANCODE_F20 = 111;
const SDL_SCANCODE_F21 = 112;
const SDL_SCANCODE_F22 = 113;
const SDL_SCANCODE_F23 = 114;
const SDL_SCANCODE_F24 = 115;
const SDL_SCANCODE_EXECUTE = 116;
const SDL_SCANCODE_HELP = 117;
const SDL_SCANCODE_MENU = 118;
const SDL_SCANCODE_SELECT = 119;
const SDL_SCANCODE_STOP = 120;
const SDL_SCANCODE_AGAIN = 121;
const SDL_SCANCODE_UNDO = 122;
const SDL_SCANCODE_CUT = 123;
const SDL_SCANCODE_COPY = 124;
const SDL_SCANCODE_PASTE = 125;
const SDL_SCANCODE_FIND = 126;
const SDL_SCANCODE_MUTE = 127;
const SDL_SCANCODE_VOLUMEUP = 128;
const SDL_SCANCODE_VOLUMEDOWN = 129;
const SDL_SCANCODE_KP_COMMA = 133;
const SDL_SCANCODE_KP_EQUALSAS400 = 134;
const SDL_SCANCODE_INTERNATIONAL1 = 135;
const SDL_SCANCODE_INTERNATIONAL2 = 136;
const SDL_SCANCODE_INTERNATIONAL3 = 137;
const SDL_SCANCODE_INTERNATIONAL4 = 138;
const SDL_SCANCODE_INTERNATIONAL5 = 139;
const SDL_SCANCODE_INTERNATIONAL6 = 140;
const SDL_SCANCODE_INTERNATIONAL7 = 141;
const SDL_SCANCODE_INTERNATIONAL8 = 142;
const SDL_SCANCODE_INTERNATIONAL9 = 143;
const SDL_SCANCODE_LANG1 = 144;
const SDL_SCANCODE_LANG2 = 145;
const SDL_SCANCODE_LANG3 = 146;
const SDL_SCANCODE_LANG4 = 147;
const SDL_SCANCODE_LANG5 = 148;
const SDL_SCANCODE_LANG6 = 149;
const SDL_SCANCODE_LANG7 = 150;
const SDL_SCANCODE_LANG8 = 151;
const SDL_SCANCODE_LANG9 = 152;
const SDL_SCANCODE_ALTERASE = 153;
const SDL_SCANCODE_SYSREQ = 154;
const SDL_SCANCODE_CANCEL = 155;
const SDL_SCANCODE_CLEAR = 156;
const SDL_SCANCODE_PRIOR = 157;
const SDL_SCANCODE_RETURN2 = 158;
const SDL_SCANCODE_SEPARATOR = 159;
const SDL_SCANCODE_OUT = 160;
const SDL_SCANCODE_OPER = 161;
const SDL_SCANCODE_CLEARAGAIN = 162;
const SDL_SCANCODE_CRSEL = 163;
const SDL_SCANCODE_EXSEL = 164;
const SDL_SCANCODE_KP_00 = 176;
const SDL_SCANCODE_KP_000 = 177;
const SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
const SDL_SCANCODE_DECIMALSEPARATOR = 179;
const SDL_SCANCODE_CURRENCYUNIT = 180;
const SDL_SCANCODE_CURRENCYSUBUNIT = 181;
const SDL_SCANCODE_KP_LEFTPAREN = 182;
const SDL_SCANCODE_KP_RIGHTPAREN = 183;
const SDL_SCANCODE_KP_LEFTBRACE = 184;
const SDL_SCANCODE_KP_RIGHTBRACE = 185;
const SDL_SCANCODE_KP_TAB = 186;
const SDL_SCANCODE_KP_BACKSPACE = 187;
const SDL_SCANCODE_KP_A = 188;
const SDL_SCANCODE_KP_B = 189;
const SDL_SCANCODE_KP_C = 190;
const SDL_SCANCODE_KP_D = 191;
const SDL_SCANCODE_KP_E = 192;
const SDL_SCANCODE_KP_F = 193;
const SDL_SCANCODE_KP_XOR = 194;
const SDL_SCANCODE_KP_POWER = 195;
const SDL_SCANCODE_KP_PERCENT = 196;
const SDL_SCANCODE_KP_LESS = 197;
const SDL_SCANCODE_KP_GREATER = 198;
const SDL_SCANCODE_KP_AMPERSAND = 199;
const SDL_SCANCODE_KP_DBLAMPERSAND = 200;
const SDL_SCANCODE_KP_VERTICALBAR = 201;
const SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
const SDL_SCANCODE_KP_COLON = 203;
const SDL_SCANCODE_KP_HASH = 204;
const SDL_SCANCODE_KP_SPACE = 205;
const SDL_SCANCODE_KP_AT = 206;
const SDL_SCANCODE_KP_EXCLAM = 207;
const SDL_SCANCODE_KP_MEMSTORE = 208;
const SDL_SCANCODE_KP_MEMRECALL = 209;
const SDL_SCANCODE_KP_MEMCLEAR = 210;
const SDL_SCANCODE_KP_MEMADD = 211;
const SDL_SCANCODE_KP_MEMSUBTRACT = 212;
const SDL_SCANCODE_KP_MEMMULTIPLY = 213;
const SDL_SCANCODE_KP_MEMDIVIDE = 214;
const SDL_SCANCODE_KP_PLUSMINUS = 215;
const SDL_SCANCODE_KP_CLEAR = 216;
const SDL_SCANCODE_KP_CLEARENTRY = 217;
const SDL_SCANCODE_KP_BINARY = 218;
const SDL_SCANCODE_KP_OCTAL = 219;
const SDL_SCANCODE_KP_DECIMAL = 220;
const SDL_SCANCODE_KP_HEXADECIMAL = 221;
const SDL_SCANCODE_LCTRL = 224;
const SDL_SCANCODE_LSHIFT = 225;
const SDL_SCANCODE_LALT = 226;
const SDL_SCANCODE_LGUI = 227;
const SDL_SCANCODE_RCTRL = 228;
const SDL_SCANCODE_RSHIFT = 229;
const SDL_SCANCODE_RALT = 230;
const SDL_SCANCODE_RGUI = 231;
const SDL_SCANCODE_MODE = 257;
const SDL_SCANCODE_SLEEP = 258;
const SDL_SCANCODE_WAKE = 259;
const SDL_SCANCODE_CHANNEL_INCREMENT = 260;
const SDL_SCANCODE_CHANNEL_DECREMENT = 261;
const SDL_SCANCODE_MEDIA_PLAY = 262;
const SDL_SCANCODE_MEDIA_PAUSE = 263;
const SDL_SCANCODE_MEDIA_RECORD = 264;
const SDL_SCANCODE_MEDIA_FAST_FORWARD = 265;
const SDL_SCANCODE_MEDIA_REWIND = 266;
const SDL_SCANCODE_MEDIA_NEXT_TRACK = 267;
const SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268;
const SDL_SCANCODE_MEDIA_STOP = 269;
const SDL_SCANCODE_MEDIA_EJECT = 270;
const SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271;
const SDL_SCANCODE_MEDIA_SELECT = 272;
const SDL_SCANCODE_AC_NEW = 273;
const SDL_SCANCODE_AC_OPEN = 274;
const SDL_SCANCODE_AC_CLOSE = 275;
const SDL_SCANCODE_AC_EXIT = 276;
const SDL_SCANCODE_AC_SAVE = 277;
const SDL_SCANCODE_AC_PRINT = 278;
const SDL_SCANCODE_AC_PROPERTIES = 279;
const SDL_SCANCODE_AC_SEARCH = 280;
const SDL_SCANCODE_AC_HOME = 281;
const SDL_SCANCODE_AC_BACK = 282;
const SDL_SCANCODE_AC_FORWARD = 283;
const SDL_SCANCODE_AC_STOP = 284;
const SDL_SCANCODE_AC_REFRESH = 285;
const SDL_SCANCODE_AC_BOOKMARKS = 286;
const SDL_SCANCODE_SOFTLEFT = 287;
const SDL_SCANCODE_SOFTRIGHT = 288;
const SDL_SCANCODE_CALL = 289;
const SDL_SCANCODE_ENDCALL = 290;
const SDL_SCANCODE_RESERVED = 400;
const SDL_SCANCODE_COUNT = 512;
//const SDL_sensor_h_ = ;
const SDL_STANDARD_GRAVITY = 9.80665;
const SDL_SENSOR_INVALID = -1;
const SDL_SENSOR_UNKNOWN = -1 + 1;
const SDL_SENSOR_ACCEL = -1 + 2;
const SDL_SENSOR_GYRO = -1 + 3;
const SDL_SENSOR_ACCEL_L = -1 + 4;
const SDL_SENSOR_GYRO_L = -1 + 5;
const SDL_SENSOR_ACCEL_R = -1 + 6;
const SDL_SENSOR_GYRO_R = -1 + 7;
//const SDL_stdinc_h_ = ;
//const SDL_INCLUDE_STDBOOL_H = ;
//const bool = unsigned char;
//const false = 0;
//const true = 1;
//const __bool_true_false_are_defined = 1;
//const SDL_DISABLE_ALLOCA = ;
//const alloca = __builtin_alloca;
const SDL_NOLONGLONG = 1;
//const SDL_SIZE_MAX = SIZE_MAX;
//const SDL_COMPILE_TIME_ASSERT = (name, x) FailToCompileIf_x_IsFalse(x);
//const SDL_arraysize = (array) (sizeof(array)/sizeof(array[0]));
//const SDL_STRINGIFY_ARG = (arg) #arg;
//const SDL_reinterpret_cast = (type, expression) reinterpret_cast<type>(expression);
//const SDL_static_cast = (type, expression) static_cast<type>(expression);
//const SDL_const_cast = (type, expression) const_cast<type>(expression);
//const SDL_FOURCC = (A, B, C, D) ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24));
//const SDL_SINT64_C = (c) c ## LL;
//const SDL_UINT64_C = (c) c ## ULL;
//const SDL_MAX_SINT8 = ((Sint8)0x7);
//const SDL_MIN_SINT8 = ((Sint8)(~0x7));
//const SDL_MAX_UINT8 = ((Uint8)0xFF);
//const SDL_MIN_UINT8 = ((Uint8)0x00);
//const SDL_MAX_SINT16 = ((Sint16)0x7FFF);
//const SDL_MIN_SINT16 = ((Sint16)(~0x7FFF));
//const SDL_MAX_UINT16 = ((Uint16)0xFFFF);
//const SDL_MIN_UINT16 = ((Uint16)0x0000);
//const SDL_MAX_SINT32 = ((Sint32)0x7FFFFFFF);
//const SDL_MIN_SINT32 = ((Sint32)(~0x7FFFFFFF));
//const SDL_MAX_UINT32 = ((Uint32)0xFFFFFFFF);
//const SDL_MIN_UINT32 = ((Uint32)0x00000000);
//const SDL_MAX_SINT64 = SDL_SINT64_C(0x7FFFFFFFFFFFFFFF);
//const SDL_MIN_SINT64 = ~SDL_SINT64_C(0x7FFFFFFFFFFFFFFF);
const SDL_MAX_UINT64 = 0xFFFFFFFFFFFFFFFF;
const SDL_MIN_UINT64 = 0x0000000000000000;
//const SDL_MAX_TIME = SDL_MAX_SINT64;
//const SDL_MIN_TIME = SDL_MIN_SINT64;
//const SDL_FLT_EPSILON = FLT_EPSILON;
const SDL_PRIs64 = 'lld';
const SDL_PRIu64 = 'llu';
const SDL_PRIx64 = 'llx';
const SDL_PRIX64 = 'llX';
const SDL_PRIs32 = 'd';
const SDL_PRIu32 = 'u';
const SDL_PRIx32 = 'x';
const SDL_PRIX32 = 'X';
const SDL_PRILL_PREFIX = 'll';
//const SDL_PRILLd = SDL_PRILL_PREFIX "d";
//const SDL_PRILLu = SDL_PRILL_PREFIX "u";
//const SDL_PRILLx = SDL_PRILL_PREFIX "x";
//const SDL_PRILLX = SDL_PRILL_PREFIX "X";
//const SDL_IN_BYTECAP = (x) _In_bytecount_(x);
//const SDL_INOUT_Z_CAP = (x) _Inout_z_cap_(x);
//const SDL_OUT_Z_CAP = (x) _Out_z_cap_(x);
//const SDL_OUT_CAP = (x) _Out_cap_(x);
//const SDL_OUT_BYTECAP = (x) _Out_bytecap_(x);
//const SDL_OUT_Z_BYTECAP = (x) _Out_z_bytecap_(x);
//const SDL_PRINTF_FORMAT_STRING = _Printf_format_string_;
//const SDL_SCANF_FORMAT_STRING = _Scanf_format_string_impl_;
//const SDL_PRINTF_VARARG_FUNC = ( fmtargnumber ) __attribute__ (( format( __printf__, fmtargnumber, fmtargnumber+1 )));
//const SDL_PRINTF_VARARG_FUNCV = ( fmtargnumber ) __attribute__(( format( __printf__, fmtargnumber, 0 )));
//const SDL_SCANF_VARARG_FUNC = ( fmtargnumber ) __attribute__ (( format( __scanf__, fmtargnumber, fmtargnumber+1 )));
//const SDL_SCANF_VARARG_FUNCV = ( fmtargnumber ) __attribute__(( format( __scanf__, fmtargnumber, 0 )));
//const SDL_WPRINTF_VARARG_FUNC = ( fmtargnumber );
//const SDL_WPRINTF_VARARG_FUNCV = ( fmtargnumber );
const DUMMY_ENUM_VALUE = 0;
//const SDL_INIT_INTERFACE = (iface) do { SDL_zerop(iface); (iface)->version = sizeof(*(iface)); } while (0);
//const SDL_stack_alloc = (type, count) (type*)alloca(sizeof(type)*(count));
//const SDL_stack_free = (data);
//const SDL_min = (x, y) (((x) < (y)) ? (x) : (y));
//const SDL_max = (x, y) (((x) > (y)) ? (x) : (y));
//const SDL_clamp = (x, a, b) (((x) < (a)) ? (a) : (((x) > (b)) ? (b) : (x)));
//const SDL_memcpy = memcpy;
//const SDL_copyp = (dst, src) { SDL_COMPILE_TIME_ASSERT(SDL_copyp, sizeof (*(dst)) == sizeof (*(src))); } SDL_memcpy((dst), (src), sizeof(*(src)));
//const SDL_memmove = memmove;
//const SDL_memset = memset;
//const SDL_zero = (x) SDL_memset(&(x), 0, sizeof((x)));
//const SDL_zerop = (x) SDL_memset((x), 0, sizeof(*(x)));
//const SDL_zeroa = (x) SDL_memset((x), 0, sizeof((x)));
const SDL_INVALID_UNICODE_CODEPOINT = 0xFFFD;
const SDL_PI_D = 3.141592653589793238462643383279502884;
const SDL_PI_F = 3.141592653589793238462643383279502884;
//const SDL_ICONV_ERROR = (size_t)-1;
//const SDL_ICONV_E2BIG = (size_t)-2;
//const SDL_ICONV_EILSEQ = (size_t)-3;
//const SDL_ICONV_EINVAL = (size_t)-4;
//const SDL_iconv_utf8_locale = (S) SDL_iconv_string("", "UTF-8", S, SDL_strlen(S)+1);
//const SDL_iconv_utf8_ucs2 = (S) (Uint16 *)SDL_iconv_string("UCS-2", "UTF-8", S, SDL_strlen(S)+1);
//const SDL_iconv_utf8_ucs4 = (S) (Uint32 *)SDL_iconv_string("UCS-4", "UTF-8", S, SDL_strlen(S)+1);
//const SDL_iconv_wchar_utf8 = (S) SDL_iconv_string("UTF-8", "WCHAR_T", (char *)S, (SDL_wcslen(S)+1)*sizeof(wchar_t));
//const SDL_malloc = malloc;
//const SDL_calloc = calloc;
//const SDL_realloc = realloc;
//const SDL_free = free;
//const SDL_memcmp = memcmp;
//const SDL_strlcpy = strlcpy;
//const SDL_strlcat = strlcat;
//const SDL_strlen = strlen;
//const SDL_wcslen = wcslen;
//const SDL_wcslcpy = wcslcpy;
//const SDL_wcslcat = wcslcat;
//const SDL_strdup = strdup;
//const SDL_wcsdup = wcsdup;
//const SDL_strchr = strchr;
//const SDL_strrchr = strrchr;
//const SDL_strstr = strstr;
//const SDL_wcsstr = wcsstr;
//const SDL_strtok_r = strtok_r;
//const SDL_strcmp = strcmp;
//const SDL_wcscmp = wcscmp;
//const SDL_strncmp = strncmp;
//const SDL_wcsncmp = wcsncmp;
//const SDL_strcasecmp = strcasecmp;
//const SDL_strncasecmp = strncasecmp;
//const SDL_strpbrk = strpbrk;
//const SDL_sscanf = sscanf;
//const SDL_vsscanf = vsscanf;
//const SDL_snprintf = snprintf;
//const SDL_vsnprintf = vsnprintf;
//const SDL_size_mul_check_overflow = (a, b, ret) SDL_size_mul_check_overflow_builtin(a, b, ret);
//const SDL_size_add_check_overflow = (a, b, ret) SDL_size_add_check_overflow_builtin(a, b, ret);
//const SDL_storage_h_ = ;
//const SDL_surface_h_ = ;
const SDL_SURFACE_PREALLOCATED = 0x00000001;
const SDL_SURFACE_LOCK_NEEDED = 0x00000002;
const SDL_SURFACE_LOCKED = 0x00000004;
const SDL_SURFACE_SIMD_ALIGNED = 0x00000008;
//const SDL_MUSTLOCK = (S) (((S)->flags & SDL_SURFACE_LOCK_NEEDED) == SDL_SURFACE_LOCK_NEEDED);
const SDL_SCALEMODE_INVALID = -1;
const SDL_SCALEMODE_NEAREST = -1 + 1;
const SDL_SCALEMODE_LINEAR = -1 + 2;
const SDL_SCALEMODE_PIXELART = -1 + 3;
const SDL_FLIP_NONE = 0;
const SDL_FLIP_HORIZONTAL = 1;
const SDL_FLIP_VERTICAL = 2;
const SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT = 'SDL.surface.SDR_white_point';
const SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT = 'SDL.surface.HDR_headroom';
const SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING = 'SDL.surface.tonemap';
const SDL_PROP_SURFACE_HOTSPOT_X_NUMBER = 'SDL.surface.hotspot.x';
const SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER = 'SDL.surface.hotspot.y';
//const SDL_system_h_ = ;
const SDL_ANDROID_EXTERNAL_STORAGE_READ = 0x01;
const SDL_ANDROID_EXTERNAL_STORAGE_WRITE = 0x02;
const SDL_SANDBOX_NONE = 0;
const SDL_SANDBOX_UNKNOWN_CONTAINER = 0 + 1;
const SDL_SANDBOX_FLATPAK = 0 + 2;
const SDL_SANDBOX_SNAP = 0 + 3;
const SDL_SANDBOX_MACOS = 0 + 4;
//const SDL_thread_h_ = ;
const SDL_THREAD_PRIORITY_LOW = 0;
const SDL_THREAD_PRIORITY_NORMAL = 1;
const SDL_THREAD_PRIORITY_HIGH = 2;
const SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;
const SDL_THREAD_UNKNOWN = 0;
const SDL_THREAD_ALIVE = 1;
const SDL_THREAD_DETACHED = 2;
const SDL_THREAD_COMPLETE = 3;
const SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER =
    'SDL.thread.create.entry_function';
const SDL_PROP_THREAD_CREATE_NAME_STRING = 'SDL.thread.create.name';
const SDL_PROP_THREAD_CREATE_USERDATA_POINTER = 'SDL.thread.create.userdata';
const SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER = 'SDL.thread.create.stacksize';
//const SDL_BeginThreadFunction = _beginthreadex;
//const SDL_EndThreadFunction = _endthreadex;
//const SDL_CreateThread = (fn, name, data) SDL_CreateThreadRuntime((fn), (name), (data), (SDL_FunctionPointer) (SDL_BeginThreadFunction), (SDL_FunctionPointer) (SDL_EndThreadFunction));
//const SDL_CreateThreadWithProperties = (props) SDL_CreateThreadWithPropertiesRuntime((props), (SDL_FunctionPointer) (SDL_BeginThreadFunction), (SDL_FunctionPointer) (SDL_EndThreadFunction));
//const SDL_time_h_ = ;
const SDL_DATE_FORMAT_YYYYMMDD = 0;
const SDL_DATE_FORMAT_DDMMYYYY = 1;
const SDL_DATE_FORMAT_MMDDYYYY = 2;
const SDL_TIME_FORMAT_24HR = 0;
const SDL_TIME_FORMAT_12HR = 1;
//const SDL_timer_h_ = ;
const SDL_MS_PER_SECOND = 1000;
const SDL_US_PER_SECOND = 1000000;
//const SDL_NS_PER_SECOND = 1000000000LL;
const SDL_NS_PER_MS = 1000000;
const SDL_NS_PER_US = 1000;
//const SDL_SECONDS_TO_NS = (S) (((Uint64)(S)) * SDL_NS_PER_SECOND);
//const SDL_NS_TO_SECONDS = (NS) ((NS) / SDL_NS_PER_SECOND);
//const SDL_MS_TO_NS = (MS) (((Uint64)(MS)) * SDL_NS_PER_MS);
//const SDL_NS_TO_MS = (NS) ((NS) / SDL_NS_PER_MS);
//const SDL_US_TO_NS = (US) (((Uint64)(US)) * SDL_NS_PER_US);
//const SDL_NS_TO_US = (NS) ((NS) / SDL_NS_PER_US);
//const SDL_touch_h_ = ;
const SDL_TOUCH_DEVICE_INVALID = -1;
const SDL_TOUCH_DEVICE_DIRECT = -1 + 1;
const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = -1 + 2;
const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = -1 + 3;
//const SDL_TOUCH_MOUSEID = ((SDL_MouseID)-1);
//const SDL_MOUSE_TOUCHID = ((SDL_TouchID)-1);
//const SDL_tray_h_ = ;
const SDL_TRAYENTRY_BUTTON = 0x00000001;
const SDL_TRAYENTRY_CHECKBOX = 0x00000002;
const SDL_TRAYENTRY_SUBMENU = 0x00000004;
const SDL_TRAYENTRY_DISABLED = 0x80000000;
const SDL_TRAYENTRY_CHECKED = 0x40000000;
//const SDL_version_h_ = ;
const SDL_MAJOR_VERSION = 3;
const SDL_MINOR_VERSION = 3;
const SDL_MICRO_VERSION = 0;
//const SDL_VERSIONNUM = (major, minor, patch) ((major) * 1000000 + (minor) * 1000 + (patch));
//const SDL_VERSIONNUM_MAJOR = (version) ((version) / 1000000);
//const SDL_VERSIONNUM_MINOR = (version) (((version) / 1000) % 1000);
//const SDL_VERSIONNUM_MICRO = (version) ((version) % 1000);
//const SDL_VERSION = SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION);
//const SDL_VERSION_ATLEAST = (X, Y, Z) (SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z));
//const SDL_video_h_ = ;
const SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER =
    'SDL.video.wayland.wl_display';
const SDL_SYSTEM_THEME_UNKNOWN = 0;
const SDL_SYSTEM_THEME_LIGHT = 1;
const SDL_SYSTEM_THEME_DARK = 2;
const SDL_ORIENTATION_UNKNOWN = 0;
const SDL_ORIENTATION_LANDSCAPE = 1;
const SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
const SDL_ORIENTATION_PORTRAIT = 3;
const SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;
const SDL_WINDOW_FULLSCREEN = 0x0000000000000001;
const SDL_WINDOW_OPENGL = 0x0000000000000002;
const SDL_WINDOW_OCCLUDED = 0x0000000000000004;
const SDL_WINDOW_HIDDEN = 0x0000000000000008;
const SDL_WINDOW_BORDERLESS = 0x0000000000000010;
const SDL_WINDOW_RESIZABLE = 0x0000000000000020;
const SDL_WINDOW_MINIMIZED = 0x0000000000000040;
const SDL_WINDOW_MAXIMIZED = 0x0000000000000080;
const SDL_WINDOW_MOUSE_GRABBED = 0x0000000000000100;
const SDL_WINDOW_INPUT_FOCUS = 0x0000000000000200;
const SDL_WINDOW_MOUSE_FOCUS = 0x0000000000000400;
const SDL_WINDOW_EXTERNAL = 0x0000000000000800;
const SDL_WINDOW_MODAL = 0x0000000000001000;
const SDL_WINDOW_HIGH_PIXEL_DENSITY = 0x0000000000002000;
const SDL_WINDOW_MOUSE_CAPTURE = 0x0000000000004000;
const SDL_WINDOW_MOUSE_RELATIVE_MODE = 0x0000000000008000;
const SDL_WINDOW_ALWAYS_ON_TOP = 0x0000000000010000;
const SDL_WINDOW_UTILITY = 0x0000000000020000;
const SDL_WINDOW_TOOLTIP = 0x0000000000040000;
const SDL_WINDOW_POPUP_MENU = 0x0000000000080000;
const SDL_WINDOW_KEYBOARD_GRABBED = 0x0000000000100000;
const SDL_WINDOW_VULKAN = 0x0000000010000000;
const SDL_WINDOW_METAL = 0x0000000020000000;
const SDL_WINDOW_TRANSPARENT = 0x0000000040000000;
const SDL_WINDOW_NOT_FOCUSABLE = 0x0000000080000000;
const SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF0000;
//const SDL_WINDOWPOS_UNDEFINED_DISPLAY = (X) (SDL_WINDOWPOS_UNDEFINED_MASK|(X));
//const SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(0);
//const SDL_WINDOWPOS_ISUNDEFINED = (X) (((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK);
const SDL_WINDOWPOS_CENTERED_MASK = 0x2FFF0000;
//const SDL_WINDOWPOS_CENTERED_DISPLAY = (X) (SDL_WINDOWPOS_CENTERED_MASK|(X));
//const SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY(0);
//const SDL_WINDOWPOS_ISCENTERED = (X) (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK);
const SDL_FLASH_CANCEL = 0;
const SDL_FLASH_BRIEFLY = 1;
const SDL_FLASH_UNTIL_FOCUSED = 2;
const SDL_PROGRESS_STATE_INVALID = -1;
const SDL_PROGRESS_STATE_NONE = -1 + 1;
const SDL_PROGRESS_STATE_INDETERMINATE = -1 + 2;
const SDL_PROGRESS_STATE_NORMAL = -1 + 3;
const SDL_PROGRESS_STATE_PAUSED = -1 + 4;
const SDL_PROGRESS_STATE_ERROR = -1 + 5;
const SDL_GL_RED_SIZE = 0;
const SDL_GL_GREEN_SIZE = 1;
const SDL_GL_BLUE_SIZE = 2;
const SDL_GL_ALPHA_SIZE = 3;
const SDL_GL_BUFFER_SIZE = 4;
const SDL_GL_DOUBLEBUFFER = 5;
const SDL_GL_DEPTH_SIZE = 6;
const SDL_GL_STENCIL_SIZE = 7;
const SDL_GL_ACCUM_RED_SIZE = 8;
const SDL_GL_ACCUM_GREEN_SIZE = 9;
const SDL_GL_ACCUM_BLUE_SIZE = 10;
const SDL_GL_ACCUM_ALPHA_SIZE = 11;
const SDL_GL_STEREO = 12;
const SDL_GL_MULTISAMPLEBUFFERS = 13;
const SDL_GL_MULTISAMPLESAMPLES = 14;
const SDL_GL_ACCELERATED_VISUAL = 15;
const SDL_GL_RETAINED_BACKING = 16;
const SDL_GL_CONTEXT_MAJOR_VERSION = 17;
const SDL_GL_CONTEXT_MINOR_VERSION = 18;
const SDL_GL_CONTEXT_FLAGS = 19;
const SDL_GL_CONTEXT_PROFILE_MASK = 20;
const SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21;
const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22;
const SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23;
const SDL_GL_CONTEXT_RESET_NOTIFICATION = 24;
const SDL_GL_CONTEXT_NO_ERROR = 25;
const SDL_GL_FLOATBUFFERS = 26;
const SDL_GL_EGL_PLATFORM = 27;
const SDL_GL_CONTEXT_PROFILE_CORE = 0x0001;
const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002;
const SDL_GL_CONTEXT_PROFILE_ES = 0x0004;
const SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001;
const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002;
const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004;
const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008;
const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000;
const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001;
const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000;
const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0x0001;
const SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN = 'SDL.display.HDR_enabled';
const SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER =
    'SDL.display.KMSDRM.panel_orientation';
const SDL_PROP_DISPLAY_WAYLAND_WL_OUTPUT_POINTER =
    'SDL.display.wayland.wl_output';
const SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN =
    'SDL.window.create.always_on_top';
const SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN =
    'SDL.window.create.borderless';
const SDL_PROP_WINDOW_CREATE_CONSTRAIN_POPUP_BOOLEAN =
    'SDL.window.create.constrain_popup';
const SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN = 'SDL.window.create.focusable';
const SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN =
    'SDL.window.create.external_graphics_context';
const SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER = 'SDL.window.create.flags';
const SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN =
    'SDL.window.create.fullscreen';
const SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER = 'SDL.window.create.height';
const SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN = 'SDL.window.create.hidden';
const SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN =
    'SDL.window.create.high_pixel_density';
const SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN = 'SDL.window.create.maximized';
const SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN = 'SDL.window.create.menu';
const SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN = 'SDL.window.create.metal';
const SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN = 'SDL.window.create.minimized';
const SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN = 'SDL.window.create.modal';
const SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN =
    'SDL.window.create.mouse_grabbed';
const SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN = 'SDL.window.create.opengl';
const SDL_PROP_WINDOW_CREATE_PARENT_POINTER = 'SDL.window.create.parent';
const SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN = 'SDL.window.create.resizable';
const SDL_PROP_WINDOW_CREATE_TITLE_STRING = 'SDL.window.create.title';
const SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN =
    'SDL.window.create.transparent';
const SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN = 'SDL.window.create.tooltip';
const SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN = 'SDL.window.create.utility';
const SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN = 'SDL.window.create.vulkan';
const SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER = 'SDL.window.create.width';
const SDL_PROP_WINDOW_CREATE_X_NUMBER = 'SDL.window.create.x';
const SDL_PROP_WINDOW_CREATE_Y_NUMBER = 'SDL.window.create.y';
const SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER =
    'SDL.window.create.cocoa.window';
const SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER =
    'SDL.window.create.cocoa.view';
const SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN =
    'SDL.window.create.wayland.surface_role_custom';
const SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN =
    'SDL.window.create.wayland.create_egl_window';
const SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER =
    'SDL.window.create.wayland.wl_surface';
const SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER =
    'SDL.window.create.win32.hwnd';
const SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER =
    'SDL.window.create.win32.pixel_format_hwnd';
const SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER = 'SDL.window.create.x11.window';
const SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_CANVAS_ID_STRING =
    'SDL.window.create.emscripten.canvas_id';
const SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING =
    'SDL.window.create.emscripten.keyboard_element';
const SDL_PROP_WINDOW_SHAPE_POINTER = 'SDL.window.shape';
const SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN = 'SDL.window.HDR_enabled';
const SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT = 'SDL.window.SDR_white_level';
const SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT = 'SDL.window.HDR_headroom';
const SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER = 'SDL.window.android.window';
const SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER = 'SDL.window.android.surface';
const SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER = 'SDL.window.uikit.window';
const SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER =
    'SDL.window.uikit.metal_view_tag';
const SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER =
    'SDL.window.uikit.opengl.framebuffer';
const SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER =
    'SDL.window.uikit.opengl.renderbuffer';
const SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER =
    'SDL.window.uikit.opengl.resolve_framebuffer';
const SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER =
    'SDL.window.kmsdrm.dev_index';
const SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER = 'SDL.window.kmsdrm.drm_fd';
const SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER = 'SDL.window.kmsdrm.gbm_dev';
const SDL_PROP_WINDOW_COCOA_WINDOW_POINTER = 'SDL.window.cocoa.window';
const SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER =
    'SDL.window.cocoa.metal_view_tag';
const SDL_PROP_WINDOW_OPENVR_OVERLAY_ID_NUMBER = 'SDL.window.openvr.overlay_id';
const SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER = 'SDL.window.vivante.display';
const SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER = 'SDL.window.vivante.window';
const SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER = 'SDL.window.vivante.surface';
const SDL_PROP_WINDOW_WIN32_HWND_POINTER = 'SDL.window.win32.hwnd';
const SDL_PROP_WINDOW_WIN32_HDC_POINTER = 'SDL.window.win32.hdc';
const SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER = 'SDL.window.win32.instance';
const SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER = 'SDL.window.wayland.display';
const SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER = 'SDL.window.wayland.surface';
const SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER = 'SDL.window.wayland.viewport';
const SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER =
    'SDL.window.wayland.egl_window';
const SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER =
    'SDL.window.wayland.xdg_surface';
const SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER =
    'SDL.window.wayland.xdg_toplevel';
const SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING =
    'SDL.window.wayland.xdg_toplevel_export_handle';
const SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER =
    'SDL.window.wayland.xdg_popup';
const SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER =
    'SDL.window.wayland.xdg_positioner';
const SDL_PROP_WINDOW_X11_DISPLAY_POINTER = 'SDL.window.x11.display';
const SDL_PROP_WINDOW_X11_SCREEN_NUMBER = 'SDL.window.x11.screen';
const SDL_PROP_WINDOW_X11_WINDOW_NUMBER = 'SDL.window.x11.window';
const SDL_PROP_WINDOW_EMSCRIPTEN_CANVAS_ID_STRING =
    'SDL.window.emscripten.canvas_id';
const SDL_PROP_WINDOW_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING =
    'SDL.window.emscripten.keyboard_element';
const SDL_WINDOW_SURFACE_VSYNC_DISABLED = 0;
const SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE = (-1);
const SDL_HITTEST_NORMAL = 0;
const SDL_HITTEST_DRAGGABLE = 1;
const SDL_HITTEST_RESIZE_TOPLEFT = 2;
const SDL_HITTEST_RESIZE_TOP = 3;
const SDL_HITTEST_RESIZE_TOPRIGHT = 4;
const SDL_HITTEST_RESIZE_RIGHT = 5;
const SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
const SDL_HITTEST_RESIZE_BOTTOM = 7;
const SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
const SDL_HITTEST_RESIZE_LEFT = 9;

//const SDL_vulkan_h_ = ;
//const NO_SDL_VULKAN_TYPEDEFS = ;
//const VK_DEFINE_HANDLE = (object) typedef struct object##_T* object;;
//const VK_DEFINE_NON_DISPATCHABLE_HANDLE = (object) typedef struct object##_T *object;;
class SdlkAssertion {
  static const retry = SDL_ASSERTION_RETRY;
  static const onBreak = SDL_ASSERTION_BREAK;
  static const abort = SDL_ASSERTION_ABORT;
  static const ignore = SDL_ASSERTION_IGNORE;
  static const alwaysIgnore = SDL_ASSERTION_ALWAYS_IGNORE;
}

class SdlkAsyncio {
  static const taskRead = SDL_ASYNCIO_TASK_READ;
  static const taskWrite = SDL_ASYNCIO_TASK_WRITE;
  static const taskClose = SDL_ASYNCIO_TASK_CLOSE;
  static const complete = SDL_ASYNCIO_COMPLETE;
  static const failure = SDL_ASYNCIO_FAILURE;
  static const canceled = SDL_ASYNCIO_CANCELED;
}

class SdlkAudio {
  static const unknown = SDL_AUDIO_UNKNOWN;
  static const u8 = SDL_AUDIO_U8;
  static const s8 = SDL_AUDIO_S8;
  static const s16Le = SDL_AUDIO_S16LE;
  static const s16Be = SDL_AUDIO_S16BE;
  static const s32Le = SDL_AUDIO_S32LE;
  static const s32Be = SDL_AUDIO_S32BE;
  static const f32Le = SDL_AUDIO_F32LE;
  static const f32Be = SDL_AUDIO_F32BE;
}

class SdlkBlendmode {
  static const none = SDL_BLENDMODE_NONE;
  static const blend = SDL_BLENDMODE_BLEND;
  static const blendPremultiplied = SDL_BLENDMODE_BLEND_PREMULTIPLIED;
  static const add = SDL_BLENDMODE_ADD;
  static const addPremultiplied = SDL_BLENDMODE_ADD_PREMULTIPLIED;
  static const mod = SDL_BLENDMODE_MOD;
  static const mul = SDL_BLENDMODE_MUL;
  static const invalid = SDL_BLENDMODE_INVALID;
}

class SdlkBlendoperation {
  static const add = SDL_BLENDOPERATION_ADD;
  static const subtract = SDL_BLENDOPERATION_SUBTRACT;
  static const revSubtract = SDL_BLENDOPERATION_REV_SUBTRACT;
  static const minimum = SDL_BLENDOPERATION_MINIMUM;
  static const maximum = SDL_BLENDOPERATION_MAXIMUM;
}

class SdlkBlendfactor {
  static const zero = SDL_BLENDFACTOR_ZERO;
  static const one = SDL_BLENDFACTOR_ONE;
  static const srcColor = SDL_BLENDFACTOR_SRC_COLOR;
  static const oneMinusSrcColor = SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR;
  static const srcAlpha = SDL_BLENDFACTOR_SRC_ALPHA;
  static const oneMinusSrcAlpha = SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
  static const dstColor = SDL_BLENDFACTOR_DST_COLOR;
  static const oneMinusDstColor = SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR;
  static const dstAlpha = SDL_BLENDFACTOR_DST_ALPHA;
  static const oneMinusDstAlpha = SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA;
}

class SdlkCameraPosition {
  static const unknown = SDL_CAMERA_POSITION_UNKNOWN;
  static const frontFacing = SDL_CAMERA_POSITION_FRONT_FACING;
  static const backFacing = SDL_CAMERA_POSITION_BACK_FACING;
}

class SdlkFiledialog {
  static const openfile = SDL_FILEDIALOG_OPENFILE;
  static const savefile = SDL_FILEDIALOG_SAVEFILE;
  static const openfolder = SDL_FILEDIALOG_OPENFOLDER;
}

class SdlkPropFileDialog {
  static const filtersPointer = SDL_PROP_FILE_DIALOG_FILTERS_POINTER;
  static const nfiltersNumber = SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER;
  static const windowPointer = SDL_PROP_FILE_DIALOG_WINDOW_POINTER;
  static const locationString = SDL_PROP_FILE_DIALOG_LOCATION_STRING;
  static const manyBoolean = SDL_PROP_FILE_DIALOG_MANY_BOOLEAN;
  static const titleString = SDL_PROP_FILE_DIALOG_TITLE_STRING;
  static const acceptString = SDL_PROP_FILE_DIALOG_ACCEPT_STRING;
  static const cancelString = SDL_PROP_FILE_DIALOG_CANCEL_STRING;
}

class SdlkEvent {
  static const first = SDL_EVENT_FIRST;
  static const quit = SDL_EVENT_QUIT;
  static const terminating = SDL_EVENT_TERMINATING;
  static const lowMemory = SDL_EVENT_LOW_MEMORY;
  static const willEnterBackground = SDL_EVENT_WILL_ENTER_BACKGROUND;
  static const didEnterBackground = SDL_EVENT_DID_ENTER_BACKGROUND;
  static const willEnterForeground = SDL_EVENT_WILL_ENTER_FOREGROUND;
  static const didEnterForeground = SDL_EVENT_DID_ENTER_FOREGROUND;
  static const localeChanged = SDL_EVENT_LOCALE_CHANGED;
  static const systemThemeChanged = SDL_EVENT_SYSTEM_THEME_CHANGED;
  static const displayOrientation = SDL_EVENT_DISPLAY_ORIENTATION;
  static const displayAdded = SDL_EVENT_DISPLAY_ADDED;
  static const displayRemoved = SDL_EVENT_DISPLAY_REMOVED;
  static const displayMoved = SDL_EVENT_DISPLAY_MOVED;
  static const displayDesktopModeChanged =
      SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED;
  static const displayCurrentModeChanged =
      SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED;
  static const displayContentScaleChanged =
      SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED;
  static const displayFirst = SDL_EVENT_DISPLAY_FIRST;
  static const displayLast = SDL_EVENT_DISPLAY_LAST;
  static const windowShown = SDL_EVENT_WINDOW_SHOWN;
  static const windowHidden = SDL_EVENT_WINDOW_HIDDEN;
  static const windowExposed = SDL_EVENT_WINDOW_EXPOSED;
  static const windowMoved = SDL_EVENT_WINDOW_MOVED;
  static const windowResized = SDL_EVENT_WINDOW_RESIZED;
  static const windowPixelSizeChanged = SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED;
  static const windowMetalViewResized = SDL_EVENT_WINDOW_METAL_VIEW_RESIZED;
  static const windowMinimized = SDL_EVENT_WINDOW_MINIMIZED;
  static const windowMaximized = SDL_EVENT_WINDOW_MAXIMIZED;
  static const windowRestored = SDL_EVENT_WINDOW_RESTORED;
  static const windowMouseEnter = SDL_EVENT_WINDOW_MOUSE_ENTER;
  static const windowMouseLeave = SDL_EVENT_WINDOW_MOUSE_LEAVE;
  static const windowFocusGained = SDL_EVENT_WINDOW_FOCUS_GAINED;
  static const windowFocusLost = SDL_EVENT_WINDOW_FOCUS_LOST;
  static const windowCloseRequested = SDL_EVENT_WINDOW_CLOSE_REQUESTED;
  static const windowHitTest = SDL_EVENT_WINDOW_HIT_TEST;
  static const windowIccprofChanged = SDL_EVENT_WINDOW_ICCPROF_CHANGED;
  static const windowDisplayChanged = SDL_EVENT_WINDOW_DISPLAY_CHANGED;
  static const windowDisplayScaleChanged =
      SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED;
  static const windowSafeAreaChanged = SDL_EVENT_WINDOW_SAFE_AREA_CHANGED;
  static const windowOccluded = SDL_EVENT_WINDOW_OCCLUDED;
  static const windowEnterFullscreen = SDL_EVENT_WINDOW_ENTER_FULLSCREEN;
  static const windowLeaveFullscreen = SDL_EVENT_WINDOW_LEAVE_FULLSCREEN;
  static const windowDestroyed = SDL_EVENT_WINDOW_DESTROYED;
  static const windowHdrStateChanged = SDL_EVENT_WINDOW_HDR_STATE_CHANGED;
  static const windowFirst = SDL_EVENT_WINDOW_FIRST;
  static const windowLast = SDL_EVENT_WINDOW_LAST;
  static const keyDown = SDL_EVENT_KEY_DOWN;
  static const keyUp = SDL_EVENT_KEY_UP;
  static const textEditing = SDL_EVENT_TEXT_EDITING;
  static const textInput = SDL_EVENT_TEXT_INPUT;
  static const keymapChanged = SDL_EVENT_KEYMAP_CHANGED;
  static const keyboardAdded = SDL_EVENT_KEYBOARD_ADDED;
  static const keyboardRemoved = SDL_EVENT_KEYBOARD_REMOVED;
  static const textEditingCandidates = SDL_EVENT_TEXT_EDITING_CANDIDATES;
  static const mouseMotion = SDL_EVENT_MOUSE_MOTION;
  static const mouseButtonDown = SDL_EVENT_MOUSE_BUTTON_DOWN;
  static const mouseButtonUp = SDL_EVENT_MOUSE_BUTTON_UP;
  static const mouseWheel = SDL_EVENT_MOUSE_WHEEL;
  static const mouseAdded = SDL_EVENT_MOUSE_ADDED;
  static const mouseRemoved = SDL_EVENT_MOUSE_REMOVED;
  static const joystickAxisMotion = SDL_EVENT_JOYSTICK_AXIS_MOTION;
  static const joystickBallMotion = SDL_EVENT_JOYSTICK_BALL_MOTION;
  static const joystickHatMotion = SDL_EVENT_JOYSTICK_HAT_MOTION;
  static const joystickButtonDown = SDL_EVENT_JOYSTICK_BUTTON_DOWN;
  static const joystickButtonUp = SDL_EVENT_JOYSTICK_BUTTON_UP;
  static const joystickAdded = SDL_EVENT_JOYSTICK_ADDED;
  static const joystickRemoved = SDL_EVENT_JOYSTICK_REMOVED;
  static const joystickBatteryUpdated = SDL_EVENT_JOYSTICK_BATTERY_UPDATED;
  static const joystickUpdateComplete = SDL_EVENT_JOYSTICK_UPDATE_COMPLETE;
  static const gamepadAxisMotion = SDL_EVENT_GAMEPAD_AXIS_MOTION;
  static const gamepadButtonDown = SDL_EVENT_GAMEPAD_BUTTON_DOWN;
  static const gamepadButtonUp = SDL_EVENT_GAMEPAD_BUTTON_UP;
  static const gamepadAdded = SDL_EVENT_GAMEPAD_ADDED;
  static const gamepadRemoved = SDL_EVENT_GAMEPAD_REMOVED;
  static const gamepadRemapped = SDL_EVENT_GAMEPAD_REMAPPED;
  static const gamepadTouchpadDown = SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN;
  static const gamepadTouchpadMotion = SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION;
  static const gamepadTouchpadUp = SDL_EVENT_GAMEPAD_TOUCHPAD_UP;
  static const gamepadSensorUpdate = SDL_EVENT_GAMEPAD_SENSOR_UPDATE;
  static const gamepadUpdateComplete = SDL_EVENT_GAMEPAD_UPDATE_COMPLETE;
  static const gamepadSteamHandleUpdated =
      SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED;
  static const fingerDown = SDL_EVENT_FINGER_DOWN;
  static const fingerUp = SDL_EVENT_FINGER_UP;
  static const fingerMotion = SDL_EVENT_FINGER_MOTION;
  static const fingerCanceled = SDL_EVENT_FINGER_CANCELED;
  static const clipboardUpdate = SDL_EVENT_CLIPBOARD_UPDATE;
  static const dropFile = SDL_EVENT_DROP_FILE;
  static const dropText = SDL_EVENT_DROP_TEXT;
  static const dropBegin = SDL_EVENT_DROP_BEGIN;
  static const dropComplete = SDL_EVENT_DROP_COMPLETE;
  static const dropPosition = SDL_EVENT_DROP_POSITION;
  static const audioDeviceAdded = SDL_EVENT_AUDIO_DEVICE_ADDED;
  static const audioDeviceRemoved = SDL_EVENT_AUDIO_DEVICE_REMOVED;
  static const audioDeviceFormatChanged = SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED;
  static const sensorUpdate = SDL_EVENT_SENSOR_UPDATE;
  static const penProximityIn = SDL_EVENT_PEN_PROXIMITY_IN;
  static const penProximityOut = SDL_EVENT_PEN_PROXIMITY_OUT;
  static const penDown = SDL_EVENT_PEN_DOWN;
  static const penUp = SDL_EVENT_PEN_UP;
  static const penButtonDown = SDL_EVENT_PEN_BUTTON_DOWN;
  static const penButtonUp = SDL_EVENT_PEN_BUTTON_UP;
  static const penMotion = SDL_EVENT_PEN_MOTION;
  static const penAxis = SDL_EVENT_PEN_AXIS;
  static const cameraDeviceAdded = SDL_EVENT_CAMERA_DEVICE_ADDED;
  static const cameraDeviceRemoved = SDL_EVENT_CAMERA_DEVICE_REMOVED;
  static const cameraDeviceApproved = SDL_EVENT_CAMERA_DEVICE_APPROVED;
  static const cameraDeviceDenied = SDL_EVENT_CAMERA_DEVICE_DENIED;
  static const renderTargetsReset = SDL_EVENT_RENDER_TARGETS_RESET;
  static const renderDeviceReset = SDL_EVENT_RENDER_DEVICE_RESET;
  static const renderDeviceLost = SDL_EVENT_RENDER_DEVICE_LOST;
  static const private0 = SDL_EVENT_PRIVATE0;
  static const private1 = SDL_EVENT_PRIVATE1;
  static const private2 = SDL_EVENT_PRIVATE2;
  static const private3 = SDL_EVENT_PRIVATE3;
  static const pollSentinel = SDL_EVENT_POLL_SENTINEL;
  static const user = SDL_EVENT_USER;
  static const last = SDL_EVENT_LAST;
  static const enumPadding = SDL_EVENT_ENUM_PADDING;
}

class SdlkFolder {
  static const home = SDL_FOLDER_HOME;
  static const desktop = SDL_FOLDER_DESKTOP;
  static const documents = SDL_FOLDER_DOCUMENTS;
  static const downloads = SDL_FOLDER_DOWNLOADS;
  static const music = SDL_FOLDER_MUSIC;
  static const pictures = SDL_FOLDER_PICTURES;
  static const publicshare = SDL_FOLDER_PUBLICSHARE;
  static const savedgames = SDL_FOLDER_SAVEDGAMES;
  static const screenshots = SDL_FOLDER_SCREENSHOTS;
  static const templates = SDL_FOLDER_TEMPLATES;
  static const videos = SDL_FOLDER_VIDEOS;
  static const count = SDL_FOLDER_COUNT;
}

class SdlkPathtype {
  static const none = SDL_PATHTYPE_NONE;
  static const file = SDL_PATHTYPE_FILE;
  static const directory = SDL_PATHTYPE_DIRECTORY;
  static const other = SDL_PATHTYPE_OTHER;
}

class SdlkEnum {
  static const onContinue = SDL_ENUM_CONTINUE;
  static const success = SDL_ENUM_SUCCESS;
  static const failure = SDL_ENUM_FAILURE;
}

class SdlkGamepadType {
  static const unknown = SDL_GAMEPAD_TYPE_UNKNOWN;
  static const standard = SDL_GAMEPAD_TYPE_STANDARD;
  static const xbox360 = SDL_GAMEPAD_TYPE_XBOX360;
  static const xboxone = SDL_GAMEPAD_TYPE_XBOXONE;
  static const ps3 = SDL_GAMEPAD_TYPE_PS3;
  static const ps4 = SDL_GAMEPAD_TYPE_PS4;
  static const ps5 = SDL_GAMEPAD_TYPE_PS5;
  static const nintendoSwitchPro = SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO;
  static const nintendoSwitchJoyconLeft =
      SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT;
  static const nintendoSwitchJoyconRight =
      SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT;
  static const nintendoSwitchJoyconPair =
      SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR;
  static const gamecube = SDL_GAMEPAD_TYPE_GAMECUBE;
  static const count = SDL_GAMEPAD_TYPE_COUNT;
}

class SdlkGamepadButton {
  static const invalid = SDL_GAMEPAD_BUTTON_INVALID;
  static const south = SDL_GAMEPAD_BUTTON_SOUTH;
  static const east = SDL_GAMEPAD_BUTTON_EAST;
  static const west = SDL_GAMEPAD_BUTTON_WEST;
  static const north = SDL_GAMEPAD_BUTTON_NORTH;
  static const back = SDL_GAMEPAD_BUTTON_BACK;
  static const guide = SDL_GAMEPAD_BUTTON_GUIDE;
  static const start = SDL_GAMEPAD_BUTTON_START;
  static const leftStick = SDL_GAMEPAD_BUTTON_LEFT_STICK;
  static const rightStick = SDL_GAMEPAD_BUTTON_RIGHT_STICK;
  static const leftShoulder = SDL_GAMEPAD_BUTTON_LEFT_SHOULDER;
  static const rightShoulder = SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER;
  static const dpadUp = SDL_GAMEPAD_BUTTON_DPAD_UP;
  static const dpadDown = SDL_GAMEPAD_BUTTON_DPAD_DOWN;
  static const dpadLeft = SDL_GAMEPAD_BUTTON_DPAD_LEFT;
  static const dpadRight = SDL_GAMEPAD_BUTTON_DPAD_RIGHT;
  static const misc1 = SDL_GAMEPAD_BUTTON_MISC1;
  static const rightPaddle1 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1;
  static const leftPaddle1 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE1;
  static const rightPaddle2 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2;
  static const leftPaddle2 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE2;
  static const touchpad = SDL_GAMEPAD_BUTTON_TOUCHPAD;
  static const misc2 = SDL_GAMEPAD_BUTTON_MISC2;
  static const misc3 = SDL_GAMEPAD_BUTTON_MISC3;
  static const misc4 = SDL_GAMEPAD_BUTTON_MISC4;
  static const misc5 = SDL_GAMEPAD_BUTTON_MISC5;
  static const misc6 = SDL_GAMEPAD_BUTTON_MISC6;
  static const count = SDL_GAMEPAD_BUTTON_COUNT;
}

class SdlkGamepadButtonLabel {
  static const unknown = SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN;
  static const a = SDL_GAMEPAD_BUTTON_LABEL_A;
  static const b = SDL_GAMEPAD_BUTTON_LABEL_B;
  static const x = SDL_GAMEPAD_BUTTON_LABEL_X;
  static const y = SDL_GAMEPAD_BUTTON_LABEL_Y;
  static const cross = SDL_GAMEPAD_BUTTON_LABEL_CROSS;
  static const circle = SDL_GAMEPAD_BUTTON_LABEL_CIRCLE;
  static const square = SDL_GAMEPAD_BUTTON_LABEL_SQUARE;
  static const triangle = SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE;
}

class SdlkGamepadAxis {
  static const invalid = SDL_GAMEPAD_AXIS_INVALID;
  static const leftx = SDL_GAMEPAD_AXIS_LEFTX;
  static const lefty = SDL_GAMEPAD_AXIS_LEFTY;
  static const rightx = SDL_GAMEPAD_AXIS_RIGHTX;
  static const righty = SDL_GAMEPAD_AXIS_RIGHTY;
  static const leftTrigger = SDL_GAMEPAD_AXIS_LEFT_TRIGGER;
  static const rightTrigger = SDL_GAMEPAD_AXIS_RIGHT_TRIGGER;
  static const count = SDL_GAMEPAD_AXIS_COUNT;
}

class SdlkGamepadBindtype {
  static const none = SDL_GAMEPAD_BINDTYPE_NONE;
  static const button = SDL_GAMEPAD_BINDTYPE_BUTTON;
  static const axis = SDL_GAMEPAD_BINDTYPE_AXIS;
  static const hat = SDL_GAMEPAD_BINDTYPE_HAT;
}

class SdlkGpuPrimitivetype {
  static const trianglelist = SDL_GPU_PRIMITIVETYPE_TRIANGLELIST;
  static const trianglestrip = SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP;
  static const linelist = SDL_GPU_PRIMITIVETYPE_LINELIST;
  static const linestrip = SDL_GPU_PRIMITIVETYPE_LINESTRIP;
  static const pointlist = SDL_GPU_PRIMITIVETYPE_POINTLIST;
}

class SdlkGpuLoadop {
  static const load = SDL_GPU_LOADOP_LOAD;
  static const clear = SDL_GPU_LOADOP_CLEAR;
  static const dontCare = SDL_GPU_LOADOP_DONT_CARE;
}

class SdlkGpuStoreop {
  static const store = SDL_GPU_STOREOP_STORE;
  static const dontCare = SDL_GPU_STOREOP_DONT_CARE;
  static const resolve = SDL_GPU_STOREOP_RESOLVE;
  static const resolveAndStore = SDL_GPU_STOREOP_RESOLVE_AND_STORE;
}

class SdlkGpuIndexelementsize {
  static const on16Bit = SDL_GPU_INDEXELEMENTSIZE_16BIT;
  static const on32Bit = SDL_GPU_INDEXELEMENTSIZE_32BIT;
}

class SdlkGpuTextureformat {
  static const invalid = SDL_GPU_TEXTUREFORMAT_INVALID;
  static const a8Unorm = SDL_GPU_TEXTUREFORMAT_A8_UNORM;
  static const r8Unorm = SDL_GPU_TEXTUREFORMAT_R8_UNORM;
  static const r8G8Unorm = SDL_GPU_TEXTUREFORMAT_R8G8_UNORM;
  static const r8G8B8A8Unorm = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM;
  static const r16Unorm = SDL_GPU_TEXTUREFORMAT_R16_UNORM;
  static const r16G16Unorm = SDL_GPU_TEXTUREFORMAT_R16G16_UNORM;
  static const r16G16B16A16Unorm = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM;
  static const r10G10B10A2Unorm = SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM;
  static const b5G6R5Unorm = SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM;
  static const b5G5R5A1Unorm = SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM;
  static const b4G4R4A4Unorm = SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM;
  static const b8G8R8A8Unorm = SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM;
  static const bc1RgbaUnorm = SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM;
  static const bc2RgbaUnorm = SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM;
  static const bc3RgbaUnorm = SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM;
  static const bc4RUnorm = SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM;
  static const bc5RgUnorm = SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM;
  static const bc7RgbaUnorm = SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM;
  static const bc6HRgbFloat = SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT;
  static const bc6HRgbUfloat = SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT;
  static const r8Snorm = SDL_GPU_TEXTUREFORMAT_R8_SNORM;
  static const r8G8Snorm = SDL_GPU_TEXTUREFORMAT_R8G8_SNORM;
  static const r8G8B8A8Snorm = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM;
  static const r16Snorm = SDL_GPU_TEXTUREFORMAT_R16_SNORM;
  static const r16G16Snorm = SDL_GPU_TEXTUREFORMAT_R16G16_SNORM;
  static const r16G16B16A16Snorm = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM;
  static const r16Float = SDL_GPU_TEXTUREFORMAT_R16_FLOAT;
  static const r16G16Float = SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT;
  static const r16G16B16A16Float = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT;
  static const r32Float = SDL_GPU_TEXTUREFORMAT_R32_FLOAT;
  static const r32G32Float = SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT;
  static const r32G32B32A32Float = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT;
  static const r11G11B10Ufloat = SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT;
  static const r8Uint = SDL_GPU_TEXTUREFORMAT_R8_UINT;
  static const r8G8Uint = SDL_GPU_TEXTUREFORMAT_R8G8_UINT;
  static const r8G8B8A8Uint = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT;
  static const r16Uint = SDL_GPU_TEXTUREFORMAT_R16_UINT;
  static const r16G16Uint = SDL_GPU_TEXTUREFORMAT_R16G16_UINT;
  static const r16G16B16A16Uint = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT;
  static const r32Uint = SDL_GPU_TEXTUREFORMAT_R32_UINT;
  static const r32G32Uint = SDL_GPU_TEXTUREFORMAT_R32G32_UINT;
  static const r32G32B32A32Uint = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT;
  static const r8Int = SDL_GPU_TEXTUREFORMAT_R8_INT;
  static const r8G8Int = SDL_GPU_TEXTUREFORMAT_R8G8_INT;
  static const r8G8B8A8Int = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT;
  static const r16Int = SDL_GPU_TEXTUREFORMAT_R16_INT;
  static const r16G16Int = SDL_GPU_TEXTUREFORMAT_R16G16_INT;
  static const r16G16B16A16Int = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT;
  static const r32Int = SDL_GPU_TEXTUREFORMAT_R32_INT;
  static const r32G32Int = SDL_GPU_TEXTUREFORMAT_R32G32_INT;
  static const r32G32B32A32Int = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT;
  static const r8G8B8A8UnormSrgb = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB;
  static const b8G8R8A8UnormSrgb = SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB;
  static const bc1RgbaUnormSrgb = SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB;
  static const bc2RgbaUnormSrgb = SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB;
  static const bc3RgbaUnormSrgb = SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB;
  static const bc7RgbaUnormSrgb = SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB;
  static const d16Unorm = SDL_GPU_TEXTUREFORMAT_D16_UNORM;
  static const d24Unorm = SDL_GPU_TEXTUREFORMAT_D24_UNORM;
  static const d32Float = SDL_GPU_TEXTUREFORMAT_D32_FLOAT;
  static const d24UnormS8Uint = SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT;
  static const d32FloatS8Uint = SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT;
  static const astc4x4Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM;
  static const astc5x4Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM;
  static const astc5x5Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM;
  static const astc6x5Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM;
  static const astc6x6Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM;
  static const astc8x5Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM;
  static const astc8x6Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM;
  static const astc8x8Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM;
  static const astc10x5Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM;
  static const astc10x6Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM;
  static const astc10x8Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM;
  static const astc10x10Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM;
  static const astc12x10Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM;
  static const astc12x12Unorm = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM;
  static const astc4x4UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB;
  static const astc5x4UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB;
  static const astc5x5UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB;
  static const astc6x5UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB;
  static const astc6x6UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB;
  static const astc8x5UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB;
  static const astc8x6UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB;
  static const astc8x8UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB;
  static const astc10x5UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB;
  static const astc10x6UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB;
  static const astc10x8UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB;
  static const astc10x10UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB;
  static const astc12x10UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB;
  static const astc12x12UnormSrgb = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB;
  static const astc4x4Float = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT;
  static const astc5x4Float = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT;
  static const astc5x5Float = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT;
  static const astc6x5Float = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT;
  static const astc6x6Float = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT;
  static const astc8x5Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT;
  static const astc8x6Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT;
  static const astc8x8Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT;
  static const astc10x5Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT;
  static const astc10x6Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT;
  static const astc10x8Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT;
  static const astc10x10Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT;
  static const astc12x10Float = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT;
  static const astc12x12Float = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT;
}

class SdlkGpuTextureusage {
  static const sampler = SDL_GPU_TEXTUREUSAGE_SAMPLER;
  static const colorTarget = SDL_GPU_TEXTUREUSAGE_COLOR_TARGET;
  static const depthStencilTarget = SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET;
  static const graphicsStorageRead = SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ;
  static const computeStorageRead = SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ;
  static const computeStorageWrite = SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE;
  static const computeStorageSimultaneousReadWrite =
      SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE;
}

class SdlkGpuTexturetype {
  static const on2D = SDL_GPU_TEXTURETYPE_2D;
  static const on2DArray = SDL_GPU_TEXTURETYPE_2D_ARRAY;
  static const on3D = SDL_GPU_TEXTURETYPE_3D;
  static const cube = SDL_GPU_TEXTURETYPE_CUBE;
  static const cubeArray = SDL_GPU_TEXTURETYPE_CUBE_ARRAY;
}

class SdlkGpuSamplecount {
  static const on1 = SDL_GPU_SAMPLECOUNT_1;
  static const on2 = SDL_GPU_SAMPLECOUNT_2;
  static const on4 = SDL_GPU_SAMPLECOUNT_4;
  static const on8 = SDL_GPU_SAMPLECOUNT_8;
}

class SdlkGpuCubemapface {
  static const positivex = SDL_GPU_CUBEMAPFACE_POSITIVEX;
  static const negativex = SDL_GPU_CUBEMAPFACE_NEGATIVEX;
  static const positivey = SDL_GPU_CUBEMAPFACE_POSITIVEY;
  static const negativey = SDL_GPU_CUBEMAPFACE_NEGATIVEY;
  static const positivez = SDL_GPU_CUBEMAPFACE_POSITIVEZ;
  static const negativez = SDL_GPU_CUBEMAPFACE_NEGATIVEZ;
}

class SdlkGpuBufferusage {
  static const vertex = SDL_GPU_BUFFERUSAGE_VERTEX;
  static const index = SDL_GPU_BUFFERUSAGE_INDEX;
  static const indirect = SDL_GPU_BUFFERUSAGE_INDIRECT;
  static const graphicsStorageRead = SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ;
  static const computeStorageRead = SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ;
  static const computeStorageWrite = SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE;
}

class SdlkGpuTransferbufferusage {
  static const upload = SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD;
  static const download = SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD;
}

class SdlkGpuShaderstage {
  static const vertex = SDL_GPU_SHADERSTAGE_VERTEX;
  static const fragment = SDL_GPU_SHADERSTAGE_FRAGMENT;
}

class SdlkGpuShaderformat {
  static const invalid = SDL_GPU_SHADERFORMAT_INVALID;
  static const private = SDL_GPU_SHADERFORMAT_PRIVATE;
  static const spirv = SDL_GPU_SHADERFORMAT_SPIRV;
  static const dxbc = SDL_GPU_SHADERFORMAT_DXBC;
  static const dxil = SDL_GPU_SHADERFORMAT_DXIL;
  static const msl = SDL_GPU_SHADERFORMAT_MSL;
  static const metallib = SDL_GPU_SHADERFORMAT_METALLIB;
}

class SdlkGpuVertexelementformat {
  static const invalid = SDL_GPU_VERTEXELEMENTFORMAT_INVALID;
  static const int = SDL_GPU_VERTEXELEMENTFORMAT_INT;
  static const int2 = SDL_GPU_VERTEXELEMENTFORMAT_INT2;
  static const int3 = SDL_GPU_VERTEXELEMENTFORMAT_INT3;
  static const int4 = SDL_GPU_VERTEXELEMENTFORMAT_INT4;
  static const uint = SDL_GPU_VERTEXELEMENTFORMAT_UINT;
  static const uint2 = SDL_GPU_VERTEXELEMENTFORMAT_UINT2;
  static const uint3 = SDL_GPU_VERTEXELEMENTFORMAT_UINT3;
  static const uint4 = SDL_GPU_VERTEXELEMENTFORMAT_UINT4;
  static const float = SDL_GPU_VERTEXELEMENTFORMAT_FLOAT;
  static const float2 = SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2;
  static const float3 = SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3;
  static const float4 = SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4;
  static const byte2 = SDL_GPU_VERTEXELEMENTFORMAT_BYTE2;
  static const byte4 = SDL_GPU_VERTEXELEMENTFORMAT_BYTE4;
  static const ubyte2 = SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2;
  static const ubyte4 = SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4;
  static const byte2Norm = SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM;
  static const byte4Norm = SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM;
  static const ubyte2Norm = SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM;
  static const ubyte4Norm = SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM;
  static const short2 = SDL_GPU_VERTEXELEMENTFORMAT_SHORT2;
  static const short4 = SDL_GPU_VERTEXELEMENTFORMAT_SHORT4;
  static const ushort2 = SDL_GPU_VERTEXELEMENTFORMAT_USHORT2;
  static const ushort4 = SDL_GPU_VERTEXELEMENTFORMAT_USHORT4;
  static const short2Norm = SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM;
  static const short4Norm = SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM;
  static const ushort2Norm = SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM;
  static const ushort4Norm = SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM;
  static const half2 = SDL_GPU_VERTEXELEMENTFORMAT_HALF2;
  static const half4 = SDL_GPU_VERTEXELEMENTFORMAT_HALF4;
}

class SdlkGpuVertexinputrate {
  static const vertex = SDL_GPU_VERTEXINPUTRATE_VERTEX;
  static const instance = SDL_GPU_VERTEXINPUTRATE_INSTANCE;
}

class SdlkGpuFillmode {
  static const fill = SDL_GPU_FILLMODE_FILL;
  static const line = SDL_GPU_FILLMODE_LINE;
}

class SdlkGpuCullmode {
  static const none = SDL_GPU_CULLMODE_NONE;
  static const front = SDL_GPU_CULLMODE_FRONT;
  static const back = SDL_GPU_CULLMODE_BACK;
}

class SdlkGpuFrontface {
  static const counterClockwise = SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE;
  static const clockwise = SDL_GPU_FRONTFACE_CLOCKWISE;
}

class SdlkGpuCompareop {
  static const invalid = SDL_GPU_COMPAREOP_INVALID;
  static const never = SDL_GPU_COMPAREOP_NEVER;
  static const less = SDL_GPU_COMPAREOP_LESS;
  static const equal = SDL_GPU_COMPAREOP_EQUAL;
  static const lessOrEqual = SDL_GPU_COMPAREOP_LESS_OR_EQUAL;
  static const greater = SDL_GPU_COMPAREOP_GREATER;
  static const notEqual = SDL_GPU_COMPAREOP_NOT_EQUAL;
  static const greaterOrEqual = SDL_GPU_COMPAREOP_GREATER_OR_EQUAL;
  static const always = SDL_GPU_COMPAREOP_ALWAYS;
}

class SdlkGpuStencilop {
  static const invalid = SDL_GPU_STENCILOP_INVALID;
  static const keep = SDL_GPU_STENCILOP_KEEP;
  static const zero = SDL_GPU_STENCILOP_ZERO;
  static const replace = SDL_GPU_STENCILOP_REPLACE;
  static const incrementAndClamp = SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP;
  static const decrementAndClamp = SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP;
  static const invert = SDL_GPU_STENCILOP_INVERT;
  static const incrementAndWrap = SDL_GPU_STENCILOP_INCREMENT_AND_WRAP;
  static const decrementAndWrap = SDL_GPU_STENCILOP_DECREMENT_AND_WRAP;
}

class SdlkGpuBlendop {
  static const invalid = SDL_GPU_BLENDOP_INVALID;
  static const add = SDL_GPU_BLENDOP_ADD;
  static const subtract = SDL_GPU_BLENDOP_SUBTRACT;
  static const reverseSubtract = SDL_GPU_BLENDOP_REVERSE_SUBTRACT;
  static const min = SDL_GPU_BLENDOP_MIN;
  static const max = SDL_GPU_BLENDOP_MAX;
}

class SdlkGpuBlendfactor {
  static const invalid = SDL_GPU_BLENDFACTOR_INVALID;
  static const zero = SDL_GPU_BLENDFACTOR_ZERO;
  static const one = SDL_GPU_BLENDFACTOR_ONE;
  static const srcColor = SDL_GPU_BLENDFACTOR_SRC_COLOR;
  static const oneMinusSrcColor = SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR;
  static const dstColor = SDL_GPU_BLENDFACTOR_DST_COLOR;
  static const oneMinusDstColor = SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR;
  static const srcAlpha = SDL_GPU_BLENDFACTOR_SRC_ALPHA;
  static const oneMinusSrcAlpha = SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
  static const dstAlpha = SDL_GPU_BLENDFACTOR_DST_ALPHA;
  static const oneMinusDstAlpha = SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA;
  static const constantColor = SDL_GPU_BLENDFACTOR_CONSTANT_COLOR;
  static const oneMinusConstantColor =
      SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR;
  static const srcAlphaSaturate = SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE;
}

class SdlkGpuColorcomponent {
  static const r = SDL_GPU_COLORCOMPONENT_R;
  static const g = SDL_GPU_COLORCOMPONENT_G;
  static const b = SDL_GPU_COLORCOMPONENT_B;
  static const a = SDL_GPU_COLORCOMPONENT_A;
}

class SdlkGpuFilter {
  static const nearest = SDL_GPU_FILTER_NEAREST;
  static const linear = SDL_GPU_FILTER_LINEAR;
}

class SdlkGpuSamplermipmapmode {
  static const nearest = SDL_GPU_SAMPLERMIPMAPMODE_NEAREST;
  static const linear = SDL_GPU_SAMPLERMIPMAPMODE_LINEAR;
}

class SdlkGpuSampleraddressmode {
  static const repeat = SDL_GPU_SAMPLERADDRESSMODE_REPEAT;
  static const mirroredRepeat = SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT;
  static const clampToEdge = SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE;
}

class SdlkGpuPresentmode {
  static const vsync = SDL_GPU_PRESENTMODE_VSYNC;
  static const immediate = SDL_GPU_PRESENTMODE_IMMEDIATE;
  static const mailbox = SDL_GPU_PRESENTMODE_MAILBOX;
}

class SdlkGpuSwapchaincomposition {
  static const sdr = SDL_GPU_SWAPCHAINCOMPOSITION_SDR;
  static const sdrLinear = SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR;
  static const hdrExtendedLinear =
      SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR;
  static const hdr10St2084 = SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084;
}

class SdlkPropGpu {
  static const deviceCreateDebugmodeBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN;
  static const deviceCreatePreferlowpowerBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN;
  static const deviceCreateVerboseBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_VERBOSE_BOOLEAN;
  static const deviceCreateNameString = SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING;
  static const deviceCreateShadersPrivateBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN;
  static const deviceCreateShadersSpirvBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN;
  static const deviceCreateShadersDxbcBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN;
  static const deviceCreateShadersDxilBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN;
  static const deviceCreateShadersMslBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN;
  static const deviceCreateShadersMetallibBoolean =
      SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN;
  static const deviceCreateD3D12SemanticNameString =
      SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING;
  static const deviceNameString = SDL_PROP_GPU_DEVICE_NAME_STRING;
  static const deviceDriverNameString = SDL_PROP_GPU_DEVICE_DRIVER_NAME_STRING;
  static const deviceDriverVersionString =
      SDL_PROP_GPU_DEVICE_DRIVER_VERSION_STRING;
  static const deviceDriverInfoString = SDL_PROP_GPU_DEVICE_DRIVER_INFO_STRING;
  static const computepipelineCreateNameString =
      SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING;
  static const graphicspipelineCreateNameString =
      SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING;
  static const samplerCreateNameString =
      SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING;
  static const shaderCreateNameString = SDL_PROP_GPU_SHADER_CREATE_NAME_STRING;
  static const textureCreateD3D12ClearRFloat =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT;
  static const textureCreateD3D12ClearGFloat =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT;
  static const textureCreateD3D12ClearBFloat =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT;
  static const textureCreateD3D12ClearAFloat =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT;
  static const textureCreateD3D12ClearDepthFloat =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT;
  static const textureCreateD3D12ClearStencilNumber =
      SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER;
  static const textureCreateNameString =
      SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING;
  static const bufferCreateNameString = SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING;
  static const transferbufferCreateNameString =
      SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING;
}

class SdlkHaptic {
  static const infinity = SDL_HAPTIC_INFINITY;
  static const constant = SDL_HAPTIC_CONSTANT;
  static const sine = SDL_HAPTIC_SINE;
  static const square = SDL_HAPTIC_SQUARE;
  static const triangle = SDL_HAPTIC_TRIANGLE;
  static const sawtoothup = SDL_HAPTIC_SAWTOOTHUP;
  static const sawtoothdown = SDL_HAPTIC_SAWTOOTHDOWN;
  static const ramp = SDL_HAPTIC_RAMP;
  static const spring = SDL_HAPTIC_SPRING;
  static const damper = SDL_HAPTIC_DAMPER;
  static const inertia = SDL_HAPTIC_INERTIA;
  static const friction = SDL_HAPTIC_FRICTION;
  static const leftright = SDL_HAPTIC_LEFTRIGHT;
  static const reserved1 = SDL_HAPTIC_RESERVED1;
  static const reserved2 = SDL_HAPTIC_RESERVED2;
  static const reserved3 = SDL_HAPTIC_RESERVED3;
  static const custom = SDL_HAPTIC_CUSTOM;
  static const gain = SDL_HAPTIC_GAIN;
  static const autocenter = SDL_HAPTIC_AUTOCENTER;
  static const status = SDL_HAPTIC_STATUS;
  static const pause = SDL_HAPTIC_PAUSE;
  static const polar = SDL_HAPTIC_POLAR;
  static const cartesian = SDL_HAPTIC_CARTESIAN;
  static const spherical = SDL_HAPTIC_SPHERICAL;
  static const steeringAxis = SDL_HAPTIC_STEERING_AXIS;
}

class SdlkHidApiBus {
  static const unknown = SDL_HID_API_BUS_UNKNOWN;
  static const usb = SDL_HID_API_BUS_USB;
  static const bluetooth = SDL_HID_API_BUS_BLUETOOTH;
  static const i2C = SDL_HID_API_BUS_I2C;
  static const spi = SDL_HID_API_BUS_SPI;
}

class SdlkHint {
  static const allowAltTabWhileGrabbed = SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED;
  static const androidAllowRecreateActivity =
      SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY;
  static const androidBlockOnPause = SDL_HINT_ANDROID_BLOCK_ON_PAUSE;
  static const androidLowLatencyAudio = SDL_HINT_ANDROID_LOW_LATENCY_AUDIO;
  static const androidTrapBackButton = SDL_HINT_ANDROID_TRAP_BACK_BUTTON;
  static const appId = SDL_HINT_APP_ID;
  static const appName = SDL_HINT_APP_NAME;
  static const appleTvControllerUiEvents =
      SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS;
  static const appleTvRemoteAllowRotation =
      SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION;
  static const audioAlsaDefaultDevice = SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE;
  static const audioAlsaDefaultPlaybackDevice =
      SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE;
  static const audioAlsaDefaultRecordingDevice =
      SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE;
  static const audioCategory = SDL_HINT_AUDIO_CATEGORY;
  static const audioChannels = SDL_HINT_AUDIO_CHANNELS;
  static const audioDeviceAppIconName = SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME;
  static const audioDeviceSampleFrames = SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES;
  static const audioDeviceStreamName = SDL_HINT_AUDIO_DEVICE_STREAM_NAME;
  static const audioDeviceStreamRole = SDL_HINT_AUDIO_DEVICE_STREAM_ROLE;
  static const audioDiskInputFile = SDL_HINT_AUDIO_DISK_INPUT_FILE;
  static const audioDiskOutputFile = SDL_HINT_AUDIO_DISK_OUTPUT_FILE;
  static const audioDiskTimescale = SDL_HINT_AUDIO_DISK_TIMESCALE;
  static const audioDriver = SDL_HINT_AUDIO_DRIVER;
  static const audioDummyTimescale = SDL_HINT_AUDIO_DUMMY_TIMESCALE;
  static const audioFormat = SDL_HINT_AUDIO_FORMAT;
  static const audioFrequency = SDL_HINT_AUDIO_FREQUENCY;
  static const audioIncludeMonitors = SDL_HINT_AUDIO_INCLUDE_MONITORS;
  static const autoUpdateJoysticks = SDL_HINT_AUTO_UPDATE_JOYSTICKS;
  static const autoUpdateSensors = SDL_HINT_AUTO_UPDATE_SENSORS;
  static const bmpSaveLegacyFormat = SDL_HINT_BMP_SAVE_LEGACY_FORMAT;
  static const cameraDriver = SDL_HINT_CAMERA_DRIVER;
  static const cpuFeatureMask = SDL_HINT_CPU_FEATURE_MASK;
  static const joystickDirectinput = SDL_HINT_JOYSTICK_DIRECTINPUT;
  static const fileDialogDriver = SDL_HINT_FILE_DIALOG_DRIVER;
  static const displayUsableBounds = SDL_HINT_DISPLAY_USABLE_BOUNDS;
  static const emscriptenAsyncify = SDL_HINT_EMSCRIPTEN_ASYNCIFY;
  static const emscriptenCanvasSelector = SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR;
  static const emscriptenKeyboardElement = SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT;
  static const enableScreenKeyboard = SDL_HINT_ENABLE_SCREEN_KEYBOARD;
  static const evdevDevices = SDL_HINT_EVDEV_DEVICES;
  static const eventLogging = SDL_HINT_EVENT_LOGGING;
  static const forceRaisewindow = SDL_HINT_FORCE_RAISEWINDOW;
  static const framebufferAcceleration = SDL_HINT_FRAMEBUFFER_ACCELERATION;
  static const gamecontrollerconfig = SDL_HINT_GAMECONTROLLERCONFIG;
  static const gamecontrollerconfigFile = SDL_HINT_GAMECONTROLLERCONFIG_FILE;
  static const gamecontrollertype = SDL_HINT_GAMECONTROLLERTYPE;
  static const gamecontrollerIgnoreDevices =
      SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES;
  static const gamecontrollerIgnoreDevicesExcept =
      SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT;
  static const gamecontrollerSensorFusion =
      SDL_HINT_GAMECONTROLLER_SENSOR_FUSION;
  static const gdkTextinputDefaultText = SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT;
  static const gdkTextinputDescription = SDL_HINT_GDK_TEXTINPUT_DESCRIPTION;
  static const gdkTextinputMaxLength = SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH;
  static const gdkTextinputScope = SDL_HINT_GDK_TEXTINPUT_SCOPE;
  static const gdkTextinputTitle = SDL_HINT_GDK_TEXTINPUT_TITLE;
  static const hidapiLibusb = SDL_HINT_HIDAPI_LIBUSB;
  static const hidapiLibusbWhitelist = SDL_HINT_HIDAPI_LIBUSB_WHITELIST;
  static const hidapiUdev = SDL_HINT_HIDAPI_UDEV;
  static const gpuDriver = SDL_HINT_GPU_DRIVER;
  static const hidapiEnumerateOnlyControllers =
      SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS;
  static const hidapiIgnoreDevices = SDL_HINT_HIDAPI_IGNORE_DEVICES;
  static const imeImplementedUi = SDL_HINT_IME_IMPLEMENTED_UI;
  static const iosHideHomeIndicator = SDL_HINT_IOS_HIDE_HOME_INDICATOR;
  static const joystickAllowBackgroundEvents =
      SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS;
  static const joystickArcadestickDevices =
      SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES;
  static const joystickArcadestickDevicesExcluded =
      SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED;
  static const joystickBlacklistDevices = SDL_HINT_JOYSTICK_BLACKLIST_DEVICES;
  static const joystickBlacklistDevicesExcluded =
      SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED;
  static const joystickDevice = SDL_HINT_JOYSTICK_DEVICE;
  static const joystickEnhancedReports = SDL_HINT_JOYSTICK_ENHANCED_REPORTS;
  static const joystickFlightstickDevices =
      SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES;
  static const joystickFlightstickDevicesExcluded =
      SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED;
  static const joystickGameinput = SDL_HINT_JOYSTICK_GAMEINPUT;
  static const joystickGamecubeDevices = SDL_HINT_JOYSTICK_GAMECUBE_DEVICES;
  static const joystickGamecubeDevicesExcluded =
      SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED;
  static const joystickHidapi = SDL_HINT_JOYSTICK_HIDAPI;
  static const joystickHidapiCombineJoyCons =
      SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS;
  static const joystickHidapiGamecube = SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE;
  static const joystickHidapiGamecubeRumbleBrake =
      SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE;
  static const joystickHidapiJoyCons = SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS;
  static const joystickHidapiJoyconHomeLed =
      SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED;
  static const joystickHidapiLuna = SDL_HINT_JOYSTICK_HIDAPI_LUNA;
  static const joystickHidapiNintendoClassic =
      SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC;
  static const joystickHidapiPs3 = SDL_HINT_JOYSTICK_HIDAPI_PS3;
  static const joystickHidapiPs3SixaxisDriver =
      SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER;
  static const joystickHidapiPs4 = SDL_HINT_JOYSTICK_HIDAPI_PS4;
  static const joystickHidapiPs4ReportInterval =
      SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL;
  static const joystickHidapiPs5 = SDL_HINT_JOYSTICK_HIDAPI_PS5;
  static const joystickHidapiPs5PlayerLed =
      SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED;
  static const joystickHidapiShield = SDL_HINT_JOYSTICK_HIDAPI_SHIELD;
  static const joystickHidapiStadia = SDL_HINT_JOYSTICK_HIDAPI_STADIA;
  static const joystickHidapiSteam = SDL_HINT_JOYSTICK_HIDAPI_STEAM;
  static const joystickHidapiSteamHomeLed =
      SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED;
  static const joystickHidapiSteamdeck = SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK;
  static const joystickHidapiSteamHori = SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI;
  static const joystickHidapiLg4Ff = SDL_HINT_JOYSTICK_HIDAPI_LG4FF;
  static const joystickHidapi8Bitdo = SDL_HINT_JOYSTICK_HIDAPI_8BITDO;
  static const joystickHidapiSwitch = SDL_HINT_JOYSTICK_HIDAPI_SWITCH;
  static const joystickHidapiSwitchHomeLed =
      SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED;
  static const joystickHidapiSwitchPlayerLed =
      SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED;
  static const joystickHidapiVerticalJoyCons =
      SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS;
  static const joystickHidapiWii = SDL_HINT_JOYSTICK_HIDAPI_WII;
  static const joystickHidapiWiiPlayerLed =
      SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED;
  static const joystickHidapiXbox = SDL_HINT_JOYSTICK_HIDAPI_XBOX;
  static const joystickHidapiXbox360 = SDL_HINT_JOYSTICK_HIDAPI_XBOX_360;
  static const joystickHidapiXbox360PlayerLed =
      SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED;
  static const joystickHidapiXbox360Wireless =
      SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS;
  static const joystickHidapiXboxOne = SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE;
  static const joystickHidapiXboxOneHomeLed =
      SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED;
  static const joystickHidapiGip = SDL_HINT_JOYSTICK_HIDAPI_GIP;
  static const joystickHidapiGipResetForMetadata =
      SDL_HINT_JOYSTICK_HIDAPI_GIP_RESET_FOR_METADATA;
  static const joystickIokit = SDL_HINT_JOYSTICK_IOKIT;
  static const joystickLinuxClassic = SDL_HINT_JOYSTICK_LINUX_CLASSIC;
  static const joystickLinuxDeadzones = SDL_HINT_JOYSTICK_LINUX_DEADZONES;
  static const joystickLinuxDigitalHats = SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS;
  static const joystickLinuxHatDeadzones =
      SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES;
  static const joystickMfi = SDL_HINT_JOYSTICK_MFI;
  static const joystickRawinput = SDL_HINT_JOYSTICK_RAWINPUT;
  static const joystickRawinputCorrelateXinput =
      SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT;
  static const joystickRogChakram = SDL_HINT_JOYSTICK_ROG_CHAKRAM;
  static const joystickThread = SDL_HINT_JOYSTICK_THREAD;
  static const joystickThrottleDevices = SDL_HINT_JOYSTICK_THROTTLE_DEVICES;
  static const joystickThrottleDevicesExcluded =
      SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED;
  static const joystickWgi = SDL_HINT_JOYSTICK_WGI;
  static const joystickWheelDevices = SDL_HINT_JOYSTICK_WHEEL_DEVICES;
  static const joystickWheelDevicesExcluded =
      SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED;
  static const joystickZeroCenteredDevices =
      SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES;
  static const joystickHapticAxes = SDL_HINT_JOYSTICK_HAPTIC_AXES;
  static const keycodeOptions = SDL_HINT_KEYCODE_OPTIONS;
  static const kmsdrmDeviceIndex = SDL_HINT_KMSDRM_DEVICE_INDEX;
  static const kmsdrmRequireDrmMaster = SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER;
  static const logging = SDL_HINT_LOGGING;
  static const macBackgroundApp = SDL_HINT_MAC_BACKGROUND_APP;
  static const macCtrlClickEmulateRightClick =
      SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK;
  static const macOpenglAsyncDispatch = SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH;
  static const macOptionAsAlt = SDL_HINT_MAC_OPTION_AS_ALT;
  static const macScrollMomentum = SDL_HINT_MAC_SCROLL_MOMENTUM;
  static const mainCallbackRate = SDL_HINT_MAIN_CALLBACK_RATE;
  static const mouseAutoCapture = SDL_HINT_MOUSE_AUTO_CAPTURE;
  static const mouseDoubleClickRadius = SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS;
  static const mouseDoubleClickTime = SDL_HINT_MOUSE_DOUBLE_CLICK_TIME;
  static const mouseDefaultSystemCursor = SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR;
  static const mouseEmulateWarpWithRelative =
      SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE;
  static const mouseFocusClickthrough = SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH;
  static const mouseNormalSpeedScale = SDL_HINT_MOUSE_NORMAL_SPEED_SCALE;
  static const mouseRelativeModeCenter = SDL_HINT_MOUSE_RELATIVE_MODE_CENTER;
  static const mouseRelativeSpeedScale = SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE;
  static const mouseRelativeSystemScale = SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE;
  static const mouseRelativeWarpMotion = SDL_HINT_MOUSE_RELATIVE_WARP_MOTION;
  static const mouseRelativeCursorVisible =
      SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE;
  static const mouseTouchEvents = SDL_HINT_MOUSE_TOUCH_EVENTS;
  static const muteConsoleKeyboard = SDL_HINT_MUTE_CONSOLE_KEYBOARD;
  static const noSignalHandlers = SDL_HINT_NO_SIGNAL_HANDLERS;
  static const openglLibrary = SDL_HINT_OPENGL_LIBRARY;
  static const eglLibrary = SDL_HINT_EGL_LIBRARY;
  static const openglEsDriver = SDL_HINT_OPENGL_ES_DRIVER;
  static const openvrLibrary = SDL_HINT_OPENVR_LIBRARY;
  static const orientations = SDL_HINT_ORIENTATIONS;
  static const pollSentinel = SDL_HINT_POLL_SENTINEL;
  static const preferredLocales = SDL_HINT_PREFERRED_LOCALES;
  static const quitOnLastWindowClose = SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE;
  static const renderDirect3DThreadsafe = SDL_HINT_RENDER_DIRECT3D_THREADSAFE;
  static const renderDirect3D11Debug = SDL_HINT_RENDER_DIRECT3D11_DEBUG;
  static const renderVulkanDebug = SDL_HINT_RENDER_VULKAN_DEBUG;
  static const renderGpuDebug = SDL_HINT_RENDER_GPU_DEBUG;
  static const renderGpuLowPower = SDL_HINT_RENDER_GPU_LOW_POWER;
  static const renderDriver = SDL_HINT_RENDER_DRIVER;
  static const renderLineMethod = SDL_HINT_RENDER_LINE_METHOD;
  static const renderMetalPreferLowPowerDevice =
      SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE;
  static const renderVsync = SDL_HINT_RENDER_VSYNC;
  static const returnKeyHidesIme = SDL_HINT_RETURN_KEY_HIDES_IME;
  static const rogGamepadMice = SDL_HINT_ROG_GAMEPAD_MICE;
  static const rogGamepadMiceExcluded = SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED;
  static const rpiVideoLayer = SDL_HINT_RPI_VIDEO_LAYER;
  static const screensaverInhibitActivityName =
      SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME;
  static const shutdownDbusOnQuit = SDL_HINT_SHUTDOWN_DBUS_ON_QUIT;
  static const storageTitleDriver = SDL_HINT_STORAGE_TITLE_DRIVER;
  static const storageUserDriver = SDL_HINT_STORAGE_USER_DRIVER;
  static const threadForceRealtimeTimeCritical =
      SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL;
  static const threadPriorityPolicy = SDL_HINT_THREAD_PRIORITY_POLICY;
  static const timerResolution = SDL_HINT_TIMER_RESOLUTION;
  static const touchMouseEvents = SDL_HINT_TOUCH_MOUSE_EVENTS;
  static const trackpadIsTouchOnly = SDL_HINT_TRACKPAD_IS_TOUCH_ONLY;
  static const tvRemoteAsJoystick = SDL_HINT_TV_REMOTE_AS_JOYSTICK;
  static const videoAllowScreensaver = SDL_HINT_VIDEO_ALLOW_SCREENSAVER;
  static const videoDisplayPriority = SDL_HINT_VIDEO_DISPLAY_PRIORITY;
  static const videoDoubleBuffer = SDL_HINT_VIDEO_DOUBLE_BUFFER;
  static const videoDriver = SDL_HINT_VIDEO_DRIVER;
  static const videoDummySaveFrames = SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES;
  static const videoEglAllowGetdisplayFallback =
      SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK;
  static const videoForceEgl = SDL_HINT_VIDEO_FORCE_EGL;
  static const videoMacFullscreenSpaces = SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES;
  static const videoMacFullscreenMenuVisibility =
      SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY;
  static const videoMatchExclusiveModeOnMove =
      SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE;
  static const videoMinimizeOnFocusLoss = SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS;
  static const videoOffscreenSaveFrames = SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES;
  static const videoSyncWindowOperations =
      SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS;
  static const videoWaylandAllowLibdecor =
      SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR;
  static const videoWaylandModeEmulation =
      SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION;
  static const videoWaylandModeScaling = SDL_HINT_VIDEO_WAYLAND_MODE_SCALING;
  static const videoWaylandPreferLibdecor =
      SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR;
  static const videoWaylandScaleToDisplay =
      SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY;
  static const videoWinD3Dcompiler = SDL_HINT_VIDEO_WIN_D3DCOMPILER;
  static const videoX11ExternalWindowInput =
      SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT;
  static const videoX11NetWmBypassCompositor =
      SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR;
  static const videoX11NetWmPing = SDL_HINT_VIDEO_X11_NET_WM_PING;
  static const videoX11Nodirectcolor = SDL_HINT_VIDEO_X11_NODIRECTCOLOR;
  static const videoX11ScalingFactor = SDL_HINT_VIDEO_X11_SCALING_FACTOR;
  static const videoX11Visualid = SDL_HINT_VIDEO_X11_VISUALID;
  static const videoX11WindowVisualid = SDL_HINT_VIDEO_X11_WINDOW_VISUALID;
  static const videoX11Xrandr = SDL_HINT_VIDEO_X11_XRANDR;
  static const vitaEnableBackTouch = SDL_HINT_VITA_ENABLE_BACK_TOUCH;
  static const vitaEnableFrontTouch = SDL_HINT_VITA_ENABLE_FRONT_TOUCH;
  static const vitaModulePath = SDL_HINT_VITA_MODULE_PATH;
  static const vitaPvrInit = SDL_HINT_VITA_PVR_INIT;
  static const vitaResolution = SDL_HINT_VITA_RESOLUTION;
  static const vitaPvrOpengl = SDL_HINT_VITA_PVR_OPENGL;
  static const vitaTouchMouseDevice = SDL_HINT_VITA_TOUCH_MOUSE_DEVICE;
  static const vulkanDisplay = SDL_HINT_VULKAN_DISPLAY;
  static const vulkanLibrary = SDL_HINT_VULKAN_LIBRARY;
  static const waveFactChunk = SDL_HINT_WAVE_FACT_CHUNK;
  static const waveChunkLimit = SDL_HINT_WAVE_CHUNK_LIMIT;
  static const waveRiffChunkSize = SDL_HINT_WAVE_RIFF_CHUNK_SIZE;
  static const waveTruncation = SDL_HINT_WAVE_TRUNCATION;
  static const windowActivateWhenRaised = SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED;
  static const windowActivateWhenShown = SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN;
  static const windowAllowTopmost = SDL_HINT_WINDOW_ALLOW_TOPMOST;
  static const windowFrameUsableWhileCursorHidden =
      SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN;
  static const windowsCloseOnAltF4 = SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4;
  static const windowsEnableMenuMnemonics =
      SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS;
  static const windowsEnableMessageloop = SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP;
  static const windowsGameinput = SDL_HINT_WINDOWS_GAMEINPUT;
  static const windowsRawKeyboard = SDL_HINT_WINDOWS_RAW_KEYBOARD;
  static const windowsForceSemaphoreKernel =
      SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL;
  static const windowsIntresourceIcon = SDL_HINT_WINDOWS_INTRESOURCE_ICON;
  static const windowsIntresourceIconSmall =
      SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL;
  static const windowsUseD3D9Ex = SDL_HINT_WINDOWS_USE_D3D9EX;
  static const windowsEraseBackgroundMode =
      SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE;
  static const x11ForceOverrideRedirect = SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT;
  static const x11WindowType = SDL_HINT_X11_WINDOW_TYPE;
  static const x11XcbLibrary = SDL_HINT_X11_XCB_LIBRARY;
  static const xinputEnabled = SDL_HINT_XINPUT_ENABLED;
  static const onAssert = SDL_HINT_ASSERT;
  static const penMouseEvents = SDL_HINT_PEN_MOUSE_EVENTS;
  static const penTouchEvents = SDL_HINT_PEN_TOUCH_EVENTS;
  static const onDefault = SDL_HINT_DEFAULT;
  static const normal = SDL_HINT_NORMAL;
  static const override = SDL_HINT_OVERRIDE;
}

class SdlkInit {
  static const audio = SDL_INIT_AUDIO;
  static const video = SDL_INIT_VIDEO;
  static const joystick = SDL_INIT_JOYSTICK;
  static const haptic = SDL_INIT_HAPTIC;
  static const gamepad = SDL_INIT_GAMEPAD;
  static const events = SDL_INIT_EVENTS;
  static const sensor = SDL_INIT_SENSOR;
  static const camera = SDL_INIT_CAMERA;
}

class SdlkApp {
  static const onContinue = SDL_APP_CONTINUE;
  static const success = SDL_APP_SUCCESS;
  static const failure = SDL_APP_FAILURE;
}

class SdlkPropAppMetadata {
  static const nameString = SDL_PROP_APP_METADATA_NAME_STRING;
  static const versionString = SDL_PROP_APP_METADATA_VERSION_STRING;
  static const identifierString = SDL_PROP_APP_METADATA_IDENTIFIER_STRING;
  static const creatorString = SDL_PROP_APP_METADATA_CREATOR_STRING;
  static const copyrightString = SDL_PROP_APP_METADATA_COPYRIGHT_STRING;
  static const urlString = SDL_PROP_APP_METADATA_URL_STRING;
  static const typeString = SDL_PROP_APP_METADATA_TYPE_STRING;
}

class SdlkIoStatus {
  static const ready = SDL_IO_STATUS_READY;
  static const error = SDL_IO_STATUS_ERROR;
  static const eof = SDL_IO_STATUS_EOF;
  static const notReady = SDL_IO_STATUS_NOT_READY;
  static const readonly = SDL_IO_STATUS_READONLY;
  static const writeonly = SDL_IO_STATUS_WRITEONLY;
}

class SdlkIoSeek {
  static const set = SDL_IO_SEEK_SET;
  static const cur = SDL_IO_SEEK_CUR;
  static const end = SDL_IO_SEEK_END;
}

class SdlkPropIostream {
  static const windowsHandlePointer = SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER;
  static const stdioFilePointer = SDL_PROP_IOSTREAM_STDIO_FILE_POINTER;
  static const fileDescriptorNumber = SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER;
  static const androidAassetPointer = SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER;
  static const memoryPointer = SDL_PROP_IOSTREAM_MEMORY_POINTER;
  static const memorySizeNumber = SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER;
  static const dynamicMemoryPointer = SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER;
  static const dynamicChunksizeNumber =
      SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER;
}

class SdlkJoystickType {
  static const unknown = SDL_JOYSTICK_TYPE_UNKNOWN;
  static const gamepad = SDL_JOYSTICK_TYPE_GAMEPAD;
  static const wheel = SDL_JOYSTICK_TYPE_WHEEL;
  static const arcadeStick = SDL_JOYSTICK_TYPE_ARCADE_STICK;
  static const flightStick = SDL_JOYSTICK_TYPE_FLIGHT_STICK;
  static const dancePad = SDL_JOYSTICK_TYPE_DANCE_PAD;
  static const guitar = SDL_JOYSTICK_TYPE_GUITAR;
  static const drumKit = SDL_JOYSTICK_TYPE_DRUM_KIT;
  static const arcadePad = SDL_JOYSTICK_TYPE_ARCADE_PAD;
  static const throttle = SDL_JOYSTICK_TYPE_THROTTLE;
  static const count = SDL_JOYSTICK_TYPE_COUNT;
}

class SdlkJoystickConnection {
  static const invalid = SDL_JOYSTICK_CONNECTION_INVALID;
  static const unknown = SDL_JOYSTICK_CONNECTION_UNKNOWN;
  static const wired = SDL_JOYSTICK_CONNECTION_WIRED;
  static const wireless = SDL_JOYSTICK_CONNECTION_WIRELESS;
}

class SdlkJoystickAxis {
  static const max = SDL_JOYSTICK_AXIS_MAX;
  static const min = SDL_JOYSTICK_AXIS_MIN;
}

class SdlkPropJoystickCap {
  static const monoLedBoolean = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN;
  static const rgbLedBoolean = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN;
  static const playerLedBoolean = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN;
  static const rumbleBoolean = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN;
  static const triggerRumbleBoolean =
      SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN;
}

class SdlkHat {
  static const centered = SDL_HAT_CENTERED;
  static const up = SDL_HAT_UP;
  static const right = SDL_HAT_RIGHT;
  static const down = SDL_HAT_DOWN;
  static const left = SDL_HAT_LEFT;
  static const rightup = SDL_HAT_RIGHTUP;
  static const rightdown = SDL_HAT_RIGHTDOWN;
  static const leftup = SDL_HAT_LEFTUP;
  static const leftdown = SDL_HAT_LEFTDOWN;
}

class SdlkTextinputType {
  static const text = SDL_TEXTINPUT_TYPE_TEXT;
  static const textName = SDL_TEXTINPUT_TYPE_TEXT_NAME;
  static const textEmail = SDL_TEXTINPUT_TYPE_TEXT_EMAIL;
  static const textUsername = SDL_TEXTINPUT_TYPE_TEXT_USERNAME;
  static const textPasswordHidden = SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN;
  static const textPasswordVisible = SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE;
  static const number = SDL_TEXTINPUT_TYPE_NUMBER;
  static const numberPasswordHidden = SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN;
  static const numberPasswordVisible =
      SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE;
}

class SdlkCapitalize {
  static const none = SDL_CAPITALIZE_NONE;
  static const sentences = SDL_CAPITALIZE_SENTENCES;
  static const words = SDL_CAPITALIZE_WORDS;
  static const letters = SDL_CAPITALIZE_LETTERS;
}

class SdlkPropTextinput {
  static const typeNumber = SDL_PROP_TEXTINPUT_TYPE_NUMBER;
  static const capitalizationNumber = SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER;
  static const autocorrectBoolean = SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN;
  static const multilineBoolean = SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN;
  static const androidInputtypeNumber =
      SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER;
}

class Sdlk {
  static const extendedMask = SDLK_EXTENDED_MASK;
  static const unknown = SDLK_UNKNOWN;
  static const onReturn = SDLK_RETURN;
  static const escape = SDLK_ESCAPE;
  static const backspace = SDLK_BACKSPACE;
  static const tab = SDLK_TAB;
  static const space = SDLK_SPACE;
  static const exclaim = SDLK_EXCLAIM;
  static const dblapostrophe = SDLK_DBLAPOSTROPHE;
  static const hash = SDLK_HASH;
  static const dollar = SDLK_DOLLAR;
  static const percent = SDLK_PERCENT;
  static const ampersand = SDLK_AMPERSAND;
  static const apostrophe = SDLK_APOSTROPHE;
  static const leftparen = SDLK_LEFTPAREN;
  static const rightparen = SDLK_RIGHTPAREN;
  static const asterisk = SDLK_ASTERISK;
  static const plus = SDLK_PLUS;
  static const comma = SDLK_COMMA;
  static const minus = SDLK_MINUS;
  static const period = SDLK_PERIOD;
  static const slash = SDLK_SLASH;
  static const on0 = SDLK_0;
  static const on1 = SDLK_1;
  static const on2 = SDLK_2;
  static const on3 = SDLK_3;
  static const on4 = SDLK_4;
  static const on5 = SDLK_5;
  static const on6 = SDLK_6;
  static const on7 = SDLK_7;
  static const on8 = SDLK_8;
  static const on9 = SDLK_9;
  static const colon = SDLK_COLON;
  static const semicolon = SDLK_SEMICOLON;
  static const less = SDLK_LESS;
  static const equals = SDLK_EQUALS;
  static const greater = SDLK_GREATER;
  static const question = SDLK_QUESTION;
  static const at = SDLK_AT;
  static const leftbracket = SDLK_LEFTBRACKET;
  static const backslash = SDLK_BACKSLASH;
  static const rightbracket = SDLK_RIGHTBRACKET;
  static const caret = SDLK_CARET;
  static const underscore = SDLK_UNDERSCORE;
  static const grave = SDLK_GRAVE;
  static const a = SDLK_A;
  static const b = SDLK_B;
  static const c = SDLK_C;
  static const d = SDLK_D;
  static const e = SDLK_E;
  static const f = SDLK_F;
  static const g = SDLK_G;
  static const h = SDLK_H;
  static const i = SDLK_I;
  static const j = SDLK_J;
  static const k = SDLK_K;
  static const l = SDLK_L;
  static const m = SDLK_M;
  static const n = SDLK_N;
  static const o = SDLK_O;
  static const p = SDLK_P;
  static const q = SDLK_Q;
  static const r = SDLK_R;
  static const s = SDLK_S;
  static const t = SDLK_T;
  static const u = SDLK_U;
  static const v = SDLK_V;
  static const w = SDLK_W;
  static const x = SDLK_X;
  static const y = SDLK_Y;
  static const z = SDLK_Z;
  static const leftbrace = SDLK_LEFTBRACE;
  static const pipe = SDLK_PIPE;
  static const rightbrace = SDLK_RIGHTBRACE;
  static const tilde = SDLK_TILDE;
  static const delete = SDLK_DELETE;
  static const plusminus = SDLK_PLUSMINUS;
  static const capslock = SDLK_CAPSLOCK;
  static const f1 = SDLK_F1;
  static const f2 = SDLK_F2;
  static const f3 = SDLK_F3;
  static const f4 = SDLK_F4;
  static const f5 = SDLK_F5;
  static const f6 = SDLK_F6;
  static const f7 = SDLK_F7;
  static const f8 = SDLK_F8;
  static const f9 = SDLK_F9;
  static const f10 = SDLK_F10;
  static const f11 = SDLK_F11;
  static const f12 = SDLK_F12;
  static const printscreen = SDLK_PRINTSCREEN;
  static const scrolllock = SDLK_SCROLLLOCK;
  static const pause = SDLK_PAUSE;
  static const insert = SDLK_INSERT;
  static const home = SDLK_HOME;
  static const pageup = SDLK_PAGEUP;
  static const end = SDLK_END;
  static const pagedown = SDLK_PAGEDOWN;
  static const right = SDLK_RIGHT;
  static const left = SDLK_LEFT;
  static const down = SDLK_DOWN;
  static const up = SDLK_UP;
  static const numlockclear = SDLK_NUMLOCKCLEAR;
  static const kpDivide = SDLK_KP_DIVIDE;
  static const kpMultiply = SDLK_KP_MULTIPLY;
  static const kpMinus = SDLK_KP_MINUS;
  static const kpPlus = SDLK_KP_PLUS;
  static const kpEnter = SDLK_KP_ENTER;
  static const kp1 = SDLK_KP_1;
  static const kp2 = SDLK_KP_2;
  static const kp3 = SDLK_KP_3;
  static const kp4 = SDLK_KP_4;
  static const kp5 = SDLK_KP_5;
  static const kp6 = SDLK_KP_6;
  static const kp7 = SDLK_KP_7;
  static const kp8 = SDLK_KP_8;
  static const kp9 = SDLK_KP_9;
  static const kp0 = SDLK_KP_0;
  static const kpPeriod = SDLK_KP_PERIOD;
  static const application = SDLK_APPLICATION;
  static const power = SDLK_POWER;
  static const kpEquals = SDLK_KP_EQUALS;
  static const f13 = SDLK_F13;
  static const f14 = SDLK_F14;
  static const f15 = SDLK_F15;
  static const f16 = SDLK_F16;
  static const f17 = SDLK_F17;
  static const f18 = SDLK_F18;
  static const f19 = SDLK_F19;
  static const f20 = SDLK_F20;
  static const f21 = SDLK_F21;
  static const f22 = SDLK_F22;
  static const f23 = SDLK_F23;
  static const f24 = SDLK_F24;
  static const execute = SDLK_EXECUTE;
  static const help = SDLK_HELP;
  static const menu = SDLK_MENU;
  static const select = SDLK_SELECT;
  static const stop = SDLK_STOP;
  static const again = SDLK_AGAIN;
  static const undo = SDLK_UNDO;
  static const cut = SDLK_CUT;
  static const copy = SDLK_COPY;
  static const paste = SDLK_PASTE;
  static const find = SDLK_FIND;
  static const mute = SDLK_MUTE;
  static const volumeup = SDLK_VOLUMEUP;
  static const volumedown = SDLK_VOLUMEDOWN;
  static const kpComma = SDLK_KP_COMMA;
  static const kpEqualsas400 = SDLK_KP_EQUALSAS400;
  static const alterase = SDLK_ALTERASE;
  static const sysreq = SDLK_SYSREQ;
  static const cancel = SDLK_CANCEL;
  static const clear = SDLK_CLEAR;
  static const prior = SDLK_PRIOR;
  static const return2 = SDLK_RETURN2;
  static const separator = SDLK_SEPARATOR;
  static const out = SDLK_OUT;
  static const oper = SDLK_OPER;
  static const clearagain = SDLK_CLEARAGAIN;
  static const crsel = SDLK_CRSEL;
  static const exsel = SDLK_EXSEL;
  static const kp00 = SDLK_KP_00;
  static const kp000 = SDLK_KP_000;
  static const thousandsseparator = SDLK_THOUSANDSSEPARATOR;
  static const decimalseparator = SDLK_DECIMALSEPARATOR;
  static const currencyunit = SDLK_CURRENCYUNIT;
  static const currencysubunit = SDLK_CURRENCYSUBUNIT;
  static const kpLeftparen = SDLK_KP_LEFTPAREN;
  static const kpRightparen = SDLK_KP_RIGHTPAREN;
  static const kpLeftbrace = SDLK_KP_LEFTBRACE;
  static const kpRightbrace = SDLK_KP_RIGHTBRACE;
  static const kpTab = SDLK_KP_TAB;
  static const kpBackspace = SDLK_KP_BACKSPACE;
  static const kpA = SDLK_KP_A;
  static const kpB = SDLK_KP_B;
  static const kpC = SDLK_KP_C;
  static const kpD = SDLK_KP_D;
  static const kpE = SDLK_KP_E;
  static const kpF = SDLK_KP_F;
  static const kpXor = SDLK_KP_XOR;
  static const kpPower = SDLK_KP_POWER;
  static const kpPercent = SDLK_KP_PERCENT;
  static const kpLess = SDLK_KP_LESS;
  static const kpGreater = SDLK_KP_GREATER;
  static const kpAmpersand = SDLK_KP_AMPERSAND;
  static const kpDblampersand = SDLK_KP_DBLAMPERSAND;
  static const kpVerticalbar = SDLK_KP_VERTICALBAR;
  static const kpDblverticalbar = SDLK_KP_DBLVERTICALBAR;
  static const kpColon = SDLK_KP_COLON;
  static const kpHash = SDLK_KP_HASH;
  static const kpSpace = SDLK_KP_SPACE;
  static const kpAt = SDLK_KP_AT;
  static const kpExclam = SDLK_KP_EXCLAM;
  static const kpMemstore = SDLK_KP_MEMSTORE;
  static const kpMemrecall = SDLK_KP_MEMRECALL;
  static const kpMemclear = SDLK_KP_MEMCLEAR;
  static const kpMemadd = SDLK_KP_MEMADD;
  static const kpMemsubtract = SDLK_KP_MEMSUBTRACT;
  static const kpMemmultiply = SDLK_KP_MEMMULTIPLY;
  static const kpMemdivide = SDLK_KP_MEMDIVIDE;
  static const kpPlusminus = SDLK_KP_PLUSMINUS;
  static const kpClear = SDLK_KP_CLEAR;
  static const kpClearentry = SDLK_KP_CLEARENTRY;
  static const kpBinary = SDLK_KP_BINARY;
  static const kpOctal = SDLK_KP_OCTAL;
  static const kpDecimal = SDLK_KP_DECIMAL;
  static const kpHexadecimal = SDLK_KP_HEXADECIMAL;
  static const lctrl = SDLK_LCTRL;
  static const lshift = SDLK_LSHIFT;
  static const lalt = SDLK_LALT;
  static const lgui = SDLK_LGUI;
  static const rctrl = SDLK_RCTRL;
  static const rshift = SDLK_RSHIFT;
  static const ralt = SDLK_RALT;
  static const rgui = SDLK_RGUI;
  static const mode = SDLK_MODE;
  static const sleep = SDLK_SLEEP;
  static const wake = SDLK_WAKE;
  static const channelIncrement = SDLK_CHANNEL_INCREMENT;
  static const channelDecrement = SDLK_CHANNEL_DECREMENT;
  static const mediaPlay = SDLK_MEDIA_PLAY;
  static const mediaPause = SDLK_MEDIA_PAUSE;
  static const mediaRecord = SDLK_MEDIA_RECORD;
  static const mediaFastForward = SDLK_MEDIA_FAST_FORWARD;
  static const mediaRewind = SDLK_MEDIA_REWIND;
  static const mediaNextTrack = SDLK_MEDIA_NEXT_TRACK;
  static const mediaPreviousTrack = SDLK_MEDIA_PREVIOUS_TRACK;
  static const mediaStop = SDLK_MEDIA_STOP;
  static const mediaEject = SDLK_MEDIA_EJECT;
  static const mediaPlayPause = SDLK_MEDIA_PLAY_PAUSE;
  static const mediaSelect = SDLK_MEDIA_SELECT;
  static const acNew = SDLK_AC_NEW;
  static const acOpen = SDLK_AC_OPEN;
  static const acClose = SDLK_AC_CLOSE;
  static const acExit = SDLK_AC_EXIT;
  static const acSave = SDLK_AC_SAVE;
  static const acPrint = SDLK_AC_PRINT;
  static const acProperties = SDLK_AC_PROPERTIES;
  static const acSearch = SDLK_AC_SEARCH;
  static const acHome = SDLK_AC_HOME;
  static const acBack = SDLK_AC_BACK;
  static const acForward = SDLK_AC_FORWARD;
  static const acStop = SDLK_AC_STOP;
  static const acRefresh = SDLK_AC_REFRESH;
  static const acBookmarks = SDLK_AC_BOOKMARKS;
  static const softleft = SDLK_SOFTLEFT;
  static const softright = SDLK_SOFTRIGHT;
  static const call = SDLK_CALL;
  static const endcall = SDLK_ENDCALL;
  static const leftTab = SDLK_LEFT_TAB;
  static const level5Shift = SDLK_LEVEL5_SHIFT;
  static const multiKeyCompose = SDLK_MULTI_KEY_COMPOSE;
  static const lmeta = SDLK_LMETA;
  static const rmeta = SDLK_RMETA;
  static const lhyper = SDLK_LHYPER;
  static const rhyper = SDLK_RHYPER;
}

class SdlkKmod {
  static const none = SDL_KMOD_NONE;
  static const lshift = SDL_KMOD_LSHIFT;
  static const rshift = SDL_KMOD_RSHIFT;
  static const level5 = SDL_KMOD_LEVEL5;
  static const lctrl = SDL_KMOD_LCTRL;
  static const rctrl = SDL_KMOD_RCTRL;
  static const lalt = SDL_KMOD_LALT;
  static const ralt = SDL_KMOD_RALT;
  static const lgui = SDL_KMOD_LGUI;
  static const rgui = SDL_KMOD_RGUI;
  static const num = SDL_KMOD_NUM;
  static const caps = SDL_KMOD_CAPS;
  static const mode = SDL_KMOD_MODE;
  static const scroll = SDL_KMOD_SCROLL;
  static const ctrl = SDL_KMOD_CTRL;
  static const shift = SDL_KMOD_SHIFT;
  static const alt = SDL_KMOD_ALT;
  static const gui = SDL_KMOD_GUI;
}

class SdlkLogCategory {
  static const application = SDL_LOG_CATEGORY_APPLICATION;
  static const error = SDL_LOG_CATEGORY_ERROR;
  static const onAssert = SDL_LOG_CATEGORY_ASSERT;
  static const system = SDL_LOG_CATEGORY_SYSTEM;
  static const audio = SDL_LOG_CATEGORY_AUDIO;
  static const video = SDL_LOG_CATEGORY_VIDEO;
  static const render = SDL_LOG_CATEGORY_RENDER;
  static const input = SDL_LOG_CATEGORY_INPUT;
  static const test = SDL_LOG_CATEGORY_TEST;
  static const gpu = SDL_LOG_CATEGORY_GPU;
  static const reserved2 = SDL_LOG_CATEGORY_RESERVED2;
  static const reserved3 = SDL_LOG_CATEGORY_RESERVED3;
  static const reserved4 = SDL_LOG_CATEGORY_RESERVED4;
  static const reserved5 = SDL_LOG_CATEGORY_RESERVED5;
  static const reserved6 = SDL_LOG_CATEGORY_RESERVED6;
  static const reserved7 = SDL_LOG_CATEGORY_RESERVED7;
  static const reserved8 = SDL_LOG_CATEGORY_RESERVED8;
  static const reserved9 = SDL_LOG_CATEGORY_RESERVED9;
  static const reserved10 = SDL_LOG_CATEGORY_RESERVED10;
  static const custom = SDL_LOG_CATEGORY_CUSTOM;
}

class SdlkLogPriority {
  static const invalid = SDL_LOG_PRIORITY_INVALID;
  static const trace = SDL_LOG_PRIORITY_TRACE;
  static const verbose = SDL_LOG_PRIORITY_VERBOSE;
  static const debug = SDL_LOG_PRIORITY_DEBUG;
  static const info = SDL_LOG_PRIORITY_INFO;
  static const warn = SDL_LOG_PRIORITY_WARN;
  static const error = SDL_LOG_PRIORITY_ERROR;
  static const critical = SDL_LOG_PRIORITY_CRITICAL;
  static const count = SDL_LOG_PRIORITY_COUNT;
}

class SdlkMessagebox {
  static const error = SDL_MESSAGEBOX_ERROR;
  static const warning = SDL_MESSAGEBOX_WARNING;
  static const information = SDL_MESSAGEBOX_INFORMATION;
  static const buttonsLeftToRight = SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT;
  static const buttonsRightToLeft = SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT;
}

class SdlkMessageboxButton {
  static const returnkeyDefault = SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT;
  static const escapekeyDefault = SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT;
}

class SdlkMessageboxColor {
  static const background = SDL_MESSAGEBOX_COLOR_BACKGROUND;
  static const text = SDL_MESSAGEBOX_COLOR_TEXT;
  static const buttonBorder = SDL_MESSAGEBOX_COLOR_BUTTON_BORDER;
  static const buttonBackground = SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND;
  static const buttonSelected = SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED;
  static const count = SDL_MESSAGEBOX_COLOR_COUNT;
}

class SdlkSystemCursor {
  static const onDefault = SDL_SYSTEM_CURSOR_DEFAULT;
  static const text = SDL_SYSTEM_CURSOR_TEXT;
  static const wait = SDL_SYSTEM_CURSOR_WAIT;
  static const crosshair = SDL_SYSTEM_CURSOR_CROSSHAIR;
  static const progress = SDL_SYSTEM_CURSOR_PROGRESS;
  static const nwseResize = SDL_SYSTEM_CURSOR_NWSE_RESIZE;
  static const neswResize = SDL_SYSTEM_CURSOR_NESW_RESIZE;
  static const ewResize = SDL_SYSTEM_CURSOR_EW_RESIZE;
  static const nsResize = SDL_SYSTEM_CURSOR_NS_RESIZE;
  static const move = SDL_SYSTEM_CURSOR_MOVE;
  static const notAllowed = SDL_SYSTEM_CURSOR_NOT_ALLOWED;
  static const pointer = SDL_SYSTEM_CURSOR_POINTER;
  static const nwResize = SDL_SYSTEM_CURSOR_NW_RESIZE;
  static const nResize = SDL_SYSTEM_CURSOR_N_RESIZE;
  static const neResize = SDL_SYSTEM_CURSOR_NE_RESIZE;
  static const eResize = SDL_SYSTEM_CURSOR_E_RESIZE;
  static const seResize = SDL_SYSTEM_CURSOR_SE_RESIZE;
  static const sResize = SDL_SYSTEM_CURSOR_S_RESIZE;
  static const swResize = SDL_SYSTEM_CURSOR_SW_RESIZE;
  static const wResize = SDL_SYSTEM_CURSOR_W_RESIZE;
  static const count = SDL_SYSTEM_CURSOR_COUNT;
}

class SdlkMousewheel {
  static const normal = SDL_MOUSEWHEEL_NORMAL;
  static const flipped = SDL_MOUSEWHEEL_FLIPPED;
}

class SdlkButton {
  static const left = SDL_BUTTON_LEFT;
  static const middle = SDL_BUTTON_MIDDLE;
  static const right = SDL_BUTTON_RIGHT;
  static const x1 = SDL_BUTTON_X1;
  static const x2 = SDL_BUTTON_X2;
}

class SdlkInitStatus {
  static const uninitialized = SDL_INIT_STATUS_UNINITIALIZED;
  static const initializing = SDL_INIT_STATUS_INITIALIZING;
  static const initialized = SDL_INIT_STATUS_INITIALIZED;
  static const uninitializing = SDL_INIT_STATUS_UNINITIALIZING;
}

class SdlkPenInput {
  static const down = SDL_PEN_INPUT_DOWN;
  static const button1 = SDL_PEN_INPUT_BUTTON_1;
  static const button2 = SDL_PEN_INPUT_BUTTON_2;
  static const button3 = SDL_PEN_INPUT_BUTTON_3;
  static const button4 = SDL_PEN_INPUT_BUTTON_4;
  static const button5 = SDL_PEN_INPUT_BUTTON_5;
  static const eraserTip = SDL_PEN_INPUT_ERASER_TIP;
}

class SdlkPenAxis {
  static const pressure = SDL_PEN_AXIS_PRESSURE;
  static const xtilt = SDL_PEN_AXIS_XTILT;
  static const ytilt = SDL_PEN_AXIS_YTILT;
  static const distance = SDL_PEN_AXIS_DISTANCE;
  static const rotation = SDL_PEN_AXIS_ROTATION;
  static const slider = SDL_PEN_AXIS_SLIDER;
  static const tangentialPressure = SDL_PEN_AXIS_TANGENTIAL_PRESSURE;
  static const count = SDL_PEN_AXIS_COUNT;
}

class SdlkAlpha {
  static const opaque = SDL_ALPHA_OPAQUE;
  static const opaqueFloat = SDL_ALPHA_OPAQUE_FLOAT;
  static const transparent = SDL_ALPHA_TRANSPARENT;
  static const transparentFloat = SDL_ALPHA_TRANSPARENT_FLOAT;
}

class SdlkPixeltype {
  static const unknown = SDL_PIXELTYPE_UNKNOWN;
  static const index1 = SDL_PIXELTYPE_INDEX1;
  static const index4 = SDL_PIXELTYPE_INDEX4;
  static const index8 = SDL_PIXELTYPE_INDEX8;
  static const packed8 = SDL_PIXELTYPE_PACKED8;
  static const packed16 = SDL_PIXELTYPE_PACKED16;
  static const packed32 = SDL_PIXELTYPE_PACKED32;
  static const arrayu8 = SDL_PIXELTYPE_ARRAYU8;
  static const arrayu16 = SDL_PIXELTYPE_ARRAYU16;
  static const arrayu32 = SDL_PIXELTYPE_ARRAYU32;
  static const arrayf16 = SDL_PIXELTYPE_ARRAYF16;
  static const arrayf32 = SDL_PIXELTYPE_ARRAYF32;
  static const index2 = SDL_PIXELTYPE_INDEX2;
}

class SdlkBitmaporder {
  static const none = SDL_BITMAPORDER_NONE;
  static const on4321 = SDL_BITMAPORDER_4321;
  static const on1234 = SDL_BITMAPORDER_1234;
}

class SdlkPackedorder {
  static const none = SDL_PACKEDORDER_NONE;
  static const xrgb = SDL_PACKEDORDER_XRGB;
  static const rgbx = SDL_PACKEDORDER_RGBX;
  static const argb = SDL_PACKEDORDER_ARGB;
  static const rgba = SDL_PACKEDORDER_RGBA;
  static const xbgr = SDL_PACKEDORDER_XBGR;
  static const bgrx = SDL_PACKEDORDER_BGRX;
  static const abgr = SDL_PACKEDORDER_ABGR;
  static const bgra = SDL_PACKEDORDER_BGRA;
}

class SdlkArrayorder {
  static const none = SDL_ARRAYORDER_NONE;
  static const rgb = SDL_ARRAYORDER_RGB;
  static const rgba = SDL_ARRAYORDER_RGBA;
  static const argb = SDL_ARRAYORDER_ARGB;
  static const bgr = SDL_ARRAYORDER_BGR;
  static const bgra = SDL_ARRAYORDER_BGRA;
  static const abgr = SDL_ARRAYORDER_ABGR;
}

class SdlkPackedlayout {
  static const none = SDL_PACKEDLAYOUT_NONE;
  static const on332 = SDL_PACKEDLAYOUT_332;
  static const on4444 = SDL_PACKEDLAYOUT_4444;
  static const on1555 = SDL_PACKEDLAYOUT_1555;
  static const on5551 = SDL_PACKEDLAYOUT_5551;
  static const on565 = SDL_PACKEDLAYOUT_565;
  static const on8888 = SDL_PACKEDLAYOUT_8888;
  static const on2101010 = SDL_PACKEDLAYOUT_2101010;
  static const on1010102 = SDL_PACKEDLAYOUT_1010102;
}

class SdlkPixelformat {
  static const unknown = SDL_PIXELFORMAT_UNKNOWN;
  static const index1Lsb = SDL_PIXELFORMAT_INDEX1LSB;
  static const index1Msb = SDL_PIXELFORMAT_INDEX1MSB;
  static const index2Lsb = SDL_PIXELFORMAT_INDEX2LSB;
  static const index2Msb = SDL_PIXELFORMAT_INDEX2MSB;
  static const index4Lsb = SDL_PIXELFORMAT_INDEX4LSB;
  static const index4Msb = SDL_PIXELFORMAT_INDEX4MSB;
  static const index8 = SDL_PIXELFORMAT_INDEX8;
  static const rgb332 = SDL_PIXELFORMAT_RGB332;
  static const xrgb4444 = SDL_PIXELFORMAT_XRGB4444;
  static const xbgr4444 = SDL_PIXELFORMAT_XBGR4444;
  static const xrgb1555 = SDL_PIXELFORMAT_XRGB1555;
  static const xbgr1555 = SDL_PIXELFORMAT_XBGR1555;
  static const argb4444 = SDL_PIXELFORMAT_ARGB4444;
  static const rgba4444 = SDL_PIXELFORMAT_RGBA4444;
  static const abgr4444 = SDL_PIXELFORMAT_ABGR4444;
  static const bgra4444 = SDL_PIXELFORMAT_BGRA4444;
  static const argb1555 = SDL_PIXELFORMAT_ARGB1555;
  static const rgba5551 = SDL_PIXELFORMAT_RGBA5551;
  static const abgr1555 = SDL_PIXELFORMAT_ABGR1555;
  static const bgra5551 = SDL_PIXELFORMAT_BGRA5551;
  static const rgb565 = SDL_PIXELFORMAT_RGB565;
  static const bgr565 = SDL_PIXELFORMAT_BGR565;
  static const rgb24 = SDL_PIXELFORMAT_RGB24;
  static const bgr24 = SDL_PIXELFORMAT_BGR24;
  static const xrgb8888 = SDL_PIXELFORMAT_XRGB8888;
  static const rgbx8888 = SDL_PIXELFORMAT_RGBX8888;
  static const xbgr8888 = SDL_PIXELFORMAT_XBGR8888;
  static const bgrx8888 = SDL_PIXELFORMAT_BGRX8888;
  static const argb8888 = SDL_PIXELFORMAT_ARGB8888;
  static const rgba8888 = SDL_PIXELFORMAT_RGBA8888;
  static const abgr8888 = SDL_PIXELFORMAT_ABGR8888;
  static const bgra8888 = SDL_PIXELFORMAT_BGRA8888;
  static const xrgb2101010 = SDL_PIXELFORMAT_XRGB2101010;
  static const xbgr2101010 = SDL_PIXELFORMAT_XBGR2101010;
  static const argb2101010 = SDL_PIXELFORMAT_ARGB2101010;
  static const abgr2101010 = SDL_PIXELFORMAT_ABGR2101010;
  static const rgb48 = SDL_PIXELFORMAT_RGB48;
  static const bgr48 = SDL_PIXELFORMAT_BGR48;
  static const rgba64 = SDL_PIXELFORMAT_RGBA64;
  static const argb64 = SDL_PIXELFORMAT_ARGB64;
  static const bgra64 = SDL_PIXELFORMAT_BGRA64;
  static const abgr64 = SDL_PIXELFORMAT_ABGR64;
  static const rgb48Float = SDL_PIXELFORMAT_RGB48_FLOAT;
  static const bgr48Float = SDL_PIXELFORMAT_BGR48_FLOAT;
  static const rgba64Float = SDL_PIXELFORMAT_RGBA64_FLOAT;
  static const argb64Float = SDL_PIXELFORMAT_ARGB64_FLOAT;
  static const bgra64Float = SDL_PIXELFORMAT_BGRA64_FLOAT;
  static const abgr64Float = SDL_PIXELFORMAT_ABGR64_FLOAT;
  static const rgb96Float = SDL_PIXELFORMAT_RGB96_FLOAT;
  static const bgr96Float = SDL_PIXELFORMAT_BGR96_FLOAT;
  static const rgba128Float = SDL_PIXELFORMAT_RGBA128_FLOAT;
  static const argb128Float = SDL_PIXELFORMAT_ARGB128_FLOAT;
  static const bgra128Float = SDL_PIXELFORMAT_BGRA128_FLOAT;
  static const abgr128Float = SDL_PIXELFORMAT_ABGR128_FLOAT;
  static const yv12 = SDL_PIXELFORMAT_YV12;
  static const iyuv = SDL_PIXELFORMAT_IYUV;
  static const yuy2 = SDL_PIXELFORMAT_YUY2;
  static const uyvy = SDL_PIXELFORMAT_UYVY;
  static const yvyu = SDL_PIXELFORMAT_YVYU;
  static const nv12 = SDL_PIXELFORMAT_NV12;
  static const nv21 = SDL_PIXELFORMAT_NV21;
  static const p010 = SDL_PIXELFORMAT_P010;
  static const externalOes = SDL_PIXELFORMAT_EXTERNAL_OES;
  static const mjpg = SDL_PIXELFORMAT_MJPG;
}

class SdlkColorType {
  static const unknown = SDL_COLOR_TYPE_UNKNOWN;
  static const rgb = SDL_COLOR_TYPE_RGB;
  static const ycbcr = SDL_COLOR_TYPE_YCBCR;
}

class SdlkColorRange {
  static const unknown = SDL_COLOR_RANGE_UNKNOWN;
  static const limited = SDL_COLOR_RANGE_LIMITED;
  static const full = SDL_COLOR_RANGE_FULL;
}

class SdlkColorPrimaries {
  static const unknown = SDL_COLOR_PRIMARIES_UNKNOWN;
  static const bt709 = SDL_COLOR_PRIMARIES_BT709;
  static const unspecified = SDL_COLOR_PRIMARIES_UNSPECIFIED;
  static const bt470M = SDL_COLOR_PRIMARIES_BT470M;
  static const bt470Bg = SDL_COLOR_PRIMARIES_BT470BG;
  static const bt601 = SDL_COLOR_PRIMARIES_BT601;
  static const smpte240 = SDL_COLOR_PRIMARIES_SMPTE240;
  static const genericFilm = SDL_COLOR_PRIMARIES_GENERIC_FILM;
  static const bt2020 = SDL_COLOR_PRIMARIES_BT2020;
  static const xyz = SDL_COLOR_PRIMARIES_XYZ;
  static const smpte431 = SDL_COLOR_PRIMARIES_SMPTE431;
  static const smpte432 = SDL_COLOR_PRIMARIES_SMPTE432;
  static const ebu3213 = SDL_COLOR_PRIMARIES_EBU3213;
  static const custom = SDL_COLOR_PRIMARIES_CUSTOM;
}

class SdlkTransferCharacteristics {
  static const unknown = SDL_TRANSFER_CHARACTERISTICS_UNKNOWN;
  static const bt709 = SDL_TRANSFER_CHARACTERISTICS_BT709;
  static const unspecified = SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED;
  static const gamma22 = SDL_TRANSFER_CHARACTERISTICS_GAMMA22;
  static const gamma28 = SDL_TRANSFER_CHARACTERISTICS_GAMMA28;
  static const bt601 = SDL_TRANSFER_CHARACTERISTICS_BT601;
  static const smpte240 = SDL_TRANSFER_CHARACTERISTICS_SMPTE240;
  static const linear = SDL_TRANSFER_CHARACTERISTICS_LINEAR;
  static const log100 = SDL_TRANSFER_CHARACTERISTICS_LOG100;
  static const log100Sqrt10 = SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10;
  static const iec61966 = SDL_TRANSFER_CHARACTERISTICS_IEC61966;
  static const bt1361 = SDL_TRANSFER_CHARACTERISTICS_BT1361;
  static const srgb = SDL_TRANSFER_CHARACTERISTICS_SRGB;
  static const bt202010Bit = SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT;
  static const bt202012Bit = SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT;
  static const pq = SDL_TRANSFER_CHARACTERISTICS_PQ;
  static const smpte428 = SDL_TRANSFER_CHARACTERISTICS_SMPTE428;
  static const hlg = SDL_TRANSFER_CHARACTERISTICS_HLG;
  static const custom = SDL_TRANSFER_CHARACTERISTICS_CUSTOM;
}

class SdlkMatrixCoefficients {
  static const identity = SDL_MATRIX_COEFFICIENTS_IDENTITY;
  static const bt709 = SDL_MATRIX_COEFFICIENTS_BT709;
  static const unspecified = SDL_MATRIX_COEFFICIENTS_UNSPECIFIED;
  static const fcc = SDL_MATRIX_COEFFICIENTS_FCC;
  static const bt470Bg = SDL_MATRIX_COEFFICIENTS_BT470BG;
  static const bt601 = SDL_MATRIX_COEFFICIENTS_BT601;
  static const smpte240 = SDL_MATRIX_COEFFICIENTS_SMPTE240;
  static const ycgco = SDL_MATRIX_COEFFICIENTS_YCGCO;
  static const bt2020Ncl = SDL_MATRIX_COEFFICIENTS_BT2020_NCL;
  static const bt2020Cl = SDL_MATRIX_COEFFICIENTS_BT2020_CL;
  static const smpte2085 = SDL_MATRIX_COEFFICIENTS_SMPTE2085;
  static const chromaDerivedNcl = SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL;
  static const chromaDerivedCl = SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL;
  static const ictcp = SDL_MATRIX_COEFFICIENTS_ICTCP;
  static const custom = SDL_MATRIX_COEFFICIENTS_CUSTOM;
}

class SdlkChromaLocation {
  static const none = SDL_CHROMA_LOCATION_NONE;
  static const left = SDL_CHROMA_LOCATION_LEFT;
  static const center = SDL_CHROMA_LOCATION_CENTER;
  static const topleft = SDL_CHROMA_LOCATION_TOPLEFT;
}

class SdlkColorspace {
  static const unknown = SDL_COLORSPACE_UNKNOWN;
  static const srgb = SDL_COLORSPACE_SRGB;
  static const srgbLinear = SDL_COLORSPACE_SRGB_LINEAR;
  static const hdr10 = SDL_COLORSPACE_HDR10;
  static const jpeg = SDL_COLORSPACE_JPEG;
  static const bt601Limited = SDL_COLORSPACE_BT601_LIMITED;
  static const bt601Full = SDL_COLORSPACE_BT601_FULL;
  static const bt709Limited = SDL_COLORSPACE_BT709_LIMITED;
  static const bt709Full = SDL_COLORSPACE_BT709_FULL;
  static const bt2020Limited = SDL_COLORSPACE_BT2020_LIMITED;
  static const bt2020Full = SDL_COLORSPACE_BT2020_FULL;
  static const rgbDefault = SDL_COLORSPACE_RGB_DEFAULT;
  static const yuvDefault = SDL_COLORSPACE_YUV_DEFAULT;
}

class SdlkPowerstate {
  static const error = SDL_POWERSTATE_ERROR;
  static const unknown = SDL_POWERSTATE_UNKNOWN;
  static const onBattery = SDL_POWERSTATE_ON_BATTERY;
  static const noBattery = SDL_POWERSTATE_NO_BATTERY;
  static const charging = SDL_POWERSTATE_CHARGING;
  static const charged = SDL_POWERSTATE_CHARGED;
}

class SdlkProcessStdio {
  static const inherited = SDL_PROCESS_STDIO_INHERITED;
  static const onNull = SDL_PROCESS_STDIO_NULL;
  static const app = SDL_PROCESS_STDIO_APP;
  static const redirect = SDL_PROCESS_STDIO_REDIRECT;
}

class SdlkPropProcess {
  static const createArgsPointer = SDL_PROP_PROCESS_CREATE_ARGS_POINTER;
  static const createEnvironmentPointer =
      SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER;
  static const createWorkingDirectoryString =
      SDL_PROP_PROCESS_CREATE_WORKING_DIRECTORY_STRING;
  static const createStdinNumber = SDL_PROP_PROCESS_CREATE_STDIN_NUMBER;
  static const createStdinPointer = SDL_PROP_PROCESS_CREATE_STDIN_POINTER;
  static const createStdoutNumber = SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER;
  static const createStdoutPointer = SDL_PROP_PROCESS_CREATE_STDOUT_POINTER;
  static const createStderrNumber = SDL_PROP_PROCESS_CREATE_STDERR_NUMBER;
  static const createStderrPointer = SDL_PROP_PROCESS_CREATE_STDERR_POINTER;
  static const createStderrToStdoutBoolean =
      SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN;
  static const createBackgroundBoolean =
      SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN;
  static const pidNumber = SDL_PROP_PROCESS_PID_NUMBER;
  static const stdinPointer = SDL_PROP_PROCESS_STDIN_POINTER;
  static const stdoutPointer = SDL_PROP_PROCESS_STDOUT_POINTER;
  static const stderrPointer = SDL_PROP_PROCESS_STDERR_POINTER;
  static const backgroundBoolean = SDL_PROP_PROCESS_BACKGROUND_BOOLEAN;
}

class SdlkPropertyType {
  static const invalid = SDL_PROPERTY_TYPE_INVALID;
  static const pointer = SDL_PROPERTY_TYPE_POINTER;
  static const string = SDL_PROPERTY_TYPE_STRING;
  static const number = SDL_PROPERTY_TYPE_NUMBER;
  static const float = SDL_PROPERTY_TYPE_FLOAT;
  static const boolean = SDL_PROPERTY_TYPE_BOOLEAN;
}

class SdlkTextureaccess {
  static const static = SDL_TEXTUREACCESS_STATIC;
  static const streaming = SDL_TEXTUREACCESS_STREAMING;
  static const target = SDL_TEXTUREACCESS_TARGET;
}

class SdlkTextureAddress {
  static const invalid = SDL_TEXTURE_ADDRESS_INVALID;
  static const auto = SDL_TEXTURE_ADDRESS_AUTO;
  static const clamp = SDL_TEXTURE_ADDRESS_CLAMP;
  static const wrap = SDL_TEXTURE_ADDRESS_WRAP;
}

class SdlkLogicalPresentation {
  static const disabled = SDL_LOGICAL_PRESENTATION_DISABLED;
  static const stretch = SDL_LOGICAL_PRESENTATION_STRETCH;
  static const letterbox = SDL_LOGICAL_PRESENTATION_LETTERBOX;
  static const overscan = SDL_LOGICAL_PRESENTATION_OVERSCAN;
  static const integerScale = SDL_LOGICAL_PRESENTATION_INTEGER_SCALE;
}

class SdlkPropRenderer {
  static const createNameString = SDL_PROP_RENDERER_CREATE_NAME_STRING;
  static const createWindowPointer = SDL_PROP_RENDERER_CREATE_WINDOW_POINTER;
  static const createSurfacePointer = SDL_PROP_RENDERER_CREATE_SURFACE_POINTER;
  static const createOutputColorspaceNumber =
      SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER;
  static const createPresentVsyncNumber =
      SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER;
  static const createGpuShadersSpirvBoolean =
      SDL_PROP_RENDERER_CREATE_GPU_SHADERS_SPIRV_BOOLEAN;
  static const createGpuShadersDxilBoolean =
      SDL_PROP_RENDERER_CREATE_GPU_SHADERS_DXIL_BOOLEAN;
  static const createGpuShadersMslBoolean =
      SDL_PROP_RENDERER_CREATE_GPU_SHADERS_MSL_BOOLEAN;
  static const createVulkanInstancePointer =
      SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER;
  static const createVulkanSurfaceNumber =
      SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER;
  static const createVulkanPhysicalDevicePointer =
      SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER;
  static const createVulkanDevicePointer =
      SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER;
  static const createVulkanGraphicsQueueFamilyIndexNumber =
      SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER;
  static const createVulkanPresentQueueFamilyIndexNumber =
      SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER;
  static const nameString = SDL_PROP_RENDERER_NAME_STRING;
  static const windowPointer = SDL_PROP_RENDERER_WINDOW_POINTER;
  static const surfacePointer = SDL_PROP_RENDERER_SURFACE_POINTER;
  static const vsyncNumber = SDL_PROP_RENDERER_VSYNC_NUMBER;
  static const maxTextureSizeNumber = SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER;
  static const textureFormatsPointer =
      SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER;
  static const outputColorspaceNumber =
      SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER;
  static const hdrEnabledBoolean = SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN;
  static const sdrWhitePointFloat = SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT;
  static const hdrHeadroomFloat = SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT;
  static const d3D9DevicePointer = SDL_PROP_RENDERER_D3D9_DEVICE_POINTER;
  static const d3D11DevicePointer = SDL_PROP_RENDERER_D3D11_DEVICE_POINTER;
  static const d3D11SwapchainPointer =
      SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER;
  static const d3D12DevicePointer = SDL_PROP_RENDERER_D3D12_DEVICE_POINTER;
  static const d3D12SwapchainPointer =
      SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER;
  static const d3D12CommandQueuePointer =
      SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER;
  static const vulkanInstancePointer =
      SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER;
  static const vulkanSurfaceNumber = SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER;
  static const vulkanPhysicalDevicePointer =
      SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER;
  static const vulkanDevicePointer = SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER;
  static const vulkanGraphicsQueueFamilyIndexNumber =
      SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER;
  static const vulkanPresentQueueFamilyIndexNumber =
      SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER;
  static const vulkanSwapchainImageCountNumber =
      SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER;
  static const gpuDevicePointer = SDL_PROP_RENDERER_GPU_DEVICE_POINTER;
}

class SdlkPropTexture {
  static const createColorspaceNumber =
      SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER;
  static const createFormatNumber = SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER;
  static const createAccessNumber = SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER;
  static const createWidthNumber = SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER;
  static const createHeightNumber = SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER;
  static const createSdrWhitePointFloat =
      SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT;
  static const createHdrHeadroomFloat =
      SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT;
  static const createD3D11TexturePointer =
      SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER;
  static const createD3D11TextureUPointer =
      SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER;
  static const createD3D11TextureVPointer =
      SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER;
  static const createD3D12TexturePointer =
      SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER;
  static const createD3D12TextureUPointer =
      SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER;
  static const createD3D12TextureVPointer =
      SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER;
  static const createMetalPixelbufferPointer =
      SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER;
  static const createOpenglTextureNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER;
  static const createOpenglTextureUvNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER;
  static const createOpenglTextureUNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER;
  static const createOpenglTextureVNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER;
  static const createOpengles2TextureNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER;
  static const createOpengles2TextureUvNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER;
  static const createOpengles2TextureUNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER;
  static const createOpengles2TextureVNumber =
      SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER;
  static const createVulkanTextureNumber =
      SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER;
  static const colorspaceNumber = SDL_PROP_TEXTURE_COLORSPACE_NUMBER;
  static const formatNumber = SDL_PROP_TEXTURE_FORMAT_NUMBER;
  static const accessNumber = SDL_PROP_TEXTURE_ACCESS_NUMBER;
  static const widthNumber = SDL_PROP_TEXTURE_WIDTH_NUMBER;
  static const heightNumber = SDL_PROP_TEXTURE_HEIGHT_NUMBER;
  static const sdrWhitePointFloat = SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT;
  static const hdrHeadroomFloat = SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT;
  static const d3D11TexturePointer = SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER;
  static const d3D11TextureUPointer = SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER;
  static const d3D11TextureVPointer = SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER;
  static const d3D12TexturePointer = SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER;
  static const d3D12TextureUPointer = SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER;
  static const d3D12TextureVPointer = SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER;
  static const openglTextureNumber = SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER;
  static const openglTextureUvNumber =
      SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER;
  static const openglTextureUNumber = SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER;
  static const openglTextureVNumber = SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER;
  static const openglTextureTargetNumber =
      SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER;
  static const openglTexWFloat = SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT;
  static const openglTexHFloat = SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT;
  static const opengles2TextureNumber =
      SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER;
  static const opengles2TextureUvNumber =
      SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER;
  static const opengles2TextureUNumber =
      SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER;
  static const opengles2TextureVNumber =
      SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER;
  static const opengles2TextureTargetNumber =
      SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER;
  static const vulkanTextureNumber = SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER;
}

class SdlkRendererVsync {
  static const disabled = SDL_RENDERER_VSYNC_DISABLED;
  static const adaptive = SDL_RENDERER_VSYNC_ADAPTIVE;
}

class SdlkScancode {
  static const unknown = SDL_SCANCODE_UNKNOWN;
  static const a = SDL_SCANCODE_A;
  static const b = SDL_SCANCODE_B;
  static const c = SDL_SCANCODE_C;
  static const d = SDL_SCANCODE_D;
  static const e = SDL_SCANCODE_E;
  static const f = SDL_SCANCODE_F;
  static const g = SDL_SCANCODE_G;
  static const h = SDL_SCANCODE_H;
  static const i = SDL_SCANCODE_I;
  static const j = SDL_SCANCODE_J;
  static const k = SDL_SCANCODE_K;
  static const l = SDL_SCANCODE_L;
  static const m = SDL_SCANCODE_M;
  static const n = SDL_SCANCODE_N;
  static const o = SDL_SCANCODE_O;
  static const p = SDL_SCANCODE_P;
  static const q = SDL_SCANCODE_Q;
  static const r = SDL_SCANCODE_R;
  static const s = SDL_SCANCODE_S;
  static const t = SDL_SCANCODE_T;
  static const u = SDL_SCANCODE_U;
  static const v = SDL_SCANCODE_V;
  static const w = SDL_SCANCODE_W;
  static const x = SDL_SCANCODE_X;
  static const y = SDL_SCANCODE_Y;
  static const z = SDL_SCANCODE_Z;
  static const on1 = SDL_SCANCODE_1;
  static const on2 = SDL_SCANCODE_2;
  static const on3 = SDL_SCANCODE_3;
  static const on4 = SDL_SCANCODE_4;
  static const on5 = SDL_SCANCODE_5;
  static const on6 = SDL_SCANCODE_6;
  static const on7 = SDL_SCANCODE_7;
  static const on8 = SDL_SCANCODE_8;
  static const on9 = SDL_SCANCODE_9;
  static const on0 = SDL_SCANCODE_0;
  static const onReturn = SDL_SCANCODE_RETURN;
  static const escape = SDL_SCANCODE_ESCAPE;
  static const backspace = SDL_SCANCODE_BACKSPACE;
  static const tab = SDL_SCANCODE_TAB;
  static const space = SDL_SCANCODE_SPACE;
  static const minus = SDL_SCANCODE_MINUS;
  static const equals = SDL_SCANCODE_EQUALS;
  static const leftbracket = SDL_SCANCODE_LEFTBRACKET;
  static const rightbracket = SDL_SCANCODE_RIGHTBRACKET;
  static const backslash = SDL_SCANCODE_BACKSLASH;
  static const nonushash = SDL_SCANCODE_NONUSHASH;
  static const semicolon = SDL_SCANCODE_SEMICOLON;
  static const apostrophe = SDL_SCANCODE_APOSTROPHE;
  static const grave = SDL_SCANCODE_GRAVE;
  static const comma = SDL_SCANCODE_COMMA;
  static const period = SDL_SCANCODE_PERIOD;
  static const slash = SDL_SCANCODE_SLASH;
  static const capslock = SDL_SCANCODE_CAPSLOCK;
  static const f1 = SDL_SCANCODE_F1;
  static const f2 = SDL_SCANCODE_F2;
  static const f3 = SDL_SCANCODE_F3;
  static const f4 = SDL_SCANCODE_F4;
  static const f5 = SDL_SCANCODE_F5;
  static const f6 = SDL_SCANCODE_F6;
  static const f7 = SDL_SCANCODE_F7;
  static const f8 = SDL_SCANCODE_F8;
  static const f9 = SDL_SCANCODE_F9;
  static const f10 = SDL_SCANCODE_F10;
  static const f11 = SDL_SCANCODE_F11;
  static const f12 = SDL_SCANCODE_F12;
  static const printscreen = SDL_SCANCODE_PRINTSCREEN;
  static const scrolllock = SDL_SCANCODE_SCROLLLOCK;
  static const pause = SDL_SCANCODE_PAUSE;
  static const insert = SDL_SCANCODE_INSERT;
  static const home = SDL_SCANCODE_HOME;
  static const pageup = SDL_SCANCODE_PAGEUP;
  static const delete = SDL_SCANCODE_DELETE;
  static const end = SDL_SCANCODE_END;
  static const pagedown = SDL_SCANCODE_PAGEDOWN;
  static const right = SDL_SCANCODE_RIGHT;
  static const left = SDL_SCANCODE_LEFT;
  static const down = SDL_SCANCODE_DOWN;
  static const up = SDL_SCANCODE_UP;
  static const numlockclear = SDL_SCANCODE_NUMLOCKCLEAR;
  static const kpDivide = SDL_SCANCODE_KP_DIVIDE;
  static const kpMultiply = SDL_SCANCODE_KP_MULTIPLY;
  static const kpMinus = SDL_SCANCODE_KP_MINUS;
  static const kpPlus = SDL_SCANCODE_KP_PLUS;
  static const kpEnter = SDL_SCANCODE_KP_ENTER;
  static const kp1 = SDL_SCANCODE_KP_1;
  static const kp2 = SDL_SCANCODE_KP_2;
  static const kp3 = SDL_SCANCODE_KP_3;
  static const kp4 = SDL_SCANCODE_KP_4;
  static const kp5 = SDL_SCANCODE_KP_5;
  static const kp6 = SDL_SCANCODE_KP_6;
  static const kp7 = SDL_SCANCODE_KP_7;
  static const kp8 = SDL_SCANCODE_KP_8;
  static const kp9 = SDL_SCANCODE_KP_9;
  static const kp0 = SDL_SCANCODE_KP_0;
  static const kpPeriod = SDL_SCANCODE_KP_PERIOD;
  static const nonusbackslash = SDL_SCANCODE_NONUSBACKSLASH;
  static const application = SDL_SCANCODE_APPLICATION;
  static const power = SDL_SCANCODE_POWER;
  static const kpEquals = SDL_SCANCODE_KP_EQUALS;
  static const f13 = SDL_SCANCODE_F13;
  static const f14 = SDL_SCANCODE_F14;
  static const f15 = SDL_SCANCODE_F15;
  static const f16 = SDL_SCANCODE_F16;
  static const f17 = SDL_SCANCODE_F17;
  static const f18 = SDL_SCANCODE_F18;
  static const f19 = SDL_SCANCODE_F19;
  static const f20 = SDL_SCANCODE_F20;
  static const f21 = SDL_SCANCODE_F21;
  static const f22 = SDL_SCANCODE_F22;
  static const f23 = SDL_SCANCODE_F23;
  static const f24 = SDL_SCANCODE_F24;
  static const execute = SDL_SCANCODE_EXECUTE;
  static const help = SDL_SCANCODE_HELP;
  static const menu = SDL_SCANCODE_MENU;
  static const select = SDL_SCANCODE_SELECT;
  static const stop = SDL_SCANCODE_STOP;
  static const again = SDL_SCANCODE_AGAIN;
  static const undo = SDL_SCANCODE_UNDO;
  static const cut = SDL_SCANCODE_CUT;
  static const copy = SDL_SCANCODE_COPY;
  static const paste = SDL_SCANCODE_PASTE;
  static const find = SDL_SCANCODE_FIND;
  static const mute = SDL_SCANCODE_MUTE;
  static const volumeup = SDL_SCANCODE_VOLUMEUP;
  static const volumedown = SDL_SCANCODE_VOLUMEDOWN;
  static const kpComma = SDL_SCANCODE_KP_COMMA;
  static const kpEqualsas400 = SDL_SCANCODE_KP_EQUALSAS400;
  static const international1 = SDL_SCANCODE_INTERNATIONAL1;
  static const international2 = SDL_SCANCODE_INTERNATIONAL2;
  static const international3 = SDL_SCANCODE_INTERNATIONAL3;
  static const international4 = SDL_SCANCODE_INTERNATIONAL4;
  static const international5 = SDL_SCANCODE_INTERNATIONAL5;
  static const international6 = SDL_SCANCODE_INTERNATIONAL6;
  static const international7 = SDL_SCANCODE_INTERNATIONAL7;
  static const international8 = SDL_SCANCODE_INTERNATIONAL8;
  static const international9 = SDL_SCANCODE_INTERNATIONAL9;
  static const lang1 = SDL_SCANCODE_LANG1;
  static const lang2 = SDL_SCANCODE_LANG2;
  static const lang3 = SDL_SCANCODE_LANG3;
  static const lang4 = SDL_SCANCODE_LANG4;
  static const lang5 = SDL_SCANCODE_LANG5;
  static const lang6 = SDL_SCANCODE_LANG6;
  static const lang7 = SDL_SCANCODE_LANG7;
  static const lang8 = SDL_SCANCODE_LANG8;
  static const lang9 = SDL_SCANCODE_LANG9;
  static const alterase = SDL_SCANCODE_ALTERASE;
  static const sysreq = SDL_SCANCODE_SYSREQ;
  static const cancel = SDL_SCANCODE_CANCEL;
  static const clear = SDL_SCANCODE_CLEAR;
  static const prior = SDL_SCANCODE_PRIOR;
  static const return2 = SDL_SCANCODE_RETURN2;
  static const separator = SDL_SCANCODE_SEPARATOR;
  static const out = SDL_SCANCODE_OUT;
  static const oper = SDL_SCANCODE_OPER;
  static const clearagain = SDL_SCANCODE_CLEARAGAIN;
  static const crsel = SDL_SCANCODE_CRSEL;
  static const exsel = SDL_SCANCODE_EXSEL;
  static const kp00 = SDL_SCANCODE_KP_00;
  static const kp000 = SDL_SCANCODE_KP_000;
  static const thousandsseparator = SDL_SCANCODE_THOUSANDSSEPARATOR;
  static const decimalseparator = SDL_SCANCODE_DECIMALSEPARATOR;
  static const currencyunit = SDL_SCANCODE_CURRENCYUNIT;
  static const currencysubunit = SDL_SCANCODE_CURRENCYSUBUNIT;
  static const kpLeftparen = SDL_SCANCODE_KP_LEFTPAREN;
  static const kpRightparen = SDL_SCANCODE_KP_RIGHTPAREN;
  static const kpLeftbrace = SDL_SCANCODE_KP_LEFTBRACE;
  static const kpRightbrace = SDL_SCANCODE_KP_RIGHTBRACE;
  static const kpTab = SDL_SCANCODE_KP_TAB;
  static const kpBackspace = SDL_SCANCODE_KP_BACKSPACE;
  static const kpA = SDL_SCANCODE_KP_A;
  static const kpB = SDL_SCANCODE_KP_B;
  static const kpC = SDL_SCANCODE_KP_C;
  static const kpD = SDL_SCANCODE_KP_D;
  static const kpE = SDL_SCANCODE_KP_E;
  static const kpF = SDL_SCANCODE_KP_F;
  static const kpXor = SDL_SCANCODE_KP_XOR;
  static const kpPower = SDL_SCANCODE_KP_POWER;
  static const kpPercent = SDL_SCANCODE_KP_PERCENT;
  static const kpLess = SDL_SCANCODE_KP_LESS;
  static const kpGreater = SDL_SCANCODE_KP_GREATER;
  static const kpAmpersand = SDL_SCANCODE_KP_AMPERSAND;
  static const kpDblampersand = SDL_SCANCODE_KP_DBLAMPERSAND;
  static const kpVerticalbar = SDL_SCANCODE_KP_VERTICALBAR;
  static const kpDblverticalbar = SDL_SCANCODE_KP_DBLVERTICALBAR;
  static const kpColon = SDL_SCANCODE_KP_COLON;
  static const kpHash = SDL_SCANCODE_KP_HASH;
  static const kpSpace = SDL_SCANCODE_KP_SPACE;
  static const kpAt = SDL_SCANCODE_KP_AT;
  static const kpExclam = SDL_SCANCODE_KP_EXCLAM;
  static const kpMemstore = SDL_SCANCODE_KP_MEMSTORE;
  static const kpMemrecall = SDL_SCANCODE_KP_MEMRECALL;
  static const kpMemclear = SDL_SCANCODE_KP_MEMCLEAR;
  static const kpMemadd = SDL_SCANCODE_KP_MEMADD;
  static const kpMemsubtract = SDL_SCANCODE_KP_MEMSUBTRACT;
  static const kpMemmultiply = SDL_SCANCODE_KP_MEMMULTIPLY;
  static const kpMemdivide = SDL_SCANCODE_KP_MEMDIVIDE;
  static const kpPlusminus = SDL_SCANCODE_KP_PLUSMINUS;
  static const kpClear = SDL_SCANCODE_KP_CLEAR;
  static const kpClearentry = SDL_SCANCODE_KP_CLEARENTRY;
  static const kpBinary = SDL_SCANCODE_KP_BINARY;
  static const kpOctal = SDL_SCANCODE_KP_OCTAL;
  static const kpDecimal = SDL_SCANCODE_KP_DECIMAL;
  static const kpHexadecimal = SDL_SCANCODE_KP_HEXADECIMAL;
  static const lctrl = SDL_SCANCODE_LCTRL;
  static const lshift = SDL_SCANCODE_LSHIFT;
  static const lalt = SDL_SCANCODE_LALT;
  static const lgui = SDL_SCANCODE_LGUI;
  static const rctrl = SDL_SCANCODE_RCTRL;
  static const rshift = SDL_SCANCODE_RSHIFT;
  static const ralt = SDL_SCANCODE_RALT;
  static const rgui = SDL_SCANCODE_RGUI;
  static const mode = SDL_SCANCODE_MODE;
  static const sleep = SDL_SCANCODE_SLEEP;
  static const wake = SDL_SCANCODE_WAKE;
  static const channelIncrement = SDL_SCANCODE_CHANNEL_INCREMENT;
  static const channelDecrement = SDL_SCANCODE_CHANNEL_DECREMENT;
  static const mediaPlay = SDL_SCANCODE_MEDIA_PLAY;
  static const mediaPause = SDL_SCANCODE_MEDIA_PAUSE;
  static const mediaRecord = SDL_SCANCODE_MEDIA_RECORD;
  static const mediaFastForward = SDL_SCANCODE_MEDIA_FAST_FORWARD;
  static const mediaRewind = SDL_SCANCODE_MEDIA_REWIND;
  static const mediaNextTrack = SDL_SCANCODE_MEDIA_NEXT_TRACK;
  static const mediaPreviousTrack = SDL_SCANCODE_MEDIA_PREVIOUS_TRACK;
  static const mediaStop = SDL_SCANCODE_MEDIA_STOP;
  static const mediaEject = SDL_SCANCODE_MEDIA_EJECT;
  static const mediaPlayPause = SDL_SCANCODE_MEDIA_PLAY_PAUSE;
  static const mediaSelect = SDL_SCANCODE_MEDIA_SELECT;
  static const acNew = SDL_SCANCODE_AC_NEW;
  static const acOpen = SDL_SCANCODE_AC_OPEN;
  static const acClose = SDL_SCANCODE_AC_CLOSE;
  static const acExit = SDL_SCANCODE_AC_EXIT;
  static const acSave = SDL_SCANCODE_AC_SAVE;
  static const acPrint = SDL_SCANCODE_AC_PRINT;
  static const acProperties = SDL_SCANCODE_AC_PROPERTIES;
  static const acSearch = SDL_SCANCODE_AC_SEARCH;
  static const acHome = SDL_SCANCODE_AC_HOME;
  static const acBack = SDL_SCANCODE_AC_BACK;
  static const acForward = SDL_SCANCODE_AC_FORWARD;
  static const acStop = SDL_SCANCODE_AC_STOP;
  static const acRefresh = SDL_SCANCODE_AC_REFRESH;
  static const acBookmarks = SDL_SCANCODE_AC_BOOKMARKS;
  static const softleft = SDL_SCANCODE_SOFTLEFT;
  static const softright = SDL_SCANCODE_SOFTRIGHT;
  static const call = SDL_SCANCODE_CALL;
  static const endcall = SDL_SCANCODE_ENDCALL;
  static const reserved = SDL_SCANCODE_RESERVED;
  static const count = SDL_SCANCODE_COUNT;
}

class SdlkSensor {
  static const invalid = SDL_SENSOR_INVALID;
  static const unknown = SDL_SENSOR_UNKNOWN;
  static const accel = SDL_SENSOR_ACCEL;
  static const gyro = SDL_SENSOR_GYRO;
  static const accelL = SDL_SENSOR_ACCEL_L;
  static const gyroL = SDL_SENSOR_GYRO_L;
  static const accelR = SDL_SENSOR_ACCEL_R;
  static const gyroR = SDL_SENSOR_GYRO_R;
}

class SdlkSurface {
  static const preallocated = SDL_SURFACE_PREALLOCATED;
  static const lockNeeded = SDL_SURFACE_LOCK_NEEDED;
  static const locked = SDL_SURFACE_LOCKED;
  static const simdAligned = SDL_SURFACE_SIMD_ALIGNED;
}

class SdlkScalemode {
  static const invalid = SDL_SCALEMODE_INVALID;
  static const nearest = SDL_SCALEMODE_NEAREST;
  static const linear = SDL_SCALEMODE_LINEAR;
  static const pixelart = SDL_SCALEMODE_PIXELART;
}

class SdlkFlip {
  static const none = SDL_FLIP_NONE;
  static const horizontal = SDL_FLIP_HORIZONTAL;
  static const vertical = SDL_FLIP_VERTICAL;
}

class SdlkPropSurface {
  static const sdrWhitePointFloat = SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT;
  static const hdrHeadroomFloat = SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT;
  static const tonemapOperatorString = SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING;
  static const hotspotXNumber = SDL_PROP_SURFACE_HOTSPOT_X_NUMBER;
  static const hotspotYNumber = SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER;
}

class SdlkAndroidExternalStorage {
  static const read = SDL_ANDROID_EXTERNAL_STORAGE_READ;
  static const write = SDL_ANDROID_EXTERNAL_STORAGE_WRITE;
}

class SdlkSandbox {
  static const none = SDL_SANDBOX_NONE;
  static const unknownContainer = SDL_SANDBOX_UNKNOWN_CONTAINER;
  static const flatpak = SDL_SANDBOX_FLATPAK;
  static const snap = SDL_SANDBOX_SNAP;
  static const macos = SDL_SANDBOX_MACOS;
}

class SdlkThreadPriority {
  static const low = SDL_THREAD_PRIORITY_LOW;
  static const normal = SDL_THREAD_PRIORITY_NORMAL;
  static const high = SDL_THREAD_PRIORITY_HIGH;
  static const timeCritical = SDL_THREAD_PRIORITY_TIME_CRITICAL;
}

class SdlkThread {
  static const priorityLow = SDL_THREAD_PRIORITY_LOW;
  static const priorityNormal = SDL_THREAD_PRIORITY_NORMAL;
  static const priorityHigh = SDL_THREAD_PRIORITY_HIGH;
  static const priorityTimeCritical = SDL_THREAD_PRIORITY_TIME_CRITICAL;
  static const unknown = SDL_THREAD_UNKNOWN;
  static const alive = SDL_THREAD_ALIVE;
  static const detached = SDL_THREAD_DETACHED;
  static const complete = SDL_THREAD_COMPLETE;
}

class SdlkPropThread {
  static const createEntryFunctionPointer =
      SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER;
  static const createNameString = SDL_PROP_THREAD_CREATE_NAME_STRING;
  static const createUserdataPointer = SDL_PROP_THREAD_CREATE_USERDATA_POINTER;
  static const createStacksizeNumber = SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER;
}

class SdlkDateFormat {
  static const yyyymmdd = SDL_DATE_FORMAT_YYYYMMDD;
  static const ddmmyyyy = SDL_DATE_FORMAT_DDMMYYYY;
  static const mmddyyyy = SDL_DATE_FORMAT_MMDDYYYY;
}

class SdlkTimeFormat {
  static const on24Hr = SDL_TIME_FORMAT_24HR;
  static const on12Hr = SDL_TIME_FORMAT_12HR;
}

class SdlkTouchDevice {
  static const invalid = SDL_TOUCH_DEVICE_INVALID;
  static const direct = SDL_TOUCH_DEVICE_DIRECT;
  static const indirectAbsolute = SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE;
  static const indirectRelative = SDL_TOUCH_DEVICE_INDIRECT_RELATIVE;
}

class SdlkTrayentry {
  static const button = SDL_TRAYENTRY_BUTTON;
  static const checkbox = SDL_TRAYENTRY_CHECKBOX;
  static const submenu = SDL_TRAYENTRY_SUBMENU;
  static const disabled = SDL_TRAYENTRY_DISABLED;
  static const checked = SDL_TRAYENTRY_CHECKED;
}

class SdlkSystemTheme {
  static const unknown = SDL_SYSTEM_THEME_UNKNOWN;
  static const light = SDL_SYSTEM_THEME_LIGHT;
  static const dark = SDL_SYSTEM_THEME_DARK;
}

class SdlkOrientation {
  static const unknown = SDL_ORIENTATION_UNKNOWN;
  static const landscape = SDL_ORIENTATION_LANDSCAPE;
  static const landscapeFlipped = SDL_ORIENTATION_LANDSCAPE_FLIPPED;
  static const portrait = SDL_ORIENTATION_PORTRAIT;
  static const portraitFlipped = SDL_ORIENTATION_PORTRAIT_FLIPPED;
}

class SdlkWindow {
  static const fullscreen = SDL_WINDOW_FULLSCREEN;
  static const opengl = SDL_WINDOW_OPENGL;
  static const occluded = SDL_WINDOW_OCCLUDED;
  static const hidden = SDL_WINDOW_HIDDEN;
  static const borderless = SDL_WINDOW_BORDERLESS;
  static const resizable = SDL_WINDOW_RESIZABLE;
  static const minimized = SDL_WINDOW_MINIMIZED;
  static const maximized = SDL_WINDOW_MAXIMIZED;
  static const mouseGrabbed = SDL_WINDOW_MOUSE_GRABBED;
  static const inputFocus = SDL_WINDOW_INPUT_FOCUS;
  static const mouseFocus = SDL_WINDOW_MOUSE_FOCUS;
  static const external = SDL_WINDOW_EXTERNAL;
  static const modal = SDL_WINDOW_MODAL;
  static const highPixelDensity = SDL_WINDOW_HIGH_PIXEL_DENSITY;
  static const mouseCapture = SDL_WINDOW_MOUSE_CAPTURE;
  static const mouseRelativeMode = SDL_WINDOW_MOUSE_RELATIVE_MODE;
  static const alwaysOnTop = SDL_WINDOW_ALWAYS_ON_TOP;
  static const utility = SDL_WINDOW_UTILITY;
  static const tooltip = SDL_WINDOW_TOOLTIP;
  static const popupMenu = SDL_WINDOW_POPUP_MENU;
  static const keyboardGrabbed = SDL_WINDOW_KEYBOARD_GRABBED;
  static const vulkan = SDL_WINDOW_VULKAN;
  static const metal = SDL_WINDOW_METAL;
  static const transparent = SDL_WINDOW_TRANSPARENT;
  static const notFocusable = SDL_WINDOW_NOT_FOCUSABLE;
  static const surfaceVsyncDisabled = SDL_WINDOW_SURFACE_VSYNC_DISABLED;
  static const surfaceVsyncAdaptive = SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE;
}

class SdlkFlash {
  static const cancel = SDL_FLASH_CANCEL;
  static const briefly = SDL_FLASH_BRIEFLY;
  static const untilFocused = SDL_FLASH_UNTIL_FOCUSED;
}

class SdlkProgressState {
  static const invalid = SDL_PROGRESS_STATE_INVALID;
  static const none = SDL_PROGRESS_STATE_NONE;
  static const indeterminate = SDL_PROGRESS_STATE_INDETERMINATE;
  static const normal = SDL_PROGRESS_STATE_NORMAL;
  static const paused = SDL_PROGRESS_STATE_PAUSED;
  static const error = SDL_PROGRESS_STATE_ERROR;
}

class SdlkGl {
  static const redSize = SDL_GL_RED_SIZE;
  static const greenSize = SDL_GL_GREEN_SIZE;
  static const blueSize = SDL_GL_BLUE_SIZE;
  static const alphaSize = SDL_GL_ALPHA_SIZE;
  static const bufferSize = SDL_GL_BUFFER_SIZE;
  static const doublebuffer = SDL_GL_DOUBLEBUFFER;
  static const depthSize = SDL_GL_DEPTH_SIZE;
  static const stencilSize = SDL_GL_STENCIL_SIZE;
  static const accumRedSize = SDL_GL_ACCUM_RED_SIZE;
  static const accumGreenSize = SDL_GL_ACCUM_GREEN_SIZE;
  static const accumBlueSize = SDL_GL_ACCUM_BLUE_SIZE;
  static const accumAlphaSize = SDL_GL_ACCUM_ALPHA_SIZE;
  static const stereo = SDL_GL_STEREO;
  static const multisamplebuffers = SDL_GL_MULTISAMPLEBUFFERS;
  static const multisamplesamples = SDL_GL_MULTISAMPLESAMPLES;
  static const acceleratedVisual = SDL_GL_ACCELERATED_VISUAL;
  static const retainedBacking = SDL_GL_RETAINED_BACKING;
  static const contextMajorVersion = SDL_GL_CONTEXT_MAJOR_VERSION;
  static const contextMinorVersion = SDL_GL_CONTEXT_MINOR_VERSION;
  static const contextFlags = SDL_GL_CONTEXT_FLAGS;
  static const contextProfileMask = SDL_GL_CONTEXT_PROFILE_MASK;
  static const shareWithCurrentContext = SDL_GL_SHARE_WITH_CURRENT_CONTEXT;
  static const framebufferSrgbCapable = SDL_GL_FRAMEBUFFER_SRGB_CAPABLE;
  static const contextReleaseBehavior = SDL_GL_CONTEXT_RELEASE_BEHAVIOR;
  static const contextResetNotification = SDL_GL_CONTEXT_RESET_NOTIFICATION;
  static const contextNoError = SDL_GL_CONTEXT_NO_ERROR;
  static const floatbuffers = SDL_GL_FLOATBUFFERS;
  static const eglPlatform = SDL_GL_EGL_PLATFORM;
  static const contextProfileCore = SDL_GL_CONTEXT_PROFILE_CORE;
  static const contextProfileCompatibility =
      SDL_GL_CONTEXT_PROFILE_COMPATIBILITY;
  static const contextProfileEs = SDL_GL_CONTEXT_PROFILE_ES;
  static const contextDebugFlag = SDL_GL_CONTEXT_DEBUG_FLAG;
  static const contextForwardCompatibleFlag =
      SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG;
  static const contextRobustAccessFlag = SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG;
  static const contextResetIsolationFlag = SDL_GL_CONTEXT_RESET_ISOLATION_FLAG;
  static const contextReleaseBehaviorNone =
      SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE;
  static const contextReleaseBehaviorFlush =
      SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH;
  static const contextResetNoNotification =
      SDL_GL_CONTEXT_RESET_NO_NOTIFICATION;
  static const contextResetLoseContext = SDL_GL_CONTEXT_RESET_LOSE_CONTEXT;
}

class SdlkPropDisplay {
  static const hdrEnabledBoolean = SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN;
  static const kmsdrmPanelOrientationNumber =
      SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER;
  static const waylandWlOutputPointer =
      SDL_PROP_DISPLAY_WAYLAND_WL_OUTPUT_POINTER;
}

class SdlkPropWindow {
  static const createAlwaysOnTopBoolean =
      SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN;
  static const createBorderlessBoolean =
      SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN;
  static const createConstrainPopupBoolean =
      SDL_PROP_WINDOW_CREATE_CONSTRAIN_POPUP_BOOLEAN;
  static const createFocusableBoolean =
      SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN;
  static const createExternalGraphicsContextBoolean =
      SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN;
  static const createFlagsNumber = SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER;
  static const createFullscreenBoolean =
      SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN;
  static const createHeightNumber = SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER;
  static const createHiddenBoolean = SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN;
  static const createHighPixelDensityBoolean =
      SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN;
  static const createMaximizedBoolean =
      SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN;
  static const createMenuBoolean = SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN;
  static const createMetalBoolean = SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN;
  static const createMinimizedBoolean =
      SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN;
  static const createModalBoolean = SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN;
  static const createMouseGrabbedBoolean =
      SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN;
  static const createOpenglBoolean = SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN;
  static const createParentPointer = SDL_PROP_WINDOW_CREATE_PARENT_POINTER;
  static const createResizableBoolean =
      SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN;
  static const createTitleString = SDL_PROP_WINDOW_CREATE_TITLE_STRING;
  static const createTransparentBoolean =
      SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN;
  static const createTooltipBoolean = SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN;
  static const createUtilityBoolean = SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN;
  static const createVulkanBoolean = SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN;
  static const createWidthNumber = SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER;
  static const createXNumber = SDL_PROP_WINDOW_CREATE_X_NUMBER;
  static const createYNumber = SDL_PROP_WINDOW_CREATE_Y_NUMBER;
  static const createCocoaWindowPointer =
      SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER;
  static const createCocoaViewPointer =
      SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER;
  static const createWaylandSurfaceRoleCustomBoolean =
      SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN;
  static const createWaylandCreateEglWindowBoolean =
      SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN;
  static const createWaylandWlSurfacePointer =
      SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER;
  static const createWin32HwndPointer =
      SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER;
  static const createWin32PixelFormatHwndPointer =
      SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER;
  static const createX11WindowNumber = SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER;
  static const createEmscriptenCanvasIdString =
      SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_CANVAS_ID_STRING;
  static const createEmscriptenKeyboardElementString =
      SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING;
  static const shapePointer = SDL_PROP_WINDOW_SHAPE_POINTER;
  static const hdrEnabledBoolean = SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN;
  static const sdrWhiteLevelFloat = SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT;
  static const hdrHeadroomFloat = SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT;
  static const androidWindowPointer = SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER;
  static const androidSurfacePointer = SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER;
  static const uikitWindowPointer = SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER;
  static const uikitMetalViewTagNumber =
      SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER;
  static const uikitOpenglFramebufferNumber =
      SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER;
  static const uikitOpenglRenderbufferNumber =
      SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER;
  static const uikitOpenglResolveFramebufferNumber =
      SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER;
  static const kmsdrmDeviceIndexNumber =
      SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER;
  static const kmsdrmDrmFdNumber = SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER;
  static const kmsdrmGbmDevicePointer =
      SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER;
  static const cocoaWindowPointer = SDL_PROP_WINDOW_COCOA_WINDOW_POINTER;
  static const cocoaMetalViewTagNumber =
      SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER;
  static const openvrOverlayIdNumber = SDL_PROP_WINDOW_OPENVR_OVERLAY_ID_NUMBER;
  static const vivanteDisplayPointer = SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER;
  static const vivanteWindowPointer = SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER;
  static const vivanteSurfacePointer = SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER;
  static const win32HwndPointer = SDL_PROP_WINDOW_WIN32_HWND_POINTER;
  static const win32HdcPointer = SDL_PROP_WINDOW_WIN32_HDC_POINTER;
  static const win32InstancePointer = SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER;
  static const waylandDisplayPointer = SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER;
  static const waylandSurfacePointer = SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER;
  static const waylandViewportPointer =
      SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER;
  static const waylandEglWindowPointer =
      SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER;
  static const waylandXdgSurfacePointer =
      SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER;
  static const waylandXdgToplevelPointer =
      SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER;
  static const waylandXdgToplevelExportHandleString =
      SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING;
  static const waylandXdgPopupPointer =
      SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER;
  static const waylandXdgPositionerPointer =
      SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER;
  static const x11DisplayPointer = SDL_PROP_WINDOW_X11_DISPLAY_POINTER;
  static const x11ScreenNumber = SDL_PROP_WINDOW_X11_SCREEN_NUMBER;
  static const x11WindowNumber = SDL_PROP_WINDOW_X11_WINDOW_NUMBER;
  static const emscriptenCanvasIdString =
      SDL_PROP_WINDOW_EMSCRIPTEN_CANVAS_ID_STRING;
  static const emscriptenKeyboardElementString =
      SDL_PROP_WINDOW_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING;
}

class SdlkWindowSurfaceVsync {
  static const disabled = SDL_WINDOW_SURFACE_VSYNC_DISABLED;
  static const adaptive = SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE;
}

class SdlkHittest {
  static const normal = SDL_HITTEST_NORMAL;
  static const draggable = SDL_HITTEST_DRAGGABLE;
  static const resizeTopleft = SDL_HITTEST_RESIZE_TOPLEFT;
  static const resizeTop = SDL_HITTEST_RESIZE_TOP;
  static const resizeTopright = SDL_HITTEST_RESIZE_TOPRIGHT;
  static const resizeRight = SDL_HITTEST_RESIZE_RIGHT;
  static const resizeBottomright = SDL_HITTEST_RESIZE_BOTTOMRIGHT;
  static const resizeBottom = SDL_HITTEST_RESIZE_BOTTOM;
  static const resizeBottomleft = SDL_HITTEST_RESIZE_BOTTOMLEFT;
  static const resizeLeft = SDL_HITTEST_RESIZE_LEFT;
}
