// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
part of '../sdl_opengl.dart';

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparate;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
/// ```
void glBlendFuncSeparate(
  int sfactorRgb,
  int dfactorRgb,
  int sfactorAlpha,
  int dfactorAlpha,
) {
  final glBlendFuncSeparateAsFunction = _glBlendFuncSeparate
      .cast<
        NativeFunction<
          Void Function(
            Uint32 sfactorRgb,
            Uint32 dfactorRgb,
            Uint32 sfactorAlpha,
            Uint32 dfactorAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int sfactorRgb,
          int dfactorRgb,
          int sfactorAlpha,
          int dfactorAlpha,
        )
      >();
  return glBlendFuncSeparateAsFunction(
    sfactorRgb,
    dfactorRgb,
    sfactorAlpha,
    dfactorAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawArrays;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)
/// ```
void glMultiDrawArrays(
  int mode,
  Pointer<Int32> first,
  Pointer<Uint32> count,
  int drawcount,
) {
  final glMultiDrawArraysAsFunction = _glMultiDrawArrays
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Int32> first,
            Pointer<Uint32> count,
            Uint32 drawcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Int32> first,
          Pointer<Uint32> count,
          int drawcount,
        )
      >();
  return glMultiDrawArraysAsFunction(mode, first, count, drawcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElements;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)
/// ```
void glMultiDrawElements(
  int mode,
  Pointer<Uint32> count,
  int type,
  Pointer<Pointer<NativeType>> indices,
  int drawcount,
) {
  final glMultiDrawElementsAsFunction = _glMultiDrawElements
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Uint32> count,
            Uint32 type,
            Pointer<Pointer<NativeType>> indices,
            Uint32 drawcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Uint32> count,
          int type,
          Pointer<Pointer<NativeType>> indices,
          int drawcount,
        )
      >();
  return glMultiDrawElementsAsFunction(mode, count, type, indices, drawcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterf;

/// ```c
/// GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param)
/// ```
void glPointParameterf(int pname, double param) {
  final glPointParameterfAsFunction = _glPointParameterf
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPointParameterfAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfv;

/// ```c
/// GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params)
/// ```
void glPointParameterfv(int pname, Pointer<Float> params) {
  final glPointParameterfvAsFunction = _glPointParameterfv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glPointParameterfvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameteri;

/// ```c
/// GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param)
/// ```
void glPointParameteri(int pname, int param) {
  final glPointParameteriAsFunction = _glPointParameteri
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPointParameteriAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameteriv;

/// ```c
/// GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params)
/// ```
void glPointParameteriv(int pname, Pointer<Int32> params) {
  final glPointParameterivAsFunction = _glPointParameteriv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glPointParameterivAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordf;

/// ```c
/// GLAPI void APIENTRY glFogCoordf (GLfloat coord)
/// ```
void glFogCoordf(double coord) {
  final glFogCoordfAsFunction = _glFogCoordf
      .cast<NativeFunction<Void Function(Float coord)>>()
      .asFunction<void Function(double coord)>();
  return glFogCoordfAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordfv;

/// ```c
/// GLAPI void APIENTRY glFogCoordfv (const GLfloat *coord)
/// ```
void glFogCoordfv(Pointer<Float> coord) {
  final glFogCoordfvAsFunction = _glFogCoordfv
      .cast<NativeFunction<Void Function(Pointer<Float> coord)>>()
      .asFunction<void Function(Pointer<Float> coord)>();
  return glFogCoordfvAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordd;

/// ```c
/// GLAPI void APIENTRY glFogCoordd (GLdouble coord)
/// ```
void glFogCoordd(double coord) {
  final glFogCoorddAsFunction = _glFogCoordd
      .cast<NativeFunction<Void Function(Double coord)>>()
      .asFunction<void Function(double coord)>();
  return glFogCoorddAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoorddv;

/// ```c
/// GLAPI void APIENTRY glFogCoorddv (const GLdouble *coord)
/// ```
void glFogCoorddv(Pointer<Double> coord) {
  final glFogCoorddvAsFunction = _glFogCoorddv
      .cast<NativeFunction<Void Function(Pointer<Double> coord)>>()
      .asFunction<void Function(Pointer<Double> coord)>();
  return glFogCoorddvAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordPointer;

/// ```c
/// GLAPI void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const void *pointer)
/// ```
void glFogCoordPointer(int type, int stride, Pointer<NativeType> pointer) {
  final glFogCoordPointerAsFunction = _glFogCoordPointer
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> pointer)
      >();
  return glFogCoordPointerAsFunction(type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3b;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue)
/// ```
void glSecondaryColor3b(int red, int green, int blue) {
  final glSecondaryColor3bAsFunction = _glSecondaryColor3b
      .cast<NativeFunction<Void Function(Int8 red, Int8 green, Int8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3bAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3bv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *v)
/// ```
void glSecondaryColor3bv(String v) {
  final glSecondaryColor3bvAsFunction = _glSecondaryColor3bv
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glSecondaryColor3bvAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3d;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue)
/// ```
void glSecondaryColor3d(double red, double green, double blue) {
  final glSecondaryColor3dAsFunction = _glSecondaryColor3d
      .cast<
        NativeFunction<Void Function(Double red, Double green, Double blue)>
      >()
      .asFunction<void Function(double red, double green, double blue)>();
  return glSecondaryColor3dAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3dv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3dv (const GLdouble *v)
/// ```
void glSecondaryColor3dv(Pointer<Double> v) {
  final glSecondaryColor3dvAsFunction = _glSecondaryColor3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glSecondaryColor3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3f;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue)
/// ```
void glSecondaryColor3f(double red, double green, double blue) {
  final glSecondaryColor3fAsFunction = _glSecondaryColor3f
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return glSecondaryColor3fAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3fv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3fv (const GLfloat *v)
/// ```
void glSecondaryColor3fv(Pointer<Float> v) {
  final glSecondaryColor3fvAsFunction = _glSecondaryColor3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glSecondaryColor3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3i;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3i (GLint red, GLint green, GLint blue)
/// ```
void glSecondaryColor3i(int red, int green, int blue) {
  final glSecondaryColor3iAsFunction = _glSecondaryColor3i
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3iAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3iv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3iv (const GLint *v)
/// ```
void glSecondaryColor3iv(Pointer<Int32> v) {
  final glSecondaryColor3ivAsFunction = _glSecondaryColor3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glSecondaryColor3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3s;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3s (GLshort red, GLshort green, GLshort blue)
/// ```
void glSecondaryColor3s(int red, int green, int blue) {
  final glSecondaryColor3sAsFunction = _glSecondaryColor3s
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3sAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3sv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3sv (const GLshort *v)
/// ```
void glSecondaryColor3sv(Pointer<Int16> v) {
  final glSecondaryColor3svAsFunction = _glSecondaryColor3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glSecondaryColor3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ub;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue)
/// ```
void glSecondaryColor3ub(int red, int green, int blue) {
  final glSecondaryColor3ubAsFunction = _glSecondaryColor3ub
      .cast<NativeFunction<Void Function(Uint8 red, Uint8 green, Uint8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3ubAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ubv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ubv (const GLubyte *v)
/// ```
void glSecondaryColor3ubv(Pointer<Uint8> v) {
  final glSecondaryColor3ubvAsFunction = _glSecondaryColor3ubv
      .cast<NativeFunction<Void Function(Pointer<Uint8> v)>>()
      .asFunction<void Function(Pointer<Uint8> v)>();
  return glSecondaryColor3ubvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ui;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue)
/// ```
void glSecondaryColor3ui(int red, int green, int blue) {
  final glSecondaryColor3uiAsFunction = _glSecondaryColor3ui
      .cast<
        NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3uiAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3uiv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3uiv (const GLuint *v)
/// ```
void glSecondaryColor3uiv(Pointer<Uint32> v) {
  final glSecondaryColor3uivAsFunction = _glSecondaryColor3uiv
      .cast<NativeFunction<Void Function(Pointer<Uint32> v)>>()
      .asFunction<void Function(Pointer<Uint32> v)>();
  return glSecondaryColor3uivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3us;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3us (GLushort red, GLushort green, GLushort blue)
/// ```
void glSecondaryColor3us(int red, int green, int blue) {
  final glSecondaryColor3usAsFunction = _glSecondaryColor3us
      .cast<
        NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3usAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3usv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3usv (const GLushort *v)
/// ```
void glSecondaryColor3usv(Pointer<Uint16> v) {
  final glSecondaryColor3usvAsFunction = _glSecondaryColor3usv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glSecondaryColor3usvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorPointer;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glSecondaryColorPointer(
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glSecondaryColorPointerAsFunction = _glSecondaryColorPointer
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glSecondaryColorPointerAsFunction(size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2d;

/// ```c
/// GLAPI void APIENTRY glWindowPos2d (GLdouble x, GLdouble y)
/// ```
void glWindowPos2d(double x, double y) {
  final glWindowPos2dAsFunction = _glWindowPos2d
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2dAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2dv;

/// ```c
/// GLAPI void APIENTRY glWindowPos2dv (const GLdouble *v)
/// ```
void glWindowPos2dv(Pointer<Double> v) {
  final glWindowPos2dvAsFunction = _glWindowPos2dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos2dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2f;

/// ```c
/// GLAPI void APIENTRY glWindowPos2f (GLfloat x, GLfloat y)
/// ```
void glWindowPos2f(double x, double y) {
  final glWindowPos2fAsFunction = _glWindowPos2f
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2fAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2fv;

/// ```c
/// GLAPI void APIENTRY glWindowPos2fv (const GLfloat *v)
/// ```
void glWindowPos2fv(Pointer<Float> v) {
  final glWindowPos2fvAsFunction = _glWindowPos2fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos2fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2i;

/// ```c
/// GLAPI void APIENTRY glWindowPos2i (GLint x, GLint y)
/// ```
void glWindowPos2i(int x, int y) {
  final glWindowPos2iAsFunction = _glWindowPos2i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2iAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2iv;

/// ```c
/// GLAPI void APIENTRY glWindowPos2iv (const GLint *v)
/// ```
void glWindowPos2iv(Pointer<Int32> v) {
  final glWindowPos2ivAsFunction = _glWindowPos2iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos2ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2s;

/// ```c
/// GLAPI void APIENTRY glWindowPos2s (GLshort x, GLshort y)
/// ```
void glWindowPos2s(int x, int y) {
  final glWindowPos2sAsFunction = _glWindowPos2s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2sAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2sv;

/// ```c
/// GLAPI void APIENTRY glWindowPos2sv (const GLshort *v)
/// ```
void glWindowPos2sv(Pointer<Int16> v) {
  final glWindowPos2svAsFunction = _glWindowPos2sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos2svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3d;

/// ```c
/// GLAPI void APIENTRY glWindowPos3d (GLdouble x, GLdouble y, GLdouble z)
/// ```
void glWindowPos3d(double x, double y, double z) {
  final glWindowPos3dAsFunction = _glWindowPos3d
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3dAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3dv;

/// ```c
/// GLAPI void APIENTRY glWindowPos3dv (const GLdouble *v)
/// ```
void glWindowPos3dv(Pointer<Double> v) {
  final glWindowPos3dvAsFunction = _glWindowPos3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3f;

/// ```c
/// GLAPI void APIENTRY glWindowPos3f (GLfloat x, GLfloat y, GLfloat z)
/// ```
void glWindowPos3f(double x, double y, double z) {
  final glWindowPos3fAsFunction = _glWindowPos3f
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3fAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3fv;

/// ```c
/// GLAPI void APIENTRY glWindowPos3fv (const GLfloat *v)
/// ```
void glWindowPos3fv(Pointer<Float> v) {
  final glWindowPos3fvAsFunction = _glWindowPos3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3i;

/// ```c
/// GLAPI void APIENTRY glWindowPos3i (GLint x, GLint y, GLint z)
/// ```
void glWindowPos3i(int x, int y, int z) {
  final glWindowPos3iAsFunction = _glWindowPos3i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3iAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3iv;

/// ```c
/// GLAPI void APIENTRY glWindowPos3iv (const GLint *v)
/// ```
void glWindowPos3iv(Pointer<Int32> v) {
  final glWindowPos3ivAsFunction = _glWindowPos3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3s;

/// ```c
/// GLAPI void APIENTRY glWindowPos3s (GLshort x, GLshort y, GLshort z)
/// ```
void glWindowPos3s(int x, int y, int z) {
  final glWindowPos3sAsFunction = _glWindowPos3s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3sAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3sv;

/// ```c
/// GLAPI void APIENTRY glWindowPos3sv (const GLshort *v)
/// ```
void glWindowPos3sv(Pointer<Int16> v) {
  final glWindowPos3svAsFunction = _glWindowPos3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenQueries;

/// ```c
/// GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids)
/// ```
void glGenQueries(int n, Pointer<Uint32> ids) {
  final glGenQueriesAsFunction = _glGenQueries
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glGenQueriesAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteQueries;

/// ```c
/// GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids)
/// ```
void glDeleteQueries(int n, Pointer<Uint32> ids) {
  final glDeleteQueriesAsFunction = _glDeleteQueries
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glDeleteQueriesAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsQuery;

/// ```c
/// GLAPI GLboolean APIENTRY glIsQuery (GLuint id)
/// ```
int glIsQuery(int id) {
  final glIsQueryAsFunction = _glIsQuery
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsQueryAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginQuery;

/// ```c
/// GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id)
/// ```
void glBeginQuery(int target, int id) {
  final glBeginQueryAsFunction = _glBeginQuery
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return glBeginQueryAsFunction(target, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndQuery;

/// ```c
/// GLAPI void APIENTRY glEndQuery (GLenum target)
/// ```
void glEndQuery(int target) {
  final glEndQueryAsFunction = _glEndQuery
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glEndQueryAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryiv;

/// ```c
/// GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetQueryiv(int target, int pname, Pointer<Int32> params) {
  final glGetQueryivAsFunction = _glGetQueryiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetQueryivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectiv;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params)
/// ```
void glGetQueryObjectiv(int id, int pname, Pointer<Int32> params) {
  final glGetQueryObjectivAsFunction = _glGetQueryObjectiv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int32> params)>();
  return glGetQueryObjectivAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectuiv;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params)
/// ```
void glGetQueryObjectuiv(int id, int pname, Pointer<Uint32> params) {
  final glGetQueryObjectuivAsFunction = _glGetQueryObjectuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint32> params)>();
  return glGetQueryObjectuivAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBuffer;

/// ```c
/// GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer)
/// ```
void glBindBuffer(int target, int buffer) {
  final glBindBufferAsFunction = _glBindBuffer
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer)>>()
      .asFunction<void Function(int target, int buffer)>();
  return glBindBufferAsFunction(target, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteBuffers;

/// ```c
/// GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers)
/// ```
void glDeleteBuffers(int n, Pointer<Uint32> buffers) {
  final glDeleteBuffersAsFunction = _glDeleteBuffers
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> buffers)>();
  return glDeleteBuffersAsFunction(n, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenBuffers;

/// ```c
/// GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers)
/// ```
void glGenBuffers(int n, Pointer<Uint32> buffers) {
  final glGenBuffersAsFunction = _glGenBuffers
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> buffers)>();
  return glGenBuffersAsFunction(n, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsBuffer;

/// ```c
/// GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer)
/// ```
int glIsBuffer(int buffer) {
  final glIsBufferAsFunction = _glIsBuffer
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glIsBufferAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferData;

/// ```c
/// GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage)
/// ```
void glBufferData(
  int target,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int usage,
) {
  final glBufferDataAsFunction = _glBufferData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 usage,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int usage,
        )
      >();
  return glBufferDataAsFunction(target, size, data, usage);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferSubData;

/// ```c
/// GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
void glBufferSubData(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glBufferSubDataAsFunction = _glBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glBufferSubDataAsFunction(target, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferSubData;

/// ```c
/// GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data)
/// ```
void glGetBufferSubData(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glGetBufferSubDataAsFunction = _glGetBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glGetBufferSubDataAsFunction(target, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapBuffer;

/// ```c
/// GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access)
/// ```
Pointer<NativeType> glMapBuffer(int target, int access) {
  final glMapBufferAsFunction = _glMapBuffer
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 target, Uint32 access)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int target, int access)>();
  return glMapBufferAsFunction(target, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapBuffer;

/// ```c
/// GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target)
/// ```
int glUnmapBuffer(int target) {
  final glUnmapBufferAsFunction = _glUnmapBuffer
      .cast<NativeFunction<Int32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return glUnmapBufferAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetBufferParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetBufferParameterivAsFunction = _glGetBufferParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetBufferParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferPointerv;

/// ```c
/// GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params)
/// ```
void glGetBufferPointerv(
  int target,
  int pname,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetBufferPointervAsFunction = _glGetBufferPointerv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 pname,
            Pointer<Pointer<NativeType>> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int pname,
          Pointer<Pointer<NativeType>> params,
        )
      >();
  return glGetBufferPointervAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationSeparate;

/// ```c
/// GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha)
/// ```
void glBlendEquationSeparate(int modeRgb, int modeAlpha) {
  final glBlendEquationSeparateAsFunction = _glBlendEquationSeparate
      .cast<NativeFunction<Void Function(Uint32 modeRgb, Uint32 modeAlpha)>>()
      .asFunction<void Function(int modeRgb, int modeAlpha)>();
  return glBlendEquationSeparateAsFunction(modeRgb, modeAlpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawBuffers;

/// ```c
/// GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs)
/// ```
void glDrawBuffers(int n, Pointer<Uint32> bufs) {
  final glDrawBuffersAsFunction = _glDrawBuffers
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> bufs)>();
  return glDrawBuffersAsFunction(n, bufs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilOpSeparate;

/// ```c
/// GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
/// ```
void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass) {
  final glStencilOpSeparateAsFunction = _glStencilOpSeparate
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass)
        >
      >()
      .asFunction<void Function(int face, int sfail, int dpfail, int dppass)>();
  return glStencilOpSeparateAsFunction(face, sfail, dpfail, dppass);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilFuncSeparate;

/// ```c
/// GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask)
/// ```
void glStencilFuncSeparate(int face, int func, int ref, int mask) {
  final glStencilFuncSeparateAsFunction = _glStencilFuncSeparate
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 func, Int32 ref, Uint32 mask)
        >
      >()
      .asFunction<void Function(int face, int func, int ref, int mask)>();
  return glStencilFuncSeparateAsFunction(face, func, ref, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilMaskSeparate;

/// ```c
/// GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask)
/// ```
void glStencilMaskSeparate(int face, int mask) {
  final glStencilMaskSeparateAsFunction = _glStencilMaskSeparate
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mask)>>()
      .asFunction<void Function(int face, int mask)>();
  return glStencilMaskSeparateAsFunction(face, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAttachShader;

/// ```c
/// GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader)
/// ```
void glAttachShader(int program, int shader) {
  final glAttachShaderAsFunction = _glAttachShader
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shader)>>()
      .asFunction<void Function(int program, int shader)>();
  return glAttachShaderAsFunction(program, shader);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindAttribLocation;

/// ```c
/// GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name)
/// ```
void glBindAttribLocation(int program, int index, String name) {
  final glBindAttribLocationAsFunction = _glBindAttribLocation
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Uint32 index, Pointer<Utf8> name)
        >
      >()
      .asFunction<void Function(int program, int index, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glBindAttribLocationAsFunction(program, index, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompileShader;

/// ```c
/// GLAPI void APIENTRY glCompileShader (GLuint shader)
/// ```
void glCompileShader(int shader) {
  final glCompileShaderAsFunction = _glCompileShader
      .cast<NativeFunction<Void Function(Uint32 shader)>>()
      .asFunction<void Function(int shader)>();
  return glCompileShaderAsFunction(shader);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateProgram;

/// ```c
/// GLAPI GLuint APIENTRY glCreateProgram (void)
/// ```
int glCreateProgram() {
  final glCreateProgramAsFunction = _glCreateProgram
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return glCreateProgramAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateShader;

/// ```c
/// GLAPI GLuint APIENTRY glCreateShader (GLenum type)
/// ```
int glCreateShader(int type) {
  final glCreateShaderAsFunction = _glCreateShader
      .cast<NativeFunction<Uint32 Function(Uint32 type)>>()
      .asFunction<int Function(int type)>();
  return glCreateShaderAsFunction(type);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteProgram;

/// ```c
/// GLAPI void APIENTRY glDeleteProgram (GLuint program)
/// ```
void glDeleteProgram(int program) {
  final glDeleteProgramAsFunction = _glDeleteProgram
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return glDeleteProgramAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteShader;

/// ```c
/// GLAPI void APIENTRY glDeleteShader (GLuint shader)
/// ```
void glDeleteShader(int shader) {
  final glDeleteShaderAsFunction = _glDeleteShader
      .cast<NativeFunction<Void Function(Uint32 shader)>>()
      .asFunction<void Function(int shader)>();
  return glDeleteShaderAsFunction(shader);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDetachShader;

/// ```c
/// GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader)
/// ```
void glDetachShader(int program, int shader) {
  final glDetachShaderAsFunction = _glDetachShader
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shader)>>()
      .asFunction<void Function(int program, int shader)>();
  return glDetachShaderAsFunction(program, shader);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexAttribArray;

/// ```c
/// GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index)
/// ```
void glDisableVertexAttribArray(int index) {
  final glDisableVertexAttribArrayAsFunction = _glDisableVertexAttribArray
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glDisableVertexAttribArrayAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexAttribArray;

/// ```c
/// GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index)
/// ```
void glEnableVertexAttribArray(int index) {
  final glEnableVertexAttribArrayAsFunction = _glEnableVertexAttribArray
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glEnableVertexAttribArrayAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveAttrib;

/// ```c
/// GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
/// ```
void glGetActiveAttrib(
  int program,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetActiveAttribAsFunction = _glGetActiveAttrib
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveAttribAsFunction(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniform;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
/// ```
void glGetActiveUniform(
  int program,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetActiveUniformAsFunction = _glGetActiveUniform
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveUniformAsFunction(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetAttachedShaders;

/// ```c
/// GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
/// ```
void glGetAttachedShaders(
  int program,
  int maxCount,
  Pointer<Uint32> count,
  Pointer<Uint32> shaders,
) {
  final glGetAttachedShadersAsFunction = _glGetAttachedShaders
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 maxCount,
            Pointer<Uint32> count,
            Pointer<Uint32> shaders,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int maxCount,
          Pointer<Uint32> count,
          Pointer<Uint32> shaders,
        )
      >();
  return glGetAttachedShadersAsFunction(program, maxCount, count, shaders);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetAttribLocation;

/// ```c
/// GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name)
/// ```
int glGetAttribLocation(int program, String name) {
  final glGetAttribLocationAsFunction = _glGetAttribLocation
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetAttribLocationAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramiv;

/// ```c
/// GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params)
/// ```
void glGetProgramiv(int program, int pname, Pointer<Int32> params) {
  final glGetProgramivAsFunction = _glGetProgramiv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int program, int pname, Pointer<Int32> params)
      >();
  return glGetProgramivAsFunction(program, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramInfoLog;

/// ```c
/// GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
/// ```
void glGetProgramInfoLog(
  int program,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> infoLog,
) {
  final glGetProgramInfoLogAsFunction = _glGetProgramInfoLog
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> infoLog,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> infoLog,
        )
      >();
  return glGetProgramInfoLogAsFunction(program, bufSize, length, infoLog);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShaderiv;

/// ```c
/// GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params)
/// ```
void glGetShaderiv(int shader, int pname, Pointer<Int32> params) {
  final glGetShaderivAsFunction = _glGetShaderiv
      .cast<
        NativeFunction<
          Void Function(Uint32 shader, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int shader, int pname, Pointer<Int32> params)
      >();
  return glGetShaderivAsFunction(shader, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShaderInfoLog;

/// ```c
/// GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
/// ```
void glGetShaderInfoLog(
  int shader,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> infoLog,
) {
  final glGetShaderInfoLogAsFunction = _glGetShaderInfoLog
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> infoLog,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> infoLog,
        )
      >();
  return glGetShaderInfoLogAsFunction(shader, bufSize, length, infoLog);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShaderSource;

/// ```c
/// GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
/// ```
void glGetShaderSource(
  int shader,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> source,
) {
  final glGetShaderSourceAsFunction = _glGetShaderSource
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> source,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> source,
        )
      >();
  return glGetShaderSourceAsFunction(shader, bufSize, length, source);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformLocation;

/// ```c
/// GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name)
/// ```
int glGetUniformLocation(int program, String name) {
  final glGetUniformLocationAsFunction = _glGetUniformLocation
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetUniformLocationAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformfv;

/// ```c
/// GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params)
/// ```
void glGetUniformfv(int program, int location, Pointer<Float> params) {
  final glGetUniformfvAsFunction = _glGetUniformfv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Float> params)
      >();
  return glGetUniformfvAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformiv;

/// ```c
/// GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params)
/// ```
void glGetUniformiv(int program, int location, Pointer<Int32> params) {
  final glGetUniformivAsFunction = _glGetUniformiv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Int32> params)
      >();
  return glGetUniformivAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribdv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetVertexAttribdv(int index, int pname, Pointer<Double> params) {
  final glGetVertexAttribdvAsFunction = _glGetVertexAttribdv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Double> params)
      >();
  return glGetVertexAttribdvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribfv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetVertexAttribfv(int index, int pname, Pointer<Float> params) {
  final glGetVertexAttribfvAsFunction = _glGetVertexAttribfv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Float> params)>();
  return glGetVertexAttribfvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribiv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribiv(int index, int pname, Pointer<Int32> params) {
  final glGetVertexAttribivAsFunction = _glGetVertexAttribiv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int32> params)>();
  return glGetVertexAttribivAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribPointerv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer)
/// ```
void glGetVertexAttribPointerv(
  int index,
  int pname,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glGetVertexAttribPointervAsFunction = _glGetVertexAttribPointerv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 pname,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int pname,
          Pointer<Pointer<NativeType>> pointer,
        )
      >();
  return glGetVertexAttribPointervAsFunction(index, pname, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsProgram;

/// ```c
/// GLAPI GLboolean APIENTRY glIsProgram (GLuint program)
/// ```
int glIsProgram(int program) {
  final glIsProgramAsFunction = _glIsProgram
      .cast<NativeFunction<Int32 Function(Uint32 program)>>()
      .asFunction<int Function(int program)>();
  return glIsProgramAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsShader;

/// ```c
/// GLAPI GLboolean APIENTRY glIsShader (GLuint shader)
/// ```
int glIsShader(int shader) {
  final glIsShaderAsFunction = _glIsShader
      .cast<NativeFunction<Int32 Function(Uint32 shader)>>()
      .asFunction<int Function(int shader)>();
  return glIsShaderAsFunction(shader);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLinkProgram;

/// ```c
/// GLAPI void APIENTRY glLinkProgram (GLuint program)
/// ```
void glLinkProgram(int program) {
  final glLinkProgramAsFunction = _glLinkProgram
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return glLinkProgramAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderSource;

/// ```c
/// GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)
/// ```
void glShaderSource(
  int shader,
  int count,
  Pointer<Pointer<Int8>> string,
  Pointer<Int32> length,
) {
  final glShaderSourceAsFunction = _glShaderSource
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Uint32 count,
            Pointer<Pointer<Int8>> string,
            Pointer<Int32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          int count,
          Pointer<Pointer<Int8>> string,
          Pointer<Int32> length,
        )
      >();
  return glShaderSourceAsFunction(shader, count, string, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUseProgram;

/// ```c
/// GLAPI void APIENTRY glUseProgram (GLuint program)
/// ```
void glUseProgram(int program) {
  final glUseProgramAsFunction = _glUseProgram
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return glUseProgramAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1f;

/// ```c
/// GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0)
/// ```
void glUniform1f(int location, double v0) {
  final glUniform1fAsFunction = _glUniform1f
      .cast<NativeFunction<Void Function(Int32 location, Float v0)>>()
      .asFunction<void Function(int location, double v0)>();
  return glUniform1fAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2f;

/// ```c
/// GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1)
/// ```
void glUniform2f(int location, double v0, double v1) {
  final glUniform2fAsFunction = _glUniform2f
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1)>>()
      .asFunction<void Function(int location, double v0, double v1)>();
  return glUniform2fAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3f;

/// ```c
/// GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
void glUniform3f(int location, double v0, double v1, double v2) {
  final glUniform3fAsFunction = _glUniform3f
      .cast<
        NativeFunction<
          Void Function(Int32 location, Float v0, Float v1, Float v2)
        >
      >()
      .asFunction<
        void Function(int location, double v0, double v1, double v2)
      >();
  return glUniform3fAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4f;

/// ```c
/// GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
void glUniform4f(int location, double v0, double v1, double v2, double v3) {
  final glUniform4fAsFunction = _glUniform4f
      .cast<
        NativeFunction<
          Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3)
        >
      >()
      .asFunction<
        void Function(int location, double v0, double v1, double v2, double v3)
      >();
  return glUniform4fAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1i;

/// ```c
/// GLAPI void APIENTRY glUniform1i (GLint location, GLint v0)
/// ```
void glUniform1i(int location, int v0) {
  final glUniform1iAsFunction = _glUniform1i
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return glUniform1iAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2i;

/// ```c
/// GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1)
/// ```
void glUniform2i(int location, int v0, int v1) {
  final glUniform2iAsFunction = _glUniform2i
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return glUniform2iAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3i;

/// ```c
/// GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2)
/// ```
void glUniform3i(int location, int v0, int v1, int v2) {
  final glUniform3iAsFunction = _glUniform3i
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        >
      >()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return glUniform3iAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4i;

/// ```c
/// GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
void glUniform4i(int location, int v0, int v1, int v2, int v3) {
  final glUniform4iAsFunction = _glUniform4i
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        >
      >()
      .asFunction<
        void Function(int location, int v0, int v1, int v2, int v3)
      >();
  return glUniform4iAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1fv;

/// ```c
/// GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform1fv(int location, int count, Pointer<Float> value) {
  final glUniform1fvAsFunction = _glUniform1fv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform1fvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2fv;

/// ```c
/// GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform2fv(int location, int count, Pointer<Float> value) {
  final glUniform2fvAsFunction = _glUniform2fv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform2fvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3fv;

/// ```c
/// GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform3fv(int location, int count, Pointer<Float> value) {
  final glUniform3fvAsFunction = _glUniform3fv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform3fvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4fv;

/// ```c
/// GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform4fv(int location, int count, Pointer<Float> value) {
  final glUniform4fvAsFunction = _glUniform4fv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform4fvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1iv;

/// ```c
/// GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform1iv(int location, int count, Pointer<Int32> value) {
  final glUniform1ivAsFunction = _glUniform1iv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform1ivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2iv;

/// ```c
/// GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform2iv(int location, int count, Pointer<Int32> value) {
  final glUniform2ivAsFunction = _glUniform2iv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform2ivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3iv;

/// ```c
/// GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform3iv(int location, int count, Pointer<Int32> value) {
  final glUniform3ivAsFunction = _glUniform3iv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform3ivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4iv;

/// ```c
/// GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform4iv(int location, int count, Pointer<Int32> value) {
  final glUniform4ivAsFunction = _glUniform4iv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform4ivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix2fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix2fvAsFunction = _glUniformMatrix2fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix2fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix3fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix3fvAsFunction = _glUniformMatrix3fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix3fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix4fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix4fvAsFunction = _glUniformMatrix4fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix4fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glValidateProgram;

/// ```c
/// GLAPI void APIENTRY glValidateProgram (GLuint program)
/// ```
void glValidateProgram(int program) {
  final glValidateProgramAsFunction = _glValidateProgram
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return glValidateProgramAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1d;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x)
/// ```
void glVertexAttrib1d(int index, double x) {
  final glVertexAttrib1dAsFunction = _glVertexAttrib1d
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1dAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib1dv(int index, Pointer<Double> v) {
  final glVertexAttrib1dvAsFunction = _glVertexAttrib1dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib1dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1f;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x)
/// ```
void glVertexAttrib1f(int index, double x) {
  final glVertexAttrib1fAsFunction = _glVertexAttrib1f
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1fAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1fv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib1fv(int index, Pointer<Float> v) {
  final glVertexAttrib1fvAsFunction = _glVertexAttrib1fv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib1fvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1s;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x)
/// ```
void glVertexAttrib1s(int index, int x) {
  final glVertexAttrib1sAsFunction = _glVertexAttrib1s
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttrib1sAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1sv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib1sv(int index, Pointer<Int16> v) {
  final glVertexAttrib1svAsFunction = _glVertexAttrib1sv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib1svAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2d;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y)
/// ```
void glVertexAttrib2d(int index, double x, double y) {
  final glVertexAttrib2dAsFunction = _glVertexAttrib2d
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2dAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib2dv(int index, Pointer<Double> v) {
  final glVertexAttrib2dvAsFunction = _glVertexAttrib2dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib2dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2f;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y)
/// ```
void glVertexAttrib2f(int index, double x, double y) {
  final glVertexAttrib2fAsFunction = _glVertexAttrib2f
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2fAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2fv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib2fv(int index, Pointer<Float> v) {
  final glVertexAttrib2fvAsFunction = _glVertexAttrib2fv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib2fvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2s;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y)
/// ```
void glVertexAttrib2s(int index, int x, int y) {
  final glVertexAttrib2sAsFunction = _glVertexAttrib2s
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttrib2sAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2sv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib2sv(int index, Pointer<Int16> v) {
  final glVertexAttrib2svAsFunction = _glVertexAttrib2sv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib2svAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3d;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexAttrib3d(int index, double x, double y, double z) {
  final glVertexAttrib3dAsFunction = _glVertexAttrib3d
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3dAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib3dv(int index, Pointer<Double> v) {
  final glVertexAttrib3dvAsFunction = _glVertexAttrib3dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib3dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3f;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glVertexAttrib3f(int index, double x, double y, double z) {
  final glVertexAttrib3fAsFunction = _glVertexAttrib3f
      .cast<
        NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3fAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3fv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib3fv(int index, Pointer<Float> v) {
  final glVertexAttrib3fvAsFunction = _glVertexAttrib3fv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib3fvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3s;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
void glVertexAttrib3s(int index, int x, int y, int z) {
  final glVertexAttrib3sAsFunction = _glVertexAttrib3s
      .cast<
        NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttrib3sAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3sv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib3sv(int index, Pointer<Int16> v) {
  final glVertexAttrib3svAsFunction = _glVertexAttrib3sv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib3svAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nbv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v)
/// ```
void glVertexAttrib4Nbv(int index, String v) {
  final glVertexAttrib4NbvAsFunction = _glVertexAttrib4Nbv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttrib4NbvAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Niv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v)
/// ```
void glVertexAttrib4Niv(int index, Pointer<Int32> v) {
  final glVertexAttrib4NivAsFunction = _glVertexAttrib4Niv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttrib4NivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nsv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib4Nsv(int index, Pointer<Int16> v) {
  final glVertexAttrib4NsvAsFunction = _glVertexAttrib4Nsv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib4NsvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nub;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
void glVertexAttrib4Nub(int index, int x, int y, int z, int w) {
  final glVertexAttrib4NubAsFunction = _glVertexAttrib4Nub
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4NubAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nubv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v)
/// ```
void glVertexAttrib4Nubv(int index, Pointer<Uint8> v) {
  final glVertexAttrib4NubvAsFunction = _glVertexAttrib4Nubv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttrib4NubvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nuiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttrib4Nuiv(int index, Pointer<Uint32> v) {
  final glVertexAttrib4NuivAsFunction = _glVertexAttrib4Nuiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttrib4NuivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4Nusv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v)
/// ```
void glVertexAttrib4Nusv(int index, Pointer<Uint16> v) {
  final glVertexAttrib4NusvAsFunction = _glVertexAttrib4Nusv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib4NusvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4bv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v)
/// ```
void glVertexAttrib4bv(int index, String v) {
  final glVertexAttrib4bvAsFunction = _glVertexAttrib4bv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttrib4bvAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4d;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexAttrib4d(int index, double x, double y, double z, double w) {
  final glVertexAttrib4dAsFunction = _glVertexAttrib4d
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4dAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib4dv(int index, Pointer<Double> v) {
  final glVertexAttrib4dvAsFunction = _glVertexAttrib4dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib4dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4f;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glVertexAttrib4f(int index, double x, double y, double z, double w) {
  final glVertexAttrib4fAsFunction = _glVertexAttrib4f
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Float x, Float y, Float z, Float w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4fAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4fv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib4fv(int index, Pointer<Float> v) {
  final glVertexAttrib4fvAsFunction = _glVertexAttrib4fv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib4fvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4iv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v)
/// ```
void glVertexAttrib4iv(int index, Pointer<Int32> v) {
  final glVertexAttrib4ivAsFunction = _glVertexAttrib4iv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttrib4ivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4s;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
void glVertexAttrib4s(int index, int x, int y, int z, int w) {
  final glVertexAttrib4sAsFunction = _glVertexAttrib4s
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4sAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4sv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib4sv(int index, Pointer<Int16> v) {
  final glVertexAttrib4svAsFunction = _glVertexAttrib4sv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib4svAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4ubv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v)
/// ```
void glVertexAttrib4ubv(int index, Pointer<Uint8> v) {
  final glVertexAttrib4ubvAsFunction = _glVertexAttrib4ubv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttrib4ubvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttrib4uiv(int index, Pointer<Uint32> v) {
  final glVertexAttrib4uivAsFunction = _glVertexAttrib4uiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttrib4uivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4usv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v)
/// ```
void glVertexAttrib4usv(int index, Pointer<Uint16> v) {
  final glVertexAttrib4usvAsFunction = _glVertexAttrib4usv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib4usvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribPointer;

/// ```c
/// GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribPointer(
  int index,
  int size,
  int type,
  int normalized,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribPointerAsFunction = _glVertexAttribPointer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int normalized,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribPointerAsFunction(
    index,
    size,
    type,
    normalized,
    stride,
    pointer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2x3fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix2x3fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix2x3fvAsFunction = _glUniformMatrix2x3fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix2x3fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3x2fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix3x2fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix3x2fvAsFunction = _glUniformMatrix3x2fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix3x2fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2x4fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix2x4fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix2x4fvAsFunction = _glUniformMatrix2x4fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix2x4fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4x2fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix4x2fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix4x2fvAsFunction = _glUniformMatrix4x2fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix4x2fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3x4fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix3x4fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix3x4fvAsFunction = _glUniformMatrix3x4fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix3x4fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4x3fv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix4x3fv(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix4x3fvAsFunction = _glUniformMatrix4x3fv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix4x3fvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorMaski;

/// ```c
/// GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
/// ```
void glColorMaski(int index, int r, int g, int b, int a) {
  final glColorMaskiAsFunction = _glColorMaski
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 r, Int32 g, Int32 b, Int32 a)
        >
      >()
      .asFunction<void Function(int index, int r, int g, int b, int a)>();
  return glColorMaskiAsFunction(index, r, g, b, a);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBooleaniV;

/// ```c
/// GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data)
/// ```
void glGetBooleaniV(int target, int index, Pointer<Int32> data) {
  final glGetBooleaniVAsFunction = _glGetBooleaniV
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Int32> data)>();
  return glGetBooleaniVAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetIntegeriV;

/// ```c
/// GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data)
/// ```
void glGetIntegeriV(int target, int index, Pointer<Int32> data) {
  final glGetIntegeriVAsFunction = _glGetIntegeriV
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Int32> data)>();
  return glGetIntegeriVAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnablei;

/// ```c
/// GLAPI void APIENTRY glEnablei (GLenum target, GLuint index)
/// ```
void glEnablei(int target, int index) {
  final glEnableiAsFunction = _glEnablei
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return glEnableiAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisablei;

/// ```c
/// GLAPI void APIENTRY glDisablei (GLenum target, GLuint index)
/// ```
void glDisablei(int target, int index) {
  final glDisableiAsFunction = _glDisablei
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return glDisableiAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsEnabledi;

/// ```c
/// GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index)
/// ```
int glIsEnabledi(int target, int index) {
  final glIsEnablediAsFunction = _glIsEnabledi
      .cast<NativeFunction<Int32 Function(Uint32 target, Uint32 index)>>()
      .asFunction<int Function(int target, int index)>();
  return glIsEnablediAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode)
/// ```
void glBeginTransformFeedback(int primitiveMode) {
  final glBeginTransformFeedbackAsFunction = _glBeginTransformFeedback
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return glBeginTransformFeedbackAsFunction(primitiveMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glEndTransformFeedback (void)
/// ```
void glEndTransformFeedback() {
  final glEndTransformFeedbackAsFunction = _glEndTransformFeedback
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndTransformFeedbackAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferRange;

/// ```c
/// GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glBindBufferRange(
  int target,
  int index,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glBindBufferRangeAsFunction = _glBindBufferRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glBindBufferRangeAsFunction(target, index, buffer, offset, size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferBase;

/// ```c
/// GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
/// ```
void glBindBufferBase(int target, int index, int buffer) {
  final glBindBufferBaseAsFunction = _glBindBufferBase
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int index, int buffer)>();
  return glBindBufferBaseAsFunction(target, index, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackVaryings;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
/// ```
void glTransformFeedbackVaryings(
  int program,
  int count,
  Pointer<Pointer<Int8>> varyings,
  int bufferMode,
) {
  final glTransformFeedbackVaryingsAsFunction = _glTransformFeedbackVaryings
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 count,
            Pointer<Pointer<Int8>> varyings,
            Uint32 bufferMode,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int count,
          Pointer<Pointer<Int8>> varyings,
          int bufferMode,
        )
      >();
  return glTransformFeedbackVaryingsAsFunction(
    program,
    count,
    varyings,
    bufferMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbackVarying;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
/// ```
void glGetTransformFeedbackVarying(
  int program,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Uint32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetTransformFeedbackVaryingAsFunction = _glGetTransformFeedbackVarying
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Uint32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Uint32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetTransformFeedbackVaryingAsFunction(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClampColor;

/// ```c
/// GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp)
/// ```
void glClampColor(int target, int clamp) {
  final glClampColorAsFunction = _glClampColor
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 clamp)>>()
      .asFunction<void Function(int target, int clamp)>();
  return glClampColorAsFunction(target, clamp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginConditionalRender;

/// ```c
/// GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode)
/// ```
void glBeginConditionalRender(int id, int mode) {
  final glBeginConditionalRenderAsFunction = _glBeginConditionalRender
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 mode)>>()
      .asFunction<void Function(int id, int mode)>();
  return glBeginConditionalRenderAsFunction(id, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndConditionalRender;

/// ```c
/// GLAPI void APIENTRY glEndConditionalRender (void)
/// ```
void glEndConditionalRender() {
  final glEndConditionalRenderAsFunction = _glEndConditionalRender
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndConditionalRenderAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribIPointer;

/// ```c
/// GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribIPointer(
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribIPointerAsFunction = _glVertexAttribIPointer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribIPointerAsFunction(index, size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribIiv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribIiv(int index, int pname, Pointer<Int32> params) {
  final glGetVertexAttribIivAsFunction = _glGetVertexAttribIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int32> params)>();
  return glGetVertexAttribIivAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribIuiv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params)
/// ```
void glGetVertexAttribIuiv(int index, int pname, Pointer<Uint32> params) {
  final glGetVertexAttribIuivAsFunction = _glGetVertexAttribIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Uint32> params)
      >();
  return glGetVertexAttribIuivAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1i;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x)
/// ```
void glVertexAttribI1i(int index, int x) {
  final glVertexAttribI1iAsFunction = _glVertexAttribI1i
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribI1iAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2i;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y)
/// ```
void glVertexAttribI2i(int index, int x, int y) {
  final glVertexAttribI2iAsFunction = _glVertexAttribI2i
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribI2iAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3i;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z)
/// ```
void glVertexAttribI3i(int index, int x, int y, int z) {
  final glVertexAttribI3iAsFunction = _glVertexAttribI3i
      .cast<
        NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y, Int32 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribI3iAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4i;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
void glVertexAttribI4i(int index, int x, int y, int z, int w) {
  final glVertexAttribI4iAsFunction = _glVertexAttribI4i
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribI4iAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x)
/// ```
void glVertexAttribI1ui(int index, int x) {
  final glVertexAttribI1uiAsFunction = _glVertexAttribI1ui
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribI1uiAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y)
/// ```
void glVertexAttribI2ui(int index, int x, int y) {
  final glVertexAttribI2uiAsFunction = _glVertexAttribI2ui
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x, Uint32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribI2uiAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z)
/// ```
void glVertexAttribI3ui(int index, int x, int y, int z) {
  final glVertexAttribI3uiAsFunction = _glVertexAttribI3ui
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribI3uiAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
void glVertexAttribI4ui(int index, int x, int y, int z, int w) {
  final glVertexAttribI4uiAsFunction = _glVertexAttribI4ui
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribI4uiAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1iv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v)
/// ```
void glVertexAttribI1iv(int index, Pointer<Int32> v) {
  final glVertexAttribI1ivAsFunction = _glVertexAttribI1iv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI1ivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2iv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v)
/// ```
void glVertexAttribI2iv(int index, Pointer<Int32> v) {
  final glVertexAttribI2ivAsFunction = _glVertexAttribI2iv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI2ivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3iv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v)
/// ```
void glVertexAttribI3iv(int index, Pointer<Int32> v) {
  final glVertexAttribI3ivAsFunction = _glVertexAttribI3iv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI3ivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4iv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v)
/// ```
void glVertexAttribI4iv(int index, Pointer<Int32> v) {
  final glVertexAttribI4ivAsFunction = _glVertexAttribI4iv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI4ivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI1uiv(int index, Pointer<Uint32> v) {
  final glVertexAttribI1uivAsFunction = _glVertexAttribI1uiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI1uivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI2uiv(int index, Pointer<Uint32> v) {
  final glVertexAttribI2uivAsFunction = _glVertexAttribI2uiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI2uivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI3uiv(int index, Pointer<Uint32> v) {
  final glVertexAttribI3uivAsFunction = _glVertexAttribI3uiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI3uivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI4uiv(int index, Pointer<Uint32> v) {
  final glVertexAttribI4uivAsFunction = _glVertexAttribI4uiv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI4uivAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4bv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v)
/// ```
void glVertexAttribI4bv(int index, String v) {
  final glVertexAttribI4bvAsFunction = _glVertexAttribI4bv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttribI4bvAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4sv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v)
/// ```
void glVertexAttribI4sv(int index, Pointer<Int16> v) {
  final glVertexAttribI4svAsFunction = _glVertexAttribI4sv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttribI4svAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4ubv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v)
/// ```
void glVertexAttribI4ubv(int index, Pointer<Uint8> v) {
  final glVertexAttribI4ubvAsFunction = _glVertexAttribI4ubv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttribI4ubvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4usv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v)
/// ```
void glVertexAttribI4usv(int index, Pointer<Uint16> v) {
  final glVertexAttribI4usvAsFunction = _glVertexAttribI4usv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttribI4usvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformuiv;

/// ```c
/// GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params)
/// ```
void glGetUniformuiv(int program, int location, Pointer<Uint32> params) {
  final glGetUniformuivAsFunction = _glGetUniformuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Uint32> params)
      >();
  return glGetUniformuivAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFragDataLocation;

/// ```c
/// GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name)
/// ```
void glBindFragDataLocation(int program, int color, String name) {
  final glBindFragDataLocationAsFunction = _glBindFragDataLocation
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Uint32 color, Pointer<Utf8> name)
        >
      >()
      .asFunction<void Function(int program, int color, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glBindFragDataLocationAsFunction(program, color, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragDataLocation;

/// ```c
/// GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name)
/// ```
int glGetFragDataLocation(int program, String name) {
  final glGetFragDataLocationAsFunction = _glGetFragDataLocation
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetFragDataLocationAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ui;

/// ```c
/// GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0)
/// ```
void glUniform1ui(int location, int v0) {
  final glUniform1uiAsFunction = _glUniform1ui
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return glUniform1uiAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ui;

/// ```c
/// GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1)
/// ```
void glUniform2ui(int location, int v0, int v1) {
  final glUniform2uiAsFunction = _glUniform2ui
      .cast<
        NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1)>
      >()
      .asFunction<void Function(int location, int v0, int v1)>();
  return glUniform2uiAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ui;

/// ```c
/// GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
void glUniform3ui(int location, int v0, int v1, int v2) {
  final glUniform3uiAsFunction = _glUniform3ui
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2)
        >
      >()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return glUniform3uiAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ui;

/// ```c
/// GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
void glUniform4ui(int location, int v0, int v1, int v2, int v3) {
  final glUniform4uiAsFunction = _glUniform4ui
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
            Uint32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int location, int v0, int v1, int v2, int v3)
      >();
  return glUniform4uiAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1uiv;

/// ```c
/// GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform1uiv(int location, int count, Pointer<Uint32> value) {
  final glUniform1uivAsFunction = _glUniform1uiv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform1uivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2uiv;

/// ```c
/// GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform2uiv(int location, int count, Pointer<Uint32> value) {
  final glUniform2uivAsFunction = _glUniform2uiv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform2uivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3uiv;

/// ```c
/// GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform3uiv(int location, int count, Pointer<Uint32> value) {
  final glUniform3uivAsFunction = _glUniform3uiv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform3uivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4uiv;

/// ```c
/// GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform4uiv(int location, int count, Pointer<Uint32> value) {
  final glUniform4uivAsFunction = _glUniform4uiv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform4uivAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterIiv;

/// ```c
/// GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params)
/// ```
void glTexParameterIiv(int target, int pname, Pointer<Int32> params) {
  final glTexParameterIivAsFunction = _glTexParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexParameterIivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params)
/// ```
void glTexParameterIuiv(int target, int pname, Pointer<Uint32> params) {
  final glTexParameterIuivAsFunction = _glTexParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Uint32> params)
      >();
  return glTexParameterIuivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterIiv;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetTexParameterIiv(int target, int pname, Pointer<Int32> params) {
  final glGetTexParameterIivAsFunction = _glGetTexParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexParameterIivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params)
/// ```
void glGetTexParameterIuiv(int target, int pname, Pointer<Uint32> params) {
  final glGetTexParameterIuivAsFunction = _glGetTexParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Uint32> params)
      >();
  return glGetTexParameterIuivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferiv;

/// ```c
/// GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value)
/// ```
void glClearBufferiv(int buffer, int drawbuffer, Pointer<Int32> value) {
  final glClearBufferivAsFunction = _glClearBufferiv
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int buffer, int drawbuffer, Pointer<Int32> value)
      >();
  return glClearBufferivAsFunction(buffer, drawbuffer, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferuiv;

/// ```c
/// GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value)
/// ```
void glClearBufferuiv(int buffer, int drawbuffer, Pointer<Uint32> value) {
  final glClearBufferuivAsFunction = _glClearBufferuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int buffer, int drawbuffer, Pointer<Uint32> value)
      >();
  return glClearBufferuivAsFunction(buffer, drawbuffer, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferfv;

/// ```c
/// GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value)
/// ```
void glClearBufferfv(int buffer, int drawbuffer, Pointer<Float> value) {
  final glClearBufferfvAsFunction = _glClearBufferfv
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int buffer, int drawbuffer, Pointer<Float> value)
      >();
  return glClearBufferfvAsFunction(buffer, drawbuffer, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferfi;

/// ```c
/// GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
/// ```
void glClearBufferfi(int buffer, int drawbuffer, double depth, int stencil) {
  final glClearBufferfiAsFunction = _glClearBufferfi
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Int32 drawbuffer,
            Float depth,
            Int32 stencil,
          )
        >
      >()
      .asFunction<
        void Function(int buffer, int drawbuffer, double depth, int stencil)
      >();
  return glClearBufferfiAsFunction(buffer, drawbuffer, depth, stencil);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetStringi;

/// ```c
/// GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index)
/// ```
Pointer<Uint8> glGetStringi(int name, int index) {
  final glGetStringiAsFunction = _glGetStringi
      .cast<
        NativeFunction<Pointer<Uint8> Function(Uint32 name, Uint32 index)>
      >()
      .asFunction<Pointer<Uint8> Function(int name, int index)>();
  return glGetStringiAsFunction(name, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsRenderbuffer;

/// ```c
/// GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer)
/// ```
int glIsRenderbuffer(int renderbuffer) {
  final glIsRenderbufferAsFunction = _glIsRenderbuffer
      .cast<NativeFunction<Int32 Function(Uint32 renderbuffer)>>()
      .asFunction<int Function(int renderbuffer)>();
  return glIsRenderbufferAsFunction(renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindRenderbuffer;

/// ```c
/// GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer)
/// ```
void glBindRenderbuffer(int target, int renderbuffer) {
  final glBindRenderbufferAsFunction = _glBindRenderbuffer
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return glBindRenderbufferAsFunction(target, renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteRenderbuffers;

/// ```c
/// GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers)
/// ```
void glDeleteRenderbuffers(int n, Pointer<Uint32> renderbuffers) {
  final glDeleteRenderbuffersAsFunction = _glDeleteRenderbuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> renderbuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> renderbuffers)>();
  return glDeleteRenderbuffersAsFunction(n, renderbuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenRenderbuffers;

/// ```c
/// GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers)
/// ```
void glGenRenderbuffers(int n, Pointer<Uint32> renderbuffers) {
  final glGenRenderbuffersAsFunction = _glGenRenderbuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> renderbuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> renderbuffers)>();
  return glGenRenderbuffersAsFunction(n, renderbuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRenderbufferStorage;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorage(
  int target,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageAsFunction = _glRenderbufferStorage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int width, int height)
      >();
  return glRenderbufferStorageAsFunction(target, internalformat, width, height);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetRenderbufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetRenderbufferParameteriv(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetRenderbufferParameterivAsFunction = _glGetRenderbufferParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetRenderbufferParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsFramebuffer;

/// ```c
/// GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer)
/// ```
int glIsFramebuffer(int framebuffer) {
  final glIsFramebufferAsFunction = _glIsFramebuffer
      .cast<NativeFunction<Int32 Function(Uint32 framebuffer)>>()
      .asFunction<int Function(int framebuffer)>();
  return glIsFramebufferAsFunction(framebuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFramebuffer;

/// ```c
/// GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer)
/// ```
void glBindFramebuffer(int target, int framebuffer) {
  final glBindFramebufferAsFunction = _glBindFramebuffer
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 framebuffer)>>()
      .asFunction<void Function(int target, int framebuffer)>();
  return glBindFramebufferAsFunction(target, framebuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteFramebuffers;

/// ```c
/// GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers)
/// ```
void glDeleteFramebuffers(int n, Pointer<Uint32> framebuffers) {
  final glDeleteFramebuffersAsFunction = _glDeleteFramebuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> framebuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> framebuffers)>();
  return glDeleteFramebuffersAsFunction(n, framebuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenFramebuffers;

/// ```c
/// GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers)
/// ```
void glGenFramebuffers(int n, Pointer<Uint32> framebuffers) {
  final glGenFramebuffersAsFunction = _glGenFramebuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> framebuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> framebuffers)>();
  return glGenFramebuffersAsFunction(n, framebuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCheckFramebufferStatus;

/// ```c
/// GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target)
/// ```
int glCheckFramebufferStatus(int target) {
  final glCheckFramebufferStatusAsFunction = _glCheckFramebufferStatus
      .cast<NativeFunction<Uint32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return glCheckFramebufferStatusAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture1D;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glFramebufferTexture1D(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glFramebufferTexture1DAsFunction = _glFramebufferTexture1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
        )
      >();
  return glFramebufferTexture1DAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture2D;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glFramebufferTexture2D(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glFramebufferTexture2DAsFunction = _glFramebufferTexture2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
        )
      >();
  return glFramebufferTexture2DAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture3D;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
/// ```
void glFramebufferTexture3D(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
  int zoffset,
) {
  final glFramebufferTexture3DAsFunction = _glFramebufferTexture3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
            Int32 zoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
          int zoffset,
        )
      >();
  return glFramebufferTexture3DAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
    zoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferRenderbuffer;

/// ```c
/// GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
void glFramebufferRenderbuffer(
  int target,
  int attachment,
  int renderbuffertarget,
  int renderbuffer,
) {
  final glFramebufferRenderbufferAsFunction = _glFramebufferRenderbuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 renderbuffertarget,
            Uint32 renderbuffer,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int renderbuffertarget,
          int renderbuffer,
        )
      >();
  return glFramebufferRenderbufferAsFunction(
    target,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetFramebufferAttachmentParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params)
/// ```
void glGetFramebufferAttachmentParameteriv(
  int target,
  int attachment,
  int pname,
  Pointer<Int32> params,
) {
  final glGetFramebufferAttachmentParameterivAsFunction =
      _glGetFramebufferAttachmentParameteriv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 attachment,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int attachment,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetFramebufferAttachmentParameterivAsFunction(
    target,
    attachment,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenerateMipmap;

/// ```c
/// GLAPI void APIENTRY glGenerateMipmap (GLenum target)
/// ```
void glGenerateMipmap(int target) {
  final glGenerateMipmapAsFunction = _glGenerateMipmap
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glGenerateMipmapAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlitFramebuffer;

/// ```c
/// GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
void glBlitFramebuffer(
  int srcX0,
  int srcY0,
  int srcX1,
  int srcY1,
  int dstX0,
  int dstY0,
  int dstX1,
  int dstY1,
  int mask,
  int filter,
) {
  final glBlitFramebufferAsFunction = _glBlitFramebuffer
      .cast<
        NativeFunction<
          Void Function(
            Int32 srcX0,
            Int32 srcY0,
            Int32 srcX1,
            Int32 srcY1,
            Int32 dstX0,
            Int32 dstY0,
            Int32 dstX1,
            Int32 dstY1,
            Uint32 mask,
            Uint32 filter,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcX0,
          int srcY0,
          int srcX1,
          int srcY1,
          int dstX0,
          int dstY0,
          int dstX1,
          int dstY1,
          int mask,
          int filter,
        )
      >();
  return glBlitFramebufferAsFunction(
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRenderbufferStorageMultisample;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorageMultisample(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageMultisampleAsFunction =
      _glRenderbufferStorageMultisample
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int samples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glRenderbufferStorageMultisampleAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureLayer;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
void glFramebufferTextureLayer(
  int target,
  int attachment,
  int texture,
  int level,
  int layer,
) {
  final glFramebufferTextureLayerAsFunction = _glFramebufferTextureLayer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
            Int32 layer,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int texture,
          int level,
          int layer,
        )
      >();
  return glFramebufferTextureLayerAsFunction(
    target,
    attachment,
    texture,
    level,
    layer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapBufferRange;

/// ```c
/// GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeType> glMapBufferRange(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
  int access,
) {
  final glMapBufferRangeAsFunction = _glMapBufferRange
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
            Uint32 access,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
          int access,
        )
      >();
  return glMapBufferRangeAsFunction(target, offset, length, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushMappedBufferRange;

/// ```c
/// GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
/// ```
void glFlushMappedBufferRange(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
) {
  final glFlushMappedBufferRangeAsFunction = _glFlushMappedBufferRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
        )
      >();
  return glFlushMappedBufferRangeAsFunction(target, offset, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVertexArray;

/// ```c
/// GLAPI void APIENTRY glBindVertexArray (GLuint array)
/// ```
void glBindVertexArray(int array) {
  final glBindVertexArrayAsFunction = _glBindVertexArray
      .cast<NativeFunction<Void Function(Uint32 array)>>()
      .asFunction<void Function(int array)>();
  return glBindVertexArrayAsFunction(array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteVertexArrays;

/// ```c
/// GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays)
/// ```
void glDeleteVertexArrays(int n, Pointer<Uint32> arrays) {
  final glDeleteVertexArraysAsFunction = _glDeleteVertexArrays
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32> arrays)>();
  return glDeleteVertexArraysAsFunction(n, arrays);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenVertexArrays;

/// ```c
/// GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays)
/// ```
void glGenVertexArrays(int n, Pointer<Uint32> arrays) {
  final glGenVertexArraysAsFunction = _glGenVertexArrays
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32> arrays)>();
  return glGenVertexArraysAsFunction(n, arrays);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsVertexArray;

/// ```c
/// GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array)
/// ```
int glIsVertexArray(int array) {
  final glIsVertexArrayAsFunction = _glIsVertexArray
      .cast<NativeFunction<Int32 Function(Uint32 array)>>()
      .asFunction<int Function(int array)>();
  return glIsVertexArrayAsFunction(array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArraysInstanced;

/// ```c
/// GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
/// ```
void glDrawArraysInstanced(int mode, int first, int count, int instancecount) {
  final glDrawArraysInstancedAsFunction = _glDrawArraysInstanced
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Int32 first,
            Uint32 count,
            Uint32 instancecount,
          )
        >
      >()
      .asFunction<
        void Function(int mode, int first, int count, int instancecount)
      >();
  return glDrawArraysInstancedAsFunction(mode, first, count, instancecount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementsInstanced;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
/// ```
void glDrawElementsInstanced(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int instancecount,
) {
  final glDrawElementsInstancedAsFunction = _glDrawElementsInstanced
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
            Uint32 instancecount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int count,
          int type,
          Pointer<NativeType> indices,
          int instancecount,
        )
      >();
  return glDrawElementsInstancedAsFunction(
    mode,
    count,
    type,
    indices,
    instancecount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBuffer;

/// ```c
/// GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer)
/// ```
void glTexBuffer(int target, int internalformat, int buffer) {
  final glTexBufferAsFunction = _glTexBuffer
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int internalformat, int buffer)>();
  return glTexBufferAsFunction(target, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrimitiveRestartIndex;

/// ```c
/// GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index)
/// ```
void glPrimitiveRestartIndex(int index) {
  final glPrimitiveRestartIndexAsFunction = _glPrimitiveRestartIndex
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glPrimitiveRestartIndexAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyBufferSubData;

/// ```c
/// GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
void glCopyBufferSubData(
  int readTarget,
  int writeTarget,
  Pointer<NativeType> readOffset,
  Pointer<NativeType> writeOffset,
  Pointer<Uint32> size,
) {
  final glCopyBufferSubDataAsFunction = _glCopyBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 readTarget,
            Uint32 writeTarget,
            Pointer<NativeType> readOffset,
            Pointer<NativeType> writeOffset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int readTarget,
          int writeTarget,
          Pointer<NativeType> readOffset,
          Pointer<NativeType> writeOffset,
          Pointer<Uint32> size,
        )
      >();
  return glCopyBufferSubDataAsFunction(
    readTarget,
    writeTarget,
    readOffset,
    writeOffset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformIndices;

/// ```c
/// GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)
/// ```
void glGetUniformIndices(
  int program,
  int uniformCount,
  Pointer<Pointer<Int8>> uniformNames,
  Pointer<Uint32> uniformIndices,
) {
  final glGetUniformIndicesAsFunction = _glGetUniformIndices
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformCount,
            Pointer<Pointer<Int8>> uniformNames,
            Pointer<Uint32> uniformIndices,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformCount,
          Pointer<Pointer<Int8>> uniformNames,
          Pointer<Uint32> uniformIndices,
        )
      >();
  return glGetUniformIndicesAsFunction(
    program,
    uniformCount,
    uniformNames,
    uniformIndices,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniformsiv;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
/// ```
void glGetActiveUniformsiv(
  int program,
  int uniformCount,
  Pointer<Uint32> uniformIndices,
  int pname,
  Pointer<Int32> params,
) {
  final glGetActiveUniformsivAsFunction = _glGetActiveUniformsiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformCount,
            Pointer<Uint32> uniformIndices,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformCount,
          Pointer<Uint32> uniformIndices,
          int pname,
          Pointer<Int32> params,
        )
      >();
  return glGetActiveUniformsivAsFunction(
    program,
    uniformCount,
    uniformIndices,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniformName;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
/// ```
void glGetActiveUniformName(
  int program,
  int uniformIndex,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> uniformName,
) {
  final glGetActiveUniformNameAsFunction = _glGetActiveUniformName
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformIndex,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> uniformName,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformIndex,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> uniformName,
        )
      >();
  return glGetActiveUniformNameAsFunction(
    program,
    uniformIndex,
    bufSize,
    length,
    uniformName,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformBlockIndex;

/// ```c
/// GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName)
/// ```
int glGetUniformBlockIndex(int program, String uniformBlockName) {
  final glGetUniformBlockIndexAsFunction = _glGetUniformBlockIndex
      .cast<
        NativeFunction<
          Uint32 Function(Uint32 program, Pointer<Utf8> uniformBlockName)
        >
      >()
      .asFunction<int Function(int program, Pointer<Utf8> uniformBlockName)>();
  final uniformBlockNamePointer = uniformBlockName.toNativeUtf8();
  final result = glGetUniformBlockIndexAsFunction(
    program,
    uniformBlockNamePointer,
  );
  calloc.free(uniformBlockNamePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniformBlockiv;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
/// ```
void glGetActiveUniformBlockiv(
  int program,
  int uniformBlockIndex,
  int pname,
  Pointer<Int32> params,
) {
  final glGetActiveUniformBlockivAsFunction = _glGetActiveUniformBlockiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformBlockIndex,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformBlockIndex,
          int pname,
          Pointer<Int32> params,
        )
      >();
  return glGetActiveUniformBlockivAsFunction(
    program,
    uniformBlockIndex,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniformBlockName;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
/// ```
void glGetActiveUniformBlockName(
  int program,
  int uniformBlockIndex,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> uniformBlockName,
) {
  final glGetActiveUniformBlockNameAsFunction = _glGetActiveUniformBlockName
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformBlockIndex,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> uniformBlockName,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformBlockIndex,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> uniformBlockName,
        )
      >();
  return glGetActiveUniformBlockNameAsFunction(
    program,
    uniformBlockIndex,
    bufSize,
    length,
    uniformBlockName,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformBlockBinding;

/// ```c
/// GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
/// ```
void glUniformBlockBinding(
  int program,
  int uniformBlockIndex,
  int uniformBlockBinding,
) {
  final glUniformBlockBindingAsFunction = _glUniformBlockBinding
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 uniformBlockIndex,
            Uint32 uniformBlockBinding,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int uniformBlockIndex,
          int uniformBlockBinding,
        )
      >();
  return glUniformBlockBindingAsFunction(
    program,
    uniformBlockIndex,
    uniformBlockBinding,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementsBaseVertex;

/// ```c
/// GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
/// ```
void glDrawElementsBaseVertex(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int basevertex,
) {
  final glDrawElementsBaseVertexAsFunction = _glDrawElementsBaseVertex
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
            Int32 basevertex,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int count,
          int type,
          Pointer<NativeType> indices,
          int basevertex,
        )
      >();
  return glDrawElementsBaseVertexAsFunction(
    mode,
    count,
    type,
    indices,
    basevertex,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawRangeElementsBaseVertex;

/// ```c
/// GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
/// ```
void glDrawRangeElementsBaseVertex(
  int mode,
  int start,
  int end,
  int count,
  int type,
  Pointer<NativeType> indices,
  int basevertex,
) {
  final glDrawRangeElementsBaseVertexAsFunction = _glDrawRangeElementsBaseVertex
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 start,
            Uint32 end,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
            Int32 basevertex,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int start,
          int end,
          int count,
          int type,
          Pointer<NativeType> indices,
          int basevertex,
        )
      >();
  return glDrawRangeElementsBaseVertexAsFunction(
    mode,
    start,
    end,
    count,
    type,
    indices,
    basevertex,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glDrawElementsInstancedBaseVertex;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
/// ```
void glDrawElementsInstancedBaseVertex(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int instancecount,
  int basevertex,
) {
  final glDrawElementsInstancedBaseVertexAsFunction =
      _glDrawElementsInstancedBaseVertex
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 count,
                Uint32 type,
                Pointer<NativeType> indices,
                Uint32 instancecount,
                Int32 basevertex,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int count,
              int type,
              Pointer<NativeType> indices,
              int instancecount,
              int basevertex,
            )
          >();
  return glDrawElementsInstancedBaseVertexAsFunction(
    mode,
    count,
    type,
    indices,
    instancecount,
    basevertex,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementsBaseVertex;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)
/// ```
void glMultiDrawElementsBaseVertex(
  int mode,
  Pointer<Uint32> count,
  int type,
  Pointer<Pointer<NativeType>> indices,
  int drawcount,
  Pointer<Int32> basevertex,
) {
  final glMultiDrawElementsBaseVertexAsFunction = _glMultiDrawElementsBaseVertex
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Uint32> count,
            Uint32 type,
            Pointer<Pointer<NativeType>> indices,
            Uint32 drawcount,
            Pointer<Int32> basevertex,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Uint32> count,
          int type,
          Pointer<Pointer<NativeType>> indices,
          int drawcount,
          Pointer<Int32> basevertex,
        )
      >();
  return glMultiDrawElementsBaseVertexAsFunction(
    mode,
    count,
    type,
    indices,
    drawcount,
    basevertex,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProvokingVertex;

/// ```c
/// GLAPI void APIENTRY glProvokingVertex (GLenum mode)
/// ```
void glProvokingVertex(int mode) {
  final glProvokingVertexAsFunction = _glProvokingVertex
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glProvokingVertexAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFenceSync;

/// ```c
/// GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags)
/// ```
Pointer<NativeType> glFenceSync(int condition, int flags) {
  final glFenceSyncAsFunction = _glFenceSync
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 condition, Uint32 flags)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int condition, int flags)>();
  return glFenceSyncAsFunction(condition, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsSync;

/// ```c
/// GLAPI GLboolean APIENTRY glIsSync (GLsync sync)
/// ```
int glIsSync(Pointer<NativeType> sync) {
  final glIsSyncAsFunction = _glIsSync
      .cast<NativeFunction<Int32 Function(Pointer<NativeType> sync)>>()
      .asFunction<int Function(Pointer<NativeType> sync)>();
  return glIsSyncAsFunction(sync);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteSync;

/// ```c
/// GLAPI void APIENTRY glDeleteSync (GLsync sync)
/// ```
void glDeleteSync(Pointer<NativeType> sync) {
  final glDeleteSyncAsFunction = _glDeleteSync
      .cast<NativeFunction<Void Function(Pointer<NativeType> sync)>>()
      .asFunction<void Function(Pointer<NativeType> sync)>();
  return glDeleteSyncAsFunction(sync);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientWaitSync;

/// ```c
/// GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
/// ```
int glClientWaitSync(Pointer<NativeType> sync, int flags, int timeout) {
  final glClientWaitSyncAsFunction = _glClientWaitSync
      .cast<
        NativeFunction<
          Uint32 Function(
            Pointer<NativeType> sync,
            Uint32 flags,
            Uint64 timeout,
          )
        >
      >()
      .asFunction<
        int Function(Pointer<NativeType> sync, int flags, int timeout)
      >();
  return glClientWaitSyncAsFunction(sync, flags, timeout);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWaitSync;

/// ```c
/// GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
/// ```
void glWaitSync(Pointer<NativeType> sync, int flags, int timeout) {
  final glWaitSyncAsFunction = _glWaitSync
      .cast<
        NativeFunction<
          Void Function(Pointer<NativeType> sync, Uint32 flags, Uint64 timeout)
        >
      >()
      .asFunction<
        void Function(Pointer<NativeType> sync, int flags, int timeout)
      >();
  return glWaitSyncAsFunction(sync, flags, timeout);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInteger64v;

/// ```c
/// GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data)
/// ```
void glGetInteger64v(int pname, Pointer<Int64> data) {
  final glGetInteger64vAsFunction = _glGetInteger64v
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int64> data)>>()
      .asFunction<void Function(int pname, Pointer<Int64> data)>();
  return glGetInteger64vAsFunction(pname, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSynciv;

/// ```c
/// GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values)
/// ```
void glGetSynciv(
  Pointer<NativeType> sync,
  int pname,
  int count,
  Pointer<Uint32> length,
  Pointer<Int32> values,
) {
  final glGetSyncivAsFunction = _glGetSynciv
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> sync,
            Uint32 pname,
            Uint32 count,
            Pointer<Uint32> length,
            Pointer<Int32> values,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> sync,
          int pname,
          int count,
          Pointer<Uint32> length,
          Pointer<Int32> values,
        )
      >();
  return glGetSyncivAsFunction(sync, pname, count, length, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInteger64iV;

/// ```c
/// GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data)
/// ```
void glGetInteger64iV(int target, int index, Pointer<Int64> data) {
  final glGetInteger64iVAsFunction = _glGetInteger64iV
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int64> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Int64> data)>();
  return glGetInteger64iVAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferParameteri64v;

/// ```c
/// GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params)
/// ```
void glGetBufferParameteri64v(int target, int pname, Pointer<Int64> params) {
  final glGetBufferParameteri64vAsFunction = _glGetBufferParameteri64v
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int64> params)
      >();
  return glGetBufferParameteri64vAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
void glFramebufferTexture(int target, int attachment, int texture, int level) {
  final glFramebufferTextureAsFunction = _glFramebufferTexture
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(int target, int attachment, int texture, int level)
      >();
  return glFramebufferTextureAsFunction(target, attachment, texture, level);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage2DMultisample;

/// ```c
/// GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
void glTexImage2DMultisample(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int fixedsamplelocations,
) {
  final glTexImage2DMultisampleAsFunction = _glTexImage2DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          int fixedsamplelocations,
        )
      >();
  return glTexImage2DMultisampleAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage3DMultisample;

/// ```c
/// GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
void glTexImage3DMultisample(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int depth,
  int fixedsamplelocations,
) {
  final glTexImage3DMultisampleAsFunction = _glTexImage3DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          int depth,
          int fixedsamplelocations,
        )
      >();
  return glTexImage3DMultisampleAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
    depth,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultisamplefv;

/// ```c
/// GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val)
/// ```
void glGetMultisamplefv(int pname, int index, Pointer<Float> val) {
  final glGetMultisamplefvAsFunction = _glGetMultisamplefv
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Uint32 index, Pointer<Float> val)
        >
      >()
      .asFunction<void Function(int pname, int index, Pointer<Float> val)>();
  return glGetMultisamplefvAsFunction(pname, index, val);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleMaski;

/// ```c
/// GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask)
/// ```
void glSampleMaski(int maskNumber, int mask) {
  final glSampleMaskiAsFunction = _glSampleMaski
      .cast<NativeFunction<Void Function(Uint32 maskNumber, Uint32 mask)>>()
      .asFunction<void Function(int maskNumber, int mask)>();
  return glSampleMaskiAsFunction(maskNumber, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFragDataLocationIndexed;

/// ```c
/// GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
/// ```
void glBindFragDataLocationIndexed(
  int program,
  int colorNumber,
  int index,
  String name,
) {
  final glBindFragDataLocationIndexedAsFunction = _glBindFragDataLocationIndexed
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 colorNumber,
            Uint32 index,
            Pointer<Utf8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int colorNumber,
          int index,
          Pointer<Utf8> name,
        )
      >();
  final namePointer = name.toNativeUtf8();
  final result = glBindFragDataLocationIndexedAsFunction(
    program,
    colorNumber,
    index,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragDataIndex;

/// ```c
/// GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name)
/// ```
int glGetFragDataIndex(int program, String name) {
  final glGetFragDataIndexAsFunction = _glGetFragDataIndex
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetFragDataIndexAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenSamplers;

/// ```c
/// GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers)
/// ```
void glGenSamplers(int count, Pointer<Uint32> samplers) {
  final glGenSamplersAsFunction = _glGenSamplers
      .cast<
        NativeFunction<Void Function(Uint32 count, Pointer<Uint32> samplers)>
      >()
      .asFunction<void Function(int count, Pointer<Uint32> samplers)>();
  return glGenSamplersAsFunction(count, samplers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteSamplers;

/// ```c
/// GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers)
/// ```
void glDeleteSamplers(int count, Pointer<Uint32> samplers) {
  final glDeleteSamplersAsFunction = _glDeleteSamplers
      .cast<
        NativeFunction<Void Function(Uint32 count, Pointer<Uint32> samplers)>
      >()
      .asFunction<void Function(int count, Pointer<Uint32> samplers)>();
  return glDeleteSamplersAsFunction(count, samplers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsSampler;

/// ```c
/// GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler)
/// ```
int glIsSampler(int sampler) {
  final glIsSamplerAsFunction = _glIsSampler
      .cast<NativeFunction<Int32 Function(Uint32 sampler)>>()
      .asFunction<int Function(int sampler)>();
  return glIsSamplerAsFunction(sampler);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindSampler;

/// ```c
/// GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler)
/// ```
void glBindSampler(int unit, int sampler) {
  final glBindSamplerAsFunction = _glBindSampler
      .cast<NativeFunction<Void Function(Uint32 unit, Uint32 sampler)>>()
      .asFunction<void Function(int unit, int sampler)>();
  return glBindSamplerAsFunction(unit, sampler);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameteri;

/// ```c
/// GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
/// ```
void glSamplerParameteri(int sampler, int pname, int param) {
  final glSamplerParameteriAsFunction = _glSamplerParameteri
      .cast<
        NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int sampler, int pname, int param)>();
  return glSamplerParameteriAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameteriv;

/// ```c
/// GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param)
/// ```
void glSamplerParameteriv(int sampler, int pname, Pointer<Int32> param) {
  final glSamplerParameterivAsFunction = _glSamplerParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Int32> param)
      >();
  return glSamplerParameterivAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameterf;

/// ```c
/// GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
/// ```
void glSamplerParameterf(int sampler, int pname, double param) {
  final glSamplerParameterfAsFunction = _glSamplerParameterf
      .cast<
        NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int sampler, int pname, double param)>();
  return glSamplerParameterfAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameterfv;

/// ```c
/// GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param)
/// ```
void glSamplerParameterfv(int sampler, int pname, Pointer<Float> param) {
  final glSamplerParameterfvAsFunction = _glSamplerParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Float> param)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Float> param)
      >();
  return glSamplerParameterfvAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameterIiv;

/// ```c
/// GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param)
/// ```
void glSamplerParameterIiv(int sampler, int pname, Pointer<Int32> param) {
  final glSamplerParameterIivAsFunction = _glSamplerParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Int32> param)
      >();
  return glSamplerParameterIivAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplerParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param)
/// ```
void glSamplerParameterIuiv(int sampler, int pname, Pointer<Uint32> param) {
  final glSamplerParameterIuivAsFunction = _glSamplerParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32> param)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Uint32> param)
      >();
  return glSamplerParameterIuivAsFunction(sampler, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSamplerParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params)
/// ```
void glGetSamplerParameteriv(int sampler, int pname, Pointer<Int32> params) {
  final glGetSamplerParameterivAsFunction = _glGetSamplerParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Int32> params)
      >();
  return glGetSamplerParameterivAsFunction(sampler, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSamplerParameterIiv;

/// ```c
/// GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params)
/// ```
void glGetSamplerParameterIiv(int sampler, int pname, Pointer<Int32> params) {
  final glGetSamplerParameterIivAsFunction = _glGetSamplerParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Int32> params)
      >();
  return glGetSamplerParameterIivAsFunction(sampler, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSamplerParameterfv;

/// ```c
/// GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params)
/// ```
void glGetSamplerParameterfv(int sampler, int pname, Pointer<Float> params) {
  final glGetSamplerParameterfvAsFunction = _glGetSamplerParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Float> params)
      >();
  return glGetSamplerParameterfvAsFunction(sampler, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSamplerParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params)
/// ```
void glGetSamplerParameterIuiv(int sampler, int pname, Pointer<Uint32> params) {
  final glGetSamplerParameterIuivAsFunction = _glGetSamplerParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int sampler, int pname, Pointer<Uint32> params)
      >();
  return glGetSamplerParameterIuivAsFunction(sampler, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glQueryCounter;

/// ```c
/// GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target)
/// ```
void glQueryCounter(int id, int target) {
  final glQueryCounterAsFunction = _glQueryCounter
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 target)>>()
      .asFunction<void Function(int id, int target)>();
  return glQueryCounterAsFunction(id, target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjecti64v;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params)
/// ```
void glGetQueryObjecti64v(int id, int pname, Pointer<Int64> params) {
  final glGetQueryObjecti64vAsFunction = _glGetQueryObjecti64v
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int64> params)>();
  return glGetQueryObjecti64vAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectui64v;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params)
/// ```
void glGetQueryObjectui64v(int id, int pname, Pointer<Uint64> params) {
  final glGetQueryObjectui64vAsFunction = _glGetQueryObjectui64v
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint64> params)>();
  return glGetQueryObjectui64vAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribDivisor;

/// ```c
/// GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor)
/// ```
void glVertexAttribDivisor(int index, int divisor) {
  final glVertexAttribDivisorAsFunction = _glVertexAttribDivisor
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return glVertexAttribDivisorAsFunction(index, divisor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP1ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
void glVertexAttribP1ui(int index, int type, int normalized, int value) {
  final glVertexAttribP1uiAsFunction = _glVertexAttribP1ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Uint32 value,
          )
        >
      >()
      .asFunction<
        void Function(int index, int type, int normalized, int value)
      >();
  return glVertexAttribP1uiAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP1uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
/// ```
void glVertexAttribP1uiv(
  int index,
  int type,
  int normalized,
  Pointer<Uint32> value,
) {
  final glVertexAttribP1uivAsFunction = _glVertexAttribP1uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int type,
          int normalized,
          Pointer<Uint32> value,
        )
      >();
  return glVertexAttribP1uivAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP2ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
void glVertexAttribP2ui(int index, int type, int normalized, int value) {
  final glVertexAttribP2uiAsFunction = _glVertexAttribP2ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Uint32 value,
          )
        >
      >()
      .asFunction<
        void Function(int index, int type, int normalized, int value)
      >();
  return glVertexAttribP2uiAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP2uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
/// ```
void glVertexAttribP2uiv(
  int index,
  int type,
  int normalized,
  Pointer<Uint32> value,
) {
  final glVertexAttribP2uivAsFunction = _glVertexAttribP2uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int type,
          int normalized,
          Pointer<Uint32> value,
        )
      >();
  return glVertexAttribP2uivAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP3ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
void glVertexAttribP3ui(int index, int type, int normalized, int value) {
  final glVertexAttribP3uiAsFunction = _glVertexAttribP3ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Uint32 value,
          )
        >
      >()
      .asFunction<
        void Function(int index, int type, int normalized, int value)
      >();
  return glVertexAttribP3uiAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP3uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
/// ```
void glVertexAttribP3uiv(
  int index,
  int type,
  int normalized,
  Pointer<Uint32> value,
) {
  final glVertexAttribP3uivAsFunction = _glVertexAttribP3uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int type,
          int normalized,
          Pointer<Uint32> value,
        )
      >();
  return glVertexAttribP3uivAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP4ui;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
void glVertexAttribP4ui(int index, int type, int normalized, int value) {
  final glVertexAttribP4uiAsFunction = _glVertexAttribP4ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Uint32 value,
          )
        >
      >()
      .asFunction<
        void Function(int index, int type, int normalized, int value)
      >();
  return glVertexAttribP4uiAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribP4uiv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
/// ```
void glVertexAttribP4uiv(
  int index,
  int type,
  int normalized,
  Pointer<Uint32> value,
) {
  final glVertexAttribP4uivAsFunction = _glVertexAttribP4uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 type,
            Int32 normalized,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int type,
          int normalized,
          Pointer<Uint32> value,
        )
      >();
  return glVertexAttribP4uivAsFunction(index, type, normalized, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP2ui;

/// ```c
/// GLAPI void APIENTRY glVertexP2ui (GLenum type, GLuint value)
/// ```
void glVertexP2ui(int type, int value) {
  final glVertexP2uiAsFunction = _glVertexP2ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return glVertexP2uiAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP2uiv;

/// ```c
/// GLAPI void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value)
/// ```
void glVertexP2uiv(int type, Pointer<Uint32> value) {
  final glVertexP2uivAsFunction = _glVertexP2uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> value)>>()
      .asFunction<void Function(int type, Pointer<Uint32> value)>();
  return glVertexP2uivAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP3ui;

/// ```c
/// GLAPI void APIENTRY glVertexP3ui (GLenum type, GLuint value)
/// ```
void glVertexP3ui(int type, int value) {
  final glVertexP3uiAsFunction = _glVertexP3ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return glVertexP3uiAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP3uiv;

/// ```c
/// GLAPI void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value)
/// ```
void glVertexP3uiv(int type, Pointer<Uint32> value) {
  final glVertexP3uivAsFunction = _glVertexP3uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> value)>>()
      .asFunction<void Function(int type, Pointer<Uint32> value)>();
  return glVertexP3uivAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP4ui;

/// ```c
/// GLAPI void APIENTRY glVertexP4ui (GLenum type, GLuint value)
/// ```
void glVertexP4ui(int type, int value) {
  final glVertexP4uiAsFunction = _glVertexP4ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return glVertexP4uiAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexP4uiv;

/// ```c
/// GLAPI void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value)
/// ```
void glVertexP4uiv(int type, Pointer<Uint32> value) {
  final glVertexP4uivAsFunction = _glVertexP4uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> value)>>()
      .asFunction<void Function(int type, Pointer<Uint32> value)>();
  return glVertexP4uivAsFunction(type, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP1ui;

/// ```c
/// GLAPI void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords)
/// ```
void glTexCoordP1ui(int type, int coords) {
  final glTexCoordP1uiAsFunction = _glTexCoordP1ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return glTexCoordP1uiAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP1uiv;

/// ```c
/// GLAPI void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords)
/// ```
void glTexCoordP1uiv(int type, Pointer<Uint32> coords) {
  final glTexCoordP1uivAsFunction = _glTexCoordP1uiv
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<Uint32> coords)>
      >()
      .asFunction<void Function(int type, Pointer<Uint32> coords)>();
  return glTexCoordP1uivAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP2ui;

/// ```c
/// GLAPI void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords)
/// ```
void glTexCoordP2ui(int type, int coords) {
  final glTexCoordP2uiAsFunction = _glTexCoordP2ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return glTexCoordP2uiAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP2uiv;

/// ```c
/// GLAPI void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords)
/// ```
void glTexCoordP2uiv(int type, Pointer<Uint32> coords) {
  final glTexCoordP2uivAsFunction = _glTexCoordP2uiv
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<Uint32> coords)>
      >()
      .asFunction<void Function(int type, Pointer<Uint32> coords)>();
  return glTexCoordP2uivAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP3ui;

/// ```c
/// GLAPI void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords)
/// ```
void glTexCoordP3ui(int type, int coords) {
  final glTexCoordP3uiAsFunction = _glTexCoordP3ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return glTexCoordP3uiAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP3uiv;

/// ```c
/// GLAPI void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords)
/// ```
void glTexCoordP3uiv(int type, Pointer<Uint32> coords) {
  final glTexCoordP3uivAsFunction = _glTexCoordP3uiv
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<Uint32> coords)>
      >()
      .asFunction<void Function(int type, Pointer<Uint32> coords)>();
  return glTexCoordP3uivAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP4ui;

/// ```c
/// GLAPI void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords)
/// ```
void glTexCoordP4ui(int type, int coords) {
  final glTexCoordP4uiAsFunction = _glTexCoordP4ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return glTexCoordP4uiAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordP4uiv;

/// ```c
/// GLAPI void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords)
/// ```
void glTexCoordP4uiv(int type, Pointer<Uint32> coords) {
  final glTexCoordP4uivAsFunction = _glTexCoordP4uiv
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<Uint32> coords)>
      >()
      .asFunction<void Function(int type, Pointer<Uint32> coords)>();
  return glTexCoordP4uivAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP1ui;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords)
/// ```
void glMultiTexCoordP1ui(int texture, int type, int coords) {
  final glMultiTexCoordP1uiAsFunction = _glMultiTexCoordP1ui
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Uint32 coords)
        >
      >()
      .asFunction<void Function(int texture, int type, int coords)>();
  return glMultiTexCoordP1uiAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP1uiv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint *coords)
/// ```
void glMultiTexCoordP1uiv(int texture, int type, Pointer<Uint32> coords) {
  final glMultiTexCoordP1uivAsFunction = _glMultiTexCoordP1uiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords)
        >
      >()
      .asFunction<
        void Function(int texture, int type, Pointer<Uint32> coords)
      >();
  return glMultiTexCoordP1uivAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP2ui;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords)
/// ```
void glMultiTexCoordP2ui(int texture, int type, int coords) {
  final glMultiTexCoordP2uiAsFunction = _glMultiTexCoordP2ui
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Uint32 coords)
        >
      >()
      .asFunction<void Function(int texture, int type, int coords)>();
  return glMultiTexCoordP2uiAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP2uiv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint *coords)
/// ```
void glMultiTexCoordP2uiv(int texture, int type, Pointer<Uint32> coords) {
  final glMultiTexCoordP2uivAsFunction = _glMultiTexCoordP2uiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords)
        >
      >()
      .asFunction<
        void Function(int texture, int type, Pointer<Uint32> coords)
      >();
  return glMultiTexCoordP2uivAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP3ui;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords)
/// ```
void glMultiTexCoordP3ui(int texture, int type, int coords) {
  final glMultiTexCoordP3uiAsFunction = _glMultiTexCoordP3ui
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Uint32 coords)
        >
      >()
      .asFunction<void Function(int texture, int type, int coords)>();
  return glMultiTexCoordP3uiAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP3uiv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint *coords)
/// ```
void glMultiTexCoordP3uiv(int texture, int type, Pointer<Uint32> coords) {
  final glMultiTexCoordP3uivAsFunction = _glMultiTexCoordP3uiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords)
        >
      >()
      .asFunction<
        void Function(int texture, int type, Pointer<Uint32> coords)
      >();
  return glMultiTexCoordP3uivAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP4ui;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords)
/// ```
void glMultiTexCoordP4ui(int texture, int type, int coords) {
  final glMultiTexCoordP4uiAsFunction = _glMultiTexCoordP4ui
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Uint32 coords)
        >
      >()
      .asFunction<void Function(int texture, int type, int coords)>();
  return glMultiTexCoordP4uiAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordP4uiv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint *coords)
/// ```
void glMultiTexCoordP4uiv(int texture, int type, Pointer<Uint32> coords) {
  final glMultiTexCoordP4uivAsFunction = _glMultiTexCoordP4uiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords)
        >
      >()
      .asFunction<
        void Function(int texture, int type, Pointer<Uint32> coords)
      >();
  return glMultiTexCoordP4uivAsFunction(texture, type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalP3ui;

/// ```c
/// GLAPI void APIENTRY glNormalP3ui (GLenum type, GLuint coords)
/// ```
void glNormalP3ui(int type, int coords) {
  final glNormalP3uiAsFunction = _glNormalP3ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return glNormalP3uiAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalP3uiv;

/// ```c
/// GLAPI void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords)
/// ```
void glNormalP3uiv(int type, Pointer<Uint32> coords) {
  final glNormalP3uivAsFunction = _glNormalP3uiv
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<Uint32> coords)>
      >()
      .asFunction<void Function(int type, Pointer<Uint32> coords)>();
  return glNormalP3uivAsFunction(type, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorP3ui;

/// ```c
/// GLAPI void APIENTRY glColorP3ui (GLenum type, GLuint color)
/// ```
void glColorP3ui(int type, int color) {
  final glColorP3uiAsFunction = _glColorP3ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return glColorP3uiAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorP3uiv;

/// ```c
/// GLAPI void APIENTRY glColorP3uiv (GLenum type, const GLuint *color)
/// ```
void glColorP3uiv(int type, Pointer<Uint32> color) {
  final glColorP3uivAsFunction = _glColorP3uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> color)>>()
      .asFunction<void Function(int type, Pointer<Uint32> color)>();
  return glColorP3uivAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorP4ui;

/// ```c
/// GLAPI void APIENTRY glColorP4ui (GLenum type, GLuint color)
/// ```
void glColorP4ui(int type, int color) {
  final glColorP4uiAsFunction = _glColorP4ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return glColorP4uiAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorP4uiv;

/// ```c
/// GLAPI void APIENTRY glColorP4uiv (GLenum type, const GLuint *color)
/// ```
void glColorP4uiv(int type, Pointer<Uint32> color) {
  final glColorP4uivAsFunction = _glColorP4uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> color)>>()
      .asFunction<void Function(int type, Pointer<Uint32> color)>();
  return glColorP4uivAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorP3ui;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color)
/// ```
void glSecondaryColorP3ui(int type, int color) {
  final glSecondaryColorP3uiAsFunction = _glSecondaryColorP3ui
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return glSecondaryColorP3uiAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorP3uiv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint *color)
/// ```
void glSecondaryColorP3uiv(int type, Pointer<Uint32> color) {
  final glSecondaryColorP3uivAsFunction = _glSecondaryColorP3uiv
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32> color)>>()
      .asFunction<void Function(int type, Pointer<Uint32> color)>();
  return glSecondaryColorP3uivAsFunction(type, color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMinSampleShading;

/// ```c
/// GLAPI void APIENTRY glMinSampleShading (GLfloat value)
/// ```
void glMinSampleShading(double value) {
  final glMinSampleShadingAsFunction = _glMinSampleShading
      .cast<NativeFunction<Void Function(Float value)>>()
      .asFunction<void Function(double value)>();
  return glMinSampleShadingAsFunction(value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationi;

/// ```c
/// GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode)
/// ```
void glBlendEquationi(int buf, int mode) {
  final glBlendEquationiAsFunction = _glBlendEquationi
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return glBlendEquationiAsFunction(buf, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationSeparatei;

/// ```c
/// GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
void glBlendEquationSeparatei(int buf, int modeRgb, int modeAlpha) {
  final glBlendEquationSeparateiAsFunction = _glBlendEquationSeparatei
      .cast<
        NativeFunction<
          Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha)
        >
      >()
      .asFunction<void Function(int buf, int modeRgb, int modeAlpha)>();
  return glBlendEquationSeparateiAsFunction(buf, modeRgb, modeAlpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFunci;

/// ```c
/// GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst)
/// ```
void glBlendFunci(int buf, int src, int dst) {
  final glBlendFunciAsFunction = _glBlendFunci
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return glBlendFunciAsFunction(buf, src, dst);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparatei;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
void glBlendFuncSeparatei(
  int buf,
  int srcRgb,
  int dstRgb,
  int srcAlpha,
  int dstAlpha,
) {
  final glBlendFuncSeparateiAsFunction = _glBlendFuncSeparatei
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buf,
            Uint32 srcRgb,
            Uint32 dstRgb,
            Uint32 srcAlpha,
            Uint32 dstAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int buf,
          int srcRgb,
          int dstRgb,
          int srcAlpha,
          int dstAlpha,
        )
      >();
  return glBlendFuncSeparateiAsFunction(
    buf,
    srcRgb,
    dstRgb,
    srcAlpha,
    dstAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArraysIndirect;

/// ```c
/// GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect)
/// ```
void glDrawArraysIndirect(int mode, Pointer<NativeType> indirect) {
  final glDrawArraysIndirectAsFunction = _glDrawArraysIndirect
      .cast<
        NativeFunction<Void Function(Uint32 mode, Pointer<NativeType> indirect)>
      >()
      .asFunction<void Function(int mode, Pointer<NativeType> indirect)>();
  return glDrawArraysIndirectAsFunction(mode, indirect);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementsIndirect;

/// ```c
/// GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect)
/// ```
void glDrawElementsIndirect(int mode, int type, Pointer<NativeType> indirect) {
  final glDrawElementsIndirectAsFunction = _glDrawElementsIndirect
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Uint32 type, Pointer<NativeType> indirect)
        >
      >()
      .asFunction<
        void Function(int mode, int type, Pointer<NativeType> indirect)
      >();
  return glDrawElementsIndirectAsFunction(mode, type, indirect);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1d;

/// ```c
/// GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x)
/// ```
void glUniform1d(int location, double x) {
  final glUniform1dAsFunction = _glUniform1d
      .cast<NativeFunction<Void Function(Int32 location, Double x)>>()
      .asFunction<void Function(int location, double x)>();
  return glUniform1dAsFunction(location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2d;

/// ```c
/// GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y)
/// ```
void glUniform2d(int location, double x, double y) {
  final glUniform2dAsFunction = _glUniform2d
      .cast<NativeFunction<Void Function(Int32 location, Double x, Double y)>>()
      .asFunction<void Function(int location, double x, double y)>();
  return glUniform2dAsFunction(location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3d;

/// ```c
/// GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glUniform3d(int location, double x, double y, double z) {
  final glUniform3dAsFunction = _glUniform3d
      .cast<
        NativeFunction<
          Void Function(Int32 location, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int location, double x, double y, double z)>();
  return glUniform3dAsFunction(location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4d;

/// ```c
/// GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glUniform4d(int location, double x, double y, double z, double w) {
  final glUniform4dAsFunction = _glUniform4d
      .cast<
        NativeFunction<
          Void Function(Int32 location, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int location, double x, double y, double z, double w)
      >();
  return glUniform4dAsFunction(location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1dv;

/// ```c
/// GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value)
/// ```
void glUniform1dv(int location, int count, Pointer<Double> value) {
  final glUniform1dvAsFunction = _glUniform1dv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Double> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Double> value)
      >();
  return glUniform1dvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2dv;

/// ```c
/// GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value)
/// ```
void glUniform2dv(int location, int count, Pointer<Double> value) {
  final glUniform2dvAsFunction = _glUniform2dv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Double> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Double> value)
      >();
  return glUniform2dvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3dv;

/// ```c
/// GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value)
/// ```
void glUniform3dv(int location, int count, Pointer<Double> value) {
  final glUniform3dvAsFunction = _glUniform3dv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Double> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Double> value)
      >();
  return glUniform3dvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4dv;

/// ```c
/// GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value)
/// ```
void glUniform4dv(int location, int count, Pointer<Double> value) {
  final glUniform4dvAsFunction = _glUniform4dv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Double> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Double> value)
      >();
  return glUniform4dvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix2dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix2dvAsFunction = _glUniformMatrix2dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix2dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix3dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix3dvAsFunction = _glUniformMatrix3dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix3dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix4dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix4dvAsFunction = _glUniformMatrix4dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix4dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2x3dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix2x3dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix2x3dvAsFunction = _glUniformMatrix2x3dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix2x3dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2x4dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix2x4dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix2x4dvAsFunction = _glUniformMatrix2x4dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix2x4dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3x2dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix3x2dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix3x2dvAsFunction = _glUniformMatrix3x2dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix3x2dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3x4dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix3x4dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix3x4dvAsFunction = _glUniformMatrix3x4dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix3x4dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4x2dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix4x2dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix4x2dvAsFunction = _glUniformMatrix4x2dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix4x2dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4x3dv;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glUniformMatrix4x3dv(
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glUniformMatrix4x3dvAsFunction = _glUniformMatrix4x3dv
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glUniformMatrix4x3dvAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformdv;

/// ```c
/// GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params)
/// ```
void glGetUniformdv(int program, int location, Pointer<Double> params) {
  final glGetUniformdvAsFunction = _glGetUniformdv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Double> params)
      >();
  return glGetUniformdvAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSubroutineUniformLocation;

/// ```c
/// GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name)
/// ```
int glGetSubroutineUniformLocation(int program, int shadertype, String name) {
  final glGetSubroutineUniformLocationAsFunction =
      _glGetSubroutineUniformLocation
          .cast<
            NativeFunction<
              Int32 Function(
                Uint32 program,
                Uint32 shadertype,
                Pointer<Utf8> name,
              )
            >
          >()
          .asFunction<
            int Function(int program, int shadertype, Pointer<Utf8> name)
          >();
  final namePointer = name.toNativeUtf8();
  final result = glGetSubroutineUniformLocationAsFunction(
    program,
    shadertype,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSubroutineIndex;

/// ```c
/// GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name)
/// ```
int glGetSubroutineIndex(int program, int shadertype, String name) {
  final glGetSubroutineIndexAsFunction = _glGetSubroutineIndex
      .cast<
        NativeFunction<
          Uint32 Function(Uint32 program, Uint32 shadertype, Pointer<Utf8> name)
        >
      >()
      .asFunction<
        int Function(int program, int shadertype, Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetSubroutineIndexAsFunction(
    program,
    shadertype,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveSubroutineUniformiv;

/// ```c
/// GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
/// ```
void glGetActiveSubroutineUniformiv(
  int program,
  int shadertype,
  int index,
  int pname,
  Pointer<Int32> values,
) {
  final glGetActiveSubroutineUniformivAsFunction =
      _glGetActiveSubroutineUniformiv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 shadertype,
                Uint32 index,
                Uint32 pname,
                Pointer<Int32> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int shadertype,
              int index,
              int pname,
              Pointer<Int32> values,
            )
          >();
  return glGetActiveSubroutineUniformivAsFunction(
    program,
    shadertype,
    index,
    pname,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveSubroutineUniformName;

/// ```c
/// GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
/// ```
void glGetActiveSubroutineUniformName(
  int program,
  int shadertype,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> name,
) {
  final glGetActiveSubroutineUniformNameAsFunction =
      _glGetActiveSubroutineUniformName
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 shadertype,
                Uint32 index,
                Uint32 bufSize,
                Pointer<Uint32> length,
                Pointer<Int8> name,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int shadertype,
              int index,
              int bufSize,
              Pointer<Uint32> length,
              Pointer<Int8> name,
            )
          >();
  return glGetActiveSubroutineUniformNameAsFunction(
    program,
    shadertype,
    index,
    bufSize,
    length,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveSubroutineName;

/// ```c
/// GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
/// ```
void glGetActiveSubroutineName(
  int program,
  int shadertype,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> name,
) {
  final glGetActiveSubroutineNameAsFunction = _glGetActiveSubroutineName
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 shadertype,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int shadertype,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveSubroutineNameAsFunction(
    program,
    shadertype,
    index,
    bufSize,
    length,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformSubroutinesuiv;

/// ```c
/// GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices)
/// ```
void glUniformSubroutinesuiv(
  int shadertype,
  int count,
  Pointer<Uint32> indices,
) {
  final glUniformSubroutinesuivAsFunction = _glUniformSubroutinesuiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shadertype,
            Uint32 count,
            Pointer<Uint32> indices,
          )
        >
      >()
      .asFunction<
        void Function(int shadertype, int count, Pointer<Uint32> indices)
      >();
  return glUniformSubroutinesuivAsFunction(shadertype, count, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformSubroutineuiv;

/// ```c
/// GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params)
/// ```
void glGetUniformSubroutineuiv(
  int shadertype,
  int location,
  Pointer<Uint32> params,
) {
  final glGetUniformSubroutineuivAsFunction = _glGetUniformSubroutineuiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shadertype,
            Int32 location,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(int shadertype, int location, Pointer<Uint32> params)
      >();
  return glGetUniformSubroutineuivAsFunction(shadertype, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramStageiv;

/// ```c
/// GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values)
/// ```
void glGetProgramStageiv(
  int program,
  int shadertype,
  int pname,
  Pointer<Int32> values,
) {
  final glGetProgramStageivAsFunction = _glGetProgramStageiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 shadertype,
            Uint32 pname,
            Pointer<Int32> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int shadertype,
          int pname,
          Pointer<Int32> values,
        )
      >();
  return glGetProgramStageivAsFunction(program, shadertype, pname, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPatchParameteri;

/// ```c
/// GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value)
/// ```
void glPatchParameteri(int pname, int value) {
  final glPatchParameteriAsFunction = _glPatchParameteri
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int pname, int value)>();
  return glPatchParameteriAsFunction(pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPatchParameterfv;

/// ```c
/// GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values)
/// ```
void glPatchParameterfv(int pname, Pointer<Float> values) {
  final glPatchParameterfvAsFunction = _glPatchParameterfv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> values)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> values)>();
  return glPatchParameterfvAsFunction(pname, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id)
/// ```
void glBindTransformFeedback(int target, int id) {
  final glBindTransformFeedbackAsFunction = _glBindTransformFeedback
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return glBindTransformFeedbackAsFunction(target, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteTransformFeedbacks;

/// ```c
/// GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids)
/// ```
void glDeleteTransformFeedbacks(int n, Pointer<Uint32> ids) {
  final glDeleteTransformFeedbacksAsFunction = _glDeleteTransformFeedbacks
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glDeleteTransformFeedbacksAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenTransformFeedbacks;

/// ```c
/// GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids)
/// ```
void glGenTransformFeedbacks(int n, Pointer<Uint32> ids) {
  final glGenTransformFeedbacksAsFunction = _glGenTransformFeedbacks
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glGenTransformFeedbacksAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTransformFeedback;

/// ```c
/// GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id)
/// ```
int glIsTransformFeedback(int id) {
  final glIsTransformFeedbackAsFunction = _glIsTransformFeedback
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsTransformFeedbackAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPauseTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glPauseTransformFeedback (void)
/// ```
void glPauseTransformFeedback() {
  final glPauseTransformFeedbackAsFunction = _glPauseTransformFeedback
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPauseTransformFeedbackAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResumeTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glResumeTransformFeedback (void)
/// ```
void glResumeTransformFeedback() {
  final glResumeTransformFeedbackAsFunction = _glResumeTransformFeedback
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glResumeTransformFeedbackAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawTransformFeedback;

/// ```c
/// GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id)
/// ```
void glDrawTransformFeedback(int mode, int id) {
  final glDrawTransformFeedbackAsFunction = _glDrawTransformFeedback
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id)>>()
      .asFunction<void Function(int mode, int id)>();
  return glDrawTransformFeedbackAsFunction(mode, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawTransformFeedbackStream;

/// ```c
/// GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream)
/// ```
void glDrawTransformFeedbackStream(int mode, int id, int stream) {
  final glDrawTransformFeedbackStreamAsFunction = _glDrawTransformFeedbackStream
      .cast<
        NativeFunction<Void Function(Uint32 mode, Uint32 id, Uint32 stream)>
      >()
      .asFunction<void Function(int mode, int id, int stream)>();
  return glDrawTransformFeedbackStreamAsFunction(mode, id, stream);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginQueryIndexed;

/// ```c
/// GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id)
/// ```
void glBeginQueryIndexed(int target, int index, int id) {
  final glBeginQueryIndexedAsFunction = _glBeginQueryIndexed
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 id)>
      >()
      .asFunction<void Function(int target, int index, int id)>();
  return glBeginQueryIndexedAsFunction(target, index, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndQueryIndexed;

/// ```c
/// GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index)
/// ```
void glEndQueryIndexed(int target, int index) {
  final glEndQueryIndexedAsFunction = _glEndQueryIndexed
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return glEndQueryIndexedAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryIndexediv;

/// ```c
/// GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params)
/// ```
void glGetQueryIndexediv(
  int target,
  int index,
  int pname,
  Pointer<Int32> params,
) {
  final glGetQueryIndexedivAsFunction = _glGetQueryIndexediv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int pname, Pointer<Int32> params)
      >();
  return glGetQueryIndexedivAsFunction(target, index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReleaseShaderCompiler;

/// ```c
/// GLAPI void APIENTRY glReleaseShaderCompiler (void)
/// ```
void glReleaseShaderCompiler() {
  final glReleaseShaderCompilerAsFunction = _glReleaseShaderCompiler
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glReleaseShaderCompilerAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderBinary;

/// ```c
/// GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)
/// ```
void glShaderBinary(
  int count,
  Pointer<Uint32> shaders,
  int binaryFormat,
  Pointer<NativeType> binary,
  int length,
) {
  final glShaderBinaryAsFunction = _glShaderBinary
      .cast<
        NativeFunction<
          Void Function(
            Uint32 count,
            Pointer<Uint32> shaders,
            Uint32 binaryFormat,
            Pointer<NativeType> binary,
            Uint32 length,
          )
        >
      >()
      .asFunction<
        void Function(
          int count,
          Pointer<Uint32> shaders,
          int binaryFormat,
          Pointer<NativeType> binary,
          int length,
        )
      >();
  return glShaderBinaryAsFunction(count, shaders, binaryFormat, binary, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShaderPrecisionFormat;

/// ```c
/// GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
/// ```
void glGetShaderPrecisionFormat(
  int shadertype,
  int precisiontype,
  Pointer<Int32> range,
  Pointer<Int32> precision,
) {
  final glGetShaderPrecisionFormatAsFunction = _glGetShaderPrecisionFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shadertype,
            Uint32 precisiontype,
            Pointer<Int32> range,
            Pointer<Int32> precision,
          )
        >
      >()
      .asFunction<
        void Function(
          int shadertype,
          int precisiontype,
          Pointer<Int32> range,
          Pointer<Int32> precision,
        )
      >();
  return glGetShaderPrecisionFormatAsFunction(
    shadertype,
    precisiontype,
    range,
    precision,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangef;

/// ```c
/// GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f)
/// ```
void glDepthRangef(double n, double f) {
  final glDepthRangefAsFunction = _glDepthRangef
      .cast<NativeFunction<Void Function(Float n, Float f)>>()
      .asFunction<void Function(double n, double f)>();
  return glDepthRangefAsFunction(n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearDepthf;

/// ```c
/// GLAPI void APIENTRY glClearDepthf (GLfloat d)
/// ```
void glClearDepthf(double d) {
  final glClearDepthfAsFunction = _glClearDepthf
      .cast<NativeFunction<Void Function(Float d)>>()
      .asFunction<void Function(double d)>();
  return glClearDepthfAsFunction(d);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramBinary;

/// ```c
/// GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
/// ```
void glGetProgramBinary(
  int program,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Uint32> binaryFormat,
  Pointer<NativeType> binary,
) {
  final glGetProgramBinaryAsFunction = _glGetProgramBinary
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Uint32> binaryFormat,
            Pointer<NativeType> binary,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Uint32> binaryFormat,
          Pointer<NativeType> binary,
        )
      >();
  return glGetProgramBinaryAsFunction(
    program,
    bufSize,
    length,
    binaryFormat,
    binary,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramBinary;

/// ```c
/// GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
/// ```
void glProgramBinary(
  int program,
  int binaryFormat,
  Pointer<NativeType> binary,
  int length,
) {
  final glProgramBinaryAsFunction = _glProgramBinary
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 binaryFormat,
            Pointer<NativeType> binary,
            Uint32 length,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int binaryFormat,
          Pointer<NativeType> binary,
          int length,
        )
      >();
  return glProgramBinaryAsFunction(program, binaryFormat, binary, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameteri;

/// ```c
/// GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value)
/// ```
void glProgramParameteri(int program, int pname, int value) {
  final glProgramParameteriAsFunction = _glProgramParameteri
      .cast<
        NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>
      >()
      .asFunction<void Function(int program, int pname, int value)>();
  return glProgramParameteriAsFunction(program, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUseProgramStages;

/// ```c
/// GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
/// ```
void glUseProgramStages(int pipeline, int stages, int program) {
  final glUseProgramStagesAsFunction = _glUseProgramStages
      .cast<
        NativeFunction<
          Void Function(Uint32 pipeline, Uint32 stages, Uint32 program)
        >
      >()
      .asFunction<void Function(int pipeline, int stages, int program)>();
  return glUseProgramStagesAsFunction(pipeline, stages, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveShaderProgram;

/// ```c
/// GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program)
/// ```
void glActiveShaderProgram(int pipeline, int program) {
  final glActiveShaderProgramAsFunction = _glActiveShaderProgram
      .cast<NativeFunction<Void Function(Uint32 pipeline, Uint32 program)>>()
      .asFunction<void Function(int pipeline, int program)>();
  return glActiveShaderProgramAsFunction(pipeline, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateShaderProgramv;

/// ```c
/// GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings)
/// ```
int glCreateShaderProgramv(
  int type,
  int count,
  Pointer<Pointer<Int8>> strings,
) {
  final glCreateShaderProgramvAsFunction = _glCreateShaderProgramv
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 type,
            Uint32 count,
            Pointer<Pointer<Int8>> strings,
          )
        >
      >()
      .asFunction<
        int Function(int type, int count, Pointer<Pointer<Int8>> strings)
      >();
  return glCreateShaderProgramvAsFunction(type, count, strings);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindProgramPipeline;

/// ```c
/// GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline)
/// ```
void glBindProgramPipeline(int pipeline) {
  final glBindProgramPipelineAsFunction = _glBindProgramPipeline
      .cast<NativeFunction<Void Function(Uint32 pipeline)>>()
      .asFunction<void Function(int pipeline)>();
  return glBindProgramPipelineAsFunction(pipeline);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteProgramPipelines;

/// ```c
/// GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines)
/// ```
void glDeleteProgramPipelines(int n, Pointer<Uint32> pipelines) {
  final glDeleteProgramPipelinesAsFunction = _glDeleteProgramPipelines
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> pipelines)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> pipelines)>();
  return glDeleteProgramPipelinesAsFunction(n, pipelines);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenProgramPipelines;

/// ```c
/// GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines)
/// ```
void glGenProgramPipelines(int n, Pointer<Uint32> pipelines) {
  final glGenProgramPipelinesAsFunction = _glGenProgramPipelines
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> pipelines)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> pipelines)>();
  return glGenProgramPipelinesAsFunction(n, pipelines);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsProgramPipeline;

/// ```c
/// GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline)
/// ```
int glIsProgramPipeline(int pipeline) {
  final glIsProgramPipelineAsFunction = _glIsProgramPipeline
      .cast<NativeFunction<Int32 Function(Uint32 pipeline)>>()
      .asFunction<int Function(int pipeline)>();
  return glIsProgramPipelineAsFunction(pipeline);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramPipelineiv;

/// ```c
/// GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params)
/// ```
void glGetProgramPipelineiv(int pipeline, int pname, Pointer<Int32> params) {
  final glGetProgramPipelineivAsFunction = _glGetProgramPipelineiv
      .cast<
        NativeFunction<
          Void Function(Uint32 pipeline, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int pipeline, int pname, Pointer<Int32> params)
      >();
  return glGetProgramPipelineivAsFunction(pipeline, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1i;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0)
/// ```
void glProgramUniform1i(int program, int location, int v0) {
  final glProgramUniform1iAsFunction = _glProgramUniform1i
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0)>
      >()
      .asFunction<void Function(int program, int location, int v0)>();
  return glProgramUniform1iAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1iv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform1iv(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform1ivAsFunction = _glProgramUniform1iv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform1ivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1f;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
/// ```
void glProgramUniform1f(int program, int location, double v0) {
  final glProgramUniform1fAsFunction = _glProgramUniform1f
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Float v0)>
      >()
      .asFunction<void Function(int program, int location, double v0)>();
  return glProgramUniform1fAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform1fv(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform1fvAsFunction = _glProgramUniform1fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform1fvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1d;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0)
/// ```
void glProgramUniform1d(int program, int location, double v0) {
  final glProgramUniform1dAsFunction = _glProgramUniform1d
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Double v0)>
      >()
      .asFunction<void Function(int program, int location, double v0)>();
  return glProgramUniform1dAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform1dv(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform1dvAsFunction = _glProgramUniform1dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform1dvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ui;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
/// ```
void glProgramUniform1ui(int program, int location, int v0) {
  final glProgramUniform1uiAsFunction = _glProgramUniform1ui
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0)>
      >()
      .asFunction<void Function(int program, int location, int v0)>();
  return glProgramUniform1uiAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1uiv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform1uiv(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform1uivAsFunction = _glProgramUniform1uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform1uivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2i;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
/// ```
void glProgramUniform2i(int program, int location, int v0, int v1) {
  final glProgramUniform2iAsFunction = _glProgramUniform2i
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1)
        >
      >()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return glProgramUniform2iAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2iv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform2iv(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform2ivAsFunction = _glProgramUniform2iv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform2ivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2f;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
/// ```
void glProgramUniform2f(int program, int location, double v0, double v1) {
  final glProgramUniform2fAsFunction = _glProgramUniform2f
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Float v0, Float v1)
        >
      >()
      .asFunction<
        void Function(int program, int location, double v0, double v1)
      >();
  return glProgramUniform2fAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform2fv(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform2fvAsFunction = _glProgramUniform2fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform2fvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2d;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1)
/// ```
void glProgramUniform2d(int program, int location, double v0, double v1) {
  final glProgramUniform2dAsFunction = _glProgramUniform2d
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Double v0, Double v1)
        >
      >()
      .asFunction<
        void Function(int program, int location, double v0, double v1)
      >();
  return glProgramUniform2dAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform2dv(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform2dvAsFunction = _glProgramUniform2dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform2dvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ui;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
/// ```
void glProgramUniform2ui(int program, int location, int v0, int v1) {
  final glProgramUniform2uiAsFunction = _glProgramUniform2ui
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1)
        >
      >()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return glProgramUniform2uiAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2uiv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform2uiv(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform2uivAsFunction = _glProgramUniform2uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform2uivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3i;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
/// ```
void glProgramUniform3i(int program, int location, int v0, int v1, int v2) {
  final glProgramUniform3iAsFunction = _glProgramUniform3i
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int32 v0,
            Int32 v1,
            Int32 v2,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2)
      >();
  return glProgramUniform3iAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3iv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform3iv(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform3ivAsFunction = _glProgramUniform3iv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform3ivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3f;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
void glProgramUniform3f(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
) {
  final glProgramUniform3fAsFunction = _glProgramUniform3f
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Float v0,
            Float v1,
            Float v2,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
        )
      >();
  return glProgramUniform3fAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform3fv(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform3fvAsFunction = _glProgramUniform3fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform3fvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3d;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
/// ```
void glProgramUniform3d(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
) {
  final glProgramUniform3dAsFunction = _glProgramUniform3d
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Double v0,
            Double v1,
            Double v2,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
        )
      >();
  return glProgramUniform3dAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform3dv(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform3dvAsFunction = _glProgramUniform3dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform3dvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ui;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
void glProgramUniform3ui(int program, int location, int v0, int v1, int v2) {
  final glProgramUniform3uiAsFunction = _glProgramUniform3ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2)
      >();
  return glProgramUniform3uiAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3uiv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform3uiv(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform3uivAsFunction = _glProgramUniform3uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform3uivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4i;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
void glProgramUniform4i(
  int program,
  int location,
  int v0,
  int v1,
  int v2,
  int v3,
) {
  final glProgramUniform4iAsFunction = _glProgramUniform4i
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int32 v0,
            Int32 v1,
            Int32 v2,
            Int32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2, int v3)
      >();
  return glProgramUniform4iAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4iv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform4iv(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform4ivAsFunction = _glProgramUniform4iv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform4ivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4f;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
void glProgramUniform4f(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
  double v3,
) {
  final glProgramUniform4fAsFunction = _glProgramUniform4f
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Float v0,
            Float v1,
            Float v2,
            Float v3,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
          double v3,
        )
      >();
  return glProgramUniform4fAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform4fv(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform4fvAsFunction = _glProgramUniform4fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform4fvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4d;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
/// ```
void glProgramUniform4d(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
  double v3,
) {
  final glProgramUniform4dAsFunction = _glProgramUniform4d
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Double v0,
            Double v1,
            Double v2,
            Double v3,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
          double v3,
        )
      >();
  return glProgramUniform4dAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform4dv(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform4dvAsFunction = _glProgramUniform4dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform4dvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ui;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
void glProgramUniform4ui(
  int program,
  int location,
  int v0,
  int v1,
  int v2,
  int v3,
) {
  final glProgramUniform4uiAsFunction = _glProgramUniform4ui
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
            Uint32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2, int v3)
      >();
  return glProgramUniform4uiAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4uiv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform4uiv(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform4uivAsFunction = _glProgramUniform4uiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform4uivAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2fvAsFunction = _glProgramUniformMatrix2fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix2fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3fvAsFunction = _glProgramUniformMatrix3fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix3fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4fvAsFunction = _glProgramUniformMatrix4fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix4fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2dvAsFunction = _glProgramUniformMatrix2dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix2dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3dvAsFunction = _glProgramUniformMatrix3dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix3dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4dvAsFunction = _glProgramUniformMatrix4dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix4dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x3fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2x3fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2x3fvAsFunction = _glProgramUniformMatrix2x3fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix2x3fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x2fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3x2fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3x2fvAsFunction = _glProgramUniformMatrix3x2fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix3x2fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x4fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2x4fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2x4fvAsFunction = _glProgramUniformMatrix2x4fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix2x4fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x2fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4x2fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4x2fvAsFunction = _glProgramUniformMatrix4x2fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix4x2fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x4fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3x4fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3x4fvAsFunction = _glProgramUniformMatrix3x4fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix3x4fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x3fv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4x3fv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4x3fvAsFunction = _glProgramUniformMatrix4x3fv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix4x3fvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x3dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2x3dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2x3dvAsFunction = _glProgramUniformMatrix2x3dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix2x3dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x2dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3x2dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3x2dvAsFunction = _glProgramUniformMatrix3x2dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix3x2dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x4dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2x4dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2x4dvAsFunction = _glProgramUniformMatrix2x4dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix2x4dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x2dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4x2dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4x2dvAsFunction = _glProgramUniformMatrix4x2dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix4x2dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x4dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3x4dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3x4dvAsFunction = _glProgramUniformMatrix3x4dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix3x4dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x3dv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4x3dv(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4x3dvAsFunction = _glProgramUniformMatrix4x3dv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix4x3dvAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glValidateProgramPipeline;

/// ```c
/// GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline)
/// ```
void glValidateProgramPipeline(int pipeline) {
  final glValidateProgramPipelineAsFunction = _glValidateProgramPipeline
      .cast<NativeFunction<Void Function(Uint32 pipeline)>>()
      .asFunction<void Function(int pipeline)>();
  return glValidateProgramPipelineAsFunction(pipeline);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramPipelineInfoLog;

/// ```c
/// GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
/// ```
void glGetProgramPipelineInfoLog(
  int pipeline,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> infoLog,
) {
  final glGetProgramPipelineInfoLogAsFunction = _glGetProgramPipelineInfoLog
      .cast<
        NativeFunction<
          Void Function(
            Uint32 pipeline,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> infoLog,
          )
        >
      >()
      .asFunction<
        void Function(
          int pipeline,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> infoLog,
        )
      >();
  return glGetProgramPipelineInfoLogAsFunction(
    pipeline,
    bufSize,
    length,
    infoLog,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1d;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x)
/// ```
void glVertexAttribL1d(int index, double x) {
  final glVertexAttribL1dAsFunction = _glVertexAttribL1d
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttribL1dAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2d;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y)
/// ```
void glVertexAttribL2d(int index, double x, double y) {
  final glVertexAttribL2dAsFunction = _glVertexAttribL2d
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttribL2dAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3d;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexAttribL3d(int index, double x, double y, double z) {
  final glVertexAttribL3dAsFunction = _glVertexAttribL3d
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttribL3dAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4d;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexAttribL4d(int index, double x, double y, double z, double w) {
  final glVertexAttribL4dAsFunction = _glVertexAttribL4d
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttribL4dAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL1dv(int index, Pointer<Double> v) {
  final glVertexAttribL1dvAsFunction = _glVertexAttribL1dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL1dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL2dv(int index, Pointer<Double> v) {
  final glVertexAttribL2dvAsFunction = _glVertexAttribL2dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL2dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL3dv(int index, Pointer<Double> v) {
  final glVertexAttribL3dvAsFunction = _glVertexAttribL3dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL3dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4dv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL4dv(int index, Pointer<Double> v) {
  final glVertexAttribL4dvAsFunction = _glVertexAttribL4dv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL4dvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribLPointer;

/// ```c
/// GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribLPointer(
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribLPointerAsFunction = _glVertexAttribLPointer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribLPointerAsFunction(index, size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribLdv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetVertexAttribLdv(int index, int pname, Pointer<Double> params) {
  final glGetVertexAttribLdvAsFunction = _glGetVertexAttribLdv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Double> params)
      >();
  return glGetVertexAttribLdvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewportArrayv;

/// ```c
/// GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v)
/// ```
void glViewportArrayv(int first, int count, Pointer<Float> v) {
  final glViewportArrayvAsFunction = _glViewportArrayv
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int first, int count, Pointer<Float> v)>();
  return glViewportArrayvAsFunction(first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewportIndexedf;

/// ```c
/// GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
/// ```
void glViewportIndexedf(int index, double x, double y, double w, double h) {
  final glViewportIndexedfAsFunction = _glViewportIndexedf
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Float x, Float y, Float w, Float h)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double w, double h)
      >();
  return glViewportIndexedfAsFunction(index, x, y, w, h);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewportIndexedfv;

/// ```c
/// GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v)
/// ```
void glViewportIndexedfv(int index, Pointer<Float> v) {
  final glViewportIndexedfvAsFunction = _glViewportIndexedfv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glViewportIndexedfvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissorArrayv;

/// ```c
/// GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v)
/// ```
void glScissorArrayv(int first, int count, Pointer<Int32> v) {
  final glScissorArrayvAsFunction = _glScissorArrayv
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Int32> v)
        >
      >()
      .asFunction<void Function(int first, int count, Pointer<Int32> v)>();
  return glScissorArrayvAsFunction(first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissorIndexed;

/// ```c
/// GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
/// ```
void glScissorIndexed(int index, int left, int bottom, int width, int height) {
  final glScissorIndexedAsFunction = _glScissorIndexed
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 left,
            Int32 bottom,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(int index, int left, int bottom, int width, int height)
      >();
  return glScissorIndexedAsFunction(index, left, bottom, width, height);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissorIndexedv;

/// ```c
/// GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v)
/// ```
void glScissorIndexedv(int index, Pointer<Int32> v) {
  final glScissorIndexedvAsFunction = _glScissorIndexedv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glScissorIndexedvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangeArrayv;

/// ```c
/// GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v)
/// ```
void glDepthRangeArrayv(int first, int count, Pointer<Double> v) {
  final glDepthRangeArrayvAsFunction = _glDepthRangeArrayv
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int first, int count, Pointer<Double> v)>();
  return glDepthRangeArrayvAsFunction(first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangeIndexed;

/// ```c
/// GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f)
/// ```
void glDepthRangeIndexed(int index, double n, double f) {
  final glDepthRangeIndexedAsFunction = _glDepthRangeIndexed
      .cast<NativeFunction<Void Function(Uint32 index, Double n, Double f)>>()
      .asFunction<void Function(int index, double n, double f)>();
  return glDepthRangeIndexedAsFunction(index, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFloatiV;

/// ```c
/// GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data)
/// ```
void glGetFloatiV(int target, int index, Pointer<Float> data) {
  final glGetFloatiVAsFunction = _glGetFloatiV
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Float> data)>();
  return glGetFloatiVAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDoubleiV;

/// ```c
/// GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data)
/// ```
void glGetDoubleiV(int target, int index, Pointer<Double> data) {
  final glGetDoubleiVAsFunction = _glGetDoubleiV
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Double> data)>();
  return glGetDoubleiVAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glDrawArraysInstancedBaseInstance;

/// ```c
/// GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
/// ```
void glDrawArraysInstancedBaseInstance(
  int mode,
  int first,
  int count,
  int instancecount,
  int baseinstance,
) {
  final glDrawArraysInstancedBaseInstanceAsFunction =
      _glDrawArraysInstancedBaseInstance
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Int32 first,
                Uint32 count,
                Uint32 instancecount,
                Uint32 baseinstance,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int first,
              int count,
              int instancecount,
              int baseinstance,
            )
          >();
  return glDrawArraysInstancedBaseInstanceAsFunction(
    mode,
    first,
    count,
    instancecount,
    baseinstance,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glDrawElementsInstancedBaseInstance;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
/// ```
void glDrawElementsInstancedBaseInstance(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int instancecount,
  int baseinstance,
) {
  final glDrawElementsInstancedBaseInstanceAsFunction =
      _glDrawElementsInstancedBaseInstance
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 count,
                Uint32 type,
                Pointer<NativeType> indices,
                Uint32 instancecount,
                Uint32 baseinstance,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int count,
              int type,
              Pointer<NativeType> indices,
              int instancecount,
              int baseinstance,
            )
          >();
  return glDrawElementsInstancedBaseInstanceAsFunction(
    mode,
    count,
    type,
    indices,
    instancecount,
    baseinstance,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glDrawElementsInstancedBaseVertexBaseInstance;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
/// ```
void glDrawElementsInstancedBaseVertexBaseInstance(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int instancecount,
  int basevertex,
  int baseinstance,
) {
  final glDrawElementsInstancedBaseVertexBaseInstanceAsFunction =
      _glDrawElementsInstancedBaseVertexBaseInstance
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 count,
                Uint32 type,
                Pointer<NativeType> indices,
                Uint32 instancecount,
                Int32 basevertex,
                Uint32 baseinstance,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int count,
              int type,
              Pointer<NativeType> indices,
              int instancecount,
              int basevertex,
              int baseinstance,
            )
          >();
  return glDrawElementsInstancedBaseVertexBaseInstanceAsFunction(
    mode,
    count,
    type,
    indices,
    instancecount,
    basevertex,
    baseinstance,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInternalformativ;

/// ```c
/// GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params)
/// ```
void glGetInternalformativ(
  int target,
  int internalformat,
  int pname,
  int count,
  Pointer<Int32> params,
) {
  final glGetInternalformativAsFunction = _glGetInternalformativ
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 pname,
            Uint32 count,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int pname,
          int count,
          Pointer<Int32> params,
        )
      >();
  return glGetInternalformativAsFunction(
    target,
    internalformat,
    pname,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveAtomicCounterBufferiv;

/// ```c
/// GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
/// ```
void glGetActiveAtomicCounterBufferiv(
  int program,
  int bufferIndex,
  int pname,
  Pointer<Int32> params,
) {
  final glGetActiveAtomicCounterBufferivAsFunction =
      _glGetActiveAtomicCounterBufferiv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 bufferIndex,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int bufferIndex,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetActiveAtomicCounterBufferivAsFunction(
    program,
    bufferIndex,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindImageTexture;

/// ```c
/// GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
/// ```
void glBindImageTexture(
  int unit,
  int texture,
  int level,
  int layered,
  int layer,
  int access,
  int format,
) {
  final glBindImageTextureAsFunction = _glBindImageTexture
      .cast<
        NativeFunction<
          Void Function(
            Uint32 unit,
            Uint32 texture,
            Int32 level,
            Int32 layered,
            Int32 layer,
            Uint32 access,
            Uint32 format,
          )
        >
      >()
      .asFunction<
        void Function(
          int unit,
          int texture,
          int level,
          int layered,
          int layer,
          int access,
          int format,
        )
      >();
  return glBindImageTextureAsFunction(
    unit,
    texture,
    level,
    layered,
    layer,
    access,
    format,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMemoryBarrier;

/// ```c
/// GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers)
/// ```
void glMemoryBarrier(int barriers) {
  final glMemoryBarrierAsFunction = _glMemoryBarrier
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return glMemoryBarrierAsFunction(barriers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage1D;

/// ```c
/// GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
void glTexStorage1D(int target, int levels, int internalformat, int width) {
  final glTexStorage1DAsFunction = _glTexStorage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int levels, int internalformat, int width)
      >();
  return glTexStorage1DAsFunction(target, levels, internalformat, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage2D;

/// ```c
/// GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glTexStorage2D(
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
) {
  final glTexStorage2DAsFunction = _glTexStorage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glTexStorage2DAsFunction(
    target,
    levels,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage3D;

/// ```c
/// GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glTexStorage3D(
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
  int depth,
) {
  final glTexStorage3DAsFunction = _glTexStorage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
          int depth,
        )
      >();
  return glTexStorage3DAsFunction(
    target,
    levels,
    internalformat,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawTransformFeedbackInstanced;

/// ```c
/// GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount)
/// ```
void glDrawTransformFeedbackInstanced(int mode, int id, int instancecount) {
  final glDrawTransformFeedbackInstancedAsFunction =
      _glDrawTransformFeedbackInstanced
          .cast<
            NativeFunction<
              Void Function(Uint32 mode, Uint32 id, Uint32 instancecount)
            >
          >()
          .asFunction<void Function(int mode, int id, int instancecount)>();
  return glDrawTransformFeedbackInstancedAsFunction(mode, id, instancecount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glDrawTransformFeedbackStreamInstanced;

/// ```c
/// GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
/// ```
void glDrawTransformFeedbackStreamInstanced(
  int mode,
  int id,
  int stream,
  int instancecount,
) {
  final glDrawTransformFeedbackStreamInstancedAsFunction =
      _glDrawTransformFeedbackStreamInstanced
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 id,
                Uint32 stream,
                Uint32 instancecount,
              )
            >
          >()
          .asFunction<
            void Function(int mode, int id, int stream, int instancecount)
          >();
  return glDrawTransformFeedbackStreamInstancedAsFunction(
    mode,
    id,
    stream,
    instancecount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferData;

/// ```c
/// GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
void glClearBufferData(
  int target,
  int internalformat,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearBufferDataAsFunction = _glClearBufferData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearBufferDataAsFunction(
    target,
    internalformat,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearBufferSubData;

/// ```c
/// GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
void glClearBufferSubData(
  int target,
  int internalformat,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearBufferSubDataAsFunction = _glClearBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearBufferSubDataAsFunction(
    target,
    internalformat,
    offset,
    size,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDispatchCompute;

/// ```c
/// GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
/// ```
void glDispatchCompute(int numGroupsX, int numGroupsY, int numGroupsZ) {
  final glDispatchComputeAsFunction = _glDispatchCompute
      .cast<
        NativeFunction<
          Void Function(Uint32 numGroupsX, Uint32 numGroupsY, Uint32 numGroupsZ)
        >
      >()
      .asFunction<
        void Function(int numGroupsX, int numGroupsY, int numGroupsZ)
      >();
  return glDispatchComputeAsFunction(numGroupsX, numGroupsY, numGroupsZ);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDispatchComputeIndirect;

/// ```c
/// GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect)
/// ```
void glDispatchComputeIndirect(Pointer<NativeType> indirect) {
  final glDispatchComputeIndirectAsFunction = _glDispatchComputeIndirect
      .cast<NativeFunction<Void Function(Pointer<NativeType> indirect)>>()
      .asFunction<void Function(Pointer<NativeType> indirect)>();
  return glDispatchComputeIndirectAsFunction(indirect);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyImageSubData;

/// ```c
/// GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
/// ```
void glCopyImageSubData(
  int srcName,
  int srcTarget,
  int srcLevel,
  int srcX,
  int srcY,
  int srcZ,
  int dstName,
  int dstTarget,
  int dstLevel,
  int dstX,
  int dstY,
  int dstZ,
  int srcWidth,
  int srcHeight,
  int srcDepth,
) {
  final glCopyImageSubDataAsFunction = _glCopyImageSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 srcName,
            Uint32 srcTarget,
            Int32 srcLevel,
            Int32 srcX,
            Int32 srcY,
            Int32 srcZ,
            Uint32 dstName,
            Uint32 dstTarget,
            Int32 dstLevel,
            Int32 dstX,
            Int32 dstY,
            Int32 dstZ,
            Uint32 srcWidth,
            Uint32 srcHeight,
            Uint32 srcDepth,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth,
        )
      >();
  return glCopyImageSubDataAsFunction(
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srcY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    srcWidth,
    srcHeight,
    srcDepth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferParameteri;

/// ```c
/// GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
/// ```
void glFramebufferParameteri(int target, int pname, int param) {
  final glFramebufferParameteriAsFunction = _glFramebufferParameteri
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glFramebufferParameteriAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFramebufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetFramebufferParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetFramebufferParameterivAsFunction = _glGetFramebufferParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetFramebufferParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInternalformati64v;

/// ```c
/// GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params)
/// ```
void glGetInternalformati64v(
  int target,
  int internalformat,
  int pname,
  int count,
  Pointer<Int64> params,
) {
  final glGetInternalformati64vAsFunction = _glGetInternalformati64v
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 pname,
            Uint32 count,
            Pointer<Int64> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int pname,
          int count,
          Pointer<Int64> params,
        )
      >();
  return glGetInternalformati64vAsFunction(
    target,
    internalformat,
    pname,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateTexSubImage;

/// ```c
/// GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glInvalidateTexSubImage(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
) {
  final glInvalidateTexSubImageAsFunction = _glInvalidateTexSubImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
        )
      >();
  return glInvalidateTexSubImageAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateTexImage;

/// ```c
/// GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level)
/// ```
void glInvalidateTexImage(int texture, int level) {
  final glInvalidateTexImageAsFunction = _glInvalidateTexImage
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int texture, int level)>();
  return glInvalidateTexImageAsFunction(texture, level);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateBufferSubData;

/// ```c
/// GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
void glInvalidateBufferSubData(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
) {
  final glInvalidateBufferSubDataAsFunction = _glInvalidateBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
        )
      >();
  return glInvalidateBufferSubDataAsFunction(buffer, offset, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateBufferData;

/// ```c
/// GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer)
/// ```
void glInvalidateBufferData(int buffer) {
  final glInvalidateBufferDataAsFunction = _glInvalidateBufferData
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return glInvalidateBufferDataAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateFramebuffer;

/// ```c
/// GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments)
/// ```
void glInvalidateFramebuffer(
  int target,
  int numAttachments,
  Pointer<Uint32> attachments,
) {
  final glInvalidateFramebufferAsFunction = _glInvalidateFramebuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 numAttachments,
            Pointer<Uint32> attachments,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int numAttachments,
          Pointer<Uint32> attachments,
        )
      >();
  return glInvalidateFramebufferAsFunction(target, numAttachments, attachments);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateSubFramebuffer;

/// ```c
/// GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glInvalidateSubFramebuffer(
  int target,
  int numAttachments,
  Pointer<Uint32> attachments,
  int x,
  int y,
  int width,
  int height,
) {
  final glInvalidateSubFramebufferAsFunction = _glInvalidateSubFramebuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 numAttachments,
            Pointer<Uint32> attachments,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int numAttachments,
          Pointer<Uint32> attachments,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glInvalidateSubFramebufferAsFunction(
    target,
    numAttachments,
    attachments,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawArraysIndirect;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
/// ```
void glMultiDrawArraysIndirect(
  int mode,
  Pointer<NativeType> indirect,
  int drawcount,
  int stride,
) {
  final glMultiDrawArraysIndirectAsFunction = _glMultiDrawArraysIndirect
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<NativeType> indirect,
            Uint32 drawcount,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<NativeType> indirect,
          int drawcount,
          int stride,
        )
      >();
  return glMultiDrawArraysIndirectAsFunction(mode, indirect, drawcount, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementsIndirect;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
/// ```
void glMultiDrawElementsIndirect(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  int drawcount,
  int stride,
) {
  final glMultiDrawElementsIndirectAsFunction = _glMultiDrawElementsIndirect
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 type,
            Pointer<NativeType> indirect,
            Uint32 drawcount,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int type,
          Pointer<NativeType> indirect,
          int drawcount,
          int stride,
        )
      >();
  return glMultiDrawElementsIndirectAsFunction(
    mode,
    type,
    indirect,
    drawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramInterfaceiv;

/// ```c
/// GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params)
/// ```
void glGetProgramInterfaceiv(
  int program,
  int programInterface,
  int pname,
  Pointer<Int32> params,
) {
  final glGetProgramInterfaceivAsFunction = _glGetProgramInterfaceiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 programInterface,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int programInterface,
          int pname,
          Pointer<Int32> params,
        )
      >();
  return glGetProgramInterfaceivAsFunction(
    program,
    programInterface,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramResourceIndex;

/// ```c
/// GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name)
/// ```
int glGetProgramResourceIndex(int program, int programInterface, String name) {
  final glGetProgramResourceIndexAsFunction = _glGetProgramResourceIndex
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 program,
            Uint32 programInterface,
            Pointer<Utf8> name,
          )
        >
      >()
      .asFunction<
        int Function(int program, int programInterface, Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetProgramResourceIndexAsFunction(
    program,
    programInterface,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramResourceName;

/// ```c
/// GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
/// ```
void glGetProgramResourceName(
  int program,
  int programInterface,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> name,
) {
  final glGetProgramResourceNameAsFunction = _glGetProgramResourceName
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 programInterface,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int programInterface,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> name,
        )
      >();
  return glGetProgramResourceNameAsFunction(
    program,
    programInterface,
    index,
    bufSize,
    length,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramResourceiv;

/// ```c
/// GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params)
/// ```
void glGetProgramResourceiv(
  int program,
  int programInterface,
  int index,
  int propCount,
  Pointer<Uint32> props,
  int count,
  Pointer<Uint32> length,
  Pointer<Int32> params,
) {
  final glGetProgramResourceivAsFunction = _glGetProgramResourceiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 programInterface,
            Uint32 index,
            Uint32 propCount,
            Pointer<Uint32> props,
            Uint32 count,
            Pointer<Uint32> length,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int programInterface,
          int index,
          int propCount,
          Pointer<Uint32> props,
          int count,
          Pointer<Uint32> length,
          Pointer<Int32> params,
        )
      >();
  return glGetProgramResourceivAsFunction(
    program,
    programInterface,
    index,
    propCount,
    props,
    count,
    length,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramResourceLocation;

/// ```c
/// GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name)
/// ```
int glGetProgramResourceLocation(
  int program,
  int programInterface,
  String name,
) {
  final glGetProgramResourceLocationAsFunction = _glGetProgramResourceLocation
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 program,
            Uint32 programInterface,
            Pointer<Utf8> name,
          )
        >
      >()
      .asFunction<
        int Function(int program, int programInterface, Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetProgramResourceLocationAsFunction(
    program,
    programInterface,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetProgramResourceLocationIndex;

/// ```c
/// GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name)
/// ```
int glGetProgramResourceLocationIndex(
  int program,
  int programInterface,
  String name,
) {
  final glGetProgramResourceLocationIndexAsFunction =
      _glGetProgramResourceLocationIndex
          .cast<
            NativeFunction<
              Int32 Function(
                Uint32 program,
                Uint32 programInterface,
                Pointer<Utf8> name,
              )
            >
          >()
          .asFunction<
            int Function(int program, int programInterface, Pointer<Utf8> name)
          >();
  final namePointer = name.toNativeUtf8();
  final result = glGetProgramResourceLocationIndexAsFunction(
    program,
    programInterface,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderStorageBlockBinding;

/// ```c
/// GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
/// ```
void glShaderStorageBlockBinding(
  int program,
  int storageBlockIndex,
  int storageBlockBinding,
) {
  final glShaderStorageBlockBindingAsFunction = _glShaderStorageBlockBinding
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 storageBlockIndex,
            Uint32 storageBlockBinding,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int storageBlockIndex,
          int storageBlockBinding,
        )
      >();
  return glShaderStorageBlockBindingAsFunction(
    program,
    storageBlockIndex,
    storageBlockBinding,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBufferRange;

/// ```c
/// GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glTexBufferRange(
  int target,
  int internalformat,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glTexBufferRangeAsFunction = _glTexBufferRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glTexBufferRangeAsFunction(
    target,
    internalformat,
    buffer,
    offset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage2DMultisample;

/// ```c
/// GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
void glTexStorage2DMultisample(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int fixedsamplelocations,
) {
  final glTexStorage2DMultisampleAsFunction = _glTexStorage2DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          int fixedsamplelocations,
        )
      >();
  return glTexStorage2DMultisampleAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage3DMultisample;

/// ```c
/// GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
void glTexStorage3DMultisample(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int depth,
  int fixedsamplelocations,
) {
  final glTexStorage3DMultisampleAsFunction = _glTexStorage3DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          int depth,
          int fixedsamplelocations,
        )
      >();
  return glTexStorage3DMultisampleAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
    depth,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureView;

/// ```c
/// GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
/// ```
void glTextureView(
  int texture,
  int target,
  int origtexture,
  int internalformat,
  int minlevel,
  int numlevels,
  int minlayer,
  int numlayers,
) {
  final glTextureViewAsFunction = _glTextureView
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 origtexture,
            Uint32 internalformat,
            Uint32 minlevel,
            Uint32 numlevels,
            Uint32 minlayer,
            Uint32 numlayers,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int origtexture,
          int internalformat,
          int minlevel,
          int numlevels,
          int minlayer,
          int numlayers,
        )
      >();
  return glTextureViewAsFunction(
    texture,
    target,
    origtexture,
    internalformat,
    minlevel,
    numlevels,
    minlayer,
    numlayers,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVertexBuffer;

/// ```c
/// GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
void glBindVertexBuffer(
  int bindingindex,
  int buffer,
  Pointer<NativeType> offset,
  int stride,
) {
  final glBindVertexBufferAsFunction = _glBindVertexBuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 bindingindex,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(
          int bindingindex,
          int buffer,
          Pointer<NativeType> offset,
          int stride,
        )
      >();
  return glBindVertexBufferAsFunction(bindingindex, buffer, offset, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribFormat;

/// ```c
/// GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
void glVertexAttribFormat(
  int attribindex,
  int size,
  int type,
  int normalized,
  int relativeoffset,
) {
  final glVertexAttribFormatAsFunction = _glVertexAttribFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int attribindex,
          int size,
          int type,
          int normalized,
          int relativeoffset,
        )
      >();
  return glVertexAttribFormatAsFunction(
    attribindex,
    size,
    type,
    normalized,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribIFormat;

/// ```c
/// GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexAttribIFormat(
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexAttribIFormatAsFunction = _glVertexAttribIFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(int attribindex, int size, int type, int relativeoffset)
      >();
  return glVertexAttribIFormatAsFunction(
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribLFormat;

/// ```c
/// GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexAttribLFormat(
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexAttribLFormatAsFunction = _glVertexAttribLFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(int attribindex, int size, int type, int relativeoffset)
      >();
  return glVertexAttribLFormatAsFunction(
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribBinding;

/// ```c
/// GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
/// ```
void glVertexAttribBinding(int attribindex, int bindingindex) {
  final glVertexAttribBindingAsFunction = _glVertexAttribBinding
      .cast<
        NativeFunction<Void Function(Uint32 attribindex, Uint32 bindingindex)>
      >()
      .asFunction<void Function(int attribindex, int bindingindex)>();
  return glVertexAttribBindingAsFunction(attribindex, bindingindex);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexBindingDivisor;

/// ```c
/// GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
/// ```
void glVertexBindingDivisor(int bindingindex, int divisor) {
  final glVertexBindingDivisorAsFunction = _glVertexBindingDivisor
      .cast<
        NativeFunction<Void Function(Uint32 bindingindex, Uint32 divisor)>
      >()
      .asFunction<void Function(int bindingindex, int divisor)>();
  return glVertexBindingDivisorAsFunction(bindingindex, divisor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageControl;

/// ```c
/// GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
/// ```
void glDebugMessageControl(
  int source,
  int type,
  int severity,
  int count,
  Pointer<Uint32> ids,
  int enabled,
) {
  final glDebugMessageControlAsFunction = _glDebugMessageControl
      .cast<
        NativeFunction<
          Void Function(
            Uint32 source,
            Uint32 type,
            Uint32 severity,
            Uint32 count,
            Pointer<Uint32> ids,
            Int32 enabled,
          )
        >
      >()
      .asFunction<
        void Function(
          int source,
          int type,
          int severity,
          int count,
          Pointer<Uint32> ids,
          int enabled,
        )
      >();
  return glDebugMessageControlAsFunction(
    source,
    type,
    severity,
    count,
    ids,
    enabled,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageInsert;

/// ```c
/// GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
/// ```
void glDebugMessageInsert(
  int source,
  int type,
  int id,
  int severity,
  int length,
  String buf,
) {
  final glDebugMessageInsertAsFunction = _glDebugMessageInsert
      .cast<
        NativeFunction<
          Void Function(
            Uint32 source,
            Uint32 type,
            Uint32 id,
            Uint32 severity,
            Uint32 length,
            Pointer<Utf8> buf,
          )
        >
      >()
      .asFunction<
        void Function(
          int source,
          int type,
          int id,
          int severity,
          int length,
          Pointer<Utf8> buf,
        )
      >();
  final bufPointer = buf.toNativeUtf8();
  final result = glDebugMessageInsertAsFunction(
    source,
    type,
    id,
    severity,
    length,
    bufPointer,
  );
  calloc.free(bufPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageCallback;

/// ```c
/// GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam)
/// ```
void glDebugMessageCallback(
  Pointer<NativeFunction<GLDEBUGPROC>> callback,
  Pointer<NativeType> userParam,
) {
  final glDebugMessageCallbackAsFunction = _glDebugMessageCallback
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeFunction<GLDEBUGPROC>> callback,
            Pointer<NativeType> userParam,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeFunction<GLDEBUGPROC>> callback,
          Pointer<NativeType> userParam,
        )
      >();
  return glDebugMessageCallbackAsFunction(callback, userParam);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDebugMessageLog;

/// ```c
/// GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
/// ```
int glGetDebugMessageLog(
  int count,
  int bufSize,
  Pointer<Uint32> sources,
  Pointer<Uint32> types,
  Pointer<Uint32> ids,
  Pointer<Uint32> severities,
  Pointer<Uint32> lengths,
  Pointer<Int8> messageLog,
) {
  final glGetDebugMessageLogAsFunction = _glGetDebugMessageLog
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 count,
            Uint32 bufSize,
            Pointer<Uint32> sources,
            Pointer<Uint32> types,
            Pointer<Uint32> ids,
            Pointer<Uint32> severities,
            Pointer<Uint32> lengths,
            Pointer<Int8> messageLog,
          )
        >
      >()
      .asFunction<
        int Function(
          int count,
          int bufSize,
          Pointer<Uint32> sources,
          Pointer<Uint32> types,
          Pointer<Uint32> ids,
          Pointer<Uint32> severities,
          Pointer<Uint32> lengths,
          Pointer<Int8> messageLog,
        )
      >();
  return glGetDebugMessageLogAsFunction(
    count,
    bufSize,
    sources,
    types,
    ids,
    severities,
    lengths,
    messageLog,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushDebugGroup;

/// ```c
/// GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message)
/// ```
void glPushDebugGroup(int source, int id, int length, String message) {
  final glPushDebugGroupAsFunction = _glPushDebugGroup
      .cast<
        NativeFunction<
          Void Function(
            Uint32 source,
            Uint32 id,
            Uint32 length,
            Pointer<Utf8> message,
          )
        >
      >()
      .asFunction<
        void Function(int source, int id, int length, Pointer<Utf8> message)
      >();
  final messagePointer = message.toNativeUtf8();
  final result = glPushDebugGroupAsFunction(source, id, length, messagePointer);
  calloc.free(messagePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopDebugGroup;

/// ```c
/// GLAPI void APIENTRY glPopDebugGroup (void)
/// ```
void glPopDebugGroup() {
  final glPopDebugGroupAsFunction = _glPopDebugGroup
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopDebugGroupAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glObjectLabel;

/// ```c
/// GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
/// ```
void glObjectLabel(int identifier, int name, int length, String label) {
  final glObjectLabelAsFunction = _glObjectLabel
      .cast<
        NativeFunction<
          Void Function(
            Uint32 identifier,
            Uint32 name,
            Uint32 length,
            Pointer<Utf8> label,
          )
        >
      >()
      .asFunction<
        void Function(int identifier, int name, int length, Pointer<Utf8> label)
      >();
  final labelPointer = label.toNativeUtf8();
  final result = glObjectLabelAsFunction(
    identifier,
    name,
    length,
    labelPointer,
  );
  calloc.free(labelPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectLabel;

/// ```c
/// GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
/// ```
void glGetObjectLabel(
  int identifier,
  int name,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> label,
) {
  final glGetObjectLabelAsFunction = _glGetObjectLabel
      .cast<
        NativeFunction<
          Void Function(
            Uint32 identifier,
            Uint32 name,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> label,
          )
        >
      >()
      .asFunction<
        void Function(
          int identifier,
          int name,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> label,
        )
      >();
  return glGetObjectLabelAsFunction(identifier, name, bufSize, length, label);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glObjectPtrLabel;

/// ```c
/// GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label)
/// ```
void glObjectPtrLabel(Pointer<NativeType> ptr, int length, String label) {
  final glObjectPtrLabelAsFunction = _glObjectPtrLabel
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> ptr,
            Uint32 length,
            Pointer<Utf8> label,
          )
        >
      >()
      .asFunction<
        void Function(Pointer<NativeType> ptr, int length, Pointer<Utf8> label)
      >();
  final labelPointer = label.toNativeUtf8();
  final result = glObjectPtrLabelAsFunction(ptr, length, labelPointer);
  calloc.free(labelPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectPtrLabel;

/// ```c
/// GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
/// ```
void glGetObjectPtrLabel(
  Pointer<NativeType> ptr,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> label,
) {
  final glGetObjectPtrLabelAsFunction = _glGetObjectPtrLabel
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> ptr,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> label,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> ptr,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> label,
        )
      >();
  return glGetObjectPtrLabelAsFunction(ptr, bufSize, length, label);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferStorage;

/// ```c
/// GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
void glBufferStorage(
  int target,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int flags,
) {
  final glBufferStorageAsFunction = _glBufferStorage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int flags,
        )
      >();
  return glBufferStorageAsFunction(target, size, data, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearTexImage;

/// ```c
/// GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
/// ```
void glClearTexImage(
  int texture,
  int level,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearTexImageAsFunction = _glClearTexImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearTexImageAsFunction(texture, level, format, type, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearTexSubImage;

/// ```c
/// GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
/// ```
void glClearTexSubImage(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearTexSubImageAsFunction = _glClearTexSubImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearTexSubImageAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBuffersBase;

/// ```c
/// GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
/// ```
void glBindBuffersBase(
  int target,
  int first,
  int count,
  Pointer<Uint32> buffers,
) {
  final glBindBuffersBaseAsFunction = _glBindBuffersBase
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 first,
            Uint32 count,
            Pointer<Uint32> buffers,
          )
        >
      >()
      .asFunction<
        void Function(int target, int first, int count, Pointer<Uint32> buffers)
      >();
  return glBindBuffersBaseAsFunction(target, first, count, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBuffersRange;

/// ```c
/// GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
/// ```
void glBindBuffersRange(
  int target,
  int first,
  int count,
  Pointer<Uint32> buffers,
  Pointer<Pointer<NativeType>> offsets,
  Pointer<Pointer<Uint32>> sizes,
) {
  final glBindBuffersRangeAsFunction = _glBindBuffersRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 first,
            Uint32 count,
            Pointer<Uint32> buffers,
            Pointer<Pointer<NativeType>> offsets,
            Pointer<Pointer<Uint32>> sizes,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int first,
          int count,
          Pointer<Uint32> buffers,
          Pointer<Pointer<NativeType>> offsets,
          Pointer<Pointer<Uint32>> sizes,
        )
      >();
  return glBindBuffersRangeAsFunction(
    target,
    first,
    count,
    buffers,
    offsets,
    sizes,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTextures;

/// ```c
/// GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures)
/// ```
void glBindTextures(int first, int count, Pointer<Uint32> textures) {
  final glBindTexturesAsFunction = _glBindTextures
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Uint32> textures)
        >
      >()
      .asFunction<
        void Function(int first, int count, Pointer<Uint32> textures)
      >();
  return glBindTexturesAsFunction(first, count, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindSamplers;

/// ```c
/// GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers)
/// ```
void glBindSamplers(int first, int count, Pointer<Uint32> samplers) {
  final glBindSamplersAsFunction = _glBindSamplers
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Uint32> samplers)
        >
      >()
      .asFunction<
        void Function(int first, int count, Pointer<Uint32> samplers)
      >();
  return glBindSamplersAsFunction(first, count, samplers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindImageTextures;

/// ```c
/// GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures)
/// ```
void glBindImageTextures(int first, int count, Pointer<Uint32> textures) {
  final glBindImageTexturesAsFunction = _glBindImageTextures
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Uint32> textures)
        >
      >()
      .asFunction<
        void Function(int first, int count, Pointer<Uint32> textures)
      >();
  return glBindImageTexturesAsFunction(first, count, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVertexBuffers;

/// ```c
/// GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
/// ```
void glBindVertexBuffers(
  int first,
  int count,
  Pointer<Uint32> buffers,
  Pointer<Pointer<NativeType>> offsets,
  Pointer<Uint32> strides,
) {
  final glBindVertexBuffersAsFunction = _glBindVertexBuffers
      .cast<
        NativeFunction<
          Void Function(
            Uint32 first,
            Uint32 count,
            Pointer<Uint32> buffers,
            Pointer<Pointer<NativeType>> offsets,
            Pointer<Uint32> strides,
          )
        >
      >()
      .asFunction<
        void Function(
          int first,
          int count,
          Pointer<Uint32> buffers,
          Pointer<Pointer<NativeType>> offsets,
          Pointer<Uint32> strides,
        )
      >();
  return glBindVertexBuffersAsFunction(first, count, buffers, offsets, strides);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClipControl;

/// ```c
/// GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth)
/// ```
void glClipControl(int origin, int depth) {
  final glClipControlAsFunction = _glClipControl
      .cast<NativeFunction<Void Function(Uint32 origin, Uint32 depth)>>()
      .asFunction<void Function(int origin, int depth)>();
  return glClipControlAsFunction(origin, depth);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateTransformFeedbacks;

/// ```c
/// GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids)
/// ```
void glCreateTransformFeedbacks(int n, Pointer<Uint32> ids) {
  final glCreateTransformFeedbacksAsFunction = _glCreateTransformFeedbacks
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glCreateTransformFeedbacksAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackBufferBase;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer)
/// ```
void glTransformFeedbackBufferBase(int xfb, int index, int buffer) {
  final glTransformFeedbackBufferBaseAsFunction = _glTransformFeedbackBufferBase
      .cast<
        NativeFunction<Void Function(Uint32 xfb, Uint32 index, Uint32 buffer)>
      >()
      .asFunction<void Function(int xfb, int index, int buffer)>();
  return glTransformFeedbackBufferBaseAsFunction(xfb, index, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackBufferRange;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glTransformFeedbackBufferRange(
  int xfb,
  int index,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glTransformFeedbackBufferRangeAsFunction =
      _glTransformFeedbackBufferRange
          .cast<
            NativeFunction<
              Void Function(
                Uint32 xfb,
                Uint32 index,
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> size,
              )
            >
          >()
          .asFunction<
            void Function(
              int xfb,
              int index,
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> size,
            )
          >();
  return glTransformFeedbackBufferRangeAsFunction(
    xfb,
    index,
    buffer,
    offset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbackiv;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param)
/// ```
void glGetTransformFeedbackiv(int xfb, int pname, Pointer<Int32> param) {
  final glGetTransformFeedbackivAsFunction = _glGetTransformFeedbackiv
      .cast<
        NativeFunction<
          Void Function(Uint32 xfb, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<void Function(int xfb, int pname, Pointer<Int32> param)>();
  return glGetTransformFeedbackivAsFunction(xfb, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbackiV;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param)
/// ```
void glGetTransformFeedbackiV(
  int xfb,
  int pname,
  int index,
  Pointer<Int32> param,
) {
  final glGetTransformFeedbackiVAsFunction = _glGetTransformFeedbackiV
      .cast<
        NativeFunction<
          Void Function(
            Uint32 xfb,
            Uint32 pname,
            Uint32 index,
            Pointer<Int32> param,
          )
        >
      >()
      .asFunction<
        void Function(int xfb, int pname, int index, Pointer<Int32> param)
      >();
  return glGetTransformFeedbackiVAsFunction(xfb, pname, index, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbacki64V;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param)
/// ```
void glGetTransformFeedbacki64V(
  int xfb,
  int pname,
  int index,
  Pointer<Int64> param,
) {
  final glGetTransformFeedbacki64VAsFunction = _glGetTransformFeedbacki64V
      .cast<
        NativeFunction<
          Void Function(
            Uint32 xfb,
            Uint32 pname,
            Uint32 index,
            Pointer<Int64> param,
          )
        >
      >()
      .asFunction<
        void Function(int xfb, int pname, int index, Pointer<Int64> param)
      >();
  return glGetTransformFeedbacki64VAsFunction(xfb, pname, index, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateBuffers;

/// ```c
/// GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers)
/// ```
void glCreateBuffers(int n, Pointer<Uint32> buffers) {
  final glCreateBuffersAsFunction = _glCreateBuffers
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> buffers)>();
  return glCreateBuffersAsFunction(n, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferStorage;

/// ```c
/// GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
void glNamedBufferStorage(
  int buffer,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int flags,
) {
  final glNamedBufferStorageAsFunction = _glNamedBufferStorage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int flags,
        )
      >();
  return glNamedBufferStorageAsFunction(buffer, size, data, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferData;

/// ```c
/// GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
/// ```
void glNamedBufferData(
  int buffer,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int usage,
) {
  final glNamedBufferDataAsFunction = _glNamedBufferData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 usage,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int usage,
        )
      >();
  return glNamedBufferDataAsFunction(buffer, size, data, usage);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferSubData;

/// ```c
/// GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
void glNamedBufferSubData(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glNamedBufferSubDataAsFunction = _glNamedBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glNamedBufferSubDataAsFunction(buffer, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyNamedBufferSubData;

/// ```c
/// GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
void glCopyNamedBufferSubData(
  int readBuffer,
  int writeBuffer,
  Pointer<NativeType> readOffset,
  Pointer<NativeType> writeOffset,
  Pointer<Uint32> size,
) {
  final glCopyNamedBufferSubDataAsFunction = _glCopyNamedBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 readBuffer,
            Uint32 writeBuffer,
            Pointer<NativeType> readOffset,
            Pointer<NativeType> writeOffset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int readBuffer,
          int writeBuffer,
          Pointer<NativeType> readOffset,
          Pointer<NativeType> writeOffset,
          Pointer<Uint32> size,
        )
      >();
  return glCopyNamedBufferSubDataAsFunction(
    readBuffer,
    writeBuffer,
    readOffset,
    writeOffset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedBufferData;

/// ```c
/// GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
void glClearNamedBufferData(
  int buffer,
  int internalformat,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearNamedBufferDataAsFunction = _glClearNamedBufferData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 internalformat,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int internalformat,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearNamedBufferDataAsFunction(
    buffer,
    internalformat,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedBufferSubData;

/// ```c
/// GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
void glClearNamedBufferSubData(
  int buffer,
  int internalformat,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearNamedBufferSubDataAsFunction = _glClearNamedBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 internalformat,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int internalformat,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearNamedBufferSubDataAsFunction(
    buffer,
    internalformat,
    offset,
    size,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapNamedBuffer;

/// ```c
/// GLAPI void *APIENTRY glMapNamedBuffer (GLuint buffer, GLenum access)
/// ```
Pointer<NativeType> glMapNamedBuffer(int buffer, int access) {
  final glMapNamedBufferAsFunction = _glMapNamedBuffer
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 buffer, Uint32 access)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int buffer, int access)>();
  return glMapNamedBufferAsFunction(buffer, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapNamedBufferRange;

/// ```c
/// GLAPI void *APIENTRY glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeType> glMapNamedBufferRange(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
  int access,
) {
  final glMapNamedBufferRangeAsFunction = _glMapNamedBufferRange
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
            Uint32 access,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
          int access,
        )
      >();
  return glMapNamedBufferRangeAsFunction(buffer, offset, length, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapNamedBuffer;

/// ```c
/// GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer)
/// ```
int glUnmapNamedBuffer(int buffer) {
  final glUnmapNamedBufferAsFunction = _glUnmapNamedBuffer
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glUnmapNamedBufferAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushMappedNamedBufferRange;

/// ```c
/// GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
void glFlushMappedNamedBufferRange(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
) {
  final glFlushMappedNamedBufferRangeAsFunction = _glFlushMappedNamedBufferRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
        )
      >();
  return glFlushMappedNamedBufferRangeAsFunction(buffer, offset, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params)
/// ```
void glGetNamedBufferParameteriv(int buffer, int pname, Pointer<Int32> params) {
  final glGetNamedBufferParameterivAsFunction = _glGetNamedBufferParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int buffer, int pname, Pointer<Int32> params)
      >();
  return glGetNamedBufferParameterivAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferParameteri64v;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params)
/// ```
void glGetNamedBufferParameteri64v(
  int buffer,
  int pname,
  Pointer<Int64> params,
) {
  final glGetNamedBufferParameteri64vAsFunction = _glGetNamedBufferParameteri64v
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<
        void Function(int buffer, int pname, Pointer<Int64> params)
      >();
  return glGetNamedBufferParameteri64vAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferPointerv;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void **params)
/// ```
void glGetNamedBufferPointerv(
  int buffer,
  int pname,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetNamedBufferPointervAsFunction = _glGetNamedBufferPointerv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 pname,
            Pointer<Pointer<NativeType>> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int pname,
          Pointer<Pointer<NativeType>> params,
        )
      >();
  return glGetNamedBufferPointervAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferSubData;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
/// ```
void glGetNamedBufferSubData(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glGetNamedBufferSubDataAsFunction = _glGetNamedBufferSubData
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glGetNamedBufferSubDataAsFunction(buffer, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateFramebuffers;

/// ```c
/// GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers)
/// ```
void glCreateFramebuffers(int n, Pointer<Uint32> framebuffers) {
  final glCreateFramebuffersAsFunction = _glCreateFramebuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> framebuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> framebuffers)>();
  return glCreateFramebuffersAsFunction(n, framebuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferRenderbuffer;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
void glNamedFramebufferRenderbuffer(
  int framebuffer,
  int attachment,
  int renderbuffertarget,
  int renderbuffer,
) {
  final glNamedFramebufferRenderbufferAsFunction =
      _glNamedFramebufferRenderbuffer
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 renderbuffertarget,
                Uint32 renderbuffer,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int renderbuffertarget,
              int renderbuffer,
            )
          >();
  return glNamedFramebufferRenderbufferAsFunction(
    framebuffer,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferParameteri;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param)
/// ```
void glNamedFramebufferParameteri(int framebuffer, int pname, int param) {
  final glNamedFramebufferParameteriAsFunction = _glNamedFramebufferParameteri
      .cast<
        NativeFunction<
          Void Function(Uint32 framebuffer, Uint32 pname, Int32 param)
        >
      >()
      .asFunction<void Function(int framebuffer, int pname, int param)>();
  return glNamedFramebufferParameteriAsFunction(framebuffer, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTexture;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
/// ```
void glNamedFramebufferTexture(
  int framebuffer,
  int attachment,
  int texture,
  int level,
) {
  final glNamedFramebufferTextureAsFunction = _glNamedFramebufferTexture
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(int framebuffer, int attachment, int texture, int level)
      >();
  return glNamedFramebufferTextureAsFunction(
    framebuffer,
    attachment,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTextureLayer;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
void glNamedFramebufferTextureLayer(
  int framebuffer,
  int attachment,
  int texture,
  int level,
  int layer,
) {
  final glNamedFramebufferTextureLayerAsFunction =
      _glNamedFramebufferTextureLayer
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 texture,
                Int32 level,
                Int32 layer,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int texture,
              int level,
              int layer,
            )
          >();
  return glNamedFramebufferTextureLayerAsFunction(
    framebuffer,
    attachment,
    texture,
    level,
    layer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferDrawBuffer;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf)
/// ```
void glNamedFramebufferDrawBuffer(int framebuffer, int buf) {
  final glNamedFramebufferDrawBufferAsFunction = _glNamedFramebufferDrawBuffer
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 buf)>>()
      .asFunction<void Function(int framebuffer, int buf)>();
  return glNamedFramebufferDrawBufferAsFunction(framebuffer, buf);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferDrawBuffers;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs)
/// ```
void glNamedFramebufferDrawBuffers(
  int framebuffer,
  int n,
  Pointer<Uint32> bufs,
) {
  final glNamedFramebufferDrawBuffersAsFunction = _glNamedFramebufferDrawBuffers
      .cast<
        NativeFunction<
          Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32> bufs)
        >
      >()
      .asFunction<
        void Function(int framebuffer, int n, Pointer<Uint32> bufs)
      >();
  return glNamedFramebufferDrawBuffersAsFunction(framebuffer, n, bufs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferReadBuffer;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src)
/// ```
void glNamedFramebufferReadBuffer(int framebuffer, int src) {
  final glNamedFramebufferReadBufferAsFunction = _glNamedFramebufferReadBuffer
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 src)>>()
      .asFunction<void Function(int framebuffer, int src)>();
  return glNamedFramebufferReadBufferAsFunction(framebuffer, src);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInvalidateNamedFramebufferData;

/// ```c
/// GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)
/// ```
void glInvalidateNamedFramebufferData(
  int framebuffer,
  int numAttachments,
  Pointer<Uint32> attachments,
) {
  final glInvalidateNamedFramebufferDataAsFunction =
      _glInvalidateNamedFramebufferData
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 numAttachments,
                Pointer<Uint32> attachments,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int numAttachments,
              Pointer<Uint32> attachments,
            )
          >();
  return glInvalidateNamedFramebufferDataAsFunction(
    framebuffer,
    numAttachments,
    attachments,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glInvalidateNamedFramebufferSubData;

/// ```c
/// GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glInvalidateNamedFramebufferSubData(
  int framebuffer,
  int numAttachments,
  Pointer<Uint32> attachments,
  int x,
  int y,
  int width,
  int height,
) {
  final glInvalidateNamedFramebufferSubDataAsFunction =
      _glInvalidateNamedFramebufferSubData
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 numAttachments,
                Pointer<Uint32> attachments,
                Int32 x,
                Int32 y,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int numAttachments,
              Pointer<Uint32> attachments,
              int x,
              int y,
              int width,
              int height,
            )
          >();
  return glInvalidateNamedFramebufferSubDataAsFunction(
    framebuffer,
    numAttachments,
    attachments,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedFramebufferiv;

/// ```c
/// GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)
/// ```
void glClearNamedFramebufferiv(
  int framebuffer,
  int buffer,
  int drawbuffer,
  Pointer<Int32> value,
) {
  final glClearNamedFramebufferivAsFunction = _glClearNamedFramebufferiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 buffer,
            Int32 drawbuffer,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int framebuffer,
          int buffer,
          int drawbuffer,
          Pointer<Int32> value,
        )
      >();
  return glClearNamedFramebufferivAsFunction(
    framebuffer,
    buffer,
    drawbuffer,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedFramebufferuiv;

/// ```c
/// GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)
/// ```
void glClearNamedFramebufferuiv(
  int framebuffer,
  int buffer,
  int drawbuffer,
  Pointer<Uint32> value,
) {
  final glClearNamedFramebufferuivAsFunction = _glClearNamedFramebufferuiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 buffer,
            Int32 drawbuffer,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int framebuffer,
          int buffer,
          int drawbuffer,
          Pointer<Uint32> value,
        )
      >();
  return glClearNamedFramebufferuivAsFunction(
    framebuffer,
    buffer,
    drawbuffer,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedFramebufferfv;

/// ```c
/// GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
/// ```
void glClearNamedFramebufferfv(
  int framebuffer,
  int buffer,
  int drawbuffer,
  Pointer<Float> value,
) {
  final glClearNamedFramebufferfvAsFunction = _glClearNamedFramebufferfv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 buffer,
            Int32 drawbuffer,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int framebuffer,
          int buffer,
          int drawbuffer,
          Pointer<Float> value,
        )
      >();
  return glClearNamedFramebufferfvAsFunction(
    framebuffer,
    buffer,
    drawbuffer,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedFramebufferfi;

/// ```c
/// GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
/// ```
void glClearNamedFramebufferfi(
  int framebuffer,
  int buffer,
  int drawbuffer,
  double depth,
  int stencil,
) {
  final glClearNamedFramebufferfiAsFunction = _glClearNamedFramebufferfi
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 buffer,
            Int32 drawbuffer,
            Float depth,
            Int32 stencil,
          )
        >
      >()
      .asFunction<
        void Function(
          int framebuffer,
          int buffer,
          int drawbuffer,
          double depth,
          int stencil,
        )
      >();
  return glClearNamedFramebufferfiAsFunction(
    framebuffer,
    buffer,
    drawbuffer,
    depth,
    stencil,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlitNamedFramebuffer;

/// ```c
/// GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
void glBlitNamedFramebuffer(
  int readFramebuffer,
  int drawFramebuffer,
  int srcX0,
  int srcY0,
  int srcX1,
  int srcY1,
  int dstX0,
  int dstY0,
  int dstX1,
  int dstY1,
  int mask,
  int filter,
) {
  final glBlitNamedFramebufferAsFunction = _glBlitNamedFramebuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 readFramebuffer,
            Uint32 drawFramebuffer,
            Int32 srcX0,
            Int32 srcY0,
            Int32 srcX1,
            Int32 srcY1,
            Int32 dstX0,
            Int32 dstY0,
            Int32 dstX1,
            Int32 dstY1,
            Uint32 mask,
            Uint32 filter,
          )
        >
      >()
      .asFunction<
        void Function(
          int readFramebuffer,
          int drawFramebuffer,
          int srcX0,
          int srcY0,
          int srcX1,
          int srcY1,
          int dstX0,
          int dstY0,
          int dstX1,
          int dstY1,
          int mask,
          int filter,
        )
      >();
  return glBlitNamedFramebufferAsFunction(
    readFramebuffer,
    drawFramebuffer,
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCheckNamedFramebufferStatus;

/// ```c
/// GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target)
/// ```
int glCheckNamedFramebufferStatus(int framebuffer, int target) {
  final glCheckNamedFramebufferStatusAsFunction = _glCheckNamedFramebufferStatus
      .cast<
        NativeFunction<Uint32 Function(Uint32 framebuffer, Uint32 target)>
      >()
      .asFunction<int Function(int framebuffer, int target)>();
  return glCheckNamedFramebufferStatusAsFunction(framebuffer, target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedFramebufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param)
/// ```
void glGetNamedFramebufferParameteriv(
  int framebuffer,
  int pname,
  Pointer<Int32> param,
) {
  final glGetNamedFramebufferParameterivAsFunction =
      _glGetNamedFramebufferParameteriv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 pname,
                Pointer<Int32> param,
              )
            >
          >()
          .asFunction<
            void Function(int framebuffer, int pname, Pointer<Int32> param)
          >();
  return glGetNamedFramebufferParameterivAsFunction(framebuffer, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedFramebufferAttachmentParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
/// ```
void glGetNamedFramebufferAttachmentParameteriv(
  int framebuffer,
  int attachment,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedFramebufferAttachmentParameterivAsFunction =
      _glGetNamedFramebufferAttachmentParameteriv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetNamedFramebufferAttachmentParameterivAsFunction(
    framebuffer,
    attachment,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateRenderbuffers;

/// ```c
/// GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers)
/// ```
void glCreateRenderbuffers(int n, Pointer<Uint32> renderbuffers) {
  final glCreateRenderbuffersAsFunction = _glCreateRenderbuffers
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> renderbuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> renderbuffers)>();
  return glCreateRenderbuffersAsFunction(n, renderbuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedRenderbufferStorage;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorage(
  int renderbuffer,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageAsFunction = _glNamedRenderbufferStorage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 renderbuffer,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int renderbuffer,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glNamedRenderbufferStorageAsFunction(
    renderbuffer,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedRenderbufferStorageMultisample;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorageMultisample(
  int renderbuffer,
  int samples,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageMultisampleAsFunction =
      _glNamedRenderbufferStorageMultisample
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int renderbuffer,
              int samples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glNamedRenderbufferStorageMultisampleAsFunction(
    renderbuffer,
    samples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedRenderbufferParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params)
/// ```
void glGetNamedRenderbufferParameteriv(
  int renderbuffer,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedRenderbufferParameterivAsFunction =
      _glGetNamedRenderbufferParameteriv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int renderbuffer, int pname, Pointer<Int32> params)
          >();
  return glGetNamedRenderbufferParameterivAsFunction(
    renderbuffer,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateTextures;

/// ```c
/// GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures)
/// ```
void glCreateTextures(int target, int n, Pointer<Uint32> textures) {
  final glCreateTexturesAsFunction = _glCreateTextures
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 n, Pointer<Uint32> textures)
        >
      >()
      .asFunction<void Function(int target, int n, Pointer<Uint32> textures)>();
  return glCreateTexturesAsFunction(target, n, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBuffer;

/// ```c
/// GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer)
/// ```
void glTextureBuffer(int texture, int internalformat, int buffer) {
  final glTextureBufferAsFunction = _glTextureBuffer
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 internalformat, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int texture, int internalformat, int buffer)>();
  return glTextureBufferAsFunction(texture, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBufferRange;

/// ```c
/// GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glTextureBufferRange(
  int texture,
  int internalformat,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glTextureBufferRangeAsFunction = _glTextureBufferRange
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 internalformat,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int internalformat,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glTextureBufferRangeAsFunction(
    texture,
    internalformat,
    buffer,
    offset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage1D;

/// ```c
/// GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
void glTextureStorage1D(
  int texture,
  int levels,
  int internalformat,
  int width,
) {
  final glTextureStorage1DAsFunction = _glTextureStorage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int levels, int internalformat, int width)
      >();
  return glTextureStorage1DAsFunction(texture, levels, internalformat, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage2D;

/// ```c
/// GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glTextureStorage2D(
  int texture,
  int levels,
  int internalformat,
  int width,
  int height,
) {
  final glTextureStorage2DAsFunction = _glTextureStorage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int levels,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glTextureStorage2DAsFunction(
    texture,
    levels,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage3D;

/// ```c
/// GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glTextureStorage3D(
  int texture,
  int levels,
  int internalformat,
  int width,
  int height,
  int depth,
) {
  final glTextureStorage3DAsFunction = _glTextureStorage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int levels,
          int internalformat,
          int width,
          int height,
          int depth,
        )
      >();
  return glTextureStorage3DAsFunction(
    texture,
    levels,
    internalformat,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage2DMultisample;

/// ```c
/// GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
void glTextureStorage2DMultisample(
  int texture,
  int samples,
  int internalformat,
  int width,
  int height,
  int fixedsamplelocations,
) {
  final glTextureStorage2DMultisampleAsFunction = _glTextureStorage2DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int samples,
          int internalformat,
          int width,
          int height,
          int fixedsamplelocations,
        )
      >();
  return glTextureStorage2DMultisampleAsFunction(
    texture,
    samples,
    internalformat,
    width,
    height,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage3DMultisample;

/// ```c
/// GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
void glTextureStorage3DMultisample(
  int texture,
  int samples,
  int internalformat,
  int width,
  int height,
  int depth,
  int fixedsamplelocations,
) {
  final glTextureStorage3DMultisampleAsFunction = _glTextureStorage3DMultisample
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 samples,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 fixedsamplelocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int samples,
          int internalformat,
          int width,
          int height,
          int depth,
          int fixedsamplelocations,
        )
      >();
  return glTextureStorage3DMultisampleAsFunction(
    texture,
    samples,
    internalformat,
    width,
    height,
    depth,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage1D;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage1D(
  int texture,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage1DAsFunction = _glTextureSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int width,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage1DAsFunction(
    texture,
    level,
    xoffset,
    width,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage2D;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage2D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage2DAsFunction = _glTextureSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage2DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage3D;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage3D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage3DAsFunction = _glTextureSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage3DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage1D;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTextureSubImage1D(
  int texture,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTextureSubImage1DAsFunction = _glCompressedTextureSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int width,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTextureSubImage1DAsFunction(
    texture,
    level,
    xoffset,
    width,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage2D;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTextureSubImage2D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTextureSubImage2DAsFunction = _glCompressedTextureSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTextureSubImage2DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage3D;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTextureSubImage3D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTextureSubImage3DAsFunction = _glCompressedTextureSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTextureSubImage3DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage1D;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
void glCopyTextureSubImage1D(
  int texture,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
) {
  final glCopyTextureSubImage1DAsFunction = _glCopyTextureSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int x,
          int y,
          int width,
        )
      >();
  return glCopyTextureSubImage1DAsFunction(
    texture,
    level,
    xoffset,
    x,
    y,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage2D;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTextureSubImage2D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTextureSubImage2DAsFunction = _glCopyTextureSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTextureSubImage2DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage3D;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTextureSubImage3D(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTextureSubImage3DAsFunction = _glCopyTextureSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTextureSubImage3DAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterf;

/// ```c
/// GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param)
/// ```
void glTextureParameterf(int texture, int pname, double param) {
  final glTextureParameterfAsFunction = _glTextureParameterf
      .cast<
        NativeFunction<Void Function(Uint32 texture, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int texture, int pname, double param)>();
  return glTextureParameterfAsFunction(texture, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterfv;

/// ```c
/// GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param)
/// ```
void glTextureParameterfv(int texture, int pname, Pointer<Float> param) {
  final glTextureParameterfvAsFunction = _glTextureParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Float> param)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Float> param)
      >();
  return glTextureParameterfvAsFunction(texture, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameteri;

/// ```c
/// GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param)
/// ```
void glTextureParameteri(int texture, int pname, int param) {
  final glTextureParameteriAsFunction = _glTextureParameteri
      .cast<
        NativeFunction<Void Function(Uint32 texture, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int texture, int pname, int param)>();
  return glTextureParameteriAsFunction(texture, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterIiv;

/// ```c
/// GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params)
/// ```
void glTextureParameterIiv(int texture, int pname, Pointer<Int32> params) {
  final glTextureParameterIivAsFunction = _glTextureParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Int32> params)
      >();
  return glTextureParameterIivAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params)
/// ```
void glTextureParameterIuiv(int texture, int pname, Pointer<Uint32> params) {
  final glTextureParameterIuivAsFunction = _glTextureParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Uint32> params)
      >();
  return glTextureParameterIuivAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameteriv;

/// ```c
/// GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param)
/// ```
void glTextureParameteriv(int texture, int pname, Pointer<Int32> param) {
  final glTextureParameterivAsFunction = _glTextureParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Int32> param)
      >();
  return glTextureParameterivAsFunction(texture, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenerateTextureMipmap;

/// ```c
/// GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture)
/// ```
void glGenerateTextureMipmap(int texture) {
  final glGenerateTextureMipmapAsFunction = _glGenerateTextureMipmap
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glGenerateTextureMipmapAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTextureUnit;

/// ```c
/// GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture)
/// ```
void glBindTextureUnit(int unit, int texture) {
  final glBindTextureUnitAsFunction = _glBindTextureUnit
      .cast<NativeFunction<Void Function(Uint32 unit, Uint32 texture)>>()
      .asFunction<void Function(int unit, int texture)>();
  return glBindTextureUnitAsFunction(unit, texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureImage;

/// ```c
/// GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
/// ```
void glGetTextureImage(
  int texture,
  int level,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetTextureImageAsFunction = _glGetTextureImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetTextureImageAsFunction(
    texture,
    level,
    format,
    type,
    bufSize,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedTextureImage;

/// ```c
/// GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels)
/// ```
void glGetCompressedTextureImage(
  int texture,
  int level,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetCompressedTextureImageAsFunction = _glGetCompressedTextureImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Uint32 bufSize,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int bufSize,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetCompressedTextureImageAsFunction(texture, level, bufSize, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureLevelParameterfv;

/// ```c
/// GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params)
/// ```
void glGetTextureLevelParameterfv(
  int texture,
  int level,
  int pname,
  Pointer<Float> params,
) {
  final glGetTextureLevelParameterfvAsFunction = _glGetTextureLevelParameterfv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int level, int pname, Pointer<Float> params)
      >();
  return glGetTextureLevelParameterfvAsFunction(texture, level, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureLevelParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params)
/// ```
void glGetTextureLevelParameteriv(
  int texture,
  int level,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTextureLevelParameterivAsFunction = _glGetTextureLevelParameteriv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int level, int pname, Pointer<Int32> params)
      >();
  return glGetTextureLevelParameterivAsFunction(texture, level, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterfv;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params)
/// ```
void glGetTextureParameterfv(int texture, int pname, Pointer<Float> params) {
  final glGetTextureParameterfvAsFunction = _glGetTextureParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Float> params)
      >();
  return glGetTextureParameterfvAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterIiv;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params)
/// ```
void glGetTextureParameterIiv(int texture, int pname, Pointer<Int32> params) {
  final glGetTextureParameterIivAsFunction = _glGetTextureParameterIiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Int32> params)
      >();
  return glGetTextureParameterIivAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterIuiv;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params)
/// ```
void glGetTextureParameterIuiv(int texture, int pname, Pointer<Uint32> params) {
  final glGetTextureParameterIuivAsFunction = _glGetTextureParameterIuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Uint32> params)
      >();
  return glGetTextureParameterIuivAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameteriv;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params)
/// ```
void glGetTextureParameteriv(int texture, int pname, Pointer<Int32> params) {
  final glGetTextureParameterivAsFunction = _glGetTextureParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int texture, int pname, Pointer<Int32> params)
      >();
  return glGetTextureParameterivAsFunction(texture, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateVertexArrays;

/// ```c
/// GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays)
/// ```
void glCreateVertexArrays(int n, Pointer<Uint32> arrays) {
  final glCreateVertexArraysAsFunction = _glCreateVertexArrays
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32> arrays)>();
  return glCreateVertexArraysAsFunction(n, arrays);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexArrayAttrib;

/// ```c
/// GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index)
/// ```
void glDisableVertexArrayAttrib(int vaobj, int index) {
  final glDisableVertexArrayAttribAsFunction = _glDisableVertexArrayAttrib
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return glDisableVertexArrayAttribAsFunction(vaobj, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexArrayAttrib;

/// ```c
/// GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index)
/// ```
void glEnableVertexArrayAttrib(int vaobj, int index) {
  final glEnableVertexArrayAttribAsFunction = _glEnableVertexArrayAttrib
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return glEnableVertexArrayAttribAsFunction(vaobj, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayElementBuffer;

/// ```c
/// GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer)
/// ```
void glVertexArrayElementBuffer(int vaobj, int buffer) {
  final glVertexArrayElementBufferAsFunction = _glVertexArrayElementBuffer
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer)>>()
      .asFunction<void Function(int vaobj, int buffer)>();
  return glVertexArrayElementBufferAsFunction(vaobj, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayVertexBuffer;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
void glVertexArrayVertexBuffer(
  int vaobj,
  int bindingindex,
  int buffer,
  Pointer<NativeType> offset,
  int stride,
) {
  final glVertexArrayVertexBufferAsFunction = _glVertexArrayVertexBuffer
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 bindingindex,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int bindingindex,
          int buffer,
          Pointer<NativeType> offset,
          int stride,
        )
      >();
  return glVertexArrayVertexBufferAsFunction(
    vaobj,
    bindingindex,
    buffer,
    offset,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayVertexBuffers;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
/// ```
void glVertexArrayVertexBuffers(
  int vaobj,
  int first,
  int count,
  Pointer<Uint32> buffers,
  Pointer<Pointer<NativeType>> offsets,
  Pointer<Uint32> strides,
) {
  final glVertexArrayVertexBuffersAsFunction = _glVertexArrayVertexBuffers
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 first,
            Uint32 count,
            Pointer<Uint32> buffers,
            Pointer<Pointer<NativeType>> offsets,
            Pointer<Uint32> strides,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int first,
          int count,
          Pointer<Uint32> buffers,
          Pointer<Pointer<NativeType>> offsets,
          Pointer<Uint32> strides,
        )
      >();
  return glVertexArrayVertexBuffersAsFunction(
    vaobj,
    first,
    count,
    buffers,
    offsets,
    strides,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayAttribBinding;

/// ```c
/// GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
/// ```
void glVertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex) {
  final glVertexArrayAttribBindingAsFunction = _glVertexArrayAttribBinding
      .cast<
        NativeFunction<
          Void Function(Uint32 vaobj, Uint32 attribindex, Uint32 bindingindex)
        >
      >()
      .asFunction<
        void Function(int vaobj, int attribindex, int bindingindex)
      >();
  return glVertexArrayAttribBindingAsFunction(vaobj, attribindex, bindingindex);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayAttribFormat;

/// ```c
/// GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
void glVertexArrayAttribFormat(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int normalized,
  int relativeoffset,
) {
  final glVertexArrayAttribFormatAsFunction = _glVertexArrayAttribFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int attribindex,
          int size,
          int type,
          int normalized,
          int relativeoffset,
        )
      >();
  return glVertexArrayAttribFormatAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    normalized,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayAttribIFormat;

/// ```c
/// GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexArrayAttribIFormat(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexArrayAttribIFormatAsFunction = _glVertexArrayAttribIFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int attribindex,
          int size,
          int type,
          int relativeoffset,
        )
      >();
  return glVertexArrayAttribIFormatAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayAttribLFormat;

/// ```c
/// GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexArrayAttribLFormat(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexArrayAttribLFormatAsFunction = _glVertexArrayAttribLFormat
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 attribindex,
            Int32 size,
            Uint32 type,
            Uint32 relativeoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int attribindex,
          int size,
          int type,
          int relativeoffset,
        )
      >();
  return glVertexArrayAttribLFormatAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayBindingDivisor;

/// ```c
/// GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor)
/// ```
void glVertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor) {
  final glVertexArrayBindingDivisorAsFunction = _glVertexArrayBindingDivisor
      .cast<
        NativeFunction<
          Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor)
        >
      >()
      .asFunction<void Function(int vaobj, int bindingindex, int divisor)>();
  return glVertexArrayBindingDivisorAsFunction(vaobj, bindingindex, divisor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayiv;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param)
/// ```
void glGetVertexArrayiv(int vaobj, int pname, Pointer<Int32> param) {
  final glGetVertexArrayivAsFunction = _glGetVertexArrayiv
      .cast<
        NativeFunction<
          Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<void Function(int vaobj, int pname, Pointer<Int32> param)>();
  return glGetVertexArrayivAsFunction(vaobj, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayIndexediv;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param)
/// ```
void glGetVertexArrayIndexediv(
  int vaobj,
  int index,
  int pname,
  Pointer<Int32> param,
) {
  final glGetVertexArrayIndexedivAsFunction = _glGetVertexArrayIndexediv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 index,
            Uint32 pname,
            Pointer<Int32> param,
          )
        >
      >()
      .asFunction<
        void Function(int vaobj, int index, int pname, Pointer<Int32> param)
      >();
  return glGetVertexArrayIndexedivAsFunction(vaobj, index, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayIndexed64iv;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)
/// ```
void glGetVertexArrayIndexed64iv(
  int vaobj,
  int index,
  int pname,
  Pointer<Int64> param,
) {
  final glGetVertexArrayIndexed64ivAsFunction = _glGetVertexArrayIndexed64iv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 index,
            Uint32 pname,
            Pointer<Int64> param,
          )
        >
      >()
      .asFunction<
        void Function(int vaobj, int index, int pname, Pointer<Int64> param)
      >();
  return glGetVertexArrayIndexed64ivAsFunction(vaobj, index, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateSamplers;

/// ```c
/// GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers)
/// ```
void glCreateSamplers(int n, Pointer<Uint32> samplers) {
  final glCreateSamplersAsFunction = _glCreateSamplers
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> samplers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> samplers)>();
  return glCreateSamplersAsFunction(n, samplers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateProgramPipelines;

/// ```c
/// GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines)
/// ```
void glCreateProgramPipelines(int n, Pointer<Uint32> pipelines) {
  final glCreateProgramPipelinesAsFunction = _glCreateProgramPipelines
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> pipelines)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> pipelines)>();
  return glCreateProgramPipelinesAsFunction(n, pipelines);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateQueries;

/// ```c
/// GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids)
/// ```
void glCreateQueries(int target, int n, Pointer<Uint32> ids) {
  final glCreateQueriesAsFunction = _glCreateQueries
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 n, Pointer<Uint32> ids)
        >
      >()
      .asFunction<void Function(int target, int n, Pointer<Uint32> ids)>();
  return glCreateQueriesAsFunction(target, n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryBufferObjecti64v;

/// ```c
/// GLAPI void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
void glGetQueryBufferObjecti64v(
  int id,
  int buffer,
  int pname,
  Pointer<NativeType> offset,
) {
  final glGetQueryBufferObjecti64vAsFunction = _glGetQueryBufferObjecti64v
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 buffer,
            Uint32 pname,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(int id, int buffer, int pname, Pointer<NativeType> offset)
      >();
  return glGetQueryBufferObjecti64vAsFunction(id, buffer, pname, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryBufferObjectiv;

/// ```c
/// GLAPI void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
void glGetQueryBufferObjectiv(
  int id,
  int buffer,
  int pname,
  Pointer<NativeType> offset,
) {
  final glGetQueryBufferObjectivAsFunction = _glGetQueryBufferObjectiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 buffer,
            Uint32 pname,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(int id, int buffer, int pname, Pointer<NativeType> offset)
      >();
  return glGetQueryBufferObjectivAsFunction(id, buffer, pname, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryBufferObjectui64v;

/// ```c
/// GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
void glGetQueryBufferObjectui64v(
  int id,
  int buffer,
  int pname,
  Pointer<NativeType> offset,
) {
  final glGetQueryBufferObjectui64vAsFunction = _glGetQueryBufferObjectui64v
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 buffer,
            Uint32 pname,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(int id, int buffer, int pname, Pointer<NativeType> offset)
      >();
  return glGetQueryBufferObjectui64vAsFunction(id, buffer, pname, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryBufferObjectuiv;

/// ```c
/// GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
void glGetQueryBufferObjectuiv(
  int id,
  int buffer,
  int pname,
  Pointer<NativeType> offset,
) {
  final glGetQueryBufferObjectuivAsFunction = _glGetQueryBufferObjectuiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 buffer,
            Uint32 pname,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(int id, int buffer, int pname, Pointer<NativeType> offset)
      >();
  return glGetQueryBufferObjectuivAsFunction(id, buffer, pname, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMemoryBarrierByRegion;

/// ```c
/// GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers)
/// ```
void glMemoryBarrierByRegion(int barriers) {
  final glMemoryBarrierByRegionAsFunction = _glMemoryBarrierByRegion
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return glMemoryBarrierByRegionAsFunction(barriers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureSubImage;

/// ```c
/// GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
/// ```
void glGetTextureSubImage(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetTextureSubImageAsFunction = _glGetTextureSubImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetTextureSubImageAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    bufSize,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedTextureSubImage;

/// ```c
/// GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)
/// ```
void glGetCompressedTextureSubImage(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetCompressedTextureSubImageAsFunction =
      _glGetCompressedTextureSubImage
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Int32 level,
                Int32 xoffset,
                Int32 yoffset,
                Int32 zoffset,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Uint32 bufSize,
                Pointer<NativeType> pixels,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int level,
              int xoffset,
              int yoffset,
              int zoffset,
              int width,
              int height,
              int depth,
              int bufSize,
              Pointer<NativeType> pixels,
            )
          >();
  return glGetCompressedTextureSubImageAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    bufSize,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetGraphicsResetStatus;

/// ```c
/// GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void)
/// ```
int glGetGraphicsResetStatus() {
  final glGetGraphicsResetStatusAsFunction = _glGetGraphicsResetStatus
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return glGetGraphicsResetStatusAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnCompressedTexImage;

/// ```c
/// GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels)
/// ```
void glGetnCompressedTexImage(
  int target,
  int lod,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetnCompressedTexImageAsFunction = _glGetnCompressedTexImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 lod,
            Uint32 bufSize,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int lod,
          int bufSize,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetnCompressedTexImageAsFunction(target, lod, bufSize, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnTexImage;

/// ```c
/// GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
/// ```
void glGetnTexImage(
  int target,
  int level,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> pixels,
) {
  final glGetnTexImageAsFunction = _glGetnTexImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetnTexImageAsFunction(target, level, format, type, bufSize, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformdv;

/// ```c
/// GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
/// ```
void glGetnUniformdv(
  int program,
  int location,
  int bufSize,
  Pointer<Double> params,
) {
  final glGetnUniformdvAsFunction = _glGetnUniformdv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Double> params,
        )
      >();
  return glGetnUniformdvAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformfv;

/// ```c
/// GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
/// ```
void glGetnUniformfv(
  int program,
  int location,
  int bufSize,
  Pointer<Float> params,
) {
  final glGetnUniformfvAsFunction = _glGetnUniformfv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Float> params,
        )
      >();
  return glGetnUniformfvAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformiv;

/// ```c
/// GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params)
/// ```
void glGetnUniformiv(
  int program,
  int location,
  int bufSize,
  Pointer<Int32> params,
) {
  final glGetnUniformivAsFunction = _glGetnUniformiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Int32> params,
        )
      >();
  return glGetnUniformivAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformuiv;

/// ```c
/// GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
/// ```
void glGetnUniformuiv(
  int program,
  int location,
  int bufSize,
  Pointer<Uint32> params,
) {
  final glGetnUniformuivAsFunction = _glGetnUniformuiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Uint32> params,
        )
      >();
  return glGetnUniformuivAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReadnPixels;

/// ```c
/// GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
/// ```
void glReadnPixels(
  int x,
  int y,
  int width,
  int height,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> data,
) {
  final glReadnPixelsAsFunction = _glReadnPixels
      .cast<
        NativeFunction<
          Void Function(
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int x,
          int y,
          int width,
          int height,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> data,
        )
      >();
  return glReadnPixelsAsFunction(
    x,
    y,
    width,
    height,
    format,
    type,
    bufSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapdv;

/// ```c
/// GLAPI void APIENTRY glGetnMapdv (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
/// ```
void glGetnMapdv(int target, int query, int bufSize, Pointer<Double> v) {
  final glGetnMapdvAsFunction = _glGetnMapdv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Double> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Double> v)
      >();
  return glGetnMapdvAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapfv;

/// ```c
/// GLAPI void APIENTRY glGetnMapfv (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
/// ```
void glGetnMapfv(int target, int query, int bufSize, Pointer<Float> v) {
  final glGetnMapfvAsFunction = _glGetnMapfv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Float> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Float> v)
      >();
  return glGetnMapfvAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapiv;

/// ```c
/// GLAPI void APIENTRY glGetnMapiv (GLenum target, GLenum query, GLsizei bufSize, GLint *v)
/// ```
void glGetnMapiv(int target, int query, int bufSize, Pointer<Int32> v) {
  final glGetnMapivAsFunction = _glGetnMapiv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Int32> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Int32> v)
      >();
  return glGetnMapivAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapfv;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapfv (GLenum map, GLsizei bufSize, GLfloat *values)
/// ```
void glGetnPixelMapfv(int map, int bufSize, Pointer<Float> values) {
  final glGetnPixelMapfvAsFunction = _glGetnPixelMapfv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Float> values)
        >
      >()
      .asFunction<void Function(int map, int bufSize, Pointer<Float> values)>();
  return glGetnPixelMapfvAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapuiv;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapuiv (GLenum map, GLsizei bufSize, GLuint *values)
/// ```
void glGetnPixelMapuiv(int map, int bufSize, Pointer<Uint32> values) {
  final glGetnPixelMapuivAsFunction = _glGetnPixelMapuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint32> values)
        >
      >()
      .asFunction<
        void Function(int map, int bufSize, Pointer<Uint32> values)
      >();
  return glGetnPixelMapuivAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapusv;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapusv (GLenum map, GLsizei bufSize, GLushort *values)
/// ```
void glGetnPixelMapusv(int map, int bufSize, Pointer<Uint16> values) {
  final glGetnPixelMapusvAsFunction = _glGetnPixelMapusv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint16> values)
        >
      >()
      .asFunction<
        void Function(int map, int bufSize, Pointer<Uint16> values)
      >();
  return glGetnPixelMapusvAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPolygonStipple;

/// ```c
/// GLAPI void APIENTRY glGetnPolygonStipple (GLsizei bufSize, GLubyte *pattern)
/// ```
void glGetnPolygonStipple(int bufSize, Pointer<Uint8> pattern) {
  final glGetnPolygonStippleAsFunction = _glGetnPolygonStipple
      .cast<
        NativeFunction<Void Function(Uint32 bufSize, Pointer<Uint8> pattern)>
      >()
      .asFunction<void Function(int bufSize, Pointer<Uint8> pattern)>();
  return glGetnPolygonStippleAsFunction(bufSize, pattern);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnColorTable;

/// ```c
/// GLAPI void APIENTRY glGetnColorTable (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)
/// ```
void glGetnColorTable(
  int target,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> table,
) {
  final glGetnColorTableAsFunction = _glGetnColorTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> table,
        )
      >();
  return glGetnColorTableAsFunction(target, format, type, bufSize, table);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnConvolutionFilter;

/// ```c
/// GLAPI void APIENTRY glGetnConvolutionFilter (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)
/// ```
void glGetnConvolutionFilter(
  int target,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> image,
) {
  final glGetnConvolutionFilterAsFunction = _glGetnConvolutionFilter
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> image,
        )
      >();
  return glGetnConvolutionFilterAsFunction(
    target,
    format,
    type,
    bufSize,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnSeparableFilter;

/// ```c
/// GLAPI void APIENTRY glGetnSeparableFilter (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)
/// ```
void glGetnSeparableFilter(
  int target,
  int format,
  int type,
  int rowBufSize,
  Pointer<NativeType> row,
  int columnBufSize,
  Pointer<NativeType> column,
  Pointer<NativeType> span,
) {
  final glGetnSeparableFilterAsFunction = _glGetnSeparableFilter
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 rowBufSize,
            Pointer<NativeType> row,
            Uint32 columnBufSize,
            Pointer<NativeType> column,
            Pointer<NativeType> span,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int rowBufSize,
          Pointer<NativeType> row,
          int columnBufSize,
          Pointer<NativeType> column,
          Pointer<NativeType> span,
        )
      >();
  return glGetnSeparableFilterAsFunction(
    target,
    format,
    type,
    rowBufSize,
    row,
    columnBufSize,
    column,
    span,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnHistogram;

/// ```c
/// GLAPI void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
/// ```
void glGetnHistogram(
  int target,
  int reset,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> values,
) {
  final glGetnHistogramAsFunction = _glGetnHistogram
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> values,
        )
      >();
  return glGetnHistogramAsFunction(
    target,
    reset,
    format,
    type,
    bufSize,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMinmax;

/// ```c
/// GLAPI void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
/// ```
void glGetnMinmax(
  int target,
  int reset,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> values,
) {
  final glGetnMinmaxAsFunction = _glGetnMinmax
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> values,
        )
      >();
  return glGetnMinmaxAsFunction(target, reset, format, type, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBarrier;

/// ```c
/// GLAPI void APIENTRY glTextureBarrier (void)
/// ```
void glTextureBarrier() {
  final glTextureBarrierAsFunction = _glTextureBarrier
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glTextureBarrierAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpecializeShader;

/// ```c
/// GLAPI void APIENTRY glSpecializeShader (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
/// ```
void glSpecializeShader(
  int shader,
  String pEntryPoint,
  int numSpecializationConstants,
  Pointer<Uint32> pConstantIndex,
  Pointer<Uint32> pConstantValue,
) {
  final glSpecializeShaderAsFunction = _glSpecializeShader
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Pointer<Utf8> pEntryPoint,
            Uint32 numSpecializationConstants,
            Pointer<Uint32> pConstantIndex,
            Pointer<Uint32> pConstantValue,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          Pointer<Utf8> pEntryPoint,
          int numSpecializationConstants,
          Pointer<Uint32> pConstantIndex,
          Pointer<Uint32> pConstantValue,
        )
      >();
  final pEntryPointPointer = pEntryPoint.toNativeUtf8();
  final result = glSpecializeShaderAsFunction(
    shader,
    pEntryPointPointer,
    numSpecializationConstants,
    pConstantIndex,
    pConstantValue,
  );
  calloc.free(pEntryPointPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawArraysIndirectCount;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirectCount (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
void glMultiDrawArraysIndirectCount(
  int mode,
  Pointer<NativeType> indirect,
  Pointer<NativeType> drawcount,
  int maxdrawcount,
  int stride,
) {
  final glMultiDrawArraysIndirectCountAsFunction =
      _glMultiDrawArraysIndirectCount
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Pointer<NativeType> indirect,
                Pointer<NativeType> drawcount,
                Uint32 maxdrawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              Pointer<NativeType> indirect,
              Pointer<NativeType> drawcount,
              int maxdrawcount,
              int stride,
            )
          >();
  return glMultiDrawArraysIndirectCountAsFunction(
    mode,
    indirect,
    drawcount,
    maxdrawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementsIndirectCount;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirectCount (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
void glMultiDrawElementsIndirectCount(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  Pointer<NativeType> drawcount,
  int maxdrawcount,
  int stride,
) {
  final glMultiDrawElementsIndirectCountAsFunction =
      _glMultiDrawElementsIndirectCount
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 type,
                Pointer<NativeType> indirect,
                Pointer<NativeType> drawcount,
                Uint32 maxdrawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int type,
              Pointer<NativeType> indirect,
              Pointer<NativeType> drawcount,
              int maxdrawcount,
              int stride,
            )
          >();
  return glMultiDrawElementsIndirectCountAsFunction(
    mode,
    type,
    indirect,
    drawcount,
    maxdrawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonOffsetClamp;

/// ```c
/// GLAPI void APIENTRY glPolygonOffsetClamp (GLfloat factor, GLfloat units, GLfloat clamp)
/// ```
void glPolygonOffsetClamp(double factor, double units, double clamp) {
  final glPolygonOffsetClampAsFunction = _glPolygonOffsetClamp
      .cast<
        NativeFunction<Void Function(Float factor, Float units, Float clamp)>
      >()
      .asFunction<void Function(double factor, double units, double clamp)>();
  return glPolygonOffsetClampAsFunction(factor, units, clamp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrimitiveBoundingBoxArb;

/// ```c
/// GLAPI void APIENTRY glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
/// ```
void glPrimitiveBoundingBoxArb(
  double minX,
  double minY,
  double minZ,
  double minW,
  double maxX,
  double maxY,
  double maxZ,
  double maxW,
) {
  final glPrimitiveBoundingBoxArbAsFunction = _glPrimitiveBoundingBoxArb
      .cast<
        NativeFunction<
          Void Function(
            Float minX,
            Float minY,
            Float minZ,
            Float minW,
            Float maxX,
            Float maxY,
            Float maxZ,
            Float maxW,
          )
        >
      >()
      .asFunction<
        void Function(
          double minX,
          double minY,
          double minZ,
          double minW,
          double maxX,
          double maxY,
          double maxZ,
          double maxW,
        )
      >();
  return glPrimitiveBoundingBoxArbAsFunction(
    minX,
    minY,
    minZ,
    minW,
    maxX,
    maxY,
    maxZ,
    maxW,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureHandleArb;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture)
/// ```
int glGetTextureHandleArb(int texture) {
  final glGetTextureHandleArbAsFunction = _glGetTextureHandleArb
      .cast<NativeFunction<Uint64 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return glGetTextureHandleArbAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureSamplerHandleArb;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler)
/// ```
int glGetTextureSamplerHandleArb(int texture, int sampler) {
  final glGetTextureSamplerHandleArbAsFunction = _glGetTextureSamplerHandleArb
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Uint32 sampler)>>()
      .asFunction<int Function(int texture, int sampler)>();
  return glGetTextureSamplerHandleArbAsFunction(texture, sampler);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeTextureHandleResidentArb;

/// ```c
/// GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle)
/// ```
void glMakeTextureHandleResidentArb(int handle) {
  final glMakeTextureHandleResidentArbAsFunction =
      _glMakeTextureHandleResidentArb
          .cast<NativeFunction<Void Function(Uint64 handle)>>()
          .asFunction<void Function(int handle)>();
  return glMakeTextureHandleResidentArbAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMakeTextureHandleNonResidentArb;

/// ```c
/// GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle)
/// ```
void glMakeTextureHandleNonResidentArb(int handle) {
  final glMakeTextureHandleNonResidentArbAsFunction =
      _glMakeTextureHandleNonResidentArb
          .cast<NativeFunction<Void Function(Uint64 handle)>>()
          .asFunction<void Function(int handle)>();
  return glMakeTextureHandleNonResidentArbAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetImageHandleArb;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
/// ```
int glGetImageHandleArb(
  int texture,
  int level,
  int layered,
  int layer,
  int format,
) {
  final glGetImageHandleArbAsFunction = _glGetImageHandleArb
      .cast<
        NativeFunction<
          Uint64 Function(
            Uint32 texture,
            Int32 level,
            Int32 layered,
            Int32 layer,
            Uint32 format,
          )
        >
      >()
      .asFunction<
        int Function(int texture, int level, int layered, int layer, int format)
      >();
  return glGetImageHandleArbAsFunction(texture, level, layered, layer, format);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeImageHandleResidentArb;

/// ```c
/// GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access)
/// ```
void glMakeImageHandleResidentArb(int handle, int access) {
  final glMakeImageHandleResidentArbAsFunction = _glMakeImageHandleResidentArb
      .cast<NativeFunction<Void Function(Uint64 handle, Uint32 access)>>()
      .asFunction<void Function(int handle, int access)>();
  return glMakeImageHandleResidentArbAsFunction(handle, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeImageHandleNonResidentArb;

/// ```c
/// GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle)
/// ```
void glMakeImageHandleNonResidentArb(int handle) {
  final glMakeImageHandleNonResidentArbAsFunction =
      _glMakeImageHandleNonResidentArb
          .cast<NativeFunction<Void Function(Uint64 handle)>>()
          .asFunction<void Function(int handle)>();
  return glMakeImageHandleNonResidentArbAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformHandleui64Arb;

/// ```c
/// GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value)
/// ```
void glUniformHandleui64Arb(int location, int value) {
  final glUniformHandleui64ArbAsFunction = _glUniformHandleui64Arb
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return glUniformHandleui64ArbAsFunction(location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformHandleui64vArb;

/// ```c
/// GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniformHandleui64vArb(int location, int count, Pointer<Uint64> value) {
  final glUniformHandleui64vArbAsFunction = _glUniformHandleui64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniformHandleui64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformHandleui64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value)
/// ```
void glProgramUniformHandleui64Arb(int program, int location, int value) {
  final glProgramUniformHandleui64ArbAsFunction = _glProgramUniformHandleui64Arb
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint64 value)
        >
      >()
      .asFunction<void Function(int program, int location, int value)>();
  return glProgramUniformHandleui64ArbAsFunction(program, location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformHandleui64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
/// ```
void glProgramUniformHandleui64vArb(
  int program,
  int location,
  int count,
  Pointer<Uint64> values,
) {
  final glProgramUniformHandleui64vArbAsFunction =
      _glProgramUniformHandleui64vArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Pointer<Uint64> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              Pointer<Uint64> values,
            )
          >();
  return glProgramUniformHandleui64vArbAsFunction(
    program,
    location,
    count,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTextureHandleResidentArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle)
/// ```
int glIsTextureHandleResidentArb(int handle) {
  final glIsTextureHandleResidentArbAsFunction = _glIsTextureHandleResidentArb
      .cast<NativeFunction<Int32 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return glIsTextureHandleResidentArbAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsImageHandleResidentArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle)
/// ```
int glIsImageHandleResidentArb(int handle) {
  final glIsImageHandleResidentArbAsFunction = _glIsImageHandleResidentArb
      .cast<NativeFunction<Int32 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return glIsImageHandleResidentArbAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1ui64Arb;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x)
/// ```
void glVertexAttribL1ui64Arb(int index, int x) {
  final glVertexAttribL1ui64ArbAsFunction = _glVertexAttribL1ui64Arb
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribL1ui64ArbAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1ui64vArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v)
/// ```
void glVertexAttribL1ui64vArb(int index, Pointer<Uint64> v) {
  final glVertexAttribL1ui64vArbAsFunction = _glVertexAttribL1ui64vArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64> v)>>()
      .asFunction<void Function(int index, Pointer<Uint64> v)>();
  return glVertexAttribL1ui64vArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribLui64vArb;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params)
/// ```
void glGetVertexAttribLui64vArb(int index, int pname, Pointer<Uint64> params) {
  final glGetVertexAttribLui64vArbAsFunction = _glGetVertexAttribLui64vArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Uint64> params)
      >();
  return glGetVertexAttribLui64vArbAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateSyncFromCLeventArb;

/// ```c
/// GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags)
/// ```
Pointer<NativeType> glCreateSyncFromCLeventArb(
  Pointer<Pointer<NativeType>> context,
  Pointer<Pointer<NativeType>> event,
  int flags,
) {
  final glCreateSyncFromCLeventArbAsFunction = _glCreateSyncFromCLeventArb
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Pointer<Pointer<NativeType>> context,
            Pointer<Pointer<NativeType>> event,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          Pointer<Pointer<NativeType>> context,
          Pointer<Pointer<NativeType>> event,
          int flags,
        )
      >();
  return glCreateSyncFromCLeventArbAsFunction(context, event, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClampColorArb;

/// ```c
/// GLAPI void APIENTRY glClampColorARB (GLenum target, GLenum clamp)
/// ```
void glClampColorArb(int target, int clamp) {
  final glClampColorArbAsFunction = _glClampColorArb
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 clamp)>>()
      .asFunction<void Function(int target, int clamp)>();
  return glClampColorArbAsFunction(target, clamp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDispatchComputeGroupSizeArb;

/// ```c
/// GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
/// ```
void glDispatchComputeGroupSizeArb(
  int numGroupsX,
  int numGroupsY,
  int numGroupsZ,
  int groupSizeX,
  int groupSizeY,
  int groupSizeZ,
) {
  final glDispatchComputeGroupSizeArbAsFunction = _glDispatchComputeGroupSizeArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numGroupsX,
            Uint32 numGroupsY,
            Uint32 numGroupsZ,
            Uint32 groupSizeX,
            Uint32 groupSizeY,
            Uint32 groupSizeZ,
          )
        >
      >()
      .asFunction<
        void Function(
          int numGroupsX,
          int numGroupsY,
          int numGroupsZ,
          int groupSizeX,
          int groupSizeY,
          int groupSizeZ,
        )
      >();
  return glDispatchComputeGroupSizeArbAsFunction(
    numGroupsX,
    numGroupsY,
    numGroupsZ,
    groupSizeX,
    groupSizeY,
    groupSizeZ,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageControlArb;

/// ```c
/// GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
/// ```
void glDebugMessageControlArb(
  int source,
  int type,
  int severity,
  int count,
  Pointer<Uint32> ids,
  int enabled,
) {
  final glDebugMessageControlArbAsFunction = _glDebugMessageControlArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 source,
            Uint32 type,
            Uint32 severity,
            Uint32 count,
            Pointer<Uint32> ids,
            Int32 enabled,
          )
        >
      >()
      .asFunction<
        void Function(
          int source,
          int type,
          int severity,
          int count,
          Pointer<Uint32> ids,
          int enabled,
        )
      >();
  return glDebugMessageControlArbAsFunction(
    source,
    type,
    severity,
    count,
    ids,
    enabled,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageInsertArb;

/// ```c
/// GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
/// ```
void glDebugMessageInsertArb(
  int source,
  int type,
  int id,
  int severity,
  int length,
  String buf,
) {
  final glDebugMessageInsertArbAsFunction = _glDebugMessageInsertArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 source,
            Uint32 type,
            Uint32 id,
            Uint32 severity,
            Uint32 length,
            Pointer<Utf8> buf,
          )
        >
      >()
      .asFunction<
        void Function(
          int source,
          int type,
          int id,
          int severity,
          int length,
          Pointer<Utf8> buf,
        )
      >();
  final bufPointer = buf.toNativeUtf8();
  final result = glDebugMessageInsertArbAsFunction(
    source,
    type,
    id,
    severity,
    length,
    bufPointer,
  );
  calloc.free(bufPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageCallbackArb;

/// ```c
/// GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam)
/// ```
void glDebugMessageCallbackArb(
  Pointer<NativeFunction<GLDEBUGPROCARB>> callback,
  Pointer<NativeType> userParam,
) {
  final glDebugMessageCallbackArbAsFunction = _glDebugMessageCallbackArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeFunction<GLDEBUGPROCARB>> callback,
            Pointer<NativeType> userParam,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeFunction<GLDEBUGPROCARB>> callback,
          Pointer<NativeType> userParam,
        )
      >();
  return glDebugMessageCallbackArbAsFunction(callback, userParam);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDebugMessageLogArb;

/// ```c
/// GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
/// ```
int glGetDebugMessageLogArb(
  int count,
  int bufSize,
  Pointer<Uint32> sources,
  Pointer<Uint32> types,
  Pointer<Uint32> ids,
  Pointer<Uint32> severities,
  Pointer<Uint32> lengths,
  Pointer<Int8> messageLog,
) {
  final glGetDebugMessageLogArbAsFunction = _glGetDebugMessageLogArb
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 count,
            Uint32 bufSize,
            Pointer<Uint32> sources,
            Pointer<Uint32> types,
            Pointer<Uint32> ids,
            Pointer<Uint32> severities,
            Pointer<Uint32> lengths,
            Pointer<Int8> messageLog,
          )
        >
      >()
      .asFunction<
        int Function(
          int count,
          int bufSize,
          Pointer<Uint32> sources,
          Pointer<Uint32> types,
          Pointer<Uint32> ids,
          Pointer<Uint32> severities,
          Pointer<Uint32> lengths,
          Pointer<Int8> messageLog,
        )
      >();
  return glGetDebugMessageLogArbAsFunction(
    count,
    bufSize,
    sources,
    types,
    ids,
    severities,
    lengths,
    messageLog,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawBuffersArb;

/// ```c
/// GLAPI void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs)
/// ```
void glDrawBuffersArb(int n, Pointer<Uint32> bufs) {
  final glDrawBuffersArbAsFunction = _glDrawBuffersArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> bufs)>();
  return glDrawBuffersArbAsFunction(n, bufs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationiArb;

/// ```c
/// GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode)
/// ```
void glBlendEquationiArb(int buf, int mode) {
  final glBlendEquationiArbAsFunction = _glBlendEquationiArb
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return glBlendEquationiArbAsFunction(buf, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationSeparateiArb;

/// ```c
/// GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
void glBlendEquationSeparateiArb(int buf, int modeRgb, int modeAlpha) {
  final glBlendEquationSeparateiArbAsFunction = _glBlendEquationSeparateiArb
      .cast<
        NativeFunction<
          Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha)
        >
      >()
      .asFunction<void Function(int buf, int modeRgb, int modeAlpha)>();
  return glBlendEquationSeparateiArbAsFunction(buf, modeRgb, modeAlpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFunciArb;

/// ```c
/// GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst)
/// ```
void glBlendFunciArb(int buf, int src, int dst) {
  final glBlendFunciArbAsFunction = _glBlendFunciArb
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return glBlendFunciArbAsFunction(buf, src, dst);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparateiArb;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
void glBlendFuncSeparateiArb(
  int buf,
  int srcRgb,
  int dstRgb,
  int srcAlpha,
  int dstAlpha,
) {
  final glBlendFuncSeparateiArbAsFunction = _glBlendFuncSeparateiArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buf,
            Uint32 srcRgb,
            Uint32 dstRgb,
            Uint32 srcAlpha,
            Uint32 dstAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int buf,
          int srcRgb,
          int dstRgb,
          int srcAlpha,
          int dstAlpha,
        )
      >();
  return glBlendFuncSeparateiArbAsFunction(
    buf,
    srcRgb,
    dstRgb,
    srcAlpha,
    dstAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArraysInstancedArb;

/// ```c
/// GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
/// ```
void glDrawArraysInstancedArb(int mode, int first, int count, int primcount) {
  final glDrawArraysInstancedArbAsFunction = _glDrawArraysInstancedArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Int32 first,
            Uint32 count,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(int mode, int first, int count, int primcount)
      >();
  return glDrawArraysInstancedArbAsFunction(mode, first, count, primcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementsInstancedArb;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
/// ```
void glDrawElementsInstancedArb(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int primcount,
) {
  final glDrawElementsInstancedArbAsFunction = _glDrawElementsInstancedArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int count,
          int type,
          Pointer<NativeType> indices,
          int primcount,
        )
      >();
  return glDrawElementsInstancedArbAsFunction(
    mode,
    count,
    type,
    indices,
    primcount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramStringArb;

/// ```c
/// GLAPI void APIENTRY glProgramStringARB (GLenum target, GLenum format, GLsizei len, const void *string)
/// ```
void glProgramStringArb(
  int target,
  int format,
  int len,
  Pointer<NativeType> string,
) {
  final glProgramStringArbAsFunction = _glProgramStringArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 len,
            Pointer<NativeType> string,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int len,
          Pointer<NativeType> string,
        )
      >();
  return glProgramStringArbAsFunction(target, format, len, string);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindProgramArb;

/// ```c
/// GLAPI void APIENTRY glBindProgramARB (GLenum target, GLuint program)
/// ```
void glBindProgramArb(int target, int program) {
  final glBindProgramArbAsFunction = _glBindProgramArb
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 program)>>()
      .asFunction<void Function(int target, int program)>();
  return glBindProgramArbAsFunction(target, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteProgramsArb;

/// ```c
/// GLAPI void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint *programs)
/// ```
void glDeleteProgramsArb(int n, Pointer<Uint32> programs) {
  final glDeleteProgramsArbAsFunction = _glDeleteProgramsArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> programs)>();
  return glDeleteProgramsArbAsFunction(n, programs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenProgramsArb;

/// ```c
/// GLAPI void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs)
/// ```
void glGenProgramsArb(int n, Pointer<Uint32> programs) {
  final glGenProgramsArbAsFunction = _glGenProgramsArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> programs)>();
  return glGenProgramsArbAsFunction(n, programs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameter4dArb;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glProgramEnvParameter4dArb(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramEnvParameter4dArbAsFunction = _glProgramEnvParameter4dArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Double x,
            Double y,
            Double z,
            Double w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramEnvParameter4dArbAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameter4dvArb;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params)
/// ```
void glProgramEnvParameter4dvArb(
  int target,
  int index,
  Pointer<Double> params,
) {
  final glProgramEnvParameter4dvArbAsFunction = _glProgramEnvParameter4dvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Double> params)
      >();
  return glProgramEnvParameter4dvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameter4fArb;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glProgramEnvParameter4fArb(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramEnvParameter4fArbAsFunction = _glProgramEnvParameter4fArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Float x,
            Float y,
            Float z,
            Float w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramEnvParameter4fArbAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameter4fvArb;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params)
/// ```
void glProgramEnvParameter4fvArb(int target, int index, Pointer<Float> params) {
  final glProgramEnvParameter4fvArbAsFunction = _glProgramEnvParameter4fvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Float> params)
      >();
  return glProgramEnvParameter4fvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameter4dArb;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glProgramLocalParameter4dArb(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramLocalParameter4dArbAsFunction = _glProgramLocalParameter4dArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Double x,
            Double y,
            Double z,
            Double w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramLocalParameter4dArbAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameter4dvArb;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params)
/// ```
void glProgramLocalParameter4dvArb(
  int target,
  int index,
  Pointer<Double> params,
) {
  final glProgramLocalParameter4dvArbAsFunction = _glProgramLocalParameter4dvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Double> params)
      >();
  return glProgramLocalParameter4dvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameter4fArb;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glProgramLocalParameter4fArb(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramLocalParameter4fArbAsFunction = _glProgramLocalParameter4fArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Float x,
            Float y,
            Float z,
            Float w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramLocalParameter4fArbAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameter4fvArb;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params)
/// ```
void glProgramLocalParameter4fvArb(
  int target,
  int index,
  Pointer<Float> params,
) {
  final glProgramLocalParameter4fvArbAsFunction = _glProgramLocalParameter4fvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Float> params)
      >();
  return glProgramLocalParameter4fvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramEnvParameterdvArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params)
/// ```
void glGetProgramEnvParameterdvArb(
  int target,
  int index,
  Pointer<Double> params,
) {
  final glGetProgramEnvParameterdvArbAsFunction = _glGetProgramEnvParameterdvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Double> params)
      >();
  return glGetProgramEnvParameterdvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramEnvParameterfvArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params)
/// ```
void glGetProgramEnvParameterfvArb(
  int target,
  int index,
  Pointer<Float> params,
) {
  final glGetProgramEnvParameterfvArbAsFunction = _glGetProgramEnvParameterfvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Float> params)
      >();
  return glGetProgramEnvParameterfvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramLocalParameterdvArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params)
/// ```
void glGetProgramLocalParameterdvArb(
  int target,
  int index,
  Pointer<Double> params,
) {
  final glGetProgramLocalParameterdvArbAsFunction =
      _glGetProgramLocalParameterdvArb
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Double> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Double> params)
          >();
  return glGetProgramLocalParameterdvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramLocalParameterfvArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params)
/// ```
void glGetProgramLocalParameterfvArb(
  int target,
  int index,
  Pointer<Float> params,
) {
  final glGetProgramLocalParameterfvArbAsFunction =
      _glGetProgramLocalParameterfvArb
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Float> params)
          >();
  return glGetProgramLocalParameterfvArbAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramivArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetProgramivArb(int target, int pname, Pointer<Int32> params) {
  final glGetProgramivArbAsFunction = _glGetProgramivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetProgramivArbAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramStringArb;

/// ```c
/// GLAPI void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname, void *string)
/// ```
void glGetProgramStringArb(int target, int pname, Pointer<NativeType> string) {
  final glGetProgramStringArbAsFunction = _glGetProgramStringArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<NativeType> string)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<NativeType> string)
      >();
  return glGetProgramStringArbAsFunction(target, pname, string);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsProgramArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsProgramARB (GLuint program)
/// ```
int glIsProgramArb(int program) {
  final glIsProgramArbAsFunction = _glIsProgramArb
      .cast<NativeFunction<Int32 Function(Uint32 program)>>()
      .asFunction<int Function(int program)>();
  return glIsProgramArbAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameteriArb;

/// ```c
/// GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value)
/// ```
void glProgramParameteriArb(int program, int pname, int value) {
  final glProgramParameteriArbAsFunction = _glProgramParameteriArb
      .cast<
        NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>
      >()
      .asFunction<void Function(int program, int pname, int value)>();
  return glProgramParameteriArbAsFunction(program, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureArb;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
void glFramebufferTextureArb(
  int target,
  int attachment,
  int texture,
  int level,
) {
  final glFramebufferTextureArbAsFunction = _glFramebufferTextureArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(int target, int attachment, int texture, int level)
      >();
  return glFramebufferTextureArbAsFunction(target, attachment, texture, level);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureLayerArb;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
void glFramebufferTextureLayerArb(
  int target,
  int attachment,
  int texture,
  int level,
  int layer,
) {
  final glFramebufferTextureLayerArbAsFunction = _glFramebufferTextureLayerArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
            Int32 layer,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int texture,
          int level,
          int layer,
        )
      >();
  return glFramebufferTextureLayerArbAsFunction(
    target,
    attachment,
    texture,
    level,
    layer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureFaceArb;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
void glFramebufferTextureFaceArb(
  int target,
  int attachment,
  int texture,
  int level,
  int face,
) {
  final glFramebufferTextureFaceArbAsFunction = _glFramebufferTextureFaceArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
            Uint32 face,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int texture,
          int level,
          int face,
        )
      >();
  return glFramebufferTextureFaceArbAsFunction(
    target,
    attachment,
    texture,
    level,
    face,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpecializeShaderArb;

/// ```c
/// GLAPI void APIENTRY glSpecializeShaderARB (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
/// ```
void glSpecializeShaderArb(
  int shader,
  String pEntryPoint,
  int numSpecializationConstants,
  Pointer<Uint32> pConstantIndex,
  Pointer<Uint32> pConstantValue,
) {
  final glSpecializeShaderArbAsFunction = _glSpecializeShaderArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Pointer<Utf8> pEntryPoint,
            Uint32 numSpecializationConstants,
            Pointer<Uint32> pConstantIndex,
            Pointer<Uint32> pConstantValue,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          Pointer<Utf8> pEntryPoint,
          int numSpecializationConstants,
          Pointer<Uint32> pConstantIndex,
          Pointer<Uint32> pConstantValue,
        )
      >();
  final pEntryPointPointer = pEntryPoint.toNativeUtf8();
  final result = glSpecializeShaderArbAsFunction(
    shader,
    pEntryPointPointer,
    numSpecializationConstants,
    pConstantIndex,
    pConstantValue,
  );
  calloc.free(pEntryPointPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1i64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform1i64ARB (GLint location, GLint64 x)
/// ```
void glUniform1i64Arb(int location, int x) {
  final glUniform1i64ArbAsFunction = _glUniform1i64Arb
      .cast<NativeFunction<Void Function(Int32 location, Int64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return glUniform1i64ArbAsFunction(location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2i64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform2i64ARB (GLint location, GLint64 x, GLint64 y)
/// ```
void glUniform2i64Arb(int location, int x, int y) {
  final glUniform2i64ArbAsFunction = _glUniform2i64Arb
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return glUniform2i64ArbAsFunction(location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3i64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform3i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z)
/// ```
void glUniform3i64Arb(int location, int x, int y, int z) {
  final glUniform3i64ArbAsFunction = _glUniform3i64Arb
      .cast<
        NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z)>
      >()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return glUniform3i64ArbAsFunction(location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4i64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform4i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
/// ```
void glUniform4i64Arb(int location, int x, int y, int z, int w) {
  final glUniform4i64ArbAsFunction = _glUniform4i64Arb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return glUniform4i64ArbAsFunction(location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1i64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform1i64vARB (GLint location, GLsizei count, const GLint64 *value)
/// ```
void glUniform1i64vArb(int location, int count, Pointer<Int64> value) {
  final glUniform1i64vArbAsFunction = _glUniform1i64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform1i64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2i64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform2i64vARB (GLint location, GLsizei count, const GLint64 *value)
/// ```
void glUniform2i64vArb(int location, int count, Pointer<Int64> value) {
  final glUniform2i64vArbAsFunction = _glUniform2i64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform2i64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3i64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform3i64vARB (GLint location, GLsizei count, const GLint64 *value)
/// ```
void glUniform3i64vArb(int location, int count, Pointer<Int64> value) {
  final glUniform3i64vArbAsFunction = _glUniform3i64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform3i64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4i64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform4i64vARB (GLint location, GLsizei count, const GLint64 *value)
/// ```
void glUniform4i64vArb(int location, int count, Pointer<Int64> value) {
  final glUniform4i64vArbAsFunction = _glUniform4i64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform4i64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ui64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform1ui64ARB (GLint location, GLuint64 x)
/// ```
void glUniform1ui64Arb(int location, int x) {
  final glUniform1ui64ArbAsFunction = _glUniform1ui64Arb
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return glUniform1ui64ArbAsFunction(location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ui64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64 y)
/// ```
void glUniform2ui64Arb(int location, int x, int y) {
  final glUniform2ui64ArbAsFunction = _glUniform2ui64Arb
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return glUniform2ui64ArbAsFunction(location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ui64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
/// ```
void glUniform3ui64Arb(int location, int x, int y, int z) {
  final glUniform3ui64ArbAsFunction = _glUniform3ui64Arb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return glUniform3ui64ArbAsFunction(location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ui64Arb;

/// ```c
/// GLAPI void APIENTRY glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
/// ```
void glUniform4ui64Arb(int location, int x, int y, int z, int w) {
  final glUniform4ui64ArbAsFunction = _glUniform4ui64Arb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return glUniform4ui64ArbAsFunction(location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ui64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform1ui64vARB (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniform1ui64vArb(int location, int count, Pointer<Uint64> value) {
  final glUniform1ui64vArbAsFunction = _glUniform1ui64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform1ui64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ui64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform2ui64vARB (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniform2ui64vArb(int location, int count, Pointer<Uint64> value) {
  final glUniform2ui64vArbAsFunction = _glUniform2ui64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform2ui64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ui64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform3ui64vARB (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniform3ui64vArb(int location, int count, Pointer<Uint64> value) {
  final glUniform3ui64vArbAsFunction = _glUniform3ui64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform3ui64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ui64vArb;

/// ```c
/// GLAPI void APIENTRY glUniform4ui64vARB (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniform4ui64vArb(int location, int count, Pointer<Uint64> value) {
  final glUniform4ui64vArbAsFunction = _glUniform4ui64vArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform4ui64vArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformi64vArb;

/// ```c
/// GLAPI void APIENTRY glGetUniformi64vARB (GLuint program, GLint location, GLint64 *params)
/// ```
void glGetUniformi64vArb(int program, int location, Pointer<Int64> params) {
  final glGetUniformi64vArbAsFunction = _glGetUniformi64vArb
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Int64> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Int64> params)
      >();
  return glGetUniformi64vArbAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformui64vArb;

/// ```c
/// GLAPI void APIENTRY glGetUniformui64vARB (GLuint program, GLint location, GLuint64 *params)
/// ```
void glGetUniformui64vArb(int program, int location, Pointer<Uint64> params) {
  final glGetUniformui64vArbAsFunction = _glGetUniformui64vArb
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Uint64> params)
      >();
  return glGetUniformui64vArbAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformi64vArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformi64vARB (GLuint program, GLint location, GLsizei bufSize, GLint64 *params)
/// ```
void glGetnUniformi64vArb(
  int program,
  int location,
  int bufSize,
  Pointer<Int64> params,
) {
  final glGetnUniformi64vArbAsFunction = _glGetnUniformi64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Int64> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Int64> params,
        )
      >();
  return glGetnUniformi64vArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformui64vArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformui64vARB (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)
/// ```
void glGetnUniformui64vArb(
  int program,
  int location,
  int bufSize,
  Pointer<Uint64> params,
) {
  final glGetnUniformui64vArbAsFunction = _glGetnUniformui64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Uint64> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Uint64> params,
        )
      >();
  return glGetnUniformui64vArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1i64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1i64ARB (GLuint program, GLint location, GLint64 x)
/// ```
void glProgramUniform1i64Arb(int program, int location, int x) {
  final glProgramUniform1i64ArbAsFunction = _glProgramUniform1i64Arb
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x)>
      >()
      .asFunction<void Function(int program, int location, int x)>();
  return glProgramUniform1i64ArbAsFunction(program, location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2i64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y)
/// ```
void glProgramUniform2i64Arb(int program, int location, int x, int y) {
  final glProgramUniform2i64ArbAsFunction = _glProgramUniform2i64Arb
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Int64 x, Int64 y)
        >
      >()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return glProgramUniform2i64ArbAsFunction(program, location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3i64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
/// ```
void glProgramUniform3i64Arb(int program, int location, int x, int y, int z) {
  final glProgramUniform3i64ArbAsFunction = _glProgramUniform3i64Arb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int64 x,
            Int64 y,
            Int64 z,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z)
      >();
  return glProgramUniform3i64ArbAsFunction(program, location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4i64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
/// ```
void glProgramUniform4i64Arb(
  int program,
  int location,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramUniform4i64ArbAsFunction = _glProgramUniform4i64Arb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int64 x,
            Int64 y,
            Int64 z,
            Int64 w,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z, int w)
      >();
  return glProgramUniform4i64ArbAsFunction(program, location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1i64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value)
/// ```
void glProgramUniform1i64vArb(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform1i64vArbAsFunction = _glProgramUniform1i64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform1i64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2i64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value)
/// ```
void glProgramUniform2i64vArb(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform2i64vArbAsFunction = _glProgramUniform2i64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform2i64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3i64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value)
/// ```
void glProgramUniform3i64vArb(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform3i64vArbAsFunction = _glProgramUniform3i64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform3i64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4i64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value)
/// ```
void glProgramUniform4i64vArb(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform4i64vArbAsFunction = _glProgramUniform4i64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform4i64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ui64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ui64ARB (GLuint program, GLint location, GLuint64 x)
/// ```
void glProgramUniform1ui64Arb(int program, int location, int x) {
  final glProgramUniform1ui64ArbAsFunction = _glProgramUniform1ui64Arb
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x)>
      >()
      .asFunction<void Function(int program, int location, int x)>();
  return glProgramUniform1ui64ArbAsFunction(program, location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ui64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y)
/// ```
void glProgramUniform2ui64Arb(int program, int location, int x, int y) {
  final glProgramUniform2ui64ArbAsFunction = _glProgramUniform2ui64Arb
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y)
        >
      >()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return glProgramUniform2ui64ArbAsFunction(program, location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ui64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
/// ```
void glProgramUniform3ui64Arb(int program, int location, int x, int y, int z) {
  final glProgramUniform3ui64ArbAsFunction = _glProgramUniform3ui64Arb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint64 x,
            Uint64 y,
            Uint64 z,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z)
      >();
  return glProgramUniform3ui64ArbAsFunction(program, location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ui64Arb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
/// ```
void glProgramUniform4ui64Arb(
  int program,
  int location,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramUniform4ui64ArbAsFunction = _glProgramUniform4ui64Arb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint64 x,
            Uint64 y,
            Uint64 z,
            Uint64 w,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z, int w)
      >();
  return glProgramUniform4ui64ArbAsFunction(program, location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ui64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glProgramUniform1ui64vArb(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform1ui64vArbAsFunction = _glProgramUniform1ui64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform1ui64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ui64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glProgramUniform2ui64vArb(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform2ui64vArbAsFunction = _glProgramUniform2ui64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform2ui64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ui64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glProgramUniform3ui64vArb(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform3ui64vArbAsFunction = _glProgramUniform3ui64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform3ui64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ui64vArb;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glProgramUniform4ui64vArb(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform4ui64vArbAsFunction = _glProgramUniform4ui64vArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform4ui64vArbAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawArraysIndirectCountArb;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
void glMultiDrawArraysIndirectCountArb(
  int mode,
  Pointer<NativeType> indirect,
  Pointer<NativeType> drawcount,
  int maxdrawcount,
  int stride,
) {
  final glMultiDrawArraysIndirectCountArbAsFunction =
      _glMultiDrawArraysIndirectCountArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Pointer<NativeType> indirect,
                Pointer<NativeType> drawcount,
                Uint32 maxdrawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              Pointer<NativeType> indirect,
              Pointer<NativeType> drawcount,
              int maxdrawcount,
              int stride,
            )
          >();
  return glMultiDrawArraysIndirectCountArbAsFunction(
    mode,
    indirect,
    drawcount,
    maxdrawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawElementsIndirectCountArb;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
void glMultiDrawElementsIndirectCountArb(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  Pointer<NativeType> drawcount,
  int maxdrawcount,
  int stride,
) {
  final glMultiDrawElementsIndirectCountArbAsFunction =
      _glMultiDrawElementsIndirectCountArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 type,
                Pointer<NativeType> indirect,
                Pointer<NativeType> drawcount,
                Uint32 maxdrawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int type,
              Pointer<NativeType> indirect,
              Pointer<NativeType> drawcount,
              int maxdrawcount,
              int stride,
            )
          >();
  return glMultiDrawElementsIndirectCountArbAsFunction(
    mode,
    type,
    indirect,
    drawcount,
    maxdrawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribDivisorArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor)
/// ```
void glVertexAttribDivisorArb(int index, int divisor) {
  final glVertexAttribDivisorArbAsFunction = _glVertexAttribDivisorArb
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return glVertexAttribDivisorArbAsFunction(index, divisor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCurrentPaletteMatrixArb;

/// ```c
/// GLAPI void APIENTRY glCurrentPaletteMatrixARB (GLint index)
/// ```
void glCurrentPaletteMatrixArb(int index) {
  final glCurrentPaletteMatrixArbAsFunction = _glCurrentPaletteMatrixArb
      .cast<NativeFunction<Void Function(Int32 index)>>()
      .asFunction<void Function(int index)>();
  return glCurrentPaletteMatrixArbAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixIndexubvArb;

/// ```c
/// GLAPI void APIENTRY glMatrixIndexubvARB (GLint size, const GLubyte *indices)
/// ```
void glMatrixIndexubvArb(int size, Pointer<Uint8> indices) {
  final glMatrixIndexubvArbAsFunction = _glMatrixIndexubvArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint8> indices)>>()
      .asFunction<void Function(int size, Pointer<Uint8> indices)>();
  return glMatrixIndexubvArbAsFunction(size, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixIndexusvArb;

/// ```c
/// GLAPI void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort *indices)
/// ```
void glMatrixIndexusvArb(int size, Pointer<Uint16> indices) {
  final glMatrixIndexusvArbAsFunction = _glMatrixIndexusvArb
      .cast<
        NativeFunction<Void Function(Int32 size, Pointer<Uint16> indices)>
      >()
      .asFunction<void Function(int size, Pointer<Uint16> indices)>();
  return glMatrixIndexusvArbAsFunction(size, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixIndexuivArb;

/// ```c
/// GLAPI void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint *indices)
/// ```
void glMatrixIndexuivArb(int size, Pointer<Uint32> indices) {
  final glMatrixIndexuivArbAsFunction = _glMatrixIndexuivArb
      .cast<
        NativeFunction<Void Function(Int32 size, Pointer<Uint32> indices)>
      >()
      .asFunction<void Function(int size, Pointer<Uint32> indices)>();
  return glMatrixIndexuivArbAsFunction(size, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixIndexPointerArb;

/// ```c
/// GLAPI void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glMatrixIndexPointerArb(
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glMatrixIndexPointerArbAsFunction = _glMatrixIndexPointerArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glMatrixIndexPointerArbAsFunction(size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleCoverageArb;

/// ```c
/// GLAPI void APIENTRY glSampleCoverageARB (GLfloat value, GLboolean invert)
/// ```
void glSampleCoverageArb(double value, int invert) {
  final glSampleCoverageArbAsFunction = _glSampleCoverageArb
      .cast<NativeFunction<Void Function(Float value, Int32 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return glSampleCoverageArbAsFunction(value, invert);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenQueriesArb;

/// ```c
/// GLAPI void APIENTRY glGenQueriesARB (GLsizei n, GLuint *ids)
/// ```
void glGenQueriesArb(int n, Pointer<Uint32> ids) {
  final glGenQueriesArbAsFunction = _glGenQueriesArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glGenQueriesArbAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteQueriesArb;

/// ```c
/// GLAPI void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids)
/// ```
void glDeleteQueriesArb(int n, Pointer<Uint32> ids) {
  final glDeleteQueriesArbAsFunction = _glDeleteQueriesArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glDeleteQueriesArbAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsQueryArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsQueryARB (GLuint id)
/// ```
int glIsQueryArb(int id) {
  final glIsQueryArbAsFunction = _glIsQueryArb
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsQueryArbAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginQueryArb;

/// ```c
/// GLAPI void APIENTRY glBeginQueryARB (GLenum target, GLuint id)
/// ```
void glBeginQueryArb(int target, int id) {
  final glBeginQueryArbAsFunction = _glBeginQueryArb
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return glBeginQueryArbAsFunction(target, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndQueryArb;

/// ```c
/// GLAPI void APIENTRY glEndQueryARB (GLenum target)
/// ```
void glEndQueryArb(int target) {
  final glEndQueryArbAsFunction = _glEndQueryArb
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glEndQueryArbAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryivArb;

/// ```c
/// GLAPI void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetQueryivArb(int target, int pname, Pointer<Int32> params) {
  final glGetQueryivArbAsFunction = _glGetQueryivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetQueryivArbAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectivArb;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params)
/// ```
void glGetQueryObjectivArb(int id, int pname, Pointer<Int32> params) {
  final glGetQueryObjectivArbAsFunction = _glGetQueryObjectivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int32> params)>();
  return glGetQueryObjectivArbAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectuivArb;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params)
/// ```
void glGetQueryObjectuivArb(int id, int pname, Pointer<Uint32> params) {
  final glGetQueryObjectuivArbAsFunction = _glGetQueryObjectuivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint32> params)>();
  return glGetQueryObjectuivArbAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaxShaderCompilerThreadsArb;

/// ```c
/// GLAPI void APIENTRY glMaxShaderCompilerThreadsARB (GLuint count)
/// ```
void glMaxShaderCompilerThreadsArb(int count) {
  final glMaxShaderCompilerThreadsArbAsFunction = _glMaxShaderCompilerThreadsArb
      .cast<NativeFunction<Void Function(Uint32 count)>>()
      .asFunction<void Function(int count)>();
  return glMaxShaderCompilerThreadsArbAsFunction(count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfArb;

/// ```c
/// GLAPI void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param)
/// ```
void glPointParameterfArb(int pname, double param) {
  final glPointParameterfArbAsFunction = _glPointParameterfArb
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPointParameterfArbAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfvArb;

/// ```c
/// GLAPI void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat *params)
/// ```
void glPointParameterfvArb(int pname, Pointer<Float> params) {
  final glPointParameterfvArbAsFunction = _glPointParameterfvArb
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glPointParameterfvArbAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetGraphicsResetStatusArb;

/// ```c
/// GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void)
/// ```
int glGetGraphicsResetStatusArb() {
  final glGetGraphicsResetStatusArbAsFunction = _glGetGraphicsResetStatusArb
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return glGetGraphicsResetStatusArbAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnTexImageArb;

/// ```c
/// GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)
/// ```
void glGetnTexImageArb(
  int target,
  int level,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> img,
) {
  final glGetnTexImageArbAsFunction = _glGetnTexImageArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> img,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> img,
        )
      >();
  return glGetnTexImageArbAsFunction(target, level, format, type, bufSize, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReadnPixelsArb;

/// ```c
/// GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
/// ```
void glReadnPixelsArb(
  int x,
  int y,
  int width,
  int height,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> data,
) {
  final glReadnPixelsArbAsFunction = _glReadnPixelsArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int x,
          int y,
          int width,
          int height,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> data,
        )
      >();
  return glReadnPixelsArbAsFunction(
    x,
    y,
    width,
    height,
    format,
    type,
    bufSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnCompressedTexImageArb;

/// ```c
/// GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img)
/// ```
void glGetnCompressedTexImageArb(
  int target,
  int lod,
  int bufSize,
  Pointer<NativeType> img,
) {
  final glGetnCompressedTexImageArbAsFunction = _glGetnCompressedTexImageArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 lod,
            Uint32 bufSize,
            Pointer<NativeType> img,
          )
        >
      >()
      .asFunction<
        void Function(int target, int lod, int bufSize, Pointer<NativeType> img)
      >();
  return glGetnCompressedTexImageArbAsFunction(target, lod, bufSize, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformfvArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
/// ```
void glGetnUniformfvArb(
  int program,
  int location,
  int bufSize,
  Pointer<Float> params,
) {
  final glGetnUniformfvArbAsFunction = _glGetnUniformfvArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Float> params,
        )
      >();
  return glGetnUniformfvArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformivArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params)
/// ```
void glGetnUniformivArb(
  int program,
  int location,
  int bufSize,
  Pointer<Int32> params,
) {
  final glGetnUniformivArbAsFunction = _glGetnUniformivArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Int32> params,
        )
      >();
  return glGetnUniformivArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformuivArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
/// ```
void glGetnUniformuivArb(
  int program,
  int location,
  int bufSize,
  Pointer<Uint32> params,
) {
  final glGetnUniformuivArbAsFunction = _glGetnUniformuivArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Uint32> params,
        )
      >();
  return glGetnUniformuivArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnUniformdvArb;

/// ```c
/// GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
/// ```
void glGetnUniformdvArb(
  int program,
  int location,
  int bufSize,
  Pointer<Double> params,
) {
  final glGetnUniformdvArbAsFunction = _glGetnUniformdvArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 bufSize,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int bufSize,
          Pointer<Double> params,
        )
      >();
  return glGetnUniformdvArbAsFunction(program, location, bufSize, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapdvArb;

/// ```c
/// GLAPI void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
/// ```
void glGetnMapdvArb(int target, int query, int bufSize, Pointer<Double> v) {
  final glGetnMapdvArbAsFunction = _glGetnMapdvArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Double> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Double> v)
      >();
  return glGetnMapdvArbAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapfvArb;

/// ```c
/// GLAPI void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
/// ```
void glGetnMapfvArb(int target, int query, int bufSize, Pointer<Float> v) {
  final glGetnMapfvArbAsFunction = _glGetnMapfvArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Float> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Float> v)
      >();
  return glGetnMapfvArbAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMapivArb;

/// ```c
/// GLAPI void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint *v)
/// ```
void glGetnMapivArb(int target, int query, int bufSize, Pointer<Int32> v) {
  final glGetnMapivArbAsFunction = _glGetnMapivArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 query,
            Uint32 bufSize,
            Pointer<Int32> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int query, int bufSize, Pointer<Int32> v)
      >();
  return glGetnMapivArbAsFunction(target, query, bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapfvArb;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat *values)
/// ```
void glGetnPixelMapfvArb(int map, int bufSize, Pointer<Float> values) {
  final glGetnPixelMapfvArbAsFunction = _glGetnPixelMapfvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Float> values)
        >
      >()
      .asFunction<void Function(int map, int bufSize, Pointer<Float> values)>();
  return glGetnPixelMapfvArbAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapuivArb;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint *values)
/// ```
void glGetnPixelMapuivArb(int map, int bufSize, Pointer<Uint32> values) {
  final glGetnPixelMapuivArbAsFunction = _glGetnPixelMapuivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint32> values)
        >
      >()
      .asFunction<
        void Function(int map, int bufSize, Pointer<Uint32> values)
      >();
  return glGetnPixelMapuivArbAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPixelMapusvArb;

/// ```c
/// GLAPI void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort *values)
/// ```
void glGetnPixelMapusvArb(int map, int bufSize, Pointer<Uint16> values) {
  final glGetnPixelMapusvArbAsFunction = _glGetnPixelMapusvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint16> values)
        >
      >()
      .asFunction<
        void Function(int map, int bufSize, Pointer<Uint16> values)
      >();
  return glGetnPixelMapusvArbAsFunction(map, bufSize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnPolygonStippleArb;

/// ```c
/// GLAPI void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte *pattern)
/// ```
void glGetnPolygonStippleArb(int bufSize, Pointer<Uint8> pattern) {
  final glGetnPolygonStippleArbAsFunction = _glGetnPolygonStippleArb
      .cast<
        NativeFunction<Void Function(Uint32 bufSize, Pointer<Uint8> pattern)>
      >()
      .asFunction<void Function(int bufSize, Pointer<Uint8> pattern)>();
  return glGetnPolygonStippleArbAsFunction(bufSize, pattern);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnColorTableArb;

/// ```c
/// GLAPI void APIENTRY glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)
/// ```
void glGetnColorTableArb(
  int target,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> table,
) {
  final glGetnColorTableArbAsFunction = _glGetnColorTableArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> table,
        )
      >();
  return glGetnColorTableArbAsFunction(target, format, type, bufSize, table);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnConvolutionFilterArb;

/// ```c
/// GLAPI void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)
/// ```
void glGetnConvolutionFilterArb(
  int target,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> image,
) {
  final glGetnConvolutionFilterArbAsFunction = _glGetnConvolutionFilterArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> image,
        )
      >();
  return glGetnConvolutionFilterArbAsFunction(
    target,
    format,
    type,
    bufSize,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnSeparableFilterArb;

/// ```c
/// GLAPI void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)
/// ```
void glGetnSeparableFilterArb(
  int target,
  int format,
  int type,
  int rowBufSize,
  Pointer<NativeType> row,
  int columnBufSize,
  Pointer<NativeType> column,
  Pointer<NativeType> span,
) {
  final glGetnSeparableFilterArbAsFunction = _glGetnSeparableFilterArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Uint32 rowBufSize,
            Pointer<NativeType> row,
            Uint32 columnBufSize,
            Pointer<NativeType> column,
            Pointer<NativeType> span,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          int rowBufSize,
          Pointer<NativeType> row,
          int columnBufSize,
          Pointer<NativeType> column,
          Pointer<NativeType> span,
        )
      >();
  return glGetnSeparableFilterArbAsFunction(
    target,
    format,
    type,
    rowBufSize,
    row,
    columnBufSize,
    column,
    span,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnHistogramArb;

/// ```c
/// GLAPI void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
/// ```
void glGetnHistogramArb(
  int target,
  int reset,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> values,
) {
  final glGetnHistogramArbAsFunction = _glGetnHistogramArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> values,
        )
      >();
  return glGetnHistogramArbAsFunction(
    target,
    reset,
    format,
    type,
    bufSize,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetnMinmaxArb;

/// ```c
/// GLAPI void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
/// ```
void glGetnMinmaxArb(
  int target,
  int reset,
  int format,
  int type,
  int bufSize,
  Pointer<NativeType> values,
) {
  final glGetnMinmaxArbAsFunction = _glGetnMinmaxArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Uint32 bufSize,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          int bufSize,
          Pointer<NativeType> values,
        )
      >();
  return glGetnMinmaxArbAsFunction(
    target,
    reset,
    format,
    type,
    bufSize,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glFramebufferSampleLocationsfvArb;

/// ```c
/// GLAPI void APIENTRY glFramebufferSampleLocationsfvARB (GLenum target, GLuint start, GLsizei count, const GLfloat *v)
/// ```
void glFramebufferSampleLocationsfvArb(
  int target,
  int start,
  int count,
  Pointer<Float> v,
) {
  final glFramebufferSampleLocationsfvArbAsFunction =
      _glFramebufferSampleLocationsfvArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 start,
                Uint32 count,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(int target, int start, int count, Pointer<Float> v)
          >();
  return glFramebufferSampleLocationsfvArbAsFunction(target, start, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedFramebufferSampleLocationsfvArb;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvARB (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
/// ```
void glNamedFramebufferSampleLocationsfvArb(
  int framebuffer,
  int start,
  int count,
  Pointer<Float> v,
) {
  final glNamedFramebufferSampleLocationsfvArbAsFunction =
      _glNamedFramebufferSampleLocationsfvArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 start,
                Uint32 count,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int start,
              int count,
              Pointer<Float> v,
            )
          >();
  return glNamedFramebufferSampleLocationsfvArbAsFunction(
    framebuffer,
    start,
    count,
    v,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvaluateDepthValuesArb;

/// ```c
/// GLAPI void APIENTRY glEvaluateDepthValuesARB (void)
/// ```
void glEvaluateDepthValuesArb() {
  final glEvaluateDepthValuesArbAsFunction = _glEvaluateDepthValuesArb
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEvaluateDepthValuesArbAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMinSampleShadingArb;

/// ```c
/// GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value)
/// ```
void glMinSampleShadingArb(double value) {
  final glMinSampleShadingArbAsFunction = _glMinSampleShadingArb
      .cast<NativeFunction<Void Function(Float value)>>()
      .asFunction<void Function(double value)>();
  return glMinSampleShadingArbAsFunction(value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteObjectArb;

/// ```c
/// GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB obj)
/// ```
void glDeleteObjectArb(Pointer<NativeType> obj) {
  final glDeleteObjectArbAsFunction = _glDeleteObjectArb
      .cast<NativeFunction<Void Function(Pointer<NativeType> obj)>>()
      .asFunction<void Function(Pointer<NativeType> obj)>();
  return glDeleteObjectArbAsFunction(obj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHandleArb;

/// ```c
/// GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum pname)
/// ```
Pointer<NativeType> glGetHandleArb(int pname) {
  final glGetHandleArbAsFunction = _glGetHandleArb
      .cast<NativeFunction<Pointer<NativeType> Function(Uint32 pname)>>()
      .asFunction<Pointer<NativeType> Function(int pname)>();
  return glGetHandleArbAsFunction(pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDetachObjectArb;

/// ```c
/// GLAPI void APIENTRY glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj)
/// ```
void glDetachObjectArb(
  Pointer<NativeType> containerObj,
  Pointer<NativeType> attachedObj,
) {
  final glDetachObjectArbAsFunction = _glDetachObjectArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> containerObj,
            Pointer<NativeType> attachedObj,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> containerObj,
          Pointer<NativeType> attachedObj,
        )
      >();
  return glDetachObjectArbAsFunction(containerObj, attachedObj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateShaderObjectArb;

/// ```c
/// GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType)
/// ```
Pointer<NativeType> glCreateShaderObjectArb(int shaderType) {
  final glCreateShaderObjectArbAsFunction = _glCreateShaderObjectArb
      .cast<NativeFunction<Pointer<NativeType> Function(Uint32 shaderType)>>()
      .asFunction<Pointer<NativeType> Function(int shaderType)>();
  return glCreateShaderObjectArbAsFunction(shaderType);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderSourceArb;

/// ```c
/// GLAPI void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
/// ```
void glShaderSourceArb(
  Pointer<NativeType> shaderObj,
  int count,
  Pointer<Pointer<Int8>> string,
  Pointer<Int32> length,
) {
  final glShaderSourceArbAsFunction = _glShaderSourceArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> shaderObj,
            Uint32 count,
            Pointer<Pointer<Int8>> string,
            Pointer<Int32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> shaderObj,
          int count,
          Pointer<Pointer<Int8>> string,
          Pointer<Int32> length,
        )
      >();
  return glShaderSourceArbAsFunction(shaderObj, count, string, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompileShaderArb;

/// ```c
/// GLAPI void APIENTRY glCompileShaderARB (GLhandleARB shaderObj)
/// ```
void glCompileShaderArb(Pointer<NativeType> shaderObj) {
  final glCompileShaderArbAsFunction = _glCompileShaderArb
      .cast<NativeFunction<Void Function(Pointer<NativeType> shaderObj)>>()
      .asFunction<void Function(Pointer<NativeType> shaderObj)>();
  return glCompileShaderArbAsFunction(shaderObj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateProgramObjectArb;

/// ```c
/// GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB (void)
/// ```
Pointer<NativeType> glCreateProgramObjectArb() {
  final glCreateProgramObjectArbAsFunction = _glCreateProgramObjectArb
      .cast<NativeFunction<Pointer<NativeType> Function()>>()
      .asFunction<Pointer<NativeType> Function()>();
  return glCreateProgramObjectArbAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAttachObjectArb;

/// ```c
/// GLAPI void APIENTRY glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj)
/// ```
void glAttachObjectArb(
  Pointer<NativeType> containerObj,
  Pointer<NativeType> obj,
) {
  final glAttachObjectArbAsFunction = _glAttachObjectArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> containerObj,
            Pointer<NativeType> obj,
          )
        >
      >()
      .asFunction<
        void Function(Pointer<NativeType> containerObj, Pointer<NativeType> obj)
      >();
  return glAttachObjectArbAsFunction(containerObj, obj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLinkProgramArb;

/// ```c
/// GLAPI void APIENTRY glLinkProgramARB (GLhandleARB programObj)
/// ```
void glLinkProgramArb(Pointer<NativeType> programObj) {
  final glLinkProgramArbAsFunction = _glLinkProgramArb
      .cast<NativeFunction<Void Function(Pointer<NativeType> programObj)>>()
      .asFunction<void Function(Pointer<NativeType> programObj)>();
  return glLinkProgramArbAsFunction(programObj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUseProgramObjectArb;

/// ```c
/// GLAPI void APIENTRY glUseProgramObjectARB (GLhandleARB programObj)
/// ```
void glUseProgramObjectArb(Pointer<NativeType> programObj) {
  final glUseProgramObjectArbAsFunction = _glUseProgramObjectArb
      .cast<NativeFunction<Void Function(Pointer<NativeType> programObj)>>()
      .asFunction<void Function(Pointer<NativeType> programObj)>();
  return glUseProgramObjectArbAsFunction(programObj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glValidateProgramArb;

/// ```c
/// GLAPI void APIENTRY glValidateProgramARB (GLhandleARB programObj)
/// ```
void glValidateProgramArb(Pointer<NativeType> programObj) {
  final glValidateProgramArbAsFunction = _glValidateProgramArb
      .cast<NativeFunction<Void Function(Pointer<NativeType> programObj)>>()
      .asFunction<void Function(Pointer<NativeType> programObj)>();
  return glValidateProgramArbAsFunction(programObj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1fArb;

/// ```c
/// GLAPI void APIENTRY glUniform1fARB (GLint location, GLfloat v0)
/// ```
void glUniform1fArb(int location, double v0) {
  final glUniform1fArbAsFunction = _glUniform1fArb
      .cast<NativeFunction<Void Function(Int32 location, Float v0)>>()
      .asFunction<void Function(int location, double v0)>();
  return glUniform1fArbAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2fArb;

/// ```c
/// GLAPI void APIENTRY glUniform2fARB (GLint location, GLfloat v0, GLfloat v1)
/// ```
void glUniform2fArb(int location, double v0, double v1) {
  final glUniform2fArbAsFunction = _glUniform2fArb
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1)>>()
      .asFunction<void Function(int location, double v0, double v1)>();
  return glUniform2fArbAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3fArb;

/// ```c
/// GLAPI void APIENTRY glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
void glUniform3fArb(int location, double v0, double v1, double v2) {
  final glUniform3fArbAsFunction = _glUniform3fArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Float v0, Float v1, Float v2)
        >
      >()
      .asFunction<
        void Function(int location, double v0, double v1, double v2)
      >();
  return glUniform3fArbAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4fArb;

/// ```c
/// GLAPI void APIENTRY glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
void glUniform4fArb(int location, double v0, double v1, double v2, double v3) {
  final glUniform4fArbAsFunction = _glUniform4fArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3)
        >
      >()
      .asFunction<
        void Function(int location, double v0, double v1, double v2, double v3)
      >();
  return glUniform4fArbAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1iArb;

/// ```c
/// GLAPI void APIENTRY glUniform1iARB (GLint location, GLint v0)
/// ```
void glUniform1iArb(int location, int v0) {
  final glUniform1iArbAsFunction = _glUniform1iArb
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return glUniform1iArbAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2iArb;

/// ```c
/// GLAPI void APIENTRY glUniform2iARB (GLint location, GLint v0, GLint v1)
/// ```
void glUniform2iArb(int location, int v0, int v1) {
  final glUniform2iArbAsFunction = _glUniform2iArb
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return glUniform2iArbAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3iArb;

/// ```c
/// GLAPI void APIENTRY glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2)
/// ```
void glUniform3iArb(int location, int v0, int v1, int v2) {
  final glUniform3iArbAsFunction = _glUniform3iArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        >
      >()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return glUniform3iArbAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4iArb;

/// ```c
/// GLAPI void APIENTRY glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
void glUniform4iArb(int location, int v0, int v1, int v2, int v3) {
  final glUniform4iArbAsFunction = _glUniform4iArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        >
      >()
      .asFunction<
        void Function(int location, int v0, int v1, int v2, int v3)
      >();
  return glUniform4iArbAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1fvArb;

/// ```c
/// GLAPI void APIENTRY glUniform1fvARB (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform1fvArb(int location, int count, Pointer<Float> value) {
  final glUniform1fvArbAsFunction = _glUniform1fvArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform1fvArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2fvArb;

/// ```c
/// GLAPI void APIENTRY glUniform2fvARB (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform2fvArb(int location, int count, Pointer<Float> value) {
  final glUniform2fvArbAsFunction = _glUniform2fvArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform2fvArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3fvArb;

/// ```c
/// GLAPI void APIENTRY glUniform3fvARB (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform3fvArb(int location, int count, Pointer<Float> value) {
  final glUniform3fvArbAsFunction = _glUniform3fvArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform3fvArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4fvArb;

/// ```c
/// GLAPI void APIENTRY glUniform4fvARB (GLint location, GLsizei count, const GLfloat *value)
/// ```
void glUniform4fvArb(int location, int count, Pointer<Float> value) {
  final glUniform4fvArbAsFunction = _glUniform4fvArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Float> value)
      >();
  return glUniform4fvArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ivArb;

/// ```c
/// GLAPI void APIENTRY glUniform1ivARB (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform1ivArb(int location, int count, Pointer<Int32> value) {
  final glUniform1ivArbAsFunction = _glUniform1ivArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform1ivArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ivArb;

/// ```c
/// GLAPI void APIENTRY glUniform2ivARB (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform2ivArb(int location, int count, Pointer<Int32> value) {
  final glUniform2ivArbAsFunction = _glUniform2ivArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform2ivArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ivArb;

/// ```c
/// GLAPI void APIENTRY glUniform3ivARB (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform3ivArb(int location, int count, Pointer<Int32> value) {
  final glUniform3ivArbAsFunction = _glUniform3ivArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform3ivArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ivArb;

/// ```c
/// GLAPI void APIENTRY glUniform4ivARB (GLint location, GLsizei count, const GLint *value)
/// ```
void glUniform4ivArb(int location, int count, Pointer<Int32> value) {
  final glUniform4ivArbAsFunction = _glUniform4ivArb
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int32> value)
      >();
  return glUniform4ivArbAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix2fvArb;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix2fvArb(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix2fvArbAsFunction = _glUniformMatrix2fvArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix2fvArbAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix3fvArb;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix3fvArb(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix3fvArbAsFunction = _glUniformMatrix3fvArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix3fvArbAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformMatrix4fvArb;

/// ```c
/// GLAPI void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glUniformMatrix4fvArb(
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glUniformMatrix4fvArbAsFunction = _glUniformMatrix4fvArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glUniformMatrix4fvArbAsFunction(location, count, transpose, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectParameterfvArb;

/// ```c
/// GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params)
/// ```
void glGetObjectParameterfvArb(
  Pointer<NativeType> obj,
  int pname,
  Pointer<Float> params,
) {
  final glGetObjectParameterfvArbAsFunction = _glGetObjectParameterfvArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> obj,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(Pointer<NativeType> obj, int pname, Pointer<Float> params)
      >();
  return glGetObjectParameterfvArbAsFunction(obj, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectParameterivArb;

/// ```c
/// GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params)
/// ```
void glGetObjectParameterivArb(
  Pointer<NativeType> obj,
  int pname,
  Pointer<Int32> params,
) {
  final glGetObjectParameterivArbAsFunction = _glGetObjectParameterivArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> obj,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(Pointer<NativeType> obj, int pname, Pointer<Int32> params)
      >();
  return glGetObjectParameterivArbAsFunction(obj, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInfoLogArb;

/// ```c
/// GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
/// ```
void glGetInfoLogArb(
  Pointer<NativeType> obj,
  int maxLength,
  Pointer<Uint32> length,
  Pointer<Int8> infoLog,
) {
  final glGetInfoLogArbAsFunction = _glGetInfoLogArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> obj,
            Uint32 maxLength,
            Pointer<Uint32> length,
            Pointer<Int8> infoLog,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> obj,
          int maxLength,
          Pointer<Uint32> length,
          Pointer<Int8> infoLog,
        )
      >();
  return glGetInfoLogArbAsFunction(obj, maxLength, length, infoLog);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetAttachedObjectsArb;

/// ```c
/// GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
/// ```
void glGetAttachedObjectsArb(
  Pointer<NativeType> containerObj,
  int maxCount,
  Pointer<Uint32> count,
  Pointer<Pointer<NativeType>> obj,
) {
  final glGetAttachedObjectsArbAsFunction = _glGetAttachedObjectsArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> containerObj,
            Uint32 maxCount,
            Pointer<Uint32> count,
            Pointer<Pointer<NativeType>> obj,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> containerObj,
          int maxCount,
          Pointer<Uint32> count,
          Pointer<Pointer<NativeType>> obj,
        )
      >();
  return glGetAttachedObjectsArbAsFunction(containerObj, maxCount, count, obj);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformLocationArb;

/// ```c
/// GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name)
/// ```
int glGetUniformLocationArb(Pointer<NativeType> programObj, String name) {
  final glGetUniformLocationArbAsFunction = _glGetUniformLocationArb
      .cast<
        NativeFunction<
          Int32 Function(Pointer<NativeType> programObj, Pointer<Utf8> name)
        >
      >()
      .asFunction<
        int Function(Pointer<NativeType> programObj, Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetUniformLocationArbAsFunction(programObj, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveUniformArb;

/// ```c
/// GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
/// ```
void glGetActiveUniformArb(
  Pointer<NativeType> programObj,
  int index,
  int maxLength,
  Pointer<Uint32> length,
  Pointer<Int32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetActiveUniformArbAsFunction = _glGetActiveUniformArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> programObj,
            Uint32 index,
            Uint32 maxLength,
            Pointer<Uint32> length,
            Pointer<Int32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> programObj,
          int index,
          int maxLength,
          Pointer<Uint32> length,
          Pointer<Int32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveUniformArbAsFunction(
    programObj,
    index,
    maxLength,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformfvArb;

/// ```c
/// GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params)
/// ```
void glGetUniformfvArb(
  Pointer<NativeType> programObj,
  int location,
  Pointer<Float> params,
) {
  final glGetUniformfvArbAsFunction = _glGetUniformfvArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> programObj,
            Int32 location,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> programObj,
          int location,
          Pointer<Float> params,
        )
      >();
  return glGetUniformfvArbAsFunction(programObj, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformivArb;

/// ```c
/// GLAPI void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params)
/// ```
void glGetUniformivArb(
  Pointer<NativeType> programObj,
  int location,
  Pointer<Int32> params,
) {
  final glGetUniformivArbAsFunction = _glGetUniformivArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> programObj,
            Int32 location,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> programObj,
          int location,
          Pointer<Int32> params,
        )
      >();
  return glGetUniformivArbAsFunction(programObj, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShaderSourceArb;

/// ```c
/// GLAPI void APIENTRY glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
/// ```
void glGetShaderSourceArb(
  Pointer<NativeType> obj,
  int maxLength,
  Pointer<Uint32> length,
  Pointer<Int8> source,
) {
  final glGetShaderSourceArbAsFunction = _glGetShaderSourceArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> obj,
            Uint32 maxLength,
            Pointer<Uint32> length,
            Pointer<Int8> source,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> obj,
          int maxLength,
          Pointer<Uint32> length,
          Pointer<Int8> source,
        )
      >();
  return glGetShaderSourceArbAsFunction(obj, maxLength, length, source);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedStringArb;

/// ```c
/// GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
/// ```
void glNamedStringArb(
  int type,
  int namelen,
  String name,
  int stringlen,
  String string,
) {
  final glNamedStringArbAsFunction = _glNamedStringArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Int32 namelen,
            Pointer<Utf8> name,
            Int32 stringlen,
            Pointer<Utf8> string,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int namelen,
          Pointer<Utf8> name,
          int stringlen,
          Pointer<Utf8> string,
        )
      >();
  final namePointer = name.toNativeUtf8();
  final stringPointer = string.toNativeUtf8();
  final result = glNamedStringArbAsFunction(
    type,
    namelen,
    namePointer,
    stringlen,
    stringPointer,
  );
  calloc
    ..free(namePointer)
    ..free(stringPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteNamedStringArb;

/// ```c
/// GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name)
/// ```
void glDeleteNamedStringArb(int namelen, String name) {
  final glDeleteNamedStringArbAsFunction = _glDeleteNamedStringArb
      .cast<NativeFunction<Void Function(Int32 namelen, Pointer<Utf8> name)>>()
      .asFunction<void Function(int namelen, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glDeleteNamedStringArbAsFunction(namelen, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompileShaderIncludeArb;

/// ```c
/// GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)
/// ```
void glCompileShaderIncludeArb(
  int shader,
  int count,
  Pointer<Pointer<Int8>> path,
  Pointer<Int32> length,
) {
  final glCompileShaderIncludeArbAsFunction = _glCompileShaderIncludeArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 shader,
            Uint32 count,
            Pointer<Pointer<Int8>> path,
            Pointer<Int32> length,
          )
        >
      >()
      .asFunction<
        void Function(
          int shader,
          int count,
          Pointer<Pointer<Int8>> path,
          Pointer<Int32> length,
        )
      >();
  return glCompileShaderIncludeArbAsFunction(shader, count, path, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsNamedStringArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name)
/// ```
int glIsNamedStringArb(int namelen, String name) {
  final glIsNamedStringArbAsFunction = _glIsNamedStringArb
      .cast<NativeFunction<Int32 Function(Int32 namelen, Pointer<Utf8> name)>>()
      .asFunction<int Function(int namelen, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glIsNamedStringArbAsFunction(namelen, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedStringArb;

/// ```c
/// GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
/// ```
void glGetNamedStringArb(
  int namelen,
  String name,
  int bufSize,
  Pointer<Int32> stringlen,
  Pointer<Int8> string,
) {
  final glGetNamedStringArbAsFunction = _glGetNamedStringArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 namelen,
            Pointer<Utf8> name,
            Uint32 bufSize,
            Pointer<Int32> stringlen,
            Pointer<Int8> string,
          )
        >
      >()
      .asFunction<
        void Function(
          int namelen,
          Pointer<Utf8> name,
          int bufSize,
          Pointer<Int32> stringlen,
          Pointer<Int8> string,
        )
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetNamedStringArbAsFunction(
    namelen,
    namePointer,
    bufSize,
    stringlen,
    string,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedStringivArb;

/// ```c
/// GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params)
/// ```
void glGetNamedStringivArb(
  int namelen,
  String name,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedStringivArbAsFunction = _glGetNamedStringivArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 namelen,
            Pointer<Utf8> name,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int namelen,
          Pointer<Utf8> name,
          int pname,
          Pointer<Int32> params,
        )
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetNamedStringivArbAsFunction(
    namelen,
    namePointer,
    pname,
    params,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferPageCommitmentArb;

/// ```c
/// GLAPI void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
/// ```
void glBufferPageCommitmentArb(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int commit,
) {
  final glBufferPageCommitmentArbAsFunction = _glBufferPageCommitmentArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          int commit,
        )
      >();
  return glBufferPageCommitmentArbAsFunction(target, offset, size, commit);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferPageCommitmentExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
/// ```
void glNamedBufferPageCommitmentExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int commit,
) {
  final glNamedBufferPageCommitmentExtAsFunction =
      _glNamedBufferPageCommitmentExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> size,
                Int32 commit,
              )
            >
          >()
          .asFunction<
            void Function(
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> size,
              int commit,
            )
          >();
  return glNamedBufferPageCommitmentExtAsFunction(buffer, offset, size, commit);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferPageCommitmentArb;

/// ```c
/// GLAPI void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
/// ```
void glNamedBufferPageCommitmentArb(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int commit,
) {
  final glNamedBufferPageCommitmentArbAsFunction =
      _glNamedBufferPageCommitmentArb
          .cast<
            NativeFunction<
              Void Function(
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> size,
                Int32 commit,
              )
            >
          >()
          .asFunction<
            void Function(
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> size,
              int commit,
            )
          >();
  return glNamedBufferPageCommitmentArbAsFunction(buffer, offset, size, commit);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexPageCommitmentArb;

/// ```c
/// GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
/// ```
void glTexPageCommitmentArb(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int commit,
) {
  final glTexPageCommitmentArbAsFunction = _glTexPageCommitmentArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int commit,
        )
      >();
  return glTexPageCommitmentArbAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBufferArb;

/// ```c
/// GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer)
/// ```
void glTexBufferArb(int target, int internalformat, int buffer) {
  final glTexBufferArbAsFunction = _glTexBufferArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int internalformat, int buffer)>();
  return glTexBufferArbAsFunction(target, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage3Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexImage3Darb(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage3DarbAsFunction = _glCompressedTexImage3Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage3DarbAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage2Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexImage2Darb(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage2DarbAsFunction = _glCompressedTexImage2Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage2DarbAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage1Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexImage1Darb(
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage1DarbAsFunction = _glCompressedTexImage1Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage1DarbAsFunction(
    target,
    level,
    internalformat,
    width,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage3Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexSubImage3Darb(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage3DarbAsFunction = _glCompressedTexSubImage3Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage3DarbAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage2Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexSubImage2Darb(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage2DarbAsFunction = _glCompressedTexSubImage2Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage2DarbAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage1Darb;

/// ```c
/// GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
void glCompressedTexSubImage1Darb(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage1DarbAsFunction = _glCompressedTexSubImage1Darb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage1DarbAsFunction(
    target,
    level,
    xoffset,
    width,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedTexImageArb;

/// ```c
/// GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level, void *img)
/// ```
void glGetCompressedTexImageArb(
  int target,
  int level,
  Pointer<NativeType> img,
) {
  final glGetCompressedTexImageArbAsFunction = _glGetCompressedTexImageArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int32 level, Pointer<NativeType> img)
        >
      >()
      .asFunction<
        void Function(int target, int level, Pointer<NativeType> img)
      >();
  return glGetCompressedTexImageArbAsFunction(target, level, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadTransposeMatrixfArb;

/// ```c
/// GLAPI void APIENTRY glLoadTransposeMatrixfARB (const GLfloat *m)
/// ```
void glLoadTransposeMatrixfArb(Pointer<Float> m) {
  final glLoadTransposeMatrixfArbAsFunction = _glLoadTransposeMatrixfArb
      .cast<NativeFunction<Void Function(Pointer<Float> m)>>()
      .asFunction<void Function(Pointer<Float> m)>();
  return glLoadTransposeMatrixfArbAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadTransposeMatrixdArb;

/// ```c
/// GLAPI void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *m)
/// ```
void glLoadTransposeMatrixdArb(Pointer<Double> m) {
  final glLoadTransposeMatrixdArbAsFunction = _glLoadTransposeMatrixdArb
      .cast<NativeFunction<Void Function(Pointer<Double> m)>>()
      .asFunction<void Function(Pointer<Double> m)>();
  return glLoadTransposeMatrixdArbAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultTransposeMatrixfArb;

/// ```c
/// GLAPI void APIENTRY glMultTransposeMatrixfARB (const GLfloat *m)
/// ```
void glMultTransposeMatrixfArb(Pointer<Float> m) {
  final glMultTransposeMatrixfArbAsFunction = _glMultTransposeMatrixfArb
      .cast<NativeFunction<Void Function(Pointer<Float> m)>>()
      .asFunction<void Function(Pointer<Float> m)>();
  return glMultTransposeMatrixfArbAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultTransposeMatrixdArb;

/// ```c
/// GLAPI void APIENTRY glMultTransposeMatrixdARB (const GLdouble *m)
/// ```
void glMultTransposeMatrixdArb(Pointer<Double> m) {
  final glMultTransposeMatrixdArbAsFunction = _glMultTransposeMatrixdArb
      .cast<NativeFunction<Void Function(Pointer<Double> m)>>()
      .asFunction<void Function(Pointer<Double> m)>();
  return glMultTransposeMatrixdArbAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightbvArb;

/// ```c
/// GLAPI void APIENTRY glWeightbvARB (GLint size, const GLbyte *weights)
/// ```
void glWeightbvArb(int size, String weights) {
  final glWeightbvArbAsFunction = _glWeightbvArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Utf8> weights)>>()
      .asFunction<void Function(int size, Pointer<Utf8> weights)>();
  final weightsPointer = weights.toNativeUtf8();
  final result = glWeightbvArbAsFunction(size, weightsPointer);
  calloc.free(weightsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightsvArb;

/// ```c
/// GLAPI void APIENTRY glWeightsvARB (GLint size, const GLshort *weights)
/// ```
void glWeightsvArb(int size, Pointer<Int16> weights) {
  final glWeightsvArbAsFunction = _glWeightsvArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Int16> weights)>>()
      .asFunction<void Function(int size, Pointer<Int16> weights)>();
  return glWeightsvArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightivArb;

/// ```c
/// GLAPI void APIENTRY glWeightivARB (GLint size, const GLint *weights)
/// ```
void glWeightivArb(int size, Pointer<Int32> weights) {
  final glWeightivArbAsFunction = _glWeightivArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Int32> weights)>>()
      .asFunction<void Function(int size, Pointer<Int32> weights)>();
  return glWeightivArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightfvArb;

/// ```c
/// GLAPI void APIENTRY glWeightfvARB (GLint size, const GLfloat *weights)
/// ```
void glWeightfvArb(int size, Pointer<Float> weights) {
  final glWeightfvArbAsFunction = _glWeightfvArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Float> weights)>>()
      .asFunction<void Function(int size, Pointer<Float> weights)>();
  return glWeightfvArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightdvArb;

/// ```c
/// GLAPI void APIENTRY glWeightdvARB (GLint size, const GLdouble *weights)
/// ```
void glWeightdvArb(int size, Pointer<Double> weights) {
  final glWeightdvArbAsFunction = _glWeightdvArb
      .cast<
        NativeFunction<Void Function(Int32 size, Pointer<Double> weights)>
      >()
      .asFunction<void Function(int size, Pointer<Double> weights)>();
  return glWeightdvArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightubvArb;

/// ```c
/// GLAPI void APIENTRY glWeightubvARB (GLint size, const GLubyte *weights)
/// ```
void glWeightubvArb(int size, Pointer<Uint8> weights) {
  final glWeightubvArbAsFunction = _glWeightubvArb
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint8> weights)>>()
      .asFunction<void Function(int size, Pointer<Uint8> weights)>();
  return glWeightubvArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightusvArb;

/// ```c
/// GLAPI void APIENTRY glWeightusvARB (GLint size, const GLushort *weights)
/// ```
void glWeightusvArb(int size, Pointer<Uint16> weights) {
  final glWeightusvArbAsFunction = _glWeightusvArb
      .cast<
        NativeFunction<Void Function(Int32 size, Pointer<Uint16> weights)>
      >()
      .asFunction<void Function(int size, Pointer<Uint16> weights)>();
  return glWeightusvArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightuivArb;

/// ```c
/// GLAPI void APIENTRY glWeightuivARB (GLint size, const GLuint *weights)
/// ```
void glWeightuivArb(int size, Pointer<Uint32> weights) {
  final glWeightuivArbAsFunction = _glWeightuivArb
      .cast<
        NativeFunction<Void Function(Int32 size, Pointer<Uint32> weights)>
      >()
      .asFunction<void Function(int size, Pointer<Uint32> weights)>();
  return glWeightuivArbAsFunction(size, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightPointerArb;

/// ```c
/// GLAPI void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glWeightPointerArb(
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glWeightPointerArbAsFunction = _glWeightPointerArb
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glWeightPointerArbAsFunction(size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexBlendArb;

/// ```c
/// GLAPI void APIENTRY glVertexBlendARB (GLint count)
/// ```
void glVertexBlendArb(int count) {
  final glVertexBlendArbAsFunction = _glVertexBlendArb
      .cast<NativeFunction<Void Function(Int32 count)>>()
      .asFunction<void Function(int count)>();
  return glVertexBlendArbAsFunction(count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferArb;

/// ```c
/// GLAPI void APIENTRY glBindBufferARB (GLenum target, GLuint buffer)
/// ```
void glBindBufferArb(int target, int buffer) {
  final glBindBufferArbAsFunction = _glBindBufferArb
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer)>>()
      .asFunction<void Function(int target, int buffer)>();
  return glBindBufferArbAsFunction(target, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteBuffersArb;

/// ```c
/// GLAPI void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers)
/// ```
void glDeleteBuffersArb(int n, Pointer<Uint32> buffers) {
  final glDeleteBuffersArbAsFunction = _glDeleteBuffersArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> buffers)>();
  return glDeleteBuffersArbAsFunction(n, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenBuffersArb;

/// ```c
/// GLAPI void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers)
/// ```
void glGenBuffersArb(int n, Pointer<Uint32> buffers) {
  final glGenBuffersArbAsFunction = _glGenBuffersArb
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32> buffers)>();
  return glGenBuffersArbAsFunction(n, buffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsBufferArb;

/// ```c
/// GLAPI GLboolean APIENTRY glIsBufferARB (GLuint buffer)
/// ```
int glIsBufferArb(int buffer) {
  final glIsBufferArbAsFunction = _glIsBufferArb
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glIsBufferArbAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferDataArb;

/// ```c
/// GLAPI void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)
/// ```
void glBufferDataArb(
  int target,
  Pointer<NativeType> size,
  Pointer<NativeType> data,
  int usage,
) {
  final glBufferDataArbAsFunction = _glBufferDataArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> size,
            Pointer<NativeType> data,
            Uint32 usage,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> size,
          Pointer<NativeType> data,
          int usage,
        )
      >();
  return glBufferDataArbAsFunction(target, size, data, usage);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferSubDataArb;

/// ```c
/// GLAPI void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)
/// ```
void glBufferSubDataArb(
  int target,
  int offset,
  Pointer<NativeType> size,
  Pointer<NativeType> data,
) {
  final glBufferSubDataArbAsFunction = _glBufferSubDataArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint64 offset,
            Pointer<NativeType> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int offset,
          Pointer<NativeType> size,
          Pointer<NativeType> data,
        )
      >();
  return glBufferSubDataArbAsFunction(target, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferSubDataArb;

/// ```c
/// GLAPI void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)
/// ```
void glGetBufferSubDataArb(
  int target,
  int offset,
  Pointer<NativeType> size,
  Pointer<NativeType> data,
) {
  final glGetBufferSubDataArbAsFunction = _glGetBufferSubDataArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint64 offset,
            Pointer<NativeType> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int offset,
          Pointer<NativeType> size,
          Pointer<NativeType> data,
        )
      >();
  return glGetBufferSubDataArbAsFunction(target, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapBufferArb;

/// ```c
/// GLAPI void *APIENTRY glMapBufferARB (GLenum target, GLenum access)
/// ```
Pointer<NativeType> glMapBufferArb(int target, int access) {
  final glMapBufferArbAsFunction = _glMapBufferArb
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 target, Uint32 access)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int target, int access)>();
  return glMapBufferArbAsFunction(target, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapBufferArb;

/// ```c
/// GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum target)
/// ```
int glUnmapBufferArb(int target) {
  final glUnmapBufferArbAsFunction = _glUnmapBufferArb
      .cast<NativeFunction<Int32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return glUnmapBufferArbAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferParameterivArb;

/// ```c
/// GLAPI void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetBufferParameterivArb(int target, int pname, Pointer<Int32> params) {
  final glGetBufferParameterivArbAsFunction = _glGetBufferParameterivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetBufferParameterivArbAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferPointervArb;

/// ```c
/// GLAPI void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname, void **params)
/// ```
void glGetBufferPointervArb(
  int target,
  int pname,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetBufferPointervArbAsFunction = _glGetBufferPointervArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 pname,
            Pointer<Pointer<NativeType>> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int pname,
          Pointer<Pointer<NativeType>> params,
        )
      >();
  return glGetBufferPointervArbAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1dArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1dARB (GLuint index, GLdouble x)
/// ```
void glVertexAttrib1dArb(int index, double x) {
  final glVertexAttrib1dArbAsFunction = _glVertexAttrib1dArb
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1dArbAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1dvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1dvARB (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib1dvArb(int index, Pointer<Double> v) {
  final glVertexAttrib1dvArbAsFunction = _glVertexAttrib1dvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib1dvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1fArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1fARB (GLuint index, GLfloat x)
/// ```
void glVertexAttrib1fArb(int index, double x) {
  final glVertexAttrib1fArbAsFunction = _glVertexAttrib1fArb
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1fArbAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1fvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1fvARB (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib1fvArb(int index, Pointer<Float> v) {
  final glVertexAttrib1fvArbAsFunction = _glVertexAttrib1fvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib1fvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1sArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1sARB (GLuint index, GLshort x)
/// ```
void glVertexAttrib1sArb(int index, int x) {
  final glVertexAttrib1sArbAsFunction = _glVertexAttrib1sArb
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttrib1sArbAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1svArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1svARB (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib1svArb(int index, Pointer<Int16> v) {
  final glVertexAttrib1svArbAsFunction = _glVertexAttrib1svArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib1svArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2dArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y)
/// ```
void glVertexAttrib2dArb(int index, double x, double y) {
  final glVertexAttrib2dArbAsFunction = _glVertexAttrib2dArb
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2dArbAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2dvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2dvARB (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib2dvArb(int index, Pointer<Double> v) {
  final glVertexAttrib2dvArbAsFunction = _glVertexAttrib2dvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib2dvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2fArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y)
/// ```
void glVertexAttrib2fArb(int index, double x, double y) {
  final glVertexAttrib2fArbAsFunction = _glVertexAttrib2fArb
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2fArbAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2fvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2fvARB (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib2fvArb(int index, Pointer<Float> v) {
  final glVertexAttrib2fvArbAsFunction = _glVertexAttrib2fvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib2fvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2sArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y)
/// ```
void glVertexAttrib2sArb(int index, int x, int y) {
  final glVertexAttrib2sArbAsFunction = _glVertexAttrib2sArb
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttrib2sArbAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2svArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2svARB (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib2svArb(int index, Pointer<Int16> v) {
  final glVertexAttrib2svArbAsFunction = _glVertexAttrib2svArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib2svArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3dArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexAttrib3dArb(int index, double x, double y, double z) {
  final glVertexAttrib3dArbAsFunction = _glVertexAttrib3dArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3dArbAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3dvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3dvARB (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib3dvArb(int index, Pointer<Double> v) {
  final glVertexAttrib3dvArbAsFunction = _glVertexAttrib3dvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib3dvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3fArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glVertexAttrib3fArb(int index, double x, double y, double z) {
  final glVertexAttrib3fArbAsFunction = _glVertexAttrib3fArb
      .cast<
        NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3fArbAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3fvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3fvARB (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib3fvArb(int index, Pointer<Float> v) {
  final glVertexAttrib3fvArbAsFunction = _glVertexAttrib3fvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib3fvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3sArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
void glVertexAttrib3sArb(int index, int x, int y, int z) {
  final glVertexAttrib3sArbAsFunction = _glVertexAttrib3sArb
      .cast<
        NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttrib3sArbAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3svArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3svARB (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib3svArb(int index, Pointer<Int16> v) {
  final glVertexAttrib3svArbAsFunction = _glVertexAttrib3svArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib3svArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NbvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NbvARB (GLuint index, const GLbyte *v)
/// ```
void glVertexAttrib4NbvArb(int index, String v) {
  final glVertexAttrib4NbvArbAsFunction = _glVertexAttrib4NbvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttrib4NbvArbAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NivArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NivARB (GLuint index, const GLint *v)
/// ```
void glVertexAttrib4NivArb(int index, Pointer<Int32> v) {
  final glVertexAttrib4NivArbAsFunction = _glVertexAttrib4NivArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttrib4NivArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NsvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NsvARB (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib4NsvArb(int index, Pointer<Int16> v) {
  final glVertexAttrib4NsvArbAsFunction = _glVertexAttrib4NsvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib4NsvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NubArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
void glVertexAttrib4NubArb(int index, int x, int y, int z, int w) {
  final glVertexAttrib4NubArbAsFunction = _glVertexAttrib4NubArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4NubArbAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NubvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NubvARB (GLuint index, const GLubyte *v)
/// ```
void glVertexAttrib4NubvArb(int index, Pointer<Uint8> v) {
  final glVertexAttrib4NubvArbAsFunction = _glVertexAttrib4NubvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttrib4NubvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NuivArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NuivARB (GLuint index, const GLuint *v)
/// ```
void glVertexAttrib4NuivArb(int index, Pointer<Uint32> v) {
  final glVertexAttrib4NuivArbAsFunction = _glVertexAttrib4NuivArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttrib4NuivArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4NusvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4NusvARB (GLuint index, const GLushort *v)
/// ```
void glVertexAttrib4NusvArb(int index, Pointer<Uint16> v) {
  final glVertexAttrib4NusvArbAsFunction = _glVertexAttrib4NusvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib4NusvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4bvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4bvARB (GLuint index, const GLbyte *v)
/// ```
void glVertexAttrib4bvArb(int index, String v) {
  final glVertexAttrib4bvArbAsFunction = _glVertexAttrib4bvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttrib4bvArbAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4dArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexAttrib4dArb(int index, double x, double y, double z, double w) {
  final glVertexAttrib4dArbAsFunction = _glVertexAttrib4dArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4dArbAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4dvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4dvARB (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib4dvArb(int index, Pointer<Double> v) {
  final glVertexAttrib4dvArbAsFunction = _glVertexAttrib4dvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib4dvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4fArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glVertexAttrib4fArb(int index, double x, double y, double z, double w) {
  final glVertexAttrib4fArbAsFunction = _glVertexAttrib4fArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Float x, Float y, Float z, Float w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4fArbAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4fvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4fvARB (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib4fvArb(int index, Pointer<Float> v) {
  final glVertexAttrib4fvArbAsFunction = _glVertexAttrib4fvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib4fvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4ivArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4ivARB (GLuint index, const GLint *v)
/// ```
void glVertexAttrib4ivArb(int index, Pointer<Int32> v) {
  final glVertexAttrib4ivArbAsFunction = _glVertexAttrib4ivArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttrib4ivArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4sArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
void glVertexAttrib4sArb(int index, int x, int y, int z, int w) {
  final glVertexAttrib4sArbAsFunction = _glVertexAttrib4sArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4sArbAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4svArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4svARB (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib4svArb(int index, Pointer<Int16> v) {
  final glVertexAttrib4svArbAsFunction = _glVertexAttrib4svArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib4svArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4ubvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4ubvARB (GLuint index, const GLubyte *v)
/// ```
void glVertexAttrib4ubvArb(int index, Pointer<Uint8> v) {
  final glVertexAttrib4ubvArbAsFunction = _glVertexAttrib4ubvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttrib4ubvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4uivArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v)
/// ```
void glVertexAttrib4uivArb(int index, Pointer<Uint32> v) {
  final glVertexAttrib4uivArbAsFunction = _glVertexAttrib4uivArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttrib4uivArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4usvArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort *v)
/// ```
void glVertexAttrib4usvArb(int index, Pointer<Uint16> v) {
  final glVertexAttrib4usvArbAsFunction = _glVertexAttrib4usvArb
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib4usvArbAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribPointerArb;

/// ```c
/// GLAPI void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribPointerArb(
  int index,
  int size,
  int type,
  int normalized,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribPointerArbAsFunction = _glVertexAttribPointerArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int normalized,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribPointerArbAsFunction(
    index,
    size,
    type,
    normalized,
    stride,
    pointer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexAttribArrayArb;

/// ```c
/// GLAPI void APIENTRY glEnableVertexAttribArrayARB (GLuint index)
/// ```
void glEnableVertexAttribArrayArb(int index) {
  final glEnableVertexAttribArrayArbAsFunction = _glEnableVertexAttribArrayArb
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glEnableVertexAttribArrayArbAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexAttribArrayArb;

/// ```c
/// GLAPI void APIENTRY glDisableVertexAttribArrayARB (GLuint index)
/// ```
void glDisableVertexAttribArrayArb(int index) {
  final glDisableVertexAttribArrayArbAsFunction = _glDisableVertexAttribArrayArb
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glDisableVertexAttribArrayArbAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribdvArb;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetVertexAttribdvArb(int index, int pname, Pointer<Double> params) {
  final glGetVertexAttribdvArbAsFunction = _glGetVertexAttribdvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Double> params)
      >();
  return glGetVertexAttribdvArbAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribfvArb;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetVertexAttribfvArb(int index, int pname, Pointer<Float> params) {
  final glGetVertexAttribfvArbAsFunction = _glGetVertexAttribfvArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Float> params)>();
  return glGetVertexAttribfvArbAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribivArb;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribivArb(int index, int pname, Pointer<Int32> params) {
  final glGetVertexAttribivArbAsFunction = _glGetVertexAttribivArb
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int32> params)>();
  return glGetVertexAttribivArbAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribPointervArb;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum pname, void **pointer)
/// ```
void glGetVertexAttribPointervArb(
  int index,
  int pname,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glGetVertexAttribPointervArbAsFunction = _glGetVertexAttribPointervArb
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 pname,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int pname,
          Pointer<Pointer<NativeType>> pointer,
        )
      >();
  return glGetVertexAttribPointervArbAsFunction(index, pname, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindAttribLocationArb;

/// ```c
/// GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name)
/// ```
void glBindAttribLocationArb(
  Pointer<NativeType> programObj,
  int index,
  String name,
) {
  final glBindAttribLocationArbAsFunction = _glBindAttribLocationArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> programObj,
            Uint32 index,
            Pointer<Utf8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> programObj,
          int index,
          Pointer<Utf8> name,
        )
      >();
  final namePointer = name.toNativeUtf8();
  final result = glBindAttribLocationArbAsFunction(
    programObj,
    index,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveAttribArb;

/// ```c
/// GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
/// ```
void glGetActiveAttribArb(
  Pointer<NativeType> programObj,
  int index,
  int maxLength,
  Pointer<Uint32> length,
  Pointer<Int32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetActiveAttribArbAsFunction = _glGetActiveAttribArb
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> programObj,
            Uint32 index,
            Uint32 maxLength,
            Pointer<Uint32> length,
            Pointer<Int32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> programObj,
          int index,
          int maxLength,
          Pointer<Uint32> length,
          Pointer<Int32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveAttribArbAsFunction(
    programObj,
    index,
    maxLength,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetAttribLocationArb;

/// ```c
/// GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name)
/// ```
int glGetAttribLocationArb(Pointer<NativeType> programObj, String name) {
  final glGetAttribLocationArbAsFunction = _glGetAttribLocationArb
      .cast<
        NativeFunction<
          Int32 Function(Pointer<NativeType> programObj, Pointer<Utf8> name)
        >
      >()
      .asFunction<
        int Function(Pointer<NativeType> programObj, Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetAttribLocationArbAsFunction(programObj, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangeArraydvNv;

/// ```c
/// GLAPI void APIENTRY glDepthRangeArraydvNV (GLuint first, GLsizei count, const GLdouble *v)
/// ```
void glDepthRangeArraydvNv(int first, int count, Pointer<Double> v) {
  final glDepthRangeArraydvNvAsFunction = _glDepthRangeArraydvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int first, int count, Pointer<Double> v)>();
  return glDepthRangeArraydvNvAsFunction(first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangeIndexeddNv;

/// ```c
/// GLAPI void APIENTRY glDepthRangeIndexeddNV (GLuint index, GLdouble n, GLdouble f)
/// ```
void glDepthRangeIndexeddNv(int index, double n, double f) {
  final glDepthRangeIndexeddNvAsFunction = _glDepthRangeIndexeddNv
      .cast<NativeFunction<Void Function(Uint32 index, Double n, Double f)>>()
      .asFunction<void Function(int index, double n, double f)>();
  return glDepthRangeIndexeddNvAsFunction(index, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2dArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2dARB (GLdouble x, GLdouble y)
/// ```
void glWindowPos2dArb(double x, double y) {
  final glWindowPos2dArbAsFunction = _glWindowPos2dArb
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2dArbAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2dvArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2dvARB (const GLdouble *v)
/// ```
void glWindowPos2dvArb(Pointer<Double> v) {
  final glWindowPos2dvArbAsFunction = _glWindowPos2dvArb
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos2dvArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2fArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2fARB (GLfloat x, GLfloat y)
/// ```
void glWindowPos2fArb(double x, double y) {
  final glWindowPos2fArbAsFunction = _glWindowPos2fArb
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2fArbAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2fvArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2fvARB (const GLfloat *v)
/// ```
void glWindowPos2fvArb(Pointer<Float> v) {
  final glWindowPos2fvArbAsFunction = _glWindowPos2fvArb
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos2fvArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2iArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2iARB (GLint x, GLint y)
/// ```
void glWindowPos2iArb(int x, int y) {
  final glWindowPos2iArbAsFunction = _glWindowPos2iArb
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2iArbAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2ivArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2ivARB (const GLint *v)
/// ```
void glWindowPos2ivArb(Pointer<Int32> v) {
  final glWindowPos2ivArbAsFunction = _glWindowPos2ivArb
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos2ivArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2sArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2sARB (GLshort x, GLshort y)
/// ```
void glWindowPos2sArb(int x, int y) {
  final glWindowPos2sArbAsFunction = _glWindowPos2sArb
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2sArbAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2svArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos2svARB (const GLshort *v)
/// ```
void glWindowPos2svArb(Pointer<Int16> v) {
  final glWindowPos2svArbAsFunction = _glWindowPos2svArb
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos2svArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3dArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z)
/// ```
void glWindowPos3dArb(double x, double y, double z) {
  final glWindowPos3dArbAsFunction = _glWindowPos3dArb
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3dArbAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3dvArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3dvARB (const GLdouble *v)
/// ```
void glWindowPos3dvArb(Pointer<Double> v) {
  final glWindowPos3dvArbAsFunction = _glWindowPos3dvArb
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos3dvArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3fArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z)
/// ```
void glWindowPos3fArb(double x, double y, double z) {
  final glWindowPos3fArbAsFunction = _glWindowPos3fArb
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3fArbAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3fvArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3fvARB (const GLfloat *v)
/// ```
void glWindowPos3fvArb(Pointer<Float> v) {
  final glWindowPos3fvArbAsFunction = _glWindowPos3fvArb
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos3fvArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3iArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3iARB (GLint x, GLint y, GLint z)
/// ```
void glWindowPos3iArb(int x, int y, int z) {
  final glWindowPos3iArbAsFunction = _glWindowPos3iArb
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3iArbAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3ivArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3ivARB (const GLint *v)
/// ```
void glWindowPos3ivArb(Pointer<Int32> v) {
  final glWindowPos3ivArbAsFunction = _glWindowPos3ivArb
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos3ivArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3sArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3sARB (GLshort x, GLshort y, GLshort z)
/// ```
void glWindowPos3sArb(int x, int y, int z) {
  final glWindowPos3sArbAsFunction = _glWindowPos3sArb
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3sArbAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3svArb;

/// ```c
/// GLAPI void APIENTRY glWindowPos3svARB (const GLshort *v)
/// ```
void glWindowPos3svArb(Pointer<Int16> v) {
  final glWindowPos3svArbAsFunction = _glWindowPos3svArb
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos3svArbAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendBarrierKhr;

/// ```c
/// GLAPI void APIENTRY glBlendBarrierKHR (void)
/// ```
void glBlendBarrierKhr() {
  final glBlendBarrierKhrAsFunction = _glBlendBarrierKhr
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glBlendBarrierKhrAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaxShaderCompilerThreadsKhr;

/// ```c
/// GLAPI void APIENTRY glMaxShaderCompilerThreadsKHR (GLuint count)
/// ```
void glMaxShaderCompilerThreadsKhr(int count) {
  final glMaxShaderCompilerThreadsKhrAsFunction = _glMaxShaderCompilerThreadsKhr
      .cast<NativeFunction<Void Function(Uint32 count)>>()
      .asFunction<void Function(int count)>();
  return glMaxShaderCompilerThreadsKhrAsFunction(count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1bOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1bOES (GLenum texture, GLbyte s)
/// ```
void glMultiTexCoord1bOes(int texture, int s) {
  final glMultiTexCoord1bOesAsFunction = _glMultiTexCoord1bOes
      .cast<NativeFunction<Void Function(Uint32 texture, Int8 s)>>()
      .asFunction<void Function(int texture, int s)>();
  return glMultiTexCoord1bOesAsFunction(texture, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1bvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1bvOES (GLenum texture, const GLbyte *coords)
/// ```
void glMultiTexCoord1bvOes(int texture, String coords) {
  final glMultiTexCoord1bvOesAsFunction = _glMultiTexCoord1bvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Utf8> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glMultiTexCoord1bvOesAsFunction(texture, coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2bOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte t)
/// ```
void glMultiTexCoord2bOes(int texture, int s, int t) {
  final glMultiTexCoord2bOesAsFunction = _glMultiTexCoord2bOes
      .cast<NativeFunction<Void Function(Uint32 texture, Int8 s, Int8 t)>>()
      .asFunction<void Function(int texture, int s, int t)>();
  return glMultiTexCoord2bOesAsFunction(texture, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2bvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2bvOES (GLenum texture, const GLbyte *coords)
/// ```
void glMultiTexCoord2bvOes(int texture, String coords) {
  final glMultiTexCoord2bvOesAsFunction = _glMultiTexCoord2bvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Utf8> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glMultiTexCoord2bvOesAsFunction(texture, coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3bOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r)
/// ```
void glMultiTexCoord3bOes(int texture, int s, int t, int r) {
  final glMultiTexCoord3bOesAsFunction = _glMultiTexCoord3bOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Int8 s, Int8 t, Int8 r)>
      >()
      .asFunction<void Function(int texture, int s, int t, int r)>();
  return glMultiTexCoord3bOesAsFunction(texture, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3bvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3bvOES (GLenum texture, const GLbyte *coords)
/// ```
void glMultiTexCoord3bvOes(int texture, String coords) {
  final glMultiTexCoord3bvOesAsFunction = _glMultiTexCoord3bvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Utf8> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glMultiTexCoord3bvOesAsFunction(texture, coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4bOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
/// ```
void glMultiTexCoord4bOes(int texture, int s, int t, int r, int q) {
  final glMultiTexCoord4bOesAsFunction = _glMultiTexCoord4bOes
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Int8 s, Int8 t, Int8 r, Int8 q)
        >
      >()
      .asFunction<void Function(int texture, int s, int t, int r, int q)>();
  return glMultiTexCoord4bOesAsFunction(texture, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4bvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4bvOES (GLenum texture, const GLbyte *coords)
/// ```
void glMultiTexCoord4bvOes(int texture, String coords) {
  final glMultiTexCoord4bvOesAsFunction = _glMultiTexCoord4bvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Utf8> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glMultiTexCoord4bvOesAsFunction(texture, coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1bOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord1bOES (GLbyte s)
/// ```
void glTexCoord1bOes(int s) {
  final glTexCoord1bOesAsFunction = _glTexCoord1bOes
      .cast<NativeFunction<Void Function(Int8 s)>>()
      .asFunction<void Function(int s)>();
  return glTexCoord1bOesAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1bvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord1bvOES (const GLbyte *coords)
/// ```
void glTexCoord1bvOes(String coords) {
  final glTexCoord1bvOesAsFunction = _glTexCoord1bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glTexCoord1bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2bOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord2bOES (GLbyte s, GLbyte t)
/// ```
void glTexCoord2bOes(int s, int t) {
  final glTexCoord2bOesAsFunction = _glTexCoord2bOes
      .cast<NativeFunction<Void Function(Int8 s, Int8 t)>>()
      .asFunction<void Function(int s, int t)>();
  return glTexCoord2bOesAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2bvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord2bvOES (const GLbyte *coords)
/// ```
void glTexCoord2bvOes(String coords) {
  final glTexCoord2bvOesAsFunction = _glTexCoord2bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glTexCoord2bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3bOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r)
/// ```
void glTexCoord3bOes(int s, int t, int r) {
  final glTexCoord3bOesAsFunction = _glTexCoord3bOes
      .cast<NativeFunction<Void Function(Int8 s, Int8 t, Int8 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return glTexCoord3bOesAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3bvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord3bvOES (const GLbyte *coords)
/// ```
void glTexCoord3bvOes(String coords) {
  final glTexCoord3bvOesAsFunction = _glTexCoord3bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glTexCoord3bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4bOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte q)
/// ```
void glTexCoord4bOes(int s, int t, int r, int q) {
  final glTexCoord4bOesAsFunction = _glTexCoord4bOes
      .cast<NativeFunction<Void Function(Int8 s, Int8 t, Int8 r, Int8 q)>>()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return glTexCoord4bOesAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4bvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord4bvOES (const GLbyte *coords)
/// ```
void glTexCoord4bvOes(String coords) {
  final glTexCoord4bvOesAsFunction = _glTexCoord4bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glTexCoord4bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2bOes;

/// ```c
/// GLAPI void APIENTRY glVertex2bOES (GLbyte x, GLbyte y)
/// ```
void glVertex2bOes(int x, int y) {
  final glVertex2bOesAsFunction = _glVertex2bOes
      .cast<NativeFunction<Void Function(Int8 x, Int8 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glVertex2bOesAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2bvOes;

/// ```c
/// GLAPI void APIENTRY glVertex2bvOES (const GLbyte *coords)
/// ```
void glVertex2bvOes(String coords) {
  final glVertex2bvOesAsFunction = _glVertex2bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glVertex2bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3bOes;

/// ```c
/// GLAPI void APIENTRY glVertex3bOES (GLbyte x, GLbyte y, GLbyte z)
/// ```
void glVertex3bOes(int x, int y, int z) {
  final glVertex3bOesAsFunction = _glVertex3bOes
      .cast<NativeFunction<Void Function(Int8 x, Int8 y, Int8 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glVertex3bOesAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3bvOes;

/// ```c
/// GLAPI void APIENTRY glVertex3bvOES (const GLbyte *coords)
/// ```
void glVertex3bvOes(String coords) {
  final glVertex3bvOesAsFunction = _glVertex3bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glVertex3bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4bOes;

/// ```c
/// GLAPI void APIENTRY glVertex4bOES (GLbyte x, GLbyte y, GLbyte z, GLbyte w)
/// ```
void glVertex4bOes(int x, int y, int z, int w) {
  final glVertex4bOesAsFunction = _glVertex4bOes
      .cast<NativeFunction<Void Function(Int8 x, Int8 y, Int8 z, Int8 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glVertex4bOesAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4bvOes;

/// ```c
/// GLAPI void APIENTRY glVertex4bvOES (const GLbyte *coords)
/// ```
void glVertex4bvOes(String coords) {
  final glVertex4bvOesAsFunction = _glVertex4bvOes
      .cast<NativeFunction<Void Function(Pointer<Utf8> coords)>>()
      .asFunction<void Function(Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glVertex4bvOesAsFunction(coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaFuncxOes;

/// ```c
/// GLAPI void APIENTRY glAlphaFuncxOES (GLenum func, GLfixed ref)
/// ```
void glAlphaFuncxOes(int func, int ref) {
  final glAlphaFuncxOesAsFunction = _glAlphaFuncxOes
      .cast<NativeFunction<Void Function(Uint32 func, Int32 ref)>>()
      .asFunction<void Function(int func, int ref)>();
  return glAlphaFuncxOesAsFunction(func, ref);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearColorxOes;

/// ```c
/// GLAPI void APIENTRY glClearColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
/// ```
void glClearColorxOes(int red, int green, int blue, int alpha) {
  final glClearColorxOesAsFunction = _glClearColorxOes
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glClearColorxOesAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearDepthxOes;

/// ```c
/// GLAPI void APIENTRY glClearDepthxOES (GLfixed depth)
/// ```
void glClearDepthxOes(int depth) {
  final glClearDepthxOesAsFunction = _glClearDepthxOes
      .cast<NativeFunction<Void Function(Int32 depth)>>()
      .asFunction<void Function(int depth)>();
  return glClearDepthxOesAsFunction(depth);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClipPlanexOes;

/// ```c
/// GLAPI void APIENTRY glClipPlanexOES (GLenum plane, const GLfixed *equation)
/// ```
void glClipPlanexOes(int plane, Pointer<Int32> equation) {
  final glClipPlanexOesAsFunction = _glClipPlanexOes
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Int32> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Int32> equation)>();
  return glClipPlanexOesAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4xOes;

/// ```c
/// GLAPI void APIENTRY glColor4xOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
/// ```
void glColor4xOes(int red, int green, int blue, int alpha) {
  final glColor4xOesAsFunction = _glColor4xOes
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4xOesAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangexOes;

/// ```c
/// GLAPI void APIENTRY glDepthRangexOES (GLfixed n, GLfixed f)
/// ```
void glDepthRangexOes(int n, int f) {
  final glDepthRangexOesAsFunction = _glDepthRangexOes
      .cast<NativeFunction<Void Function(Int32 n, Int32 f)>>()
      .asFunction<void Function(int n, int f)>();
  return glDepthRangexOesAsFunction(n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogxOes;

/// ```c
/// GLAPI void APIENTRY glFogxOES (GLenum pname, GLfixed param)
/// ```
void glFogxOes(int pname, int param) {
  final glFogxOesAsFunction = _glFogxOes
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glFogxOesAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogxvOes;

/// ```c
/// GLAPI void APIENTRY glFogxvOES (GLenum pname, const GLfixed *param)
/// ```
void glFogxvOes(int pname, Pointer<Int32> param) {
  final glFogxvOesAsFunction = _glFogxvOes
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32> param)>>()
      .asFunction<void Function(int pname, Pointer<Int32> param)>();
  return glFogxvOesAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrustumxOes;

/// ```c
/// GLAPI void APIENTRY glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
/// ```
void glFrustumxOes(int l, int r, int b, int t, int n, int f) {
  final glFrustumxOesAsFunction = _glFrustumxOes
      .cast<
        NativeFunction<
          Void Function(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
        >
      >()
      .asFunction<void Function(int l, int r, int b, int t, int n, int f)>();
  return glFrustumxOesAsFunction(l, r, b, t, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetClipPlanexOes;

/// ```c
/// GLAPI void APIENTRY glGetClipPlanexOES (GLenum plane, GLfixed *equation)
/// ```
void glGetClipPlanexOes(int plane, Pointer<Int32> equation) {
  final glGetClipPlanexOesAsFunction = _glGetClipPlanexOes
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Int32> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Int32> equation)>();
  return glGetClipPlanexOesAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFixedvOes;

/// ```c
/// GLAPI void APIENTRY glGetFixedvOES (GLenum pname, GLfixed *params)
/// ```
void glGetFixedvOes(int pname, Pointer<Int32> params) {
  final glGetFixedvOesAsFunction = _glGetFixedvOes
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glGetFixedvOesAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexEnvxvOes;

/// ```c
/// GLAPI void APIENTRY glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed *params)
/// ```
void glGetTexEnvxvOes(int target, int pname, Pointer<Int32> params) {
  final glGetTexEnvxvOesAsFunction = _glGetTexEnvxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexEnvxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterxvOES (GLenum target, GLenum pname, GLfixed *params)
/// ```
void glGetTexParameterxvOes(int target, int pname, Pointer<Int32> params) {
  final glGetTexParameterxvOesAsFunction = _glGetTexParameterxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexParameterxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModelxOes;

/// ```c
/// GLAPI void APIENTRY glLightModelxOES (GLenum pname, GLfixed param)
/// ```
void glLightModelxOes(int pname, int param) {
  final glLightModelxOesAsFunction = _glLightModelxOes
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glLightModelxOesAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModelxvOes;

/// ```c
/// GLAPI void APIENTRY glLightModelxvOES (GLenum pname, const GLfixed *param)
/// ```
void glLightModelxvOes(int pname, Pointer<Int32> param) {
  final glLightModelxvOesAsFunction = _glLightModelxvOes
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32> param)>>()
      .asFunction<void Function(int pname, Pointer<Int32> param)>();
  return glLightModelxvOesAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightxOes;

/// ```c
/// GLAPI void APIENTRY glLightxOES (GLenum light, GLenum pname, GLfixed param)
/// ```
void glLightxOes(int light, int pname, int param) {
  final glLightxOesAsFunction = _glLightxOes
      .cast<
        NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int light, int pname, int param)>();
  return glLightxOesAsFunction(light, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightxvOes;

/// ```c
/// GLAPI void APIENTRY glLightxvOES (GLenum light, GLenum pname, const GLfixed *params)
/// ```
void glLightxvOes(int light, int pname, Pointer<Int32> params) {
  final glLightxvOesAsFunction = _glLightxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glLightxvOesAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLineWidthxOes;

/// ```c
/// GLAPI void APIENTRY glLineWidthxOES (GLfixed width)
/// ```
void glLineWidthxOes(int width) {
  final glLineWidthxOesAsFunction = _glLineWidthxOes
      .cast<NativeFunction<Void Function(Int32 width)>>()
      .asFunction<void Function(int width)>();
  return glLineWidthxOesAsFunction(width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadMatrixxOes;

/// ```c
/// GLAPI void APIENTRY glLoadMatrixxOES (const GLfixed *m)
/// ```
void glLoadMatrixxOes(Pointer<Int32> m) {
  final glLoadMatrixxOesAsFunction = _glLoadMatrixxOes
      .cast<NativeFunction<Void Function(Pointer<Int32> m)>>()
      .asFunction<void Function(Pointer<Int32> m)>();
  return glLoadMatrixxOesAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaterialxOes;

/// ```c
/// GLAPI void APIENTRY glMaterialxOES (GLenum face, GLenum pname, GLfixed param)
/// ```
void glMaterialxOes(int face, int pname, int param) {
  final glMaterialxOesAsFunction = _glMaterialxOes
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int face, int pname, int param)>();
  return glMaterialxOesAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaterialxvOes;

/// ```c
/// GLAPI void APIENTRY glMaterialxvOES (GLenum face, GLenum pname, const GLfixed *param)
/// ```
void glMaterialxvOes(int face, int pname, Pointer<Int32> param) {
  final glMaterialxvOesAsFunction = _glMaterialxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Int32> param)>();
  return glMaterialxvOesAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultMatrixxOes;

/// ```c
/// GLAPI void APIENTRY glMultMatrixxOES (const GLfixed *m)
/// ```
void glMultMatrixxOes(Pointer<Int32> m) {
  final glMultMatrixxOesAsFunction = _glMultMatrixxOes
      .cast<NativeFunction<Void Function(Pointer<Int32> m)>>()
      .asFunction<void Function(Pointer<Int32> m)>();
  return glMultMatrixxOesAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4xOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
/// ```
void glMultiTexCoord4xOes(int texture, int s, int t, int r, int q) {
  final glMultiTexCoord4xOesAsFunction = _glMultiTexCoord4xOes
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Int32 s, Int32 t, Int32 r, Int32 q)
        >
      >()
      .asFunction<void Function(int texture, int s, int t, int r, int q)>();
  return glMultiTexCoord4xOesAsFunction(texture, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3xOes;

/// ```c
/// GLAPI void APIENTRY glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz)
/// ```
void glNormal3xOes(int nx, int ny, int nz) {
  final glNormal3xOesAsFunction = _glNormal3xOes
      .cast<NativeFunction<Void Function(Int32 nx, Int32 ny, Int32 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return glNormal3xOesAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glOrthoxOes;

/// ```c
/// GLAPI void APIENTRY glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
/// ```
void glOrthoxOes(int l, int r, int b, int t, int n, int f) {
  final glOrthoxOesAsFunction = _glOrthoxOes
      .cast<
        NativeFunction<
          Void Function(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
        >
      >()
      .asFunction<void Function(int l, int r, int b, int t, int n, int f)>();
  return glOrthoxOesAsFunction(l, r, b, t, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glPointParameterxvOES (GLenum pname, const GLfixed *params)
/// ```
void glPointParameterxvOes(int pname, Pointer<Int32> params) {
  final glPointParameterxvOesAsFunction = _glPointParameterxvOes
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glPointParameterxvOesAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointSizexOes;

/// ```c
/// GLAPI void APIENTRY glPointSizexOES (GLfixed size)
/// ```
void glPointSizexOes(int size) {
  final glPointSizexOesAsFunction = _glPointSizexOes
      .cast<NativeFunction<Void Function(Int32 size)>>()
      .asFunction<void Function(int size)>();
  return glPointSizexOesAsFunction(size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonOffsetxOes;

/// ```c
/// GLAPI void APIENTRY glPolygonOffsetxOES (GLfixed factor, GLfixed units)
/// ```
void glPolygonOffsetxOes(int factor, int units) {
  final glPolygonOffsetxOesAsFunction = _glPolygonOffsetxOes
      .cast<NativeFunction<Void Function(Int32 factor, Int32 units)>>()
      .asFunction<void Function(int factor, int units)>();
  return glPolygonOffsetxOesAsFunction(factor, units);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRotatexOes;

/// ```c
/// GLAPI void APIENTRY glRotatexOES (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
/// ```
void glRotatexOes(int angle, int x, int y, int z) {
  final glRotatexOesAsFunction = _glRotatexOes
      .cast<
        NativeFunction<Void Function(Int32 angle, Int32 x, Int32 y, Int32 z)>
      >()
      .asFunction<void Function(int angle, int x, int y, int z)>();
  return glRotatexOesAsFunction(angle, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScalexOes;

/// ```c
/// GLAPI void APIENTRY glScalexOES (GLfixed x, GLfixed y, GLfixed z)
/// ```
void glScalexOes(int x, int y, int z) {
  final glScalexOesAsFunction = _glScalexOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glScalexOesAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnvxOes;

/// ```c
/// GLAPI void APIENTRY glTexEnvxOES (GLenum target, GLenum pname, GLfixed param)
/// ```
void glTexEnvxOes(int target, int pname, int param) {
  final glTexEnvxOesAsFunction = _glTexEnvxOes
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glTexEnvxOesAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnvxvOes;

/// ```c
/// GLAPI void APIENTRY glTexEnvxvOES (GLenum target, GLenum pname, const GLfixed *params)
/// ```
void glTexEnvxvOes(int target, int pname, Pointer<Int32> params) {
  final glTexEnvxvOesAsFunction = _glTexEnvxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexEnvxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterxOes;

/// ```c
/// GLAPI void APIENTRY glTexParameterxOES (GLenum target, GLenum pname, GLfixed param)
/// ```
void glTexParameterxOes(int target, int pname, int param) {
  final glTexParameterxOesAsFunction = _glTexParameterxOes
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glTexParameterxOesAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glTexParameterxvOES (GLenum target, GLenum pname, const GLfixed *params)
/// ```
void glTexParameterxvOes(int target, int pname, Pointer<Int32> params) {
  final glTexParameterxvOesAsFunction = _glTexParameterxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexParameterxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTranslatexOes;

/// ```c
/// GLAPI void APIENTRY glTranslatexOES (GLfixed x, GLfixed y, GLfixed z)
/// ```
void glTranslatexOes(int x, int y, int z) {
  final glTranslatexOesAsFunction = _glTranslatexOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glTranslatexOesAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAccumxOes;

/// ```c
/// GLAPI void APIENTRY glAccumxOES (GLenum op, GLfixed value)
/// ```
void glAccumxOes(int op, int value) {
  final glAccumxOesAsFunction = _glAccumxOes
      .cast<NativeFunction<Void Function(Uint32 op, Int32 value)>>()
      .asFunction<void Function(int op, int value)>();
  return glAccumxOesAsFunction(op, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBitmapxOes;

/// ```c
/// GLAPI void APIENTRY glBitmapxOES (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap)
/// ```
void glBitmapxOes(
  int width,
  int height,
  int xorig,
  int yorig,
  int xmove,
  int ymove,
  Pointer<Uint8> bitmap,
) {
  final glBitmapxOesAsFunction = _glBitmapxOes
      .cast<
        NativeFunction<
          Void Function(
            Uint32 width,
            Uint32 height,
            Int32 xorig,
            Int32 yorig,
            Int32 xmove,
            Int32 ymove,
            Pointer<Uint8> bitmap,
          )
        >
      >()
      .asFunction<
        void Function(
          int width,
          int height,
          int xorig,
          int yorig,
          int xmove,
          int ymove,
          Pointer<Uint8> bitmap,
        )
      >();
  return glBitmapxOesAsFunction(
    width,
    height,
    xorig,
    yorig,
    xmove,
    ymove,
    bitmap,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendColorxOes;

/// ```c
/// GLAPI void APIENTRY glBlendColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
/// ```
void glBlendColorxOes(int red, int green, int blue, int alpha) {
  final glBlendColorxOesAsFunction = _glBlendColorxOes
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glBlendColorxOesAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearAccumxOes;

/// ```c
/// GLAPI void APIENTRY glClearAccumxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
/// ```
void glClearAccumxOes(int red, int green, int blue, int alpha) {
  final glClearAccumxOesAsFunction = _glClearAccumxOes
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glClearAccumxOesAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3xOes;

/// ```c
/// GLAPI void APIENTRY glColor3xOES (GLfixed red, GLfixed green, GLfixed blue)
/// ```
void glColor3xOes(int red, int green, int blue) {
  final glColor3xOesAsFunction = _glColor3xOes
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3xOesAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3xvOes;

/// ```c
/// GLAPI void APIENTRY glColor3xvOES (const GLfixed *components)
/// ```
void glColor3xvOes(Pointer<Int32> components) {
  final glColor3xvOesAsFunction = _glColor3xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> components)>>()
      .asFunction<void Function(Pointer<Int32> components)>();
  return glColor3xvOesAsFunction(components);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4xvOes;

/// ```c
/// GLAPI void APIENTRY glColor4xvOES (const GLfixed *components)
/// ```
void glColor4xvOes(Pointer<Int32> components) {
  final glColor4xvOesAsFunction = _glColor4xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> components)>>()
      .asFunction<void Function(Pointer<Int32> components)>();
  return glColor4xvOesAsFunction(components);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterxOes;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameterxOES (GLenum target, GLenum pname, GLfixed param)
/// ```
void glConvolutionParameterxOes(int target, int pname, int param) {
  final glConvolutionParameterxOesAsFunction = _glConvolutionParameterxOes
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glConvolutionParameterxOesAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameterxvOES (GLenum target, GLenum pname, const GLfixed *params)
/// ```
void glConvolutionParameterxvOes(int target, int pname, Pointer<Int32> params) {
  final glConvolutionParameterxvOesAsFunction = _glConvolutionParameterxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glConvolutionParameterxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1xOes;

/// ```c
/// GLAPI void APIENTRY glEvalCoord1xOES (GLfixed u)
/// ```
void glEvalCoord1xOes(int u) {
  final glEvalCoord1xOesAsFunction = _glEvalCoord1xOes
      .cast<NativeFunction<Void Function(Int32 u)>>()
      .asFunction<void Function(int u)>();
  return glEvalCoord1xOesAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1xvOes;

/// ```c
/// GLAPI void APIENTRY glEvalCoord1xvOES (const GLfixed *coords)
/// ```
void glEvalCoord1xvOes(Pointer<Int32> coords) {
  final glEvalCoord1xvOesAsFunction = _glEvalCoord1xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glEvalCoord1xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2xOes;

/// ```c
/// GLAPI void APIENTRY glEvalCoord2xOES (GLfixed u, GLfixed v)
/// ```
void glEvalCoord2xOes(int u, int v) {
  final glEvalCoord2xOesAsFunction = _glEvalCoord2xOes
      .cast<NativeFunction<Void Function(Int32 u, Int32 v)>>()
      .asFunction<void Function(int u, int v)>();
  return glEvalCoord2xOesAsFunction(u, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2xvOes;

/// ```c
/// GLAPI void APIENTRY glEvalCoord2xvOES (const GLfixed *coords)
/// ```
void glEvalCoord2xvOes(Pointer<Int32> coords) {
  final glEvalCoord2xvOesAsFunction = _glEvalCoord2xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glEvalCoord2xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFeedbackBufferxOes;

/// ```c
/// GLAPI void APIENTRY glFeedbackBufferxOES (GLsizei n, GLenum type, const GLfixed *buffer)
/// ```
void glFeedbackBufferxOes(int n, int type, Pointer<Int32> buffer) {
  final glFeedbackBufferxOesAsFunction = _glFeedbackBufferxOes
      .cast<
        NativeFunction<
          Void Function(Uint32 n, Uint32 type, Pointer<Int32> buffer)
        >
      >()
      .asFunction<void Function(int n, int type, Pointer<Int32> buffer)>();
  return glFeedbackBufferxOesAsFunction(n, type, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glGetConvolutionParameterxvOES (GLenum target, GLenum pname, GLfixed *params)
/// ```
void glGetConvolutionParameterxvOes(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetConvolutionParameterxvOesAsFunction =
      _glGetConvolutionParameterxvOes
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetConvolutionParameterxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glGetHistogramParameterxvOES (GLenum target, GLenum pname, GLfixed *params)
/// ```
void glGetHistogramParameterxvOes(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetHistogramParameterxvOesAsFunction = _glGetHistogramParameterxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetHistogramParameterxvOesAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLightxOes;

/// ```c
/// GLAPI void APIENTRY glGetLightxOES (GLenum light, GLenum pname, GLfixed *params)
/// ```
void glGetLightxOes(int light, int pname, Pointer<Int32> params) {
  final glGetLightxOesAsFunction = _glGetLightxOes
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glGetLightxOesAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapxvOes;

/// ```c
/// GLAPI void APIENTRY glGetMapxvOES (GLenum target, GLenum query, GLfixed *v)
/// ```
void glGetMapxvOes(int target, int query, Pointer<Int32> v) {
  final glGetMapxvOesAsFunction = _glGetMapxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 query, Pointer<Int32> v)
        >
      >()
      .asFunction<void Function(int target, int query, Pointer<Int32> v)>();
  return glGetMapxvOesAsFunction(target, query, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMaterialxOes;

/// ```c
/// GLAPI void APIENTRY glGetMaterialxOES (GLenum face, GLenum pname, GLfixed param)
/// ```
void glGetMaterialxOes(int face, int pname, int param) {
  final glGetMaterialxOesAsFunction = _glGetMaterialxOes
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int face, int pname, int param)>();
  return glGetMaterialxOesAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelMapxv;

/// ```c
/// GLAPI void APIENTRY glGetPixelMapxv (GLenum map, GLint size, GLfixed *values)
/// ```
void glGetPixelMapxv(int map, int size, Pointer<Int32> values) {
  final glGetPixelMapxvAsFunction = _glGetPixelMapxv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Int32 size, Pointer<Int32> values)
        >
      >()
      .asFunction<void Function(int map, int size, Pointer<Int32> values)>();
  return glGetPixelMapxvAsFunction(map, size, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexGenxvOes;

/// ```c
/// GLAPI void APIENTRY glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed *params)
/// ```
void glGetTexGenxvOes(int coord, int pname, Pointer<Int32> params) {
  final glGetTexGenxvOesAsFunction = _glGetTexGenxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Int32> params)>();
  return glGetTexGenxvOesAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexLevelParameterxvOes;

/// ```c
/// GLAPI void APIENTRY glGetTexLevelParameterxvOES (GLenum target, GLint level, GLenum pname, GLfixed *params)
/// ```
void glGetTexLevelParameterxvOes(
  int target,
  int level,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTexLevelParameterxvOesAsFunction = _glGetTexLevelParameterxvOes
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int level, int pname, Pointer<Int32> params)
      >();
  return glGetTexLevelParameterxvOesAsFunction(target, level, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexxOes;

/// ```c
/// GLAPI void APIENTRY glIndexxOES (GLfixed component)
/// ```
void glIndexxOes(int component) {
  final glIndexxOesAsFunction = _glIndexxOes
      .cast<NativeFunction<Void Function(Int32 component)>>()
      .asFunction<void Function(int component)>();
  return glIndexxOesAsFunction(component);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexxvOes;

/// ```c
/// GLAPI void APIENTRY glIndexxvOES (const GLfixed *component)
/// ```
void glIndexxvOes(Pointer<Int32> component) {
  final glIndexxvOesAsFunction = _glIndexxvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> component)>>()
      .asFunction<void Function(Pointer<Int32> component)>();
  return glIndexxvOesAsFunction(component);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadTransposeMatrixxOes;

/// ```c
/// GLAPI void APIENTRY glLoadTransposeMatrixxOES (const GLfixed *m)
/// ```
void glLoadTransposeMatrixxOes(Pointer<Int32> m) {
  final glLoadTransposeMatrixxOesAsFunction = _glLoadTransposeMatrixxOes
      .cast<NativeFunction<Void Function(Pointer<Int32> m)>>()
      .asFunction<void Function(Pointer<Int32> m)>();
  return glLoadTransposeMatrixxOesAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap1xOes;

/// ```c
/// GLAPI void APIENTRY glMap1xOES (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
/// ```
void glMap1xOes(int target, int u1, int u2, int stride, int order, int points) {
  final glMap1xOesAsFunction = _glMap1xOes
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 u1,
            Int32 u2,
            Int32 stride,
            Int32 order,
            Int32 points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int u1,
          int u2,
          int stride,
          int order,
          int points,
        )
      >();
  return glMap1xOesAsFunction(target, u1, u2, stride, order, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap2xOes;

/// ```c
/// GLAPI void APIENTRY glMap2xOES (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
/// ```
void glMap2xOes(
  int target,
  int u1,
  int u2,
  int ustride,
  int uorder,
  int v1,
  int v2,
  int vstride,
  int vorder,
  int points,
) {
  final glMap2xOesAsFunction = _glMap2xOes
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 u1,
            Int32 u2,
            Int32 ustride,
            Int32 uorder,
            Int32 v1,
            Int32 v2,
            Int32 vstride,
            Int32 vorder,
            Int32 points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int u1,
          int u2,
          int ustride,
          int uorder,
          int v1,
          int v2,
          int vstride,
          int vorder,
          int points,
        )
      >();
  return glMap2xOesAsFunction(
    target,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid1xOes;

/// ```c
/// GLAPI void APIENTRY glMapGrid1xOES (GLint n, GLfixed u1, GLfixed u2)
/// ```
void glMapGrid1xOes(int n, int u1, int u2) {
  final glMapGrid1xOesAsFunction = _glMapGrid1xOes
      .cast<NativeFunction<Void Function(Int32 n, Int32 u1, Int32 u2)>>()
      .asFunction<void Function(int n, int u1, int u2)>();
  return glMapGrid1xOesAsFunction(n, u1, u2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid2xOes;

/// ```c
/// GLAPI void APIENTRY glMapGrid2xOES (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
/// ```
void glMapGrid2xOes(int n, int u1, int u2, int v1, int v2) {
  final glMapGrid2xOesAsFunction = _glMapGrid2xOes
      .cast<
        NativeFunction<
          Void Function(Int32 n, Int32 u1, Int32 u2, Int32 v1, Int32 v2)
        >
      >()
      .asFunction<void Function(int n, int u1, int u2, int v1, int v2)>();
  return glMapGrid2xOesAsFunction(n, u1, u2, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultTransposeMatrixxOes;

/// ```c
/// GLAPI void APIENTRY glMultTransposeMatrixxOES (const GLfixed *m)
/// ```
void glMultTransposeMatrixxOes(Pointer<Int32> m) {
  final glMultTransposeMatrixxOesAsFunction = _glMultTransposeMatrixxOes
      .cast<NativeFunction<Void Function(Pointer<Int32> m)>>()
      .asFunction<void Function(Pointer<Int32> m)>();
  return glMultTransposeMatrixxOesAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1xOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1xOES (GLenum texture, GLfixed s)
/// ```
void glMultiTexCoord1xOes(int texture, int s) {
  final glMultiTexCoord1xOesAsFunction = _glMultiTexCoord1xOes
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 s)>>()
      .asFunction<void Function(int texture, int s)>();
  return glMultiTexCoord1xOesAsFunction(texture, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1xvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1xvOES (GLenum texture, const GLfixed *coords)
/// ```
void glMultiTexCoord1xvOes(int texture, Pointer<Int32> coords) {
  final glMultiTexCoord1xvOesAsFunction = _glMultiTexCoord1xvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Int32> coords)>();
  return glMultiTexCoord1xvOesAsFunction(texture, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2xOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2xOES (GLenum texture, GLfixed s, GLfixed t)
/// ```
void glMultiTexCoord2xOes(int texture, int s, int t) {
  final glMultiTexCoord2xOesAsFunction = _glMultiTexCoord2xOes
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 s, Int32 t)>>()
      .asFunction<void Function(int texture, int s, int t)>();
  return glMultiTexCoord2xOesAsFunction(texture, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2xvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2xvOES (GLenum texture, const GLfixed *coords)
/// ```
void glMultiTexCoord2xvOes(int texture, Pointer<Int32> coords) {
  final glMultiTexCoord2xvOesAsFunction = _glMultiTexCoord2xvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Int32> coords)>();
  return glMultiTexCoord2xvOesAsFunction(texture, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3xOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r)
/// ```
void glMultiTexCoord3xOes(int texture, int s, int t, int r) {
  final glMultiTexCoord3xOesAsFunction = _glMultiTexCoord3xOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Int32 s, Int32 t, Int32 r)>
      >()
      .asFunction<void Function(int texture, int s, int t, int r)>();
  return glMultiTexCoord3xOesAsFunction(texture, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3xvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3xvOES (GLenum texture, const GLfixed *coords)
/// ```
void glMultiTexCoord3xvOes(int texture, Pointer<Int32> coords) {
  final glMultiTexCoord3xvOesAsFunction = _glMultiTexCoord3xvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Int32> coords)>();
  return glMultiTexCoord3xvOesAsFunction(texture, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4xvOes;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4xvOES (GLenum texture, const GLfixed *coords)
/// ```
void glMultiTexCoord4xvOes(int texture, Pointer<Int32> coords) {
  final glMultiTexCoord4xvOesAsFunction = _glMultiTexCoord4xvOes
      .cast<
        NativeFunction<Void Function(Uint32 texture, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int texture, Pointer<Int32> coords)>();
  return glMultiTexCoord4xvOesAsFunction(texture, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3xvOes;

/// ```c
/// GLAPI void APIENTRY glNormal3xvOES (const GLfixed *coords)
/// ```
void glNormal3xvOes(Pointer<Int32> coords) {
  final glNormal3xvOesAsFunction = _glNormal3xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glNormal3xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPassThroughxOes;

/// ```c
/// GLAPI void APIENTRY glPassThroughxOES (GLfixed token)
/// ```
void glPassThroughxOes(int token) {
  final glPassThroughxOesAsFunction = _glPassThroughxOes
      .cast<NativeFunction<Void Function(Int32 token)>>()
      .asFunction<void Function(int token)>();
  return glPassThroughxOesAsFunction(token);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelMapx;

/// ```c
/// GLAPI void APIENTRY glPixelMapx (GLenum map, GLint size, const GLfixed *values)
/// ```
void glPixelMapx(int map, int size, Pointer<Int32> values) {
  final glPixelMapxAsFunction = _glPixelMapx
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Int32 size, Pointer<Int32> values)
        >
      >()
      .asFunction<void Function(int map, int size, Pointer<Int32> values)>();
  return glPixelMapxAsFunction(map, size, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelStorex;

/// ```c
/// GLAPI void APIENTRY glPixelStorex (GLenum pname, GLfixed param)
/// ```
void glPixelStorex(int pname, int param) {
  final glPixelStorexAsFunction = _glPixelStorex
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPixelStorexAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransferxOes;

/// ```c
/// GLAPI void APIENTRY glPixelTransferxOES (GLenum pname, GLfixed param)
/// ```
void glPixelTransferxOes(int pname, int param) {
  final glPixelTransferxOesAsFunction = _glPixelTransferxOes
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPixelTransferxOesAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelZoomxOes;

/// ```c
/// GLAPI void APIENTRY glPixelZoomxOES (GLfixed xfactor, GLfixed yfactor)
/// ```
void glPixelZoomxOes(int xfactor, int yfactor) {
  final glPixelZoomxOesAsFunction = _glPixelZoomxOes
      .cast<NativeFunction<Void Function(Int32 xfactor, Int32 yfactor)>>()
      .asFunction<void Function(int xfactor, int yfactor)>();
  return glPixelZoomxOesAsFunction(xfactor, yfactor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrioritizeTexturesxOes;

/// ```c
/// GLAPI void APIENTRY glPrioritizeTexturesxOES (GLsizei n, const GLuint *textures, const GLfixed *priorities)
/// ```
void glPrioritizeTexturesxOes(
  int n,
  Pointer<Uint32> textures,
  Pointer<Int32> priorities,
) {
  final glPrioritizeTexturesxOesAsFunction = _glPrioritizeTexturesxOes
      .cast<
        NativeFunction<
          Void Function(
            Uint32 n,
            Pointer<Uint32> textures,
            Pointer<Int32> priorities,
          )
        >
      >()
      .asFunction<
        void Function(
          int n,
          Pointer<Uint32> textures,
          Pointer<Int32> priorities,
        )
      >();
  return glPrioritizeTexturesxOesAsFunction(n, textures, priorities);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2xOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos2xOES (GLfixed x, GLfixed y)
/// ```
void glRasterPos2xOes(int x, int y) {
  final glRasterPos2xOesAsFunction = _glRasterPos2xOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glRasterPos2xOesAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2xvOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos2xvOES (const GLfixed *coords)
/// ```
void glRasterPos2xvOes(Pointer<Int32> coords) {
  final glRasterPos2xvOesAsFunction = _glRasterPos2xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glRasterPos2xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3xOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos3xOES (GLfixed x, GLfixed y, GLfixed z)
/// ```
void glRasterPos3xOes(int x, int y, int z) {
  final glRasterPos3xOesAsFunction = _glRasterPos3xOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glRasterPos3xOesAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3xvOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos3xvOES (const GLfixed *coords)
/// ```
void glRasterPos3xvOes(Pointer<Int32> coords) {
  final glRasterPos3xvOesAsFunction = _glRasterPos3xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glRasterPos3xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4xOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos4xOES (GLfixed x, GLfixed y, GLfixed z, GLfixed w)
/// ```
void glRasterPos4xOes(int x, int y, int z, int w) {
  final glRasterPos4xOesAsFunction = _glRasterPos4xOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glRasterPos4xOesAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4xvOes;

/// ```c
/// GLAPI void APIENTRY glRasterPos4xvOES (const GLfixed *coords)
/// ```
void glRasterPos4xvOes(Pointer<Int32> coords) {
  final glRasterPos4xvOesAsFunction = _glRasterPos4xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glRasterPos4xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectxOes;

/// ```c
/// GLAPI void APIENTRY glRectxOES (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
/// ```
void glRectxOes(int x1, int y1, int x2, int y2) {
  final glRectxOesAsFunction = _glRectxOes
      .cast<
        NativeFunction<Void Function(Int32 x1, Int32 y1, Int32 x2, Int32 y2)>
      >()
      .asFunction<void Function(int x1, int y1, int x2, int y2)>();
  return glRectxOesAsFunction(x1, y1, x2, y2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectxvOes;

/// ```c
/// GLAPI void APIENTRY glRectxvOES (const GLfixed *v1, const GLfixed *v2)
/// ```
void glRectxvOes(Pointer<Int32> v1, Pointer<Int32> v2) {
  final glRectxvOesAsFunction = _glRectxvOes
      .cast<
        NativeFunction<Void Function(Pointer<Int32> v1, Pointer<Int32> v2)>
      >()
      .asFunction<void Function(Pointer<Int32> v1, Pointer<Int32> v2)>();
  return glRectxvOesAsFunction(v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1xOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord1xOES (GLfixed s)
/// ```
void glTexCoord1xOes(int s) {
  final glTexCoord1xOesAsFunction = _glTexCoord1xOes
      .cast<NativeFunction<Void Function(Int32 s)>>()
      .asFunction<void Function(int s)>();
  return glTexCoord1xOesAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1xvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord1xvOES (const GLfixed *coords)
/// ```
void glTexCoord1xvOes(Pointer<Int32> coords) {
  final glTexCoord1xvOesAsFunction = _glTexCoord1xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glTexCoord1xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2xOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord2xOES (GLfixed s, GLfixed t)
/// ```
void glTexCoord2xOes(int s, int t) {
  final glTexCoord2xOesAsFunction = _glTexCoord2xOes
      .cast<NativeFunction<Void Function(Int32 s, Int32 t)>>()
      .asFunction<void Function(int s, int t)>();
  return glTexCoord2xOesAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2xvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord2xvOES (const GLfixed *coords)
/// ```
void glTexCoord2xvOes(Pointer<Int32> coords) {
  final glTexCoord2xvOesAsFunction = _glTexCoord2xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glTexCoord2xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3xOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord3xOES (GLfixed s, GLfixed t, GLfixed r)
/// ```
void glTexCoord3xOes(int s, int t, int r) {
  final glTexCoord3xOesAsFunction = _glTexCoord3xOes
      .cast<NativeFunction<Void Function(Int32 s, Int32 t, Int32 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return glTexCoord3xOesAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3xvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord3xvOES (const GLfixed *coords)
/// ```
void glTexCoord3xvOes(Pointer<Int32> coords) {
  final glTexCoord3xvOesAsFunction = _glTexCoord3xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glTexCoord3xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4xOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord4xOES (GLfixed s, GLfixed t, GLfixed r, GLfixed q)
/// ```
void glTexCoord4xOes(int s, int t, int r, int q) {
  final glTexCoord4xOesAsFunction = _glTexCoord4xOes
      .cast<NativeFunction<Void Function(Int32 s, Int32 t, Int32 r, Int32 q)>>()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return glTexCoord4xOesAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4xvOes;

/// ```c
/// GLAPI void APIENTRY glTexCoord4xvOES (const GLfixed *coords)
/// ```
void glTexCoord4xvOes(Pointer<Int32> coords) {
  final glTexCoord4xvOesAsFunction = _glTexCoord4xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glTexCoord4xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGenxOes;

/// ```c
/// GLAPI void APIENTRY glTexGenxOES (GLenum coord, GLenum pname, GLfixed param)
/// ```
void glTexGenxOes(int coord, int pname, int param) {
  final glTexGenxOesAsFunction = _glTexGenxOes
      .cast<
        NativeFunction<Void Function(Uint32 coord, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int coord, int pname, int param)>();
  return glTexGenxOesAsFunction(coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGenxvOes;

/// ```c
/// GLAPI void APIENTRY glTexGenxvOES (GLenum coord, GLenum pname, const GLfixed *params)
/// ```
void glTexGenxvOes(int coord, int pname, Pointer<Int32> params) {
  final glTexGenxvOesAsFunction = _glTexGenxvOes
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Int32> params)>();
  return glTexGenxvOesAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2xOes;

/// ```c
/// GLAPI void APIENTRY glVertex2xOES (GLfixed x)
/// ```
void glVertex2xOes(int x) {
  final glVertex2xOesAsFunction = _glVertex2xOes
      .cast<NativeFunction<Void Function(Int32 x)>>()
      .asFunction<void Function(int x)>();
  return glVertex2xOesAsFunction(x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2xvOes;

/// ```c
/// GLAPI void APIENTRY glVertex2xvOES (const GLfixed *coords)
/// ```
void glVertex2xvOes(Pointer<Int32> coords) {
  final glVertex2xvOesAsFunction = _glVertex2xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glVertex2xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3xOes;

/// ```c
/// GLAPI void APIENTRY glVertex3xOES (GLfixed x, GLfixed y)
/// ```
void glVertex3xOes(int x, int y) {
  final glVertex3xOesAsFunction = _glVertex3xOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glVertex3xOesAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3xvOes;

/// ```c
/// GLAPI void APIENTRY glVertex3xvOES (const GLfixed *coords)
/// ```
void glVertex3xvOes(Pointer<Int32> coords) {
  final glVertex3xvOesAsFunction = _glVertex3xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glVertex3xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4xOes;

/// ```c
/// GLAPI void APIENTRY glVertex4xOES (GLfixed x, GLfixed y, GLfixed z)
/// ```
void glVertex4xOes(int x, int y, int z) {
  final glVertex4xOesAsFunction = _glVertex4xOes
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glVertex4xOesAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4xvOes;

/// ```c
/// GLAPI void APIENTRY glVertex4xvOES (const GLfixed *coords)
/// ```
void glVertex4xvOes(Pointer<Int32> coords) {
  final glVertex4xvOesAsFunction = _glVertex4xvOes
      .cast<NativeFunction<Void Function(Pointer<Int32> coords)>>()
      .asFunction<void Function(Pointer<Int32> coords)>();
  return glVertex4xvOesAsFunction(coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glQueryMatrixxOes;

/// ```c
/// GLAPI GLbitfield APIENTRY glQueryMatrixxOES (GLfixed *mantissa, GLint *exponent)
/// ```
int glQueryMatrixxOes(Pointer<Int32> mantissa, Pointer<Int32> exponent) {
  final glQueryMatrixxOesAsFunction = _glQueryMatrixxOes
      .cast<
        NativeFunction<
          Uint32 Function(Pointer<Int32> mantissa, Pointer<Int32> exponent)
        >
      >()
      .asFunction<
        int Function(Pointer<Int32> mantissa, Pointer<Int32> exponent)
      >();
  return glQueryMatrixxOesAsFunction(mantissa, exponent);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearDepthfOes;

/// ```c
/// GLAPI void APIENTRY glClearDepthfOES (GLclampf depth)
/// ```
void glClearDepthfOes(double depth) {
  final glClearDepthfOesAsFunction = _glClearDepthfOes
      .cast<NativeFunction<Void Function(Float depth)>>()
      .asFunction<void Function(double depth)>();
  return glClearDepthfOesAsFunction(depth);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClipPlanefOes;

/// ```c
/// GLAPI void APIENTRY glClipPlanefOES (GLenum plane, const GLfloat *equation)
/// ```
void glClipPlanefOes(int plane, Pointer<Float> equation) {
  final glClipPlanefOesAsFunction = _glClipPlanefOes
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Float> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Float> equation)>();
  return glClipPlanefOesAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangefOes;

/// ```c
/// GLAPI void APIENTRY glDepthRangefOES (GLclampf n, GLclampf f)
/// ```
void glDepthRangefOes(double n, double f) {
  final glDepthRangefOesAsFunction = _glDepthRangefOes
      .cast<NativeFunction<Void Function(Float n, Float f)>>()
      .asFunction<void Function(double n, double f)>();
  return glDepthRangefOesAsFunction(n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrustumfOes;

/// ```c
/// GLAPI void APIENTRY glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
/// ```
void glFrustumfOes(double l, double r, double b, double t, double n, double f) {
  final glFrustumfOesAsFunction = _glFrustumfOes
      .cast<
        NativeFunction<
          Void Function(Float l, Float r, Float b, Float t, Float n, Float f)
        >
      >()
      .asFunction<
        void Function(
          double l,
          double r,
          double b,
          double t,
          double n,
          double f,
        )
      >();
  return glFrustumfOesAsFunction(l, r, b, t, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetClipPlanefOes;

/// ```c
/// GLAPI void APIENTRY glGetClipPlanefOES (GLenum plane, GLfloat *equation)
/// ```
void glGetClipPlanefOes(int plane, Pointer<Float> equation) {
  final glGetClipPlanefOesAsFunction = _glGetClipPlanefOes
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Float> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Float> equation)>();
  return glGetClipPlanefOesAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glOrthofOes;

/// ```c
/// GLAPI void APIENTRY glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
/// ```
void glOrthofOes(double l, double r, double b, double t, double n, double f) {
  final glOrthofOesAsFunction = _glOrthofOes
      .cast<
        NativeFunction<
          Void Function(Float l, Float r, Float b, Float t, Float n, Float f)
        >
      >()
      .asFunction<
        void Function(
          double l,
          double r,
          double b,
          double t,
          double n,
          double f,
        )
      >();
  return glOrthofOesAsFunction(l, r, b, t, n, f);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTbufferMask3Dfx;

/// ```c
/// GLAPI void APIENTRY glTbufferMask3DFX (GLuint mask)
/// ```
void glTbufferMask3Dfx(int mask) {
  final glTbufferMask3DfxAsFunction = _glTbufferMask3Dfx
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glTbufferMask3DfxAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageEnableAmd;

/// ```c
/// GLAPI void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
/// ```
void glDebugMessageEnableAmd(
  int category,
  int severity,
  int count,
  Pointer<Uint32> ids,
  int enabled,
) {
  final glDebugMessageEnableAmdAsFunction = _glDebugMessageEnableAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 category,
            Uint32 severity,
            Uint32 count,
            Pointer<Uint32> ids,
            Int32 enabled,
          )
        >
      >()
      .asFunction<
        void Function(
          int category,
          int severity,
          int count,
          Pointer<Uint32> ids,
          int enabled,
        )
      >();
  return glDebugMessageEnableAmdAsFunction(
    category,
    severity,
    count,
    ids,
    enabled,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageInsertAmd;

/// ```c
/// GLAPI void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
/// ```
void glDebugMessageInsertAmd(
  int category,
  int severity,
  int id,
  int length,
  String buf,
) {
  final glDebugMessageInsertAmdAsFunction = _glDebugMessageInsertAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 category,
            Uint32 severity,
            Uint32 id,
            Uint32 length,
            Pointer<Utf8> buf,
          )
        >
      >()
      .asFunction<
        void Function(
          int category,
          int severity,
          int id,
          int length,
          Pointer<Utf8> buf,
        )
      >();
  final bufPointer = buf.toNativeUtf8();
  final result = glDebugMessageInsertAmdAsFunction(
    category,
    severity,
    id,
    length,
    bufPointer,
  );
  calloc.free(bufPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDebugMessageCallbackAmd;

/// ```c
/// GLAPI void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, void *userParam)
/// ```
void glDebugMessageCallbackAmd(
  Pointer<NativeFunction<GLDEBUGPROCAMD>> callback,
  Pointer<NativeType> userParam,
) {
  final glDebugMessageCallbackAmdAsFunction = _glDebugMessageCallbackAmd
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeFunction<GLDEBUGPROCAMD>> callback,
            Pointer<NativeType> userParam,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeFunction<GLDEBUGPROCAMD>> callback,
          Pointer<NativeType> userParam,
        )
      >();
  return glDebugMessageCallbackAmdAsFunction(callback, userParam);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDebugMessageLogAmd;

/// ```c
/// GLAPI GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
/// ```
int glGetDebugMessageLogAmd(
  int count,
  int bufSize,
  Pointer<Uint32> categories,
  Pointer<Uint32> severities,
  Pointer<Uint32> ids,
  Pointer<Uint32> lengths,
  Pointer<Int8> message,
) {
  final glGetDebugMessageLogAmdAsFunction = _glGetDebugMessageLogAmd
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 count,
            Uint32 bufSize,
            Pointer<Uint32> categories,
            Pointer<Uint32> severities,
            Pointer<Uint32> ids,
            Pointer<Uint32> lengths,
            Pointer<Int8> message,
          )
        >
      >()
      .asFunction<
        int Function(
          int count,
          int bufSize,
          Pointer<Uint32> categories,
          Pointer<Uint32> severities,
          Pointer<Uint32> ids,
          Pointer<Uint32> lengths,
          Pointer<Int8> message,
        )
      >();
  return glGetDebugMessageLogAmdAsFunction(
    count,
    bufSize,
    categories,
    severities,
    ids,
    lengths,
    message,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncIndexedAmd;

/// ```c
/// GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst)
/// ```
void glBlendFuncIndexedAmd(int buf, int src, int dst) {
  final glBlendFuncIndexedAmdAsFunction = _glBlendFuncIndexedAmd
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return glBlendFuncIndexedAmdAsFunction(buf, src, dst);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparateIndexedAmd;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
void glBlendFuncSeparateIndexedAmd(
  int buf,
  int srcRgb,
  int dstRgb,
  int srcAlpha,
  int dstAlpha,
) {
  final glBlendFuncSeparateIndexedAmdAsFunction = _glBlendFuncSeparateIndexedAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buf,
            Uint32 srcRgb,
            Uint32 dstRgb,
            Uint32 srcAlpha,
            Uint32 dstAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int buf,
          int srcRgb,
          int dstRgb,
          int srcAlpha,
          int dstAlpha,
        )
      >();
  return glBlendFuncSeparateIndexedAmdAsFunction(
    buf,
    srcRgb,
    dstRgb,
    srcAlpha,
    dstAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationIndexedAmd;

/// ```c
/// GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode)
/// ```
void glBlendEquationIndexedAmd(int buf, int mode) {
  final glBlendEquationIndexedAmdAsFunction = _glBlendEquationIndexedAmd
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return glBlendEquationIndexedAmdAsFunction(buf, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glBlendEquationSeparateIndexedAmd;

/// ```c
/// GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
void glBlendEquationSeparateIndexedAmd(int buf, int modeRgb, int modeAlpha) {
  final glBlendEquationSeparateIndexedAmdAsFunction =
      _glBlendEquationSeparateIndexedAmd
          .cast<
            NativeFunction<
              Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha)
            >
          >()
          .asFunction<void Function(int buf, int modeRgb, int modeAlpha)>();
  return glBlendEquationSeparateIndexedAmdAsFunction(buf, modeRgb, modeAlpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glRenderbufferStorageMultisampleAdvancedAmd;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorageMultisampleAdvancedAMD (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorageMultisampleAdvancedAmd(
  int target,
  int samples,
  int storageSamples,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageMultisampleAdvancedAmdAsFunction =
      _glRenderbufferStorageMultisampleAdvancedAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 samples,
                Uint32 storageSamples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int samples,
              int storageSamples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glRenderbufferStorageMultisampleAdvancedAmdAsFunction(
    target,
    samples,
    storageSamples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedRenderbufferStorageMultisampleAdvancedAmd;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleAdvancedAMD (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorageMultisampleAdvancedAmd(
  int renderbuffer,
  int samples,
  int storageSamples,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageMultisampleAdvancedAmdAsFunction =
      _glNamedRenderbufferStorageMultisampleAdvancedAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 samples,
                Uint32 storageSamples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int renderbuffer,
              int samples,
              int storageSamples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glNamedRenderbufferStorageMultisampleAdvancedAmdAsFunction(
    renderbuffer,
    samples,
    storageSamples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glFramebufferSamplePositionsfvAmd;

/// ```c
/// GLAPI void APIENTRY glFramebufferSamplePositionsfvAMD (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values)
/// ```
void glFramebufferSamplePositionsfvAmd(
  int target,
  int numsamples,
  int pixelindex,
  Pointer<Float> values,
) {
  final glFramebufferSamplePositionsfvAmdAsFunction =
      _glFramebufferSamplePositionsfvAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 numsamples,
                Uint32 pixelindex,
                Pointer<Float> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int numsamples,
              int pixelindex,
              Pointer<Float> values,
            )
          >();
  return glFramebufferSamplePositionsfvAmdAsFunction(
    target,
    numsamples,
    pixelindex,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedFramebufferSamplePositionsfvAmd;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferSamplePositionsfvAMD (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values)
/// ```
void glNamedFramebufferSamplePositionsfvAmd(
  int framebuffer,
  int numsamples,
  int pixelindex,
  Pointer<Float> values,
) {
  final glNamedFramebufferSamplePositionsfvAmdAsFunction =
      _glNamedFramebufferSamplePositionsfvAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 numsamples,
                Uint32 pixelindex,
                Pointer<Float> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int numsamples,
              int pixelindex,
              Pointer<Float> values,
            )
          >();
  return glNamedFramebufferSamplePositionsfvAmdAsFunction(
    framebuffer,
    numsamples,
    pixelindex,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFramebufferParameterfvAmd;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferParameterfvAMD (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values)
/// ```
void glGetFramebufferParameterfvAmd(
  int target,
  int pname,
  int numsamples,
  int pixelindex,
  int size,
  Pointer<Float> values,
) {
  final glGetFramebufferParameterfvAmdAsFunction =
      _glGetFramebufferParameterfvAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 pname,
                Uint32 numsamples,
                Uint32 pixelindex,
                Uint32 size,
                Pointer<Float> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int pname,
              int numsamples,
              int pixelindex,
              int size,
              Pointer<Float> values,
            )
          >();
  return glGetFramebufferParameterfvAmdAsFunction(
    target,
    pname,
    numsamples,
    pixelindex,
    size,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedFramebufferParameterfvAmd;

/// ```c
/// GLAPI void APIENTRY glGetNamedFramebufferParameterfvAMD (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values)
/// ```
void glGetNamedFramebufferParameterfvAmd(
  int framebuffer,
  int pname,
  int numsamples,
  int pixelindex,
  int size,
  Pointer<Float> values,
) {
  final glGetNamedFramebufferParameterfvAmdAsFunction =
      _glGetNamedFramebufferParameterfvAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 pname,
                Uint32 numsamples,
                Uint32 pixelindex,
                Uint32 size,
                Pointer<Float> values,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int pname,
              int numsamples,
              int pixelindex,
              int size,
              Pointer<Float> values,
            )
          >();
  return glGetNamedFramebufferParameterfvAmdAsFunction(
    framebuffer,
    pname,
    numsamples,
    pixelindex,
    size,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1i64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x)
/// ```
void glUniform1i64Nv(int location, int x) {
  final glUniform1i64NvAsFunction = _glUniform1i64Nv
      .cast<NativeFunction<Void Function(Int32 location, Int64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return glUniform1i64NvAsFunction(location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2i64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y)
/// ```
void glUniform2i64Nv(int location, int x, int y) {
  final glUniform2i64NvAsFunction = _glUniform2i64Nv
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return glUniform2i64NvAsFunction(location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3i64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
void glUniform3i64Nv(int location, int x, int y, int z) {
  final glUniform3i64NvAsFunction = _glUniform3i64Nv
      .cast<
        NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z)>
      >()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return glUniform3i64NvAsFunction(location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4i64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
void glUniform4i64Nv(int location, int x, int y, int z, int w) {
  final glUniform4i64NvAsFunction = _glUniform4i64Nv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return glUniform4i64NvAsFunction(location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1i64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glUniform1i64vNv(int location, int count, Pointer<Int64> value) {
  final glUniform1i64vNvAsFunction = _glUniform1i64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform1i64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2i64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glUniform2i64vNv(int location, int count, Pointer<Int64> value) {
  final glUniform2i64vNvAsFunction = _glUniform2i64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform2i64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3i64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glUniform3i64vNv(int location, int count, Pointer<Int64> value) {
  final glUniform3i64vNvAsFunction = _glUniform3i64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform3i64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4i64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glUniform4i64vNv(int location, int count, Pointer<Int64> value) {
  final glUniform4i64vNvAsFunction = _glUniform4i64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Int64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Int64> value)
      >();
  return glUniform4i64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x)
/// ```
void glUniform1ui64Nv(int location, int x) {
  final glUniform1ui64NvAsFunction = _glUniform1ui64Nv
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return glUniform1ui64NvAsFunction(location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y)
/// ```
void glUniform2ui64Nv(int location, int x, int y) {
  final glUniform2ui64NvAsFunction = _glUniform2ui64Nv
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return glUniform2ui64NvAsFunction(location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
void glUniform3ui64Nv(int location, int x, int y, int z) {
  final glUniform3ui64NvAsFunction = _glUniform3ui64Nv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return glUniform3ui64NvAsFunction(location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
void glUniform4ui64Nv(int location, int x, int y, int z, int w) {
  final glUniform4ui64NvAsFunction = _glUniform4ui64Nv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)
        >
      >()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return glUniform4ui64NvAsFunction(location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1ui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glUniform1ui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniform1ui64vNvAsFunction = _glUniform1ui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform1ui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2ui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glUniform2ui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniform2ui64vNvAsFunction = _glUniform2ui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform2ui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3ui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glUniform3ui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniform3ui64vNvAsFunction = _glUniform3ui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform3ui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4ui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glUniform4ui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniform4ui64vNvAsFunction = _glUniform4ui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniform4ui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformi64vNv;

/// ```c
/// GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params)
/// ```
void glGetUniformi64vNv(int program, int location, Pointer<Int64> params) {
  final glGetUniformi64vNvAsFunction = _glGetUniformi64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Int64> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Int64> params)
      >();
  return glGetUniformi64vNvAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params)
/// ```
void glGetUniformui64vNv(int program, int location, Pointer<Uint64> params) {
  final glGetUniformui64vNvAsFunction = _glGetUniformui64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Uint64> params)
      >();
  return glGetUniformui64vNvAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1i64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x)
/// ```
void glProgramUniform1i64Nv(int program, int location, int x) {
  final glProgramUniform1i64NvAsFunction = _glProgramUniform1i64Nv
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x)>
      >()
      .asFunction<void Function(int program, int location, int x)>();
  return glProgramUniform1i64NvAsFunction(program, location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2i64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
/// ```
void glProgramUniform2i64Nv(int program, int location, int x, int y) {
  final glProgramUniform2i64NvAsFunction = _glProgramUniform2i64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Int64 x, Int64 y)
        >
      >()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return glProgramUniform2i64NvAsFunction(program, location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3i64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
void glProgramUniform3i64Nv(int program, int location, int x, int y, int z) {
  final glProgramUniform3i64NvAsFunction = _glProgramUniform3i64Nv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int64 x,
            Int64 y,
            Int64 z,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z)
      >();
  return glProgramUniform3i64NvAsFunction(program, location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4i64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
void glProgramUniform4i64Nv(
  int program,
  int location,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramUniform4i64NvAsFunction = _glProgramUniform4i64Nv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int64 x,
            Int64 y,
            Int64 z,
            Int64 w,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z, int w)
      >();
  return glProgramUniform4i64NvAsFunction(program, location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1i64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glProgramUniform1i64vNv(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform1i64vNvAsFunction = _glProgramUniform1i64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform1i64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2i64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glProgramUniform2i64vNv(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform2i64vNvAsFunction = _glProgramUniform2i64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform2i64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3i64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glProgramUniform3i64vNv(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform3i64vNvAsFunction = _glProgramUniform3i64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform3i64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4i64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
/// ```
void glProgramUniform4i64vNv(
  int program,
  int location,
  int count,
  Pointer<Int64> value,
) {
  final glProgramUniform4i64vNvAsFunction = _glProgramUniform4i64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int64> value,
        )
      >();
  return glProgramUniform4i64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x)
/// ```
void glProgramUniform1ui64Nv(int program, int location, int x) {
  final glProgramUniform1ui64NvAsFunction = _glProgramUniform1ui64Nv
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x)>
      >()
      .asFunction<void Function(int program, int location, int x)>();
  return glProgramUniform1ui64NvAsFunction(program, location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
/// ```
void glProgramUniform2ui64Nv(int program, int location, int x, int y) {
  final glProgramUniform2ui64NvAsFunction = _glProgramUniform2ui64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y)
        >
      >()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return glProgramUniform2ui64NvAsFunction(program, location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
void glProgramUniform3ui64Nv(int program, int location, int x, int y, int z) {
  final glProgramUniform3ui64NvAsFunction = _glProgramUniform3ui64Nv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint64 x,
            Uint64 y,
            Uint64 z,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z)
      >();
  return glProgramUniform3ui64NvAsFunction(program, location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
void glProgramUniform4ui64Nv(
  int program,
  int location,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramUniform4ui64NvAsFunction = _glProgramUniform4ui64Nv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint64 x,
            Uint64 y,
            Uint64 z,
            Uint64 w,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int x, int y, int z, int w)
      >();
  return glProgramUniform4ui64NvAsFunction(program, location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glProgramUniform1ui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform1ui64vNvAsFunction = _glProgramUniform1ui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform1ui64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glProgramUniform2ui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform2ui64vNvAsFunction = _glProgramUniform2ui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform2ui64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glProgramUniform3ui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform3ui64vNvAsFunction = _glProgramUniform3ui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform3ui64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glProgramUniform4ui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniform4ui64vNvAsFunction = _glProgramUniform4ui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniform4ui64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribParameteriAmd;

/// ```c
/// GLAPI void APIENTRY glVertexAttribParameteriAMD (GLuint index, GLenum pname, GLint param)
/// ```
void glVertexAttribParameteriAmd(int index, int pname, int param) {
  final glVertexAttribParameteriAmdAsFunction = _glVertexAttribParameteriAmd
      .cast<
        NativeFunction<Void Function(Uint32 index, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int index, int pname, int param)>();
  return glVertexAttribParameteriAmdAsFunction(index, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawArraysIndirectAmd;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirectAMD (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
void glMultiDrawArraysIndirectAmd(
  int mode,
  Pointer<NativeType> indirect,
  int primcount,
  int stride,
) {
  final glMultiDrawArraysIndirectAmdAsFunction = _glMultiDrawArraysIndirectAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<NativeType> indirect,
            Uint32 primcount,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<NativeType> indirect,
          int primcount,
          int stride,
        )
      >();
  return glMultiDrawArraysIndirectAmdAsFunction(
    mode,
    indirect,
    primcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementsIndirectAmd;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirectAMD (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
void glMultiDrawElementsIndirectAmd(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  int primcount,
  int stride,
) {
  final glMultiDrawElementsIndirectAmdAsFunction =
      _glMultiDrawElementsIndirectAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 type,
                Pointer<NativeType> indirect,
                Uint32 primcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int type,
              Pointer<NativeType> indirect,
              int primcount,
              int stride,
            )
          >();
  return glMultiDrawElementsIndirectAmdAsFunction(
    mode,
    type,
    indirect,
    primcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenNamesAmd;

/// ```c
/// GLAPI void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint *names)
/// ```
void glGenNamesAmd(int identifier, int num, Pointer<Uint32> names) {
  final glGenNamesAmdAsFunction = _glGenNamesAmd
      .cast<
        NativeFunction<
          Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32> names)
        >
      >()
      .asFunction<
        void Function(int identifier, int num, Pointer<Uint32> names)
      >();
  return glGenNamesAmdAsFunction(identifier, num, names);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteNamesAmd;

/// ```c
/// GLAPI void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint *names)
/// ```
void glDeleteNamesAmd(int identifier, int num, Pointer<Uint32> names) {
  final glDeleteNamesAmdAsFunction = _glDeleteNamesAmd
      .cast<
        NativeFunction<
          Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32> names)
        >
      >()
      .asFunction<
        void Function(int identifier, int num, Pointer<Uint32> names)
      >();
  return glDeleteNamesAmdAsFunction(identifier, num, names);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsNameAmd;

/// ```c
/// GLAPI GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name)
/// ```
int glIsNameAmd(int identifier, int name) {
  final glIsNameAmdAsFunction = _glIsNameAmd
      .cast<NativeFunction<Int32 Function(Uint32 identifier, Uint32 name)>>()
      .asFunction<int Function(int identifier, int name)>();
  return glIsNameAmdAsFunction(identifier, name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glQueryObjectParameteruiAmd;

/// ```c
/// GLAPI void APIENTRY glQueryObjectParameteruiAMD (GLenum target, GLuint id, GLenum pname, GLuint param)
/// ```
void glQueryObjectParameteruiAmd(int target, int id, int pname, int param) {
  final glQueryObjectParameteruiAmdAsFunction = _glQueryObjectParameteruiAmd
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 id, Uint32 pname, Uint32 param)
        >
      >()
      .asFunction<void Function(int target, int id, int pname, int param)>();
  return glQueryObjectParameteruiAmdAsFunction(target, id, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorGroupsAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups)
/// ```
void glGetPerfMonitorGroupsAmd(
  Pointer<Int32> numGroups,
  int groupsSize,
  Pointer<Uint32> groups,
) {
  final glGetPerfMonitorGroupsAmdAsFunction = _glGetPerfMonitorGroupsAmd
      .cast<
        NativeFunction<
          Void Function(
            Pointer<Int32> numGroups,
            Uint32 groupsSize,
            Pointer<Uint32> groups,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<Int32> numGroups,
          int groupsSize,
          Pointer<Uint32> groups,
        )
      >();
  return glGetPerfMonitorGroupsAmdAsFunction(numGroups, groupsSize, groups);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorCountersAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)
/// ```
void glGetPerfMonitorCountersAmd(
  int group,
  Pointer<Int32> numCounters,
  Pointer<Int32> maxActiveCounters,
  int counterSize,
  Pointer<Uint32> counters,
) {
  final glGetPerfMonitorCountersAmdAsFunction = _glGetPerfMonitorCountersAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 group,
            Pointer<Int32> numCounters,
            Pointer<Int32> maxActiveCounters,
            Uint32 counterSize,
            Pointer<Uint32> counters,
          )
        >
      >()
      .asFunction<
        void Function(
          int group,
          Pointer<Int32> numCounters,
          Pointer<Int32> maxActiveCounters,
          int counterSize,
          Pointer<Uint32> counters,
        )
      >();
  return glGetPerfMonitorCountersAmdAsFunction(
    group,
    numCounters,
    maxActiveCounters,
    counterSize,
    counters,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorGroupStringAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
/// ```
void glGetPerfMonitorGroupStringAmd(
  int group,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> groupString,
) {
  final glGetPerfMonitorGroupStringAmdAsFunction =
      _glGetPerfMonitorGroupStringAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 group,
                Uint32 bufSize,
                Pointer<Uint32> length,
                Pointer<Int8> groupString,
              )
            >
          >()
          .asFunction<
            void Function(
              int group,
              int bufSize,
              Pointer<Uint32> length,
              Pointer<Int8> groupString,
            )
          >();
  return glGetPerfMonitorGroupStringAmdAsFunction(
    group,
    bufSize,
    length,
    groupString,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorCounterStringAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
/// ```
void glGetPerfMonitorCounterStringAmd(
  int group,
  int counter,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> counterString,
) {
  final glGetPerfMonitorCounterStringAmdAsFunction =
      _glGetPerfMonitorCounterStringAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 group,
                Uint32 counter,
                Uint32 bufSize,
                Pointer<Uint32> length,
                Pointer<Int8> counterString,
              )
            >
          >()
          .asFunction<
            void Function(
              int group,
              int counter,
              int bufSize,
              Pointer<Uint32> length,
              Pointer<Int8> counterString,
            )
          >();
  return glGetPerfMonitorCounterStringAmdAsFunction(
    group,
    counter,
    bufSize,
    length,
    counterString,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorCounterInfoAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void *data)
/// ```
void glGetPerfMonitorCounterInfoAmd(
  int group,
  int counter,
  int pname,
  Pointer<NativeType> data,
) {
  final glGetPerfMonitorCounterInfoAmdAsFunction =
      _glGetPerfMonitorCounterInfoAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 group,
                Uint32 counter,
                Uint32 pname,
                Pointer<NativeType> data,
              )
            >
          >()
          .asFunction<
            void Function(
              int group,
              int counter,
              int pname,
              Pointer<NativeType> data,
            )
          >();
  return glGetPerfMonitorCounterInfoAmdAsFunction(group, counter, pname, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenPerfMonitorsAmd;

/// ```c
/// GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors)
/// ```
void glGenPerfMonitorsAmd(int n, Pointer<Uint32> monitors) {
  final glGenPerfMonitorsAmdAsFunction = _glGenPerfMonitorsAmd
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> monitors)>>()
      .asFunction<void Function(int n, Pointer<Uint32> monitors)>();
  return glGenPerfMonitorsAmdAsFunction(n, monitors);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeletePerfMonitorsAmd;

/// ```c
/// GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors)
/// ```
void glDeletePerfMonitorsAmd(int n, Pointer<Uint32> monitors) {
  final glDeletePerfMonitorsAmdAsFunction = _glDeletePerfMonitorsAmd
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> monitors)>>()
      .asFunction<void Function(int n, Pointer<Uint32> monitors)>();
  return glDeletePerfMonitorsAmdAsFunction(n, monitors);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSelectPerfMonitorCountersAmd;

/// ```c
/// GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
/// ```
void glSelectPerfMonitorCountersAmd(
  int monitor,
  int enable,
  int group,
  int numCounters,
  Pointer<Uint32> counterList,
) {
  final glSelectPerfMonitorCountersAmdAsFunction =
      _glSelectPerfMonitorCountersAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 monitor,
                Int32 enable,
                Uint32 group,
                Int32 numCounters,
                Pointer<Uint32> counterList,
              )
            >
          >()
          .asFunction<
            void Function(
              int monitor,
              int enable,
              int group,
              int numCounters,
              Pointer<Uint32> counterList,
            )
          >();
  return glSelectPerfMonitorCountersAmdAsFunction(
    monitor,
    enable,
    group,
    numCounters,
    counterList,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginPerfMonitorAmd;

/// ```c
/// GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor)
/// ```
void glBeginPerfMonitorAmd(int monitor) {
  final glBeginPerfMonitorAmdAsFunction = _glBeginPerfMonitorAmd
      .cast<NativeFunction<Void Function(Uint32 monitor)>>()
      .asFunction<void Function(int monitor)>();
  return glBeginPerfMonitorAmdAsFunction(monitor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndPerfMonitorAmd;

/// ```c
/// GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor)
/// ```
void glEndPerfMonitorAmd(int monitor) {
  final glEndPerfMonitorAmdAsFunction = _glEndPerfMonitorAmd
      .cast<NativeFunction<Void Function(Uint32 monitor)>>()
      .asFunction<void Function(int monitor)>();
  return glEndPerfMonitorAmdAsFunction(monitor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfMonitorCounterDataAmd;

/// ```c
/// GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
/// ```
void glGetPerfMonitorCounterDataAmd(
  int monitor,
  int pname,
  int dataSize,
  Pointer<Uint32> data,
  Pointer<Int32> bytesWritten,
) {
  final glGetPerfMonitorCounterDataAmdAsFunction =
      _glGetPerfMonitorCounterDataAmd
          .cast<
            NativeFunction<
              Void Function(
                Uint32 monitor,
                Uint32 pname,
                Uint32 dataSize,
                Pointer<Uint32> data,
                Pointer<Int32> bytesWritten,
              )
            >
          >()
          .asFunction<
            void Function(
              int monitor,
              int pname,
              int dataSize,
              Pointer<Uint32> data,
              Pointer<Int32> bytesWritten,
            )
          >();
  return glGetPerfMonitorCounterDataAmdAsFunction(
    monitor,
    pname,
    dataSize,
    data,
    bytesWritten,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetMultisamplefvAmd;

/// ```c
/// GLAPI void APIENTRY glSetMultisamplefvAMD (GLenum pname, GLuint index, const GLfloat *val)
/// ```
void glSetMultisamplefvAmd(int pname, int index, Pointer<Float> val) {
  final glSetMultisamplefvAmdAsFunction = _glSetMultisamplefvAmd
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Uint32 index, Pointer<Float> val)
        >
      >()
      .asFunction<void Function(int pname, int index, Pointer<Float> val)>();
  return glSetMultisamplefvAmdAsFunction(pname, index, val);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageSparseAmd;

/// ```c
/// GLAPI void APIENTRY glTexStorageSparseAMD (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
/// ```
void glTexStorageSparseAmd(
  int target,
  int internalFormat,
  int width,
  int height,
  int depth,
  int layers,
  int flags,
) {
  final glTexStorageSparseAmdAsFunction = _glTexStorageSparseAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 layers,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalFormat,
          int width,
          int height,
          int depth,
          int layers,
          int flags,
        )
      >();
  return glTexStorageSparseAmdAsFunction(
    target,
    internalFormat,
    width,
    height,
    depth,
    layers,
    flags,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorageSparseAmd;

/// ```c
/// GLAPI void APIENTRY glTextureStorageSparseAMD (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
/// ```
void glTextureStorageSparseAmd(
  int texture,
  int target,
  int internalFormat,
  int width,
  int height,
  int depth,
  int layers,
  int flags,
) {
  final glTextureStorageSparseAmdAsFunction = _glTextureStorageSparseAmd
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 layers,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int internalFormat,
          int width,
          int height,
          int depth,
          int layers,
          int flags,
        )
      >();
  return glTextureStorageSparseAmdAsFunction(
    texture,
    target,
    internalFormat,
    width,
    height,
    depth,
    layers,
    flags,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilOpValueAmd;

/// ```c
/// GLAPI void APIENTRY glStencilOpValueAMD (GLenum face, GLuint value)
/// ```
void glStencilOpValueAmd(int face, int value) {
  final glStencilOpValueAmdAsFunction = _glStencilOpValueAmd
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 value)>>()
      .asFunction<void Function(int face, int value)>();
  return glStencilOpValueAmdAsFunction(face, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTessellationFactorAmd;

/// ```c
/// GLAPI void APIENTRY glTessellationFactorAMD (GLfloat factor)
/// ```
void glTessellationFactorAmd(double factor) {
  final glTessellationFactorAmdAsFunction = _glTessellationFactorAmd
      .cast<NativeFunction<Void Function(Float factor)>>()
      .asFunction<void Function(double factor)>();
  return glTessellationFactorAmdAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTessellationModeAmd;

/// ```c
/// GLAPI void APIENTRY glTessellationModeAMD (GLenum mode)
/// ```
void glTessellationModeAmd(int mode) {
  final glTessellationModeAmdAsFunction = _glTessellationModeAmd
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glTessellationModeAmdAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glElementPointerApple;

/// ```c
/// GLAPI void APIENTRY glElementPointerAPPLE (GLenum type, const void *pointer)
/// ```
void glElementPointerApple(int type, Pointer<NativeType> pointer) {
  final glElementPointerAppleAsFunction = _glElementPointerApple
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<NativeType> pointer)>
      >()
      .asFunction<void Function(int type, Pointer<NativeType> pointer)>();
  return glElementPointerAppleAsFunction(type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementArrayApple;

/// ```c
/// GLAPI void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count)
/// ```
void glDrawElementArrayApple(int mode, int first, int count) {
  final glDrawElementArrayAppleAsFunction = _glDrawElementArrayApple
      .cast<
        NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count)>
      >()
      .asFunction<void Function(int mode, int first, int count)>();
  return glDrawElementArrayAppleAsFunction(mode, first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawRangeElementArrayApple;

/// ```c
/// GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
/// ```
void glDrawRangeElementArrayApple(
  int mode,
  int start,
  int end,
  int first,
  int count,
) {
  final glDrawRangeElementArrayAppleAsFunction = _glDrawRangeElementArrayApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 start,
            Uint32 end,
            Int32 first,
            Uint32 count,
          )
        >
      >()
      .asFunction<
        void Function(int mode, int start, int end, int first, int count)
      >();
  return glDrawRangeElementArrayAppleAsFunction(mode, start, end, first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementArrayApple;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
/// ```
void glMultiDrawElementArrayApple(
  int mode,
  Pointer<Int32> first,
  Pointer<Uint32> count,
  int primcount,
) {
  final glMultiDrawElementArrayAppleAsFunction = _glMultiDrawElementArrayApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Int32> first,
            Pointer<Uint32> count,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Int32> first,
          Pointer<Uint32> count,
          int primcount,
        )
      >();
  return glMultiDrawElementArrayAppleAsFunction(mode, first, count, primcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawRangeElementArrayApple;

/// ```c
/// GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
/// ```
void glMultiDrawRangeElementArrayApple(
  int mode,
  int start,
  int end,
  Pointer<Int32> first,
  Pointer<Uint32> count,
  int primcount,
) {
  final glMultiDrawRangeElementArrayAppleAsFunction =
      _glMultiDrawRangeElementArrayApple
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 start,
                Uint32 end,
                Pointer<Int32> first,
                Pointer<Uint32> count,
                Uint32 primcount,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int start,
              int end,
              Pointer<Int32> first,
              Pointer<Uint32> count,
              int primcount,
            )
          >();
  return glMultiDrawRangeElementArrayAppleAsFunction(
    mode,
    start,
    end,
    first,
    count,
    primcount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenFencesApple;

/// ```c
/// GLAPI void APIENTRY glGenFencesAPPLE (GLsizei n, GLuint *fences)
/// ```
void glGenFencesApple(int n, Pointer<Uint32> fences) {
  final glGenFencesAppleAsFunction = _glGenFencesApple
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32> fences)>();
  return glGenFencesAppleAsFunction(n, fences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteFencesApple;

/// ```c
/// GLAPI void APIENTRY glDeleteFencesAPPLE (GLsizei n, const GLuint *fences)
/// ```
void glDeleteFencesApple(int n, Pointer<Uint32> fences) {
  final glDeleteFencesAppleAsFunction = _glDeleteFencesApple
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32> fences)>();
  return glDeleteFencesAppleAsFunction(n, fences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetFenceApple;

/// ```c
/// GLAPI void APIENTRY glSetFenceAPPLE (GLuint fence)
/// ```
void glSetFenceApple(int fence) {
  final glSetFenceAppleAsFunction = _glSetFenceApple
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return glSetFenceAppleAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsFenceApple;

/// ```c
/// GLAPI GLboolean APIENTRY glIsFenceAPPLE (GLuint fence)
/// ```
int glIsFenceApple(int fence) {
  final glIsFenceAppleAsFunction = _glIsFenceApple
      .cast<NativeFunction<Int32 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return glIsFenceAppleAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTestFenceApple;

/// ```c
/// GLAPI GLboolean APIENTRY glTestFenceAPPLE (GLuint fence)
/// ```
int glTestFenceApple(int fence) {
  final glTestFenceAppleAsFunction = _glTestFenceApple
      .cast<NativeFunction<Int32 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return glTestFenceAppleAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinishFenceApple;

/// ```c
/// GLAPI void APIENTRY glFinishFenceAPPLE (GLuint fence)
/// ```
void glFinishFenceApple(int fence) {
  final glFinishFenceAppleAsFunction = _glFinishFenceApple
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return glFinishFenceAppleAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTestObjectApple;

/// ```c
/// GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name)
/// ```
int glTestObjectApple(int object, int name) {
  final glTestObjectAppleAsFunction = _glTestObjectApple
      .cast<NativeFunction<Int32 Function(Uint32 object, Uint32 name)>>()
      .asFunction<int Function(int object, int name)>();
  return glTestObjectAppleAsFunction(object, name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinishObjectApple;

/// ```c
/// GLAPI void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name)
/// ```
void glFinishObjectApple(int object, int name) {
  final glFinishObjectAppleAsFunction = _glFinishObjectApple
      .cast<NativeFunction<Void Function(Uint32 object, Int32 name)>>()
      .asFunction<void Function(int object, int name)>();
  return glFinishObjectAppleAsFunction(object, name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferParameteriApple;

/// ```c
/// GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param)
/// ```
void glBufferParameteriApple(int target, int pname, int param) {
  final glBufferParameteriAppleAsFunction = _glBufferParameteriApple
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glBufferParameteriAppleAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushMappedBufferRangeApple;

/// ```c
/// GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size)
/// ```
void glFlushMappedBufferRangeApple(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glFlushMappedBufferRangeAppleAsFunction = _glFlushMappedBufferRangeApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glFlushMappedBufferRangeAppleAsFunction(target, offset, size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glObjectPurgeableApple;

/// ```c
/// GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option)
/// ```
int glObjectPurgeableApple(int objectType, int name, int option) {
  final glObjectPurgeableAppleAsFunction = _glObjectPurgeableApple
      .cast<
        NativeFunction<
          Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option)
        >
      >()
      .asFunction<int Function(int objectType, int name, int option)>();
  return glObjectPurgeableAppleAsFunction(objectType, name, option);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glObjectUnpurgeableApple;

/// ```c
/// GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option)
/// ```
int glObjectUnpurgeableApple(int objectType, int name, int option) {
  final glObjectUnpurgeableAppleAsFunction = _glObjectUnpurgeableApple
      .cast<
        NativeFunction<
          Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option)
        >
      >()
      .asFunction<int Function(int objectType, int name, int option)>();
  return glObjectUnpurgeableAppleAsFunction(objectType, name, option);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectParameterivApple;

/// ```c
/// GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint *params)
/// ```
void glGetObjectParameterivApple(
  int objectType,
  int name,
  int pname,
  Pointer<Int32> params,
) {
  final glGetObjectParameterivAppleAsFunction = _glGetObjectParameterivApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 objectType,
            Uint32 name,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int objectType,
          int name,
          int pname,
          Pointer<Int32> params,
        )
      >();
  return glGetObjectParameterivAppleAsFunction(objectType, name, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureRangeApple;

/// ```c
/// GLAPI void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length, const void *pointer)
/// ```
void glTextureRangeApple(int target, int length, Pointer<NativeType> pointer) {
  final glTextureRangeAppleAsFunction = _glTextureRangeApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 length,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int target, int length, Pointer<NativeType> pointer)
      >();
  return glTextureRangeAppleAsFunction(target, length, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterPointervApple;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, void **params)
/// ```
void glGetTexParameterPointervApple(
  int target,
  int pname,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetTexParameterPointervAppleAsFunction =
      _glGetTexParameterPointervApple
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 pname,
                Pointer<Pointer<NativeType>> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int pname,
              Pointer<Pointer<NativeType>> params,
            )
          >();
  return glGetTexParameterPointervAppleAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVertexArrayApple;

/// ```c
/// GLAPI void APIENTRY glBindVertexArrayAPPLE (GLuint array)
/// ```
void glBindVertexArrayApple(int array) {
  final glBindVertexArrayAppleAsFunction = _glBindVertexArrayApple
      .cast<NativeFunction<Void Function(Uint32 array)>>()
      .asFunction<void Function(int array)>();
  return glBindVertexArrayAppleAsFunction(array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteVertexArraysApple;

/// ```c
/// GLAPI void APIENTRY glDeleteVertexArraysAPPLE (GLsizei n, const GLuint *arrays)
/// ```
void glDeleteVertexArraysApple(int n, Pointer<Uint32> arrays) {
  final glDeleteVertexArraysAppleAsFunction = _glDeleteVertexArraysApple
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32> arrays)>();
  return glDeleteVertexArraysAppleAsFunction(n, arrays);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenVertexArraysApple;

/// ```c
/// GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays)
/// ```
void glGenVertexArraysApple(int n, Pointer<Uint32> arrays) {
  final glGenVertexArraysAppleAsFunction = _glGenVertexArraysApple
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32> arrays)>();
  return glGenVertexArraysAppleAsFunction(n, arrays);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsVertexArrayApple;

/// ```c
/// GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint array)
/// ```
int glIsVertexArrayApple(int array) {
  final glIsVertexArrayAppleAsFunction = _glIsVertexArrayApple
      .cast<NativeFunction<Int32 Function(Uint32 array)>>()
      .asFunction<int Function(int array)>();
  return glIsVertexArrayAppleAsFunction(array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayRangeApple;

/// ```c
/// GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, void *pointer)
/// ```
void glVertexArrayRangeApple(int length, Pointer<NativeType> pointer) {
  final glVertexArrayRangeAppleAsFunction = _glVertexArrayRangeApple
      .cast<
        NativeFunction<
          Void Function(Uint32 length, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<void Function(int length, Pointer<NativeType> pointer)>();
  return glVertexArrayRangeAppleAsFunction(length, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushVertexArrayRangeApple;

/// ```c
/// GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, void *pointer)
/// ```
void glFlushVertexArrayRangeApple(int length, Pointer<NativeType> pointer) {
  final glFlushVertexArrayRangeAppleAsFunction = _glFlushVertexArrayRangeApple
      .cast<
        NativeFunction<
          Void Function(Uint32 length, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<void Function(int length, Pointer<NativeType> pointer)>();
  return glFlushVertexArrayRangeAppleAsFunction(length, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayParameteriApple;

/// ```c
/// GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint param)
/// ```
void glVertexArrayParameteriApple(int pname, int param) {
  final glVertexArrayParameteriAppleAsFunction = _glVertexArrayParameteriApple
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glVertexArrayParameteriAppleAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexAttribApple;

/// ```c
/// GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname)
/// ```
void glEnableVertexAttribApple(int index, int pname) {
  final glEnableVertexAttribAppleAsFunction = _glEnableVertexAttribApple
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname)>>()
      .asFunction<void Function(int index, int pname)>();
  return glEnableVertexAttribAppleAsFunction(index, pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexAttribApple;

/// ```c
/// GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname)
/// ```
void glDisableVertexAttribApple(int index, int pname) {
  final glDisableVertexAttribAppleAsFunction = _glDisableVertexAttribApple
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname)>>()
      .asFunction<void Function(int index, int pname)>();
  return glDisableVertexAttribAppleAsFunction(index, pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsVertexAttribEnabledApple;

/// ```c
/// GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname)
/// ```
int glIsVertexAttribEnabledApple(int index, int pname) {
  final glIsVertexAttribEnabledAppleAsFunction = _glIsVertexAttribEnabledApple
      .cast<NativeFunction<Int32 Function(Uint32 index, Uint32 pname)>>()
      .asFunction<int Function(int index, int pname)>();
  return glIsVertexAttribEnabledAppleAsFunction(index, pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapVertexAttrib1dApple;

/// ```c
/// GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
/// ```
void glMapVertexAttrib1dApple(
  int index,
  int size,
  double u1,
  double u2,
  int stride,
  int order,
  Pointer<Double> points,
) {
  final glMapVertexAttrib1dAppleAsFunction = _glMapVertexAttrib1dApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 size,
            Double u1,
            Double u2,
            Int32 stride,
            Int32 order,
            Pointer<Double> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          double u1,
          double u2,
          int stride,
          int order,
          Pointer<Double> points,
        )
      >();
  return glMapVertexAttrib1dAppleAsFunction(
    index,
    size,
    u1,
    u2,
    stride,
    order,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapVertexAttrib1fApple;

/// ```c
/// GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
/// ```
void glMapVertexAttrib1fApple(
  int index,
  int size,
  double u1,
  double u2,
  int stride,
  int order,
  Pointer<Float> points,
) {
  final glMapVertexAttrib1fAppleAsFunction = _glMapVertexAttrib1fApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 size,
            Float u1,
            Float u2,
            Int32 stride,
            Int32 order,
            Pointer<Float> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          double u1,
          double u2,
          int stride,
          int order,
          Pointer<Float> points,
        )
      >();
  return glMapVertexAttrib1fAppleAsFunction(
    index,
    size,
    u1,
    u2,
    stride,
    order,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapVertexAttrib2dApple;

/// ```c
/// GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
/// ```
void glMapVertexAttrib2dApple(
  int index,
  int size,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  Pointer<Double> points,
) {
  final glMapVertexAttrib2dAppleAsFunction = _glMapVertexAttrib2dApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 size,
            Double u1,
            Double u2,
            Int32 ustride,
            Int32 uorder,
            Double v1,
            Double v2,
            Int32 vstride,
            Int32 vorder,
            Pointer<Double> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          Pointer<Double> points,
        )
      >();
  return glMapVertexAttrib2dAppleAsFunction(
    index,
    size,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapVertexAttrib2fApple;

/// ```c
/// GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
/// ```
void glMapVertexAttrib2fApple(
  int index,
  int size,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  Pointer<Float> points,
) {
  final glMapVertexAttrib2fAppleAsFunction = _glMapVertexAttrib2fApple
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 size,
            Float u1,
            Float u2,
            Int32 ustride,
            Int32 uorder,
            Float v1,
            Float v2,
            Int32 vstride,
            Int32 vorder,
            Pointer<Float> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          Pointer<Float> points,
        )
      >();
  return glMapVertexAttrib2fAppleAsFunction(
    index,
    size,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawBuffersAti;

/// ```c
/// GLAPI void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs)
/// ```
void glDrawBuffersAti(int n, Pointer<Uint32> bufs) {
  final glDrawBuffersAtiAsFunction = _glDrawBuffersAti
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> bufs)>();
  return glDrawBuffersAtiAsFunction(n, bufs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glElementPointerAti;

/// ```c
/// GLAPI void APIENTRY glElementPointerATI (GLenum type, const void *pointer)
/// ```
void glElementPointerAti(int type, Pointer<NativeType> pointer) {
  final glElementPointerAtiAsFunction = _glElementPointerAti
      .cast<
        NativeFunction<Void Function(Uint32 type, Pointer<NativeType> pointer)>
      >()
      .asFunction<void Function(int type, Pointer<NativeType> pointer)>();
  return glElementPointerAtiAsFunction(type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementArrayAti;

/// ```c
/// GLAPI void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count)
/// ```
void glDrawElementArrayAti(int mode, int count) {
  final glDrawElementArrayAtiAsFunction = _glDrawElementArrayAti
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count)>>()
      .asFunction<void Function(int mode, int count)>();
  return glDrawElementArrayAtiAsFunction(mode, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawRangeElementArrayAti;

/// ```c
/// GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count)
/// ```
void glDrawRangeElementArrayAti(int mode, int start, int end, int count) {
  final glDrawRangeElementArrayAtiAsFunction = _glDrawRangeElementArrayAti
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count)
        >
      >()
      .asFunction<void Function(int mode, int start, int end, int count)>();
  return glDrawRangeElementArrayAtiAsFunction(mode, start, end, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBumpParameterivAti;

/// ```c
/// GLAPI void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint *param)
/// ```
void glTexBumpParameterivAti(int pname, Pointer<Int32> param) {
  final glTexBumpParameterivAtiAsFunction = _glTexBumpParameterivAti
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32> param)>>()
      .asFunction<void Function(int pname, Pointer<Int32> param)>();
  return glTexBumpParameterivAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBumpParameterfvAti;

/// ```c
/// GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat *param)
/// ```
void glTexBumpParameterfvAti(int pname, Pointer<Float> param) {
  final glTexBumpParameterfvAtiAsFunction = _glTexBumpParameterfvAti
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float> param)>>()
      .asFunction<void Function(int pname, Pointer<Float> param)>();
  return glTexBumpParameterfvAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexBumpParameterivAti;

/// ```c
/// GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint *param)
/// ```
void glGetTexBumpParameterivAti(int pname, Pointer<Int32> param) {
  final glGetTexBumpParameterivAtiAsFunction = _glGetTexBumpParameterivAti
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32> param)>>()
      .asFunction<void Function(int pname, Pointer<Int32> param)>();
  return glGetTexBumpParameterivAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexBumpParameterfvAti;

/// ```c
/// GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param)
/// ```
void glGetTexBumpParameterfvAti(int pname, Pointer<Float> param) {
  final glGetTexBumpParameterfvAtiAsFunction = _glGetTexBumpParameterfvAti
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float> param)>>()
      .asFunction<void Function(int pname, Pointer<Float> param)>();
  return glGetTexBumpParameterfvAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenFragmentShadersAti;

/// ```c
/// GLAPI GLuint APIENTRY glGenFragmentShadersATI (GLuint range)
/// ```
int glGenFragmentShadersAti(int range) {
  final glGenFragmentShadersAtiAsFunction = _glGenFragmentShadersAti
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return glGenFragmentShadersAtiAsFunction(range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFragmentShaderAti;

/// ```c
/// GLAPI void APIENTRY glBindFragmentShaderATI (GLuint id)
/// ```
void glBindFragmentShaderAti(int id) {
  final glBindFragmentShaderAtiAsFunction = _glBindFragmentShaderAti
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glBindFragmentShaderAtiAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteFragmentShaderAti;

/// ```c
/// GLAPI void APIENTRY glDeleteFragmentShaderATI (GLuint id)
/// ```
void glDeleteFragmentShaderAti(int id) {
  final glDeleteFragmentShaderAtiAsFunction = _glDeleteFragmentShaderAti
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glDeleteFragmentShaderAtiAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginFragmentShaderAti;

/// ```c
/// GLAPI void APIENTRY glBeginFragmentShaderATI (void)
/// ```
void glBeginFragmentShaderAti() {
  final glBeginFragmentShaderAtiAsFunction = _glBeginFragmentShaderAti
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glBeginFragmentShaderAtiAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndFragmentShaderAti;

/// ```c
/// GLAPI void APIENTRY glEndFragmentShaderATI (void)
/// ```
void glEndFragmentShaderAti() {
  final glEndFragmentShaderAtiAsFunction = _glEndFragmentShaderAti
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndFragmentShaderAtiAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPassTexCoordAti;

/// ```c
/// GLAPI void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle)
/// ```
void glPassTexCoordAti(int dst, int coord, int swizzle) {
  final glPassTexCoordAtiAsFunction = _glPassTexCoordAti
      .cast<
        NativeFunction<Void Function(Uint32 dst, Uint32 coord, Uint32 swizzle)>
      >()
      .asFunction<void Function(int dst, int coord, int swizzle)>();
  return glPassTexCoordAtiAsFunction(dst, coord, swizzle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleMapAti;

/// ```c
/// GLAPI void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle)
/// ```
void glSampleMapAti(int dst, int interp, int swizzle) {
  final glSampleMapAtiAsFunction = _glSampleMapAti
      .cast<
        NativeFunction<Void Function(Uint32 dst, Uint32 interp, Uint32 swizzle)>
      >()
      .asFunction<void Function(int dst, int interp, int swizzle)>();
  return glSampleMapAtiAsFunction(dst, interp, swizzle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorFragmentOp1Ati;

/// ```c
/// GLAPI void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
/// ```
void glColorFragmentOp1Ati(
  int op,
  int dst,
  int dstMask,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
) {
  final glColorFragmentOp1AtiAsFunction = _glColorFragmentOp1Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMask,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMask,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
        )
      >();
  return glColorFragmentOp1AtiAsFunction(
    op,
    dst,
    dstMask,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorFragmentOp2Ati;

/// ```c
/// GLAPI void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
/// ```
void glColorFragmentOp2Ati(
  int op,
  int dst,
  int dstMask,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
  int arg2,
  int arg2Rep,
  int arg2Mod,
) {
  final glColorFragmentOp2AtiAsFunction = _glColorFragmentOp2Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMask,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
            Uint32 arg2,
            Uint32 arg2Rep,
            Uint32 arg2Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMask,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
          int arg2,
          int arg2Rep,
          int arg2Mod,
        )
      >();
  return glColorFragmentOp2AtiAsFunction(
    op,
    dst,
    dstMask,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
    arg2,
    arg2Rep,
    arg2Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorFragmentOp3Ati;

/// ```c
/// GLAPI void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
/// ```
void glColorFragmentOp3Ati(
  int op,
  int dst,
  int dstMask,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
  int arg2,
  int arg2Rep,
  int arg2Mod,
  int arg3,
  int arg3Rep,
  int arg3Mod,
) {
  final glColorFragmentOp3AtiAsFunction = _glColorFragmentOp3Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMask,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
            Uint32 arg2,
            Uint32 arg2Rep,
            Uint32 arg2Mod,
            Uint32 arg3,
            Uint32 arg3Rep,
            Uint32 arg3Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMask,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
          int arg2,
          int arg2Rep,
          int arg2Mod,
          int arg3,
          int arg3Rep,
          int arg3Mod,
        )
      >();
  return glColorFragmentOp3AtiAsFunction(
    op,
    dst,
    dstMask,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
    arg2,
    arg2Rep,
    arg2Mod,
    arg3,
    arg3Rep,
    arg3Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaFragmentOp1Ati;

/// ```c
/// GLAPI void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
/// ```
void glAlphaFragmentOp1Ati(
  int op,
  int dst,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
) {
  final glAlphaFragmentOp1AtiAsFunction = _glAlphaFragmentOp1Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
        )
      >();
  return glAlphaFragmentOp1AtiAsFunction(
    op,
    dst,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaFragmentOp2Ati;

/// ```c
/// GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
/// ```
void glAlphaFragmentOp2Ati(
  int op,
  int dst,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
  int arg2,
  int arg2Rep,
  int arg2Mod,
) {
  final glAlphaFragmentOp2AtiAsFunction = _glAlphaFragmentOp2Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
            Uint32 arg2,
            Uint32 arg2Rep,
            Uint32 arg2Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
          int arg2,
          int arg2Rep,
          int arg2Mod,
        )
      >();
  return glAlphaFragmentOp2AtiAsFunction(
    op,
    dst,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
    arg2,
    arg2Rep,
    arg2Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaFragmentOp3Ati;

/// ```c
/// GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
/// ```
void glAlphaFragmentOp3Ati(
  int op,
  int dst,
  int dstMod,
  int arg1,
  int arg1Rep,
  int arg1Mod,
  int arg2,
  int arg2Rep,
  int arg2Mod,
  int arg3,
  int arg3Rep,
  int arg3Mod,
) {
  final glAlphaFragmentOp3AtiAsFunction = _glAlphaFragmentOp3Ati
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 dst,
            Uint32 dstMod,
            Uint32 arg1,
            Uint32 arg1Rep,
            Uint32 arg1Mod,
            Uint32 arg2,
            Uint32 arg2Rep,
            Uint32 arg2Mod,
            Uint32 arg3,
            Uint32 arg3Rep,
            Uint32 arg3Mod,
          )
        >
      >()
      .asFunction<
        void Function(
          int op,
          int dst,
          int dstMod,
          int arg1,
          int arg1Rep,
          int arg1Mod,
          int arg2,
          int arg2Rep,
          int arg2Mod,
          int arg3,
          int arg3Rep,
          int arg3Mod,
        )
      >();
  return glAlphaFragmentOp3AtiAsFunction(
    op,
    dst,
    dstMod,
    arg1,
    arg1Rep,
    arg1Mod,
    arg2,
    arg2Rep,
    arg2Mod,
    arg3,
    arg3Rep,
    arg3Mod,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetFragmentShaderConstantAti;

/// ```c
/// GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value)
/// ```
void glSetFragmentShaderConstantAti(int dst, Pointer<Float> value) {
  final glSetFragmentShaderConstantAtiAsFunction =
      _glSetFragmentShaderConstantAti
          .cast<
            NativeFunction<Void Function(Uint32 dst, Pointer<Float> value)>
          >()
          .asFunction<void Function(int dst, Pointer<Float> value)>();
  return glSetFragmentShaderConstantAtiAsFunction(dst, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapObjectBufferAti;

/// ```c
/// GLAPI void *APIENTRY glMapObjectBufferATI (GLuint buffer)
/// ```
Pointer<NativeType> glMapObjectBufferAti(int buffer) {
  final glMapObjectBufferAtiAsFunction = _glMapObjectBufferAti
      .cast<NativeFunction<Pointer<NativeType> Function(Uint32 buffer)>>()
      .asFunction<Pointer<NativeType> Function(int buffer)>();
  return glMapObjectBufferAtiAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapObjectBufferAti;

/// ```c
/// GLAPI void APIENTRY glUnmapObjectBufferATI (GLuint buffer)
/// ```
void glUnmapObjectBufferAti(int buffer) {
  final glUnmapObjectBufferAtiAsFunction = _glUnmapObjectBufferAti
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return glUnmapObjectBufferAtiAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPnTrianglesiAti;

/// ```c
/// GLAPI void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param)
/// ```
void glPnTrianglesiAti(int pname, int param) {
  final glPnTrianglesiAtiAsFunction = _glPnTrianglesiAti
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPnTrianglesiAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPnTrianglesfAti;

/// ```c
/// GLAPI void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param)
/// ```
void glPnTrianglesfAti(int pname, double param) {
  final glPnTrianglesfAtiAsFunction = _glPnTrianglesfAti
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPnTrianglesfAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilOpSeparateAti;

/// ```c
/// GLAPI void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
/// ```
void glStencilOpSeparateAti(int face, int sfail, int dpfail, int dppass) {
  final glStencilOpSeparateAtiAsFunction = _glStencilOpSeparateAti
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass)
        >
      >()
      .asFunction<void Function(int face, int sfail, int dpfail, int dppass)>();
  return glStencilOpSeparateAtiAsFunction(face, sfail, dpfail, dppass);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilFuncSeparateAti;

/// ```c
/// GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
/// ```
void glStencilFuncSeparateAti(int frontfunc, int backfunc, int ref, int mask) {
  final glStencilFuncSeparateAtiAsFunction = _glStencilFuncSeparateAti
      .cast<
        NativeFunction<
          Void Function(
            Uint32 frontfunc,
            Uint32 backfunc,
            Int32 ref,
            Uint32 mask,
          )
        >
      >()
      .asFunction<
        void Function(int frontfunc, int backfunc, int ref, int mask)
      >();
  return glStencilFuncSeparateAtiAsFunction(frontfunc, backfunc, ref, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNewObjectBufferAti;

/// ```c
/// GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const void *pointer, GLenum usage)
/// ```
int glNewObjectBufferAti(int size, Pointer<NativeType> pointer, int usage) {
  final glNewObjectBufferAtiAsFunction = _glNewObjectBufferAti
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 size,
            Pointer<NativeType> pointer,
            Uint32 usage,
          )
        >
      >()
      .asFunction<
        int Function(int size, Pointer<NativeType> pointer, int usage)
      >();
  return glNewObjectBufferAtiAsFunction(size, pointer, usage);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsObjectBufferAti;

/// ```c
/// GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer)
/// ```
int glIsObjectBufferAti(int buffer) {
  final glIsObjectBufferAtiAsFunction = _glIsObjectBufferAti
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glIsObjectBufferAtiAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUpdateObjectBufferAti;

/// ```c
/// GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)
/// ```
void glUpdateObjectBufferAti(
  int buffer,
  int offset,
  int size,
  Pointer<NativeType> pointer,
  int preserve,
) {
  final glUpdateObjectBufferAtiAsFunction = _glUpdateObjectBufferAti
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 offset,
            Uint32 size,
            Pointer<NativeType> pointer,
            Uint32 preserve,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int offset,
          int size,
          Pointer<NativeType> pointer,
          int preserve,
        )
      >();
  return glUpdateObjectBufferAtiAsFunction(
    buffer,
    offset,
    size,
    pointer,
    preserve,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectBufferfvAti;

/// ```c
/// GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params)
/// ```
void glGetObjectBufferfvAti(int buffer, int pname, Pointer<Float> params) {
  final glGetObjectBufferfvAtiAsFunction = _glGetObjectBufferfvAti
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int buffer, int pname, Pointer<Float> params)
      >();
  return glGetObjectBufferfvAtiAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectBufferivAti;

/// ```c
/// GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params)
/// ```
void glGetObjectBufferivAti(int buffer, int pname, Pointer<Int32> params) {
  final glGetObjectBufferivAtiAsFunction = _glGetObjectBufferivAti
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int buffer, int pname, Pointer<Int32> params)
      >();
  return glGetObjectBufferivAtiAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFreeObjectBufferAti;

/// ```c
/// GLAPI void APIENTRY glFreeObjectBufferATI (GLuint buffer)
/// ```
void glFreeObjectBufferAti(int buffer) {
  final glFreeObjectBufferAtiAsFunction = _glFreeObjectBufferAti
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return glFreeObjectBufferAtiAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glArrayObjectAti;

/// ```c
/// GLAPI void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
void glArrayObjectAti(
  int array,
  int size,
  int type,
  int stride,
  int buffer,
  int offset,
) {
  final glArrayObjectAtiAsFunction = _glArrayObjectAti
      .cast<
        NativeFunction<
          Void Function(
            Uint32 array,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Uint32 buffer,
            Uint32 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int array,
          int size,
          int type,
          int stride,
          int buffer,
          int offset,
        )
      >();
  return glArrayObjectAtiAsFunction(array, size, type, stride, buffer, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetArrayObjectfvAti;

/// ```c
/// GLAPI void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params)
/// ```
void glGetArrayObjectfvAti(int array, int pname, Pointer<Float> params) {
  final glGetArrayObjectfvAtiAsFunction = _glGetArrayObjectfvAti
      .cast<
        NativeFunction<
          Void Function(Uint32 array, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int array, int pname, Pointer<Float> params)>();
  return glGetArrayObjectfvAtiAsFunction(array, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetArrayObjectivAti;

/// ```c
/// GLAPI void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params)
/// ```
void glGetArrayObjectivAti(int array, int pname, Pointer<Int32> params) {
  final glGetArrayObjectivAtiAsFunction = _glGetArrayObjectivAti
      .cast<
        NativeFunction<
          Void Function(Uint32 array, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int array, int pname, Pointer<Int32> params)>();
  return glGetArrayObjectivAtiAsFunction(array, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantArrayObjectAti;

/// ```c
/// GLAPI void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
void glVariantArrayObjectAti(
  int id,
  int type,
  int stride,
  int buffer,
  int offset,
) {
  final glVariantArrayObjectAtiAsFunction = _glVariantArrayObjectAti
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 type,
            Uint32 stride,
            Uint32 buffer,
            Uint32 offset,
          )
        >
      >()
      .asFunction<
        void Function(int id, int type, int stride, int buffer, int offset)
      >();
  return glVariantArrayObjectAtiAsFunction(id, type, stride, buffer, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantArrayObjectfvAti;

/// ```c
/// GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params)
/// ```
void glGetVariantArrayObjectfvAti(int id, int pname, Pointer<Float> params) {
  final glGetVariantArrayObjectfvAtiAsFunction = _glGetVariantArrayObjectfvAti
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Float> params)>();
  return glGetVariantArrayObjectfvAtiAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantArrayObjectivAti;

/// ```c
/// GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params)
/// ```
void glGetVariantArrayObjectivAti(int id, int pname, Pointer<Int32> params) {
  final glGetVariantArrayObjectivAtiAsFunction = _glGetVariantArrayObjectivAti
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int32> params)>();
  return glGetVariantArrayObjectivAtiAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribArrayObjectAti;

/// ```c
/// GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
void glVertexAttribArrayObjectAti(
  int index,
  int size,
  int type,
  int normalized,
  int stride,
  int buffer,
  int offset,
) {
  final glVertexAttribArrayObjectAtiAsFunction = _glVertexAttribArrayObjectAti
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 stride,
            Uint32 buffer,
            Uint32 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int normalized,
          int stride,
          int buffer,
          int offset,
        )
      >();
  return glVertexAttribArrayObjectAtiAsFunction(
    index,
    size,
    type,
    normalized,
    stride,
    buffer,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetVertexAttribArrayObjectfvAti;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetVertexAttribArrayObjectfvAti(
  int index,
  int pname,
  Pointer<Float> params,
) {
  final glGetVertexAttribArrayObjectfvAtiAsFunction =
      _glGetVertexAttribArrayObjectfvAti
          .cast<
            NativeFunction<
              Void Function(Uint32 index, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int index, int pname, Pointer<Float> params)
          >();
  return glGetVertexAttribArrayObjectfvAtiAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetVertexAttribArrayObjectivAti;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribArrayObjectivAti(
  int index,
  int pname,
  Pointer<Int32> params,
) {
  final glGetVertexAttribArrayObjectivAtiAsFunction =
      _glGetVertexAttribArrayObjectivAti
          .cast<
            NativeFunction<
              Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int index, int pname, Pointer<Int32> params)
          >();
  return glGetVertexAttribArrayObjectivAtiAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1sAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x)
/// ```
void glVertexStream1sAti(int stream, int x) {
  final glVertexStream1sAtiAsFunction = _glVertexStream1sAti
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x)>>()
      .asFunction<void Function(int stream, int x)>();
  return glVertexStream1sAtiAsFunction(stream, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1svAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort *coords)
/// ```
void glVertexStream1svAti(int stream, Pointer<Int16> coords) {
  final glVertexStream1svAtiAsFunction = _glVertexStream1svAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int16> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int16> coords)>();
  return glVertexStream1svAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1iAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1iATI (GLenum stream, GLint x)
/// ```
void glVertexStream1iAti(int stream, int x) {
  final glVertexStream1iAtiAsFunction = _glVertexStream1iAti
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x)>>()
      .asFunction<void Function(int stream, int x)>();
  return glVertexStream1iAtiAsFunction(stream, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1ivAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint *coords)
/// ```
void glVertexStream1ivAti(int stream, Pointer<Int32> coords) {
  final glVertexStream1ivAtiAsFunction = _glVertexStream1ivAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int32> coords)>();
  return glVertexStream1ivAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1fAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x)
/// ```
void glVertexStream1fAti(int stream, double x) {
  final glVertexStream1fAtiAsFunction = _glVertexStream1fAti
      .cast<NativeFunction<Void Function(Uint32 stream, Float x)>>()
      .asFunction<void Function(int stream, double x)>();
  return glVertexStream1fAtiAsFunction(stream, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1fvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat *coords)
/// ```
void glVertexStream1fvAti(int stream, Pointer<Float> coords) {
  final glVertexStream1fvAtiAsFunction = _glVertexStream1fvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Float> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Float> coords)>();
  return glVertexStream1fvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1dAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x)
/// ```
void glVertexStream1dAti(int stream, double x) {
  final glVertexStream1dAtiAsFunction = _glVertexStream1dAti
      .cast<NativeFunction<Void Function(Uint32 stream, Double x)>>()
      .asFunction<void Function(int stream, double x)>();
  return glVertexStream1dAtiAsFunction(stream, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream1dvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble *coords)
/// ```
void glVertexStream1dvAti(int stream, Pointer<Double> coords) {
  final glVertexStream1dvAtiAsFunction = _glVertexStream1dvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Double> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Double> coords)>();
  return glVertexStream1dvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2sAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort y)
/// ```
void glVertexStream2sAti(int stream, int x, int y) {
  final glVertexStream2sAtiAsFunction = _glVertexStream2sAti
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y)>>()
      .asFunction<void Function(int stream, int x, int y)>();
  return glVertexStream2sAtiAsFunction(stream, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2svAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort *coords)
/// ```
void glVertexStream2svAti(int stream, Pointer<Int16> coords) {
  final glVertexStream2svAtiAsFunction = _glVertexStream2svAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int16> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int16> coords)>();
  return glVertexStream2svAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2iAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y)
/// ```
void glVertexStream2iAti(int stream, int x, int y) {
  final glVertexStream2iAtiAsFunction = _glVertexStream2iAti
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y)>>()
      .asFunction<void Function(int stream, int x, int y)>();
  return glVertexStream2iAtiAsFunction(stream, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2ivAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint *coords)
/// ```
void glVertexStream2ivAti(int stream, Pointer<Int32> coords) {
  final glVertexStream2ivAtiAsFunction = _glVertexStream2ivAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int32> coords)>();
  return glVertexStream2ivAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2fAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y)
/// ```
void glVertexStream2fAti(int stream, double x, double y) {
  final glVertexStream2fAtiAsFunction = _glVertexStream2fAti
      .cast<NativeFunction<Void Function(Uint32 stream, Float x, Float y)>>()
      .asFunction<void Function(int stream, double x, double y)>();
  return glVertexStream2fAtiAsFunction(stream, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2fvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat *coords)
/// ```
void glVertexStream2fvAti(int stream, Pointer<Float> coords) {
  final glVertexStream2fvAtiAsFunction = _glVertexStream2fvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Float> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Float> coords)>();
  return glVertexStream2fvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2dAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y)
/// ```
void glVertexStream2dAti(int stream, double x, double y) {
  final glVertexStream2dAtiAsFunction = _glVertexStream2dAti
      .cast<NativeFunction<Void Function(Uint32 stream, Double x, Double y)>>()
      .asFunction<void Function(int stream, double x, double y)>();
  return glVertexStream2dAtiAsFunction(stream, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream2dvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble *coords)
/// ```
void glVertexStream2dvAti(int stream, Pointer<Double> coords) {
  final glVertexStream2dvAtiAsFunction = _glVertexStream2dvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Double> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Double> coords)>();
  return glVertexStream2dvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3sAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z)
/// ```
void glVertexStream3sAti(int stream, int x, int y, int z) {
  final glVertexStream3sAtiAsFunction = _glVertexStream3sAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z)>
      >()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return glVertexStream3sAtiAsFunction(stream, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3svAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort *coords)
/// ```
void glVertexStream3svAti(int stream, Pointer<Int16> coords) {
  final glVertexStream3svAtiAsFunction = _glVertexStream3svAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int16> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int16> coords)>();
  return glVertexStream3svAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3iAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z)
/// ```
void glVertexStream3iAti(int stream, int x, int y, int z) {
  final glVertexStream3iAtiAsFunction = _glVertexStream3iAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z)>
      >()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return glVertexStream3iAtiAsFunction(stream, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3ivAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint *coords)
/// ```
void glVertexStream3ivAti(int stream, Pointer<Int32> coords) {
  final glVertexStream3ivAtiAsFunction = _glVertexStream3ivAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int32> coords)>();
  return glVertexStream3ivAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3fAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glVertexStream3fAti(int stream, double x, double y, double z) {
  final glVertexStream3fAtiAsFunction = _glVertexStream3fAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return glVertexStream3fAtiAsFunction(stream, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3fvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat *coords)
/// ```
void glVertexStream3fvAti(int stream, Pointer<Float> coords) {
  final glVertexStream3fvAtiAsFunction = _glVertexStream3fvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Float> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Float> coords)>();
  return glVertexStream3fvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3dAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexStream3dAti(int stream, double x, double y, double z) {
  final glVertexStream3dAtiAsFunction = _glVertexStream3dAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return glVertexStream3dAtiAsFunction(stream, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream3dvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble *coords)
/// ```
void glVertexStream3dvAti(int stream, Pointer<Double> coords) {
  final glVertexStream3dvAtiAsFunction = _glVertexStream3dvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Double> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Double> coords)>();
  return glVertexStream3dvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4sAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
void glVertexStream4sAti(int stream, int x, int y, int z, int w) {
  final glVertexStream4sAtiAsFunction = _glVertexStream4sAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z, Int16 w)
        >
      >()
      .asFunction<void Function(int stream, int x, int y, int z, int w)>();
  return glVertexStream4sAtiAsFunction(stream, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4svAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort *coords)
/// ```
void glVertexStream4svAti(int stream, Pointer<Int16> coords) {
  final glVertexStream4svAtiAsFunction = _glVertexStream4svAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int16> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int16> coords)>();
  return glVertexStream4svAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4iAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w)
/// ```
void glVertexStream4iAti(int stream, int x, int y, int z, int w) {
  final glVertexStream4iAtiAsFunction = _glVertexStream4iAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z, Int32 w)
        >
      >()
      .asFunction<void Function(int stream, int x, int y, int z, int w)>();
  return glVertexStream4iAtiAsFunction(stream, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4ivAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint *coords)
/// ```
void glVertexStream4ivAti(int stream, Pointer<Int32> coords) {
  final glVertexStream4ivAtiAsFunction = _glVertexStream4ivAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int32> coords)>();
  return glVertexStream4ivAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4fAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glVertexStream4fAti(int stream, double x, double y, double z, double w) {
  final glVertexStream4fAtiAsFunction = _glVertexStream4fAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Float x, Float y, Float z, Float w)
        >
      >()
      .asFunction<
        void Function(int stream, double x, double y, double z, double w)
      >();
  return glVertexStream4fAtiAsFunction(stream, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4fvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat *coords)
/// ```
void glVertexStream4fvAti(int stream, Pointer<Float> coords) {
  final glVertexStream4fvAtiAsFunction = _glVertexStream4fvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Float> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Float> coords)>();
  return glVertexStream4fvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4dAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexStream4dAti(int stream, double x, double y, double z, double w) {
  final glVertexStream4dAtiAsFunction = _glVertexStream4dAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int stream, double x, double y, double z, double w)
      >();
  return glVertexStream4dAtiAsFunction(stream, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexStream4dvAti;

/// ```c
/// GLAPI void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble *coords)
/// ```
void glVertexStream4dvAti(int stream, Pointer<Double> coords) {
  final glVertexStream4dvAtiAsFunction = _glVertexStream4dvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Double> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Double> coords)>();
  return glVertexStream4dvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3bAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
/// ```
void glNormalStream3bAti(int stream, int nx, int ny, int nz) {
  final glNormalStream3bAtiAsFunction = _glNormalStream3bAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Int8 nx, Int8 ny, Int8 nz)>
      >()
      .asFunction<void Function(int stream, int nx, int ny, int nz)>();
  return glNormalStream3bAtiAsFunction(stream, nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3bvAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte *coords)
/// ```
void glNormalStream3bvAti(int stream, String coords) {
  final glNormalStream3bvAtiAsFunction = _glNormalStream3bvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Utf8> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Utf8> coords)>();
  final coordsPointer = coords.toNativeUtf8();
  final result = glNormalStream3bvAtiAsFunction(stream, coordsPointer);
  calloc.free(coordsPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3sAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz)
/// ```
void glNormalStream3sAti(int stream, int nx, int ny, int nz) {
  final glNormalStream3sAtiAsFunction = _glNormalStream3sAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Int16 nx, Int16 ny, Int16 nz)
        >
      >()
      .asFunction<void Function(int stream, int nx, int ny, int nz)>();
  return glNormalStream3sAtiAsFunction(stream, nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3svAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort *coords)
/// ```
void glNormalStream3svAti(int stream, Pointer<Int16> coords) {
  final glNormalStream3svAtiAsFunction = _glNormalStream3svAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int16> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int16> coords)>();
  return glNormalStream3svAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3iAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz)
/// ```
void glNormalStream3iAti(int stream, int nx, int ny, int nz) {
  final glNormalStream3iAtiAsFunction = _glNormalStream3iAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Int32 nx, Int32 ny, Int32 nz)
        >
      >()
      .asFunction<void Function(int stream, int nx, int ny, int nz)>();
  return glNormalStream3iAtiAsFunction(stream, nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3ivAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint *coords)
/// ```
void glNormalStream3ivAti(int stream, Pointer<Int32> coords) {
  final glNormalStream3ivAtiAsFunction = _glNormalStream3ivAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Int32> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Int32> coords)>();
  return glNormalStream3ivAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3fAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
/// ```
void glNormalStream3fAti(int stream, double nx, double ny, double nz) {
  final glNormalStream3fAtiAsFunction = _glNormalStream3fAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Float nx, Float ny, Float nz)
        >
      >()
      .asFunction<void Function(int stream, double nx, double ny, double nz)>();
  return glNormalStream3fAtiAsFunction(stream, nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3fvAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat *coords)
/// ```
void glNormalStream3fvAti(int stream, Pointer<Float> coords) {
  final glNormalStream3fvAtiAsFunction = _glNormalStream3fvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Float> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Float> coords)>();
  return glNormalStream3fvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3dAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
/// ```
void glNormalStream3dAti(int stream, double nx, double ny, double nz) {
  final glNormalStream3dAtiAsFunction = _glNormalStream3dAti
      .cast<
        NativeFunction<
          Void Function(Uint32 stream, Double nx, Double ny, Double nz)
        >
      >()
      .asFunction<void Function(int stream, double nx, double ny, double nz)>();
  return glNormalStream3dAtiAsFunction(stream, nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalStream3dvAti;

/// ```c
/// GLAPI void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble *coords)
/// ```
void glNormalStream3dvAti(int stream, Pointer<Double> coords) {
  final glNormalStream3dvAtiAsFunction = _glNormalStream3dvAti
      .cast<
        NativeFunction<Void Function(Uint32 stream, Pointer<Double> coords)>
      >()
      .asFunction<void Function(int stream, Pointer<Double> coords)>();
  return glNormalStream3dvAtiAsFunction(stream, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientActiveVertexStreamAti;

/// ```c
/// GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum stream)
/// ```
void glClientActiveVertexStreamAti(int stream) {
  final glClientActiveVertexStreamAtiAsFunction = _glClientActiveVertexStreamAti
      .cast<NativeFunction<Void Function(Uint32 stream)>>()
      .asFunction<void Function(int stream)>();
  return glClientActiveVertexStreamAtiAsFunction(stream);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexBlendEnviAti;

/// ```c
/// GLAPI void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param)
/// ```
void glVertexBlendEnviAti(int pname, int param) {
  final glVertexBlendEnviAtiAsFunction = _glVertexBlendEnviAti
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glVertexBlendEnviAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexBlendEnvfAti;

/// ```c
/// GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param)
/// ```
void glVertexBlendEnvfAti(int pname, double param) {
  final glVertexBlendEnvfAtiAsFunction = _glVertexBlendEnvfAti
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glVertexBlendEnvfAtiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEglImageTargetTexStorageExt;

/// ```c
/// GLAPI void APIENTRY glEGLImageTargetTexStorageEXT (GLenum target, GLeglImageOES image, const GLint* attrib_list)
/// ```
void glEglImageTargetTexStorageExt(
  int target,
  Pointer<NativeType> image,
  Pointer<Int32> attribList,
) {
  final glEglImageTargetTexStorageExtAsFunction = _glEglImageTargetTexStorageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> image,
            Pointer<Int32> attribList,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> image,
          Pointer<Int32> attribList,
        )
      >();
  return glEglImageTargetTexStorageExtAsFunction(target, image, attribList);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glEglImageTargetTextureStorageExt;

/// ```c
/// GLAPI void APIENTRY glEGLImageTargetTextureStorageEXT (GLuint texture, GLeglImageOES image, const GLint* attrib_list)
/// ```
void glEglImageTargetTextureStorageExt(
  int texture,
  Pointer<NativeType> image,
  Pointer<Int32> attribList,
) {
  final glEglImageTargetTextureStorageExtAsFunction =
      _glEglImageTargetTextureStorageExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Pointer<NativeType> image,
                Pointer<Int32> attribList,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              Pointer<NativeType> image,
              Pointer<Int32> attribList,
            )
          >();
  return glEglImageTargetTextureStorageExtAsFunction(
    texture,
    image,
    attribList,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformBufferExt;

/// ```c
/// GLAPI void APIENTRY glUniformBufferEXT (GLuint program, GLint location, GLuint buffer)
/// ```
void glUniformBufferExt(int program, int location, int buffer) {
  final glUniformBufferExtAsFunction = _glUniformBufferExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int program, int location, int buffer)>();
  return glUniformBufferExtAsFunction(program, location, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformBufferSizeExt;

/// ```c
/// GLAPI GLint APIENTRY glGetUniformBufferSizeEXT (GLuint program, GLint location)
/// ```
int glGetUniformBufferSizeExt(int program, int location) {
  final glGetUniformBufferSizeExtAsFunction = _glGetUniformBufferSizeExt
      .cast<NativeFunction<Int32 Function(Uint32 program, Int32 location)>>()
      .asFunction<int Function(int program, int location)>();
  return glGetUniformBufferSizeExtAsFunction(program, location);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformOffsetExt;

/// ```c
/// GLAPI GLintptr APIENTRY glGetUniformOffsetEXT (GLuint program, GLint location)
/// ```
Pointer<NativeType> glGetUniformOffsetExt(int program, int location) {
  final glGetUniformOffsetExtAsFunction = _glGetUniformOffsetExt
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 program, Int32 location)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int program, int location)>();
  return glGetUniformOffsetExtAsFunction(program, location);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendColorExt;

/// ```c
/// GLAPI void APIENTRY glBlendColorEXT (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
/// ```
void glBlendColorExt(double red, double green, double blue, double alpha) {
  final glBlendColorExtAsFunction = _glBlendColorExt
      .cast<
        NativeFunction<
          Void Function(Float red, Float green, Float blue, Float alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glBlendColorExtAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationSeparateExt;

/// ```c
/// GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha)
/// ```
void glBlendEquationSeparateExt(int modeRgb, int modeAlpha) {
  final glBlendEquationSeparateExtAsFunction = _glBlendEquationSeparateExt
      .cast<NativeFunction<Void Function(Uint32 modeRgb, Uint32 modeAlpha)>>()
      .asFunction<void Function(int modeRgb, int modeAlpha)>();
  return glBlendEquationSeparateExtAsFunction(modeRgb, modeAlpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparateExt;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
/// ```
void glBlendFuncSeparateExt(
  int sfactorRgb,
  int dfactorRgb,
  int sfactorAlpha,
  int dfactorAlpha,
) {
  final glBlendFuncSeparateExtAsFunction = _glBlendFuncSeparateExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 sfactorRgb,
            Uint32 dfactorRgb,
            Uint32 sfactorAlpha,
            Uint32 dfactorAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int sfactorRgb,
          int dfactorRgb,
          int sfactorAlpha,
          int dfactorAlpha,
        )
      >();
  return glBlendFuncSeparateExtAsFunction(
    sfactorRgb,
    dfactorRgb,
    sfactorAlpha,
    dfactorAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquationExt;

/// ```c
/// GLAPI void APIENTRY glBlendEquationEXT (GLenum mode)
/// ```
void glBlendEquationExt(int mode) {
  final glBlendEquationExtAsFunction = _glBlendEquationExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glBlendEquationExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorSubTableExt;

/// ```c
/// GLAPI void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)
/// ```
void glColorSubTableExt(
  int target,
  int start,
  int count,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glColorSubTableExtAsFunction = _glColorSubTableExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 start,
            Uint32 count,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int start,
          int count,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glColorSubTableExtAsFunction(target, start, count, format, type, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyColorSubTableExt;

/// ```c
/// GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
/// ```
void glCopyColorSubTableExt(int target, int start, int x, int y, int width) {
  final glCopyColorSubTableExtAsFunction = _glCopyColorSubTableExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 start,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int start, int x, int y, int width)
      >();
  return glCopyColorSubTableExtAsFunction(target, start, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLockArraysExt;

/// ```c
/// GLAPI void APIENTRY glLockArraysEXT (GLint first, GLsizei count)
/// ```
void glLockArraysExt(int first, int count) {
  final glLockArraysExtAsFunction = _glLockArraysExt
      .cast<NativeFunction<Void Function(Int32 first, Uint32 count)>>()
      .asFunction<void Function(int first, int count)>();
  return glLockArraysExtAsFunction(first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnlockArraysExt;

/// ```c
/// GLAPI void APIENTRY glUnlockArraysEXT (void)
/// ```
void glUnlockArraysExt() {
  final glUnlockArraysExtAsFunction = _glUnlockArraysExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glUnlockArraysExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionFilter1Dext;

/// ```c
/// GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)
/// ```
void glConvolutionFilter1Dext(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glConvolutionFilter1DextAsFunction = _glConvolutionFilter1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glConvolutionFilter1DextAsFunction(
    target,
    internalformat,
    width,
    format,
    type,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionFilter2Dext;

/// ```c
/// GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)
/// ```
void glConvolutionFilter2Dext(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glConvolutionFilter2DextAsFunction = _glConvolutionFilter2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glConvolutionFilter2DextAsFunction(
    target,
    internalformat,
    width,
    height,
    format,
    type,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterfExt;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params)
/// ```
void glConvolutionParameterfExt(int target, int pname, double params) {
  final glConvolutionParameterfExtAsFunction = _glConvolutionParameterfExt
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float params)>
      >()
      .asFunction<void Function(int target, int pname, double params)>();
  return glConvolutionParameterfExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glConvolutionParameterfvExt(int target, int pname, Pointer<Float> params) {
  final glConvolutionParameterfvExtAsFunction = _glConvolutionParameterfvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glConvolutionParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameteriExt;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params)
/// ```
void glConvolutionParameteriExt(int target, int pname, int params) {
  final glConvolutionParameteriExtAsFunction = _glConvolutionParameteriExt
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 params)>
      >()
      .asFunction<void Function(int target, int pname, int params)>();
  return glConvolutionParameteriExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterivExt;

/// ```c
/// GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params)
/// ```
void glConvolutionParameterivExt(int target, int pname, Pointer<Int32> params) {
  final glConvolutionParameterivExtAsFunction = _glConvolutionParameterivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glConvolutionParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyConvolutionFilter1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
void glCopyConvolutionFilter1Dext(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
) {
  final glCopyConvolutionFilter1DextAsFunction = _glCopyConvolutionFilter1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int x, int y, int width)
      >();
  return glCopyConvolutionFilter1DextAsFunction(
    target,
    internalformat,
    x,
    y,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyConvolutionFilter2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyConvolutionFilter2Dext(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyConvolutionFilter2DextAsFunction = _glCopyConvolutionFilter2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyConvolutionFilter2DextAsFunction(
    target,
    internalformat,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionFilterExt;

/// ```c
/// GLAPI void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, void *image)
/// ```
void glGetConvolutionFilterExt(
  int target,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glGetConvolutionFilterExtAsFunction = _glGetConvolutionFilterExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glGetConvolutionFilterExtAsFunction(target, format, type, image);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetConvolutionParameterfvExt(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetConvolutionParameterfvExtAsFunction =
      _glGetConvolutionParameterfvExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Float> params)
          >();
  return glGetConvolutionParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetConvolutionParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetConvolutionParameterivExtAsFunction =
      _glGetConvolutionParameterivExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetConvolutionParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSeparableFilterExt;

/// ```c
/// GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)
/// ```
void glGetSeparableFilterExt(
  int target,
  int format,
  int type,
  Pointer<NativeType> row,
  Pointer<NativeType> column,
  Pointer<NativeType> span,
) {
  final glGetSeparableFilterExtAsFunction = _glGetSeparableFilterExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> row,
            Pointer<NativeType> column,
            Pointer<NativeType> span,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> row,
          Pointer<NativeType> column,
          Pointer<NativeType> span,
        )
      >();
  return glGetSeparableFilterExtAsFunction(
    target,
    format,
    type,
    row,
    column,
    span,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSeparableFilter2Dext;

/// ```c
/// GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)
/// ```
void glSeparableFilter2Dext(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> row,
  Pointer<NativeType> column,
) {
  final glSeparableFilter2DextAsFunction = _glSeparableFilter2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> row,
            Pointer<NativeType> column,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> row,
          Pointer<NativeType> column,
        )
      >();
  return glSeparableFilter2DextAsFunction(
    target,
    internalformat,
    width,
    height,
    format,
    type,
    row,
    column,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3bExt;

/// ```c
/// GLAPI void APIENTRY glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz)
/// ```
void glTangent3bExt(int tx, int ty, int tz) {
  final glTangent3bExtAsFunction = _glTangent3bExt
      .cast<NativeFunction<Void Function(Int8 tx, Int8 ty, Int8 tz)>>()
      .asFunction<void Function(int tx, int ty, int tz)>();
  return glTangent3bExtAsFunction(tx, ty, tz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3bvExt;

/// ```c
/// GLAPI void APIENTRY glTangent3bvEXT (const GLbyte *v)
/// ```
void glTangent3bvExt(String v) {
  final glTangent3bvExtAsFunction = _glTangent3bvExt
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glTangent3bvExtAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3dExt;

/// ```c
/// GLAPI void APIENTRY glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz)
/// ```
void glTangent3dExt(double tx, double ty, double tz) {
  final glTangent3dExtAsFunction = _glTangent3dExt
      .cast<NativeFunction<Void Function(Double tx, Double ty, Double tz)>>()
      .asFunction<void Function(double tx, double ty, double tz)>();
  return glTangent3dExtAsFunction(tx, ty, tz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3dvExt;

/// ```c
/// GLAPI void APIENTRY glTangent3dvEXT (const GLdouble *v)
/// ```
void glTangent3dvExt(Pointer<Double> v) {
  final glTangent3dvExtAsFunction = _glTangent3dvExt
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glTangent3dvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3fExt;

/// ```c
/// GLAPI void APIENTRY glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz)
/// ```
void glTangent3fExt(double tx, double ty, double tz) {
  final glTangent3fExtAsFunction = _glTangent3fExt
      .cast<NativeFunction<Void Function(Float tx, Float ty, Float tz)>>()
      .asFunction<void Function(double tx, double ty, double tz)>();
  return glTangent3fExtAsFunction(tx, ty, tz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3fvExt;

/// ```c
/// GLAPI void APIENTRY glTangent3fvEXT (const GLfloat *v)
/// ```
void glTangent3fvExt(Pointer<Float> v) {
  final glTangent3fvExtAsFunction = _glTangent3fvExt
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glTangent3fvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3iExt;

/// ```c
/// GLAPI void APIENTRY glTangent3iEXT (GLint tx, GLint ty, GLint tz)
/// ```
void glTangent3iExt(int tx, int ty, int tz) {
  final glTangent3iExtAsFunction = _glTangent3iExt
      .cast<NativeFunction<Void Function(Int32 tx, Int32 ty, Int32 tz)>>()
      .asFunction<void Function(int tx, int ty, int tz)>();
  return glTangent3iExtAsFunction(tx, ty, tz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3ivExt;

/// ```c
/// GLAPI void APIENTRY glTangent3ivEXT (const GLint *v)
/// ```
void glTangent3ivExt(Pointer<Int32> v) {
  final glTangent3ivExtAsFunction = _glTangent3ivExt
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glTangent3ivExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3sExt;

/// ```c
/// GLAPI void APIENTRY glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz)
/// ```
void glTangent3sExt(int tx, int ty, int tz) {
  final glTangent3sExtAsFunction = _glTangent3sExt
      .cast<NativeFunction<Void Function(Int16 tx, Int16 ty, Int16 tz)>>()
      .asFunction<void Function(int tx, int ty, int tz)>();
  return glTangent3sExtAsFunction(tx, ty, tz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangent3svExt;

/// ```c
/// GLAPI void APIENTRY glTangent3svEXT (const GLshort *v)
/// ```
void glTangent3svExt(Pointer<Int16> v) {
  final glTangent3svExtAsFunction = _glTangent3svExt
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glTangent3svExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3bExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz)
/// ```
void glBinormal3bExt(int bx, int by, int bz) {
  final glBinormal3bExtAsFunction = _glBinormal3bExt
      .cast<NativeFunction<Void Function(Int8 bx, Int8 by, Int8 bz)>>()
      .asFunction<void Function(int bx, int by, int bz)>();
  return glBinormal3bExtAsFunction(bx, by, bz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3bvExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3bvEXT (const GLbyte *v)
/// ```
void glBinormal3bvExt(String v) {
  final glBinormal3bvExtAsFunction = _glBinormal3bvExt
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glBinormal3bvExtAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3dExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz)
/// ```
void glBinormal3dExt(double bx, double by, double bz) {
  final glBinormal3dExtAsFunction = _glBinormal3dExt
      .cast<NativeFunction<Void Function(Double bx, Double by, Double bz)>>()
      .asFunction<void Function(double bx, double by, double bz)>();
  return glBinormal3dExtAsFunction(bx, by, bz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3dvExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3dvEXT (const GLdouble *v)
/// ```
void glBinormal3dvExt(Pointer<Double> v) {
  final glBinormal3dvExtAsFunction = _glBinormal3dvExt
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glBinormal3dvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3fExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz)
/// ```
void glBinormal3fExt(double bx, double by, double bz) {
  final glBinormal3fExtAsFunction = _glBinormal3fExt
      .cast<NativeFunction<Void Function(Float bx, Float by, Float bz)>>()
      .asFunction<void Function(double bx, double by, double bz)>();
  return glBinormal3fExtAsFunction(bx, by, bz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3fvExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3fvEXT (const GLfloat *v)
/// ```
void glBinormal3fvExt(Pointer<Float> v) {
  final glBinormal3fvExtAsFunction = _glBinormal3fvExt
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glBinormal3fvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3iExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3iEXT (GLint bx, GLint by, GLint bz)
/// ```
void glBinormal3iExt(int bx, int by, int bz) {
  final glBinormal3iExtAsFunction = _glBinormal3iExt
      .cast<NativeFunction<Void Function(Int32 bx, Int32 by, Int32 bz)>>()
      .asFunction<void Function(int bx, int by, int bz)>();
  return glBinormal3iExtAsFunction(bx, by, bz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3ivExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3ivEXT (const GLint *v)
/// ```
void glBinormal3ivExt(Pointer<Int32> v) {
  final glBinormal3ivExtAsFunction = _glBinormal3ivExt
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glBinormal3ivExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3sExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz)
/// ```
void glBinormal3sExt(int bx, int by, int bz) {
  final glBinormal3sExtAsFunction = _glBinormal3sExt
      .cast<NativeFunction<Void Function(Int16 bx, Int16 by, Int16 bz)>>()
      .asFunction<void Function(int bx, int by, int bz)>();
  return glBinormal3sExtAsFunction(bx, by, bz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormal3svExt;

/// ```c
/// GLAPI void APIENTRY glBinormal3svEXT (const GLshort *v)
/// ```
void glBinormal3svExt(Pointer<Int16> v) {
  final glBinormal3svExtAsFunction = _glBinormal3svExt
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glBinormal3svExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTangentPointerExt;

/// ```c
/// GLAPI void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const void *pointer)
/// ```
void glTangentPointerExt(int type, int stride, Pointer<NativeType> pointer) {
  final glTangentPointerExtAsFunction = _glTangentPointerExt
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> pointer)
      >();
  return glTangentPointerExtAsFunction(type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBinormalPointerExt;

/// ```c
/// GLAPI void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride, const void *pointer)
/// ```
void glBinormalPointerExt(int type, int stride, Pointer<NativeType> pointer) {
  final glBinormalPointerExtAsFunction = _glBinormalPointerExt
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> pointer)
      >();
  return glBinormalPointerExtAsFunction(type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
void glCopyTexImage1Dext(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int border,
) {
  final glCopyTexImage1DextAsFunction = _glCopyTexImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int border,
        )
      >();
  return glCopyTexImage1DextAsFunction(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
void glCopyTexImage2Dext(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
  int border,
) {
  final glCopyTexImage2DextAsFunction = _glCopyTexImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
          int border,
        )
      >();
  return glCopyTexImage2DextAsFunction(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
void glCopyTexSubImage1Dext(
  int target,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
) {
  final glCopyTexSubImage1DextAsFunction = _glCopyTexSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int x,
          int y,
          int width,
        )
      >();
  return glCopyTexSubImage1DextAsFunction(target, level, xoffset, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTexSubImage2Dext(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTexSubImage2DextAsFunction = _glCopyTexSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTexSubImage2DextAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTexSubImage3Dext(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTexSubImage3DextAsFunction = _glCopyTexSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTexSubImage3DextAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCullParameterdvExt;

/// ```c
/// GLAPI void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params)
/// ```
void glCullParameterdvExt(int pname, Pointer<Double> params) {
  final glCullParameterdvExtAsFunction = _glCullParameterdvExt
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Double> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Double> params)>();
  return glCullParameterdvExtAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCullParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params)
/// ```
void glCullParameterfvExt(int pname, Pointer<Float> params) {
  final glCullParameterfvExtAsFunction = _glCullParameterfvExt
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glCullParameterfvExtAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLabelObjectExt;

/// ```c
/// GLAPI void APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label)
/// ```
void glLabelObjectExt(int type, int object, int length, String label) {
  final glLabelObjectExtAsFunction = _glLabelObjectExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Uint32 object,
            Uint32 length,
            Pointer<Utf8> label,
          )
        >
      >()
      .asFunction<
        void Function(int type, int object, int length, Pointer<Utf8> label)
      >();
  final labelPointer = label.toNativeUtf8();
  final result = glLabelObjectExtAsFunction(type, object, length, labelPointer);
  calloc.free(labelPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetObjectLabelExt;

/// ```c
/// GLAPI void APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
/// ```
void glGetObjectLabelExt(
  int type,
  int object,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Int8> label,
) {
  final glGetObjectLabelExtAsFunction = _glGetObjectLabelExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Uint32 object,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Int8> label,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int object,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Int8> label,
        )
      >();
  return glGetObjectLabelExtAsFunction(type, object, bufSize, length, label);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInsertEventMarkerExt;

/// ```c
/// GLAPI void APIENTRY glInsertEventMarkerEXT (GLsizei length, const GLchar *marker)
/// ```
void glInsertEventMarkerExt(int length, String marker) {
  final glInsertEventMarkerExtAsFunction = _glInsertEventMarkerExt
      .cast<
        NativeFunction<Void Function(Uint32 length, Pointer<Utf8> marker)>
      >()
      .asFunction<void Function(int length, Pointer<Utf8> marker)>();
  final markerPointer = marker.toNativeUtf8();
  final result = glInsertEventMarkerExtAsFunction(length, markerPointer);
  calloc.free(markerPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushGroupMarkerExt;

/// ```c
/// GLAPI void APIENTRY glPushGroupMarkerEXT (GLsizei length, const GLchar *marker)
/// ```
void glPushGroupMarkerExt(int length, String marker) {
  final glPushGroupMarkerExtAsFunction = _glPushGroupMarkerExt
      .cast<
        NativeFunction<Void Function(Uint32 length, Pointer<Utf8> marker)>
      >()
      .asFunction<void Function(int length, Pointer<Utf8> marker)>();
  final markerPointer = marker.toNativeUtf8();
  final result = glPushGroupMarkerExtAsFunction(length, markerPointer);
  calloc.free(markerPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopGroupMarkerExt;

/// ```c
/// GLAPI void APIENTRY glPopGroupMarkerEXT (void)
/// ```
void glPopGroupMarkerExt() {
  final glPopGroupMarkerExtAsFunction = _glPopGroupMarkerExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopGroupMarkerExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthBoundsExt;

/// ```c
/// GLAPI void APIENTRY glDepthBoundsEXT (GLclampd zmin, GLclampd zmax)
/// ```
void glDepthBoundsExt(double zmin, double zmax) {
  final glDepthBoundsExtAsFunction = _glDepthBoundsExt
      .cast<NativeFunction<Void Function(Double zmin, Double zmax)>>()
      .asFunction<void Function(double zmin, double zmax)>();
  return glDepthBoundsExtAsFunction(zmin, zmax);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoadfExt;

/// ```c
/// GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m)
/// ```
void glMatrixLoadfExt(int mode, Pointer<Float> m) {
  final glMatrixLoadfExtAsFunction = _glMatrixLoadfExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Float> m)>>()
      .asFunction<void Function(int mode, Pointer<Float> m)>();
  return glMatrixLoadfExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoaddExt;

/// ```c
/// GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m)
/// ```
void glMatrixLoaddExt(int mode, Pointer<Double> m) {
  final glMatrixLoaddExtAsFunction = _glMatrixLoaddExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Double> m)>>()
      .asFunction<void Function(int mode, Pointer<Double> m)>();
  return glMatrixLoaddExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMultfExt;

/// ```c
/// GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m)
/// ```
void glMatrixMultfExt(int mode, Pointer<Float> m) {
  final glMatrixMultfExtAsFunction = _glMatrixMultfExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Float> m)>>()
      .asFunction<void Function(int mode, Pointer<Float> m)>();
  return glMatrixMultfExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMultdExt;

/// ```c
/// GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m)
/// ```
void glMatrixMultdExt(int mode, Pointer<Double> m) {
  final glMatrixMultdExtAsFunction = _glMatrixMultdExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Double> m)>>()
      .asFunction<void Function(int mode, Pointer<Double> m)>();
  return glMatrixMultdExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoadIdentityExt;

/// ```c
/// GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode)
/// ```
void glMatrixLoadIdentityExt(int mode) {
  final glMatrixLoadIdentityExtAsFunction = _glMatrixLoadIdentityExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glMatrixLoadIdentityExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixRotatefExt;

/// ```c
/// GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glMatrixRotatefExt(int mode, double angle, double x, double y, double z) {
  final glMatrixRotatefExtAsFunction = _glMatrixRotatefExt
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Float angle, Float x, Float y, Float z)
        >
      >()
      .asFunction<
        void Function(int mode, double angle, double x, double y, double z)
      >();
  return glMatrixRotatefExtAsFunction(mode, angle, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixRotatedExt;

/// ```c
/// GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glMatrixRotatedExt(int mode, double angle, double x, double y, double z) {
  final glMatrixRotatedExtAsFunction = _glMatrixRotatedExt
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Double angle, Double x, Double y, Double z)
        >
      >()
      .asFunction<
        void Function(int mode, double angle, double x, double y, double z)
      >();
  return glMatrixRotatedExtAsFunction(mode, angle, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixScalefExt;

/// ```c
/// GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glMatrixScalefExt(int mode, double x, double y, double z) {
  final glMatrixScalefExtAsFunction = _glMatrixScalefExt
      .cast<
        NativeFunction<Void Function(Uint32 mode, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int mode, double x, double y, double z)>();
  return glMatrixScalefExtAsFunction(mode, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixScaledExt;

/// ```c
/// GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glMatrixScaledExt(int mode, double x, double y, double z) {
  final glMatrixScaledExtAsFunction = _glMatrixScaledExt
      .cast<
        NativeFunction<Void Function(Uint32 mode, Double x, Double y, Double z)>
      >()
      .asFunction<void Function(int mode, double x, double y, double z)>();
  return glMatrixScaledExtAsFunction(mode, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixTranslatefExt;

/// ```c
/// GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glMatrixTranslatefExt(int mode, double x, double y, double z) {
  final glMatrixTranslatefExtAsFunction = _glMatrixTranslatefExt
      .cast<
        NativeFunction<Void Function(Uint32 mode, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int mode, double x, double y, double z)>();
  return glMatrixTranslatefExtAsFunction(mode, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixTranslatedExt;

/// ```c
/// GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glMatrixTranslatedExt(int mode, double x, double y, double z) {
  final glMatrixTranslatedExtAsFunction = _glMatrixTranslatedExt
      .cast<
        NativeFunction<Void Function(Uint32 mode, Double x, Double y, Double z)>
      >()
      .asFunction<void Function(int mode, double x, double y, double z)>();
  return glMatrixTranslatedExtAsFunction(mode, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixFrustumExt;

/// ```c
/// GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
/// ```
void glMatrixFrustumExt(
  int mode,
  double left,
  double right,
  double bottom,
  double top,
  double zNear,
  double zFar,
) {
  final glMatrixFrustumExtAsFunction = _glMatrixFrustumExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Double left,
            Double right,
            Double bottom,
            Double top,
            Double zNear,
            Double zFar,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          double left,
          double right,
          double bottom,
          double top,
          double zNear,
          double zFar,
        )
      >();
  return glMatrixFrustumExtAsFunction(
    mode,
    left,
    right,
    bottom,
    top,
    zNear,
    zFar,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixOrthoExt;

/// ```c
/// GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
/// ```
void glMatrixOrthoExt(
  int mode,
  double left,
  double right,
  double bottom,
  double top,
  double zNear,
  double zFar,
) {
  final glMatrixOrthoExtAsFunction = _glMatrixOrthoExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Double left,
            Double right,
            Double bottom,
            Double top,
            Double zNear,
            Double zFar,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          double left,
          double right,
          double bottom,
          double top,
          double zNear,
          double zFar,
        )
      >();
  return glMatrixOrthoExtAsFunction(
    mode,
    left,
    right,
    bottom,
    top,
    zNear,
    zFar,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixPopExt;

/// ```c
/// GLAPI void APIENTRY glMatrixPopEXT (GLenum mode)
/// ```
void glMatrixPopExt(int mode) {
  final glMatrixPopExtAsFunction = _glMatrixPopExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glMatrixPopExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixPushExt;

/// ```c
/// GLAPI void APIENTRY glMatrixPushEXT (GLenum mode)
/// ```
void glMatrixPushExt(int mode) {
  final glMatrixPushExtAsFunction = _glMatrixPushExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glMatrixPushExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientAttribDefaultExt;

/// ```c
/// GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask)
/// ```
void glClientAttribDefaultExt(int mask) {
  final glClientAttribDefaultExtAsFunction = _glClientAttribDefaultExt
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glClientAttribDefaultExtAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushClientAttribDefaultExt;

/// ```c
/// GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask)
/// ```
void glPushClientAttribDefaultExt(int mask) {
  final glPushClientAttribDefaultExtAsFunction = _glPushClientAttribDefaultExt
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glPushClientAttribDefaultExtAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterfExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param)
/// ```
void glTextureParameterfExt(int texture, int target, int pname, double param) {
  final glTextureParameterfExtAsFunction = _glTextureParameterfExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Float param,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, double param)
      >();
  return glTextureParameterfExtAsFunction(texture, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glTextureParameterfvExt(
  int texture,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glTextureParameterfvExtAsFunction = _glTextureParameterfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Float> params)
      >();
  return glTextureParameterfvExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameteriExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param)
/// ```
void glTextureParameteriExt(int texture, int target, int pname, int param) {
  final glTextureParameteriExtAsFunction = _glTextureParameteriExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Int32 param,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, int param)
      >();
  return glTextureParameteriExtAsFunction(texture, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterivExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params)
/// ```
void glTextureParameterivExt(
  int texture,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glTextureParameterivExtAsFunction = _glTextureParameterivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Int32> params)
      >();
  return glTextureParameterivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureImage1Dext;

/// ```c
/// GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureImage1Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureImage1DextAsFunction = _glTextureImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureImage1DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureImage2Dext;

/// ```c
/// GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureImage2Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureImage2DextAsFunction = _glTextureImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureImage2DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage1Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage1DextAsFunction = _glTextureSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage1DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    width,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage2Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage2DextAsFunction = _glTextureSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage2DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
void glCopyTextureImage1Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int border,
) {
  final glCopyTextureImage1DextAsFunction = _glCopyTextureImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int border,
        )
      >();
  return glCopyTextureImage1DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    x,
    y,
    width,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
void glCopyTextureImage2Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
  int border,
) {
  final glCopyTextureImage2DextAsFunction = _glCopyTextureImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
          int border,
        )
      >();
  return glCopyTextureImage2DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
void glCopyTextureSubImage1Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
) {
  final glCopyTextureSubImage1DextAsFunction = _glCopyTextureSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int x,
          int y,
          int width,
        )
      >();
  return glCopyTextureSubImage1DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    x,
    y,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTextureSubImage2Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTextureSubImage2DextAsFunction = _glCopyTextureSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTextureSubImage2DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureImageExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
/// ```
void glGetTextureImageExt(
  int texture,
  int target,
  int level,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glGetTextureImageExtAsFunction = _glGetTextureImageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetTextureImageExtAsFunction(
    texture,
    target,
    level,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetTextureParameterfvExt(
  int texture,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetTextureParameterfvExtAsFunction = _glGetTextureParameterfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Float> params)
      >();
  return glGetTextureParameterfvExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetTextureParameterivExt(
  int texture,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTextureParameterivExtAsFunction = _glGetTextureParameterivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Int32> params)
      >();
  return glGetTextureParameterivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureLevelParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
/// ```
void glGetTextureLevelParameterfvExt(
  int texture,
  int target,
  int level,
  int pname,
  Pointer<Float> params,
) {
  final glGetTextureLevelParameterfvExtAsFunction =
      _glGetTextureLevelParameterfvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 level,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int level,
              int pname,
              Pointer<Float> params,
            )
          >();
  return glGetTextureLevelParameterfvExtAsFunction(
    texture,
    target,
    level,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureLevelParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
/// ```
void glGetTextureLevelParameterivExt(
  int texture,
  int target,
  int level,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTextureLevelParameterivExtAsFunction =
      _glGetTextureLevelParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 level,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int level,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetTextureLevelParameterivExtAsFunction(
    texture,
    target,
    level,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureImage3Dext;

/// ```c
/// GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureImage3Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureImage3DextAsFunction = _glTextureImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureImage3DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
void glTextureSubImage3Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTextureSubImage3DextAsFunction = _glTextureSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTextureSubImage3DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTextureSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyTextureSubImage3Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTextureSubImage3DextAsFunction = _glCopyTextureSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTextureSubImage3DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindMultiTextureExt;

/// ```c
/// GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture)
/// ```
void glBindMultiTextureExt(int texunit, int target, int texture) {
  final glBindMultiTextureExtAsFunction = _glBindMultiTextureExt
      .cast<
        NativeFunction<
          Void Function(Uint32 texunit, Uint32 target, Uint32 texture)
        >
      >()
      .asFunction<void Function(int texunit, int target, int texture)>();
  return glBindMultiTextureExtAsFunction(texunit, target, texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoordPointerExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glMultiTexCoordPointerExt(
  int texunit,
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glMultiTexCoordPointerExtAsFunction = _glMultiTexCoordPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glMultiTexCoordPointerExtAsFunction(
    texunit,
    size,
    type,
    stride,
    pointer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexEnvfExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
/// ```
void glMultiTexEnvfExt(int texunit, int target, int pname, double param) {
  final glMultiTexEnvfExtAsFunction = _glMultiTexEnvfExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Float param,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, double param)
      >();
  return glMultiTexEnvfExtAsFunction(texunit, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexEnvfvExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glMultiTexEnvfvExt(
  int texunit,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glMultiTexEnvfvExtAsFunction = _glMultiTexEnvfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Float> params)
      >();
  return glMultiTexEnvfvExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexEnviExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param)
/// ```
void glMultiTexEnviExt(int texunit, int target, int pname, int param) {
  final glMultiTexEnviExtAsFunction = _glMultiTexEnviExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Int32 param,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, int param)
      >();
  return glMultiTexEnviExtAsFunction(texunit, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexEnvivExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
/// ```
void glMultiTexEnvivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glMultiTexEnvivExtAsFunction = _glMultiTexEnvivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glMultiTexEnvivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGendExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
/// ```
void glMultiTexGendExt(int texunit, int coord, int pname, double param) {
  final glMultiTexGendExtAsFunction = _glMultiTexGendExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Double param,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, double param)
      >();
  return glMultiTexGendExtAsFunction(texunit, coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGendvExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
/// ```
void glMultiTexGendvExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Double> params,
) {
  final glMultiTexGendvExtAsFunction = _glMultiTexGendvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Double> params)
      >();
  return glMultiTexGendvExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGenfExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
/// ```
void glMultiTexGenfExt(int texunit, int coord, int pname, double param) {
  final glMultiTexGenfExtAsFunction = _glMultiTexGenfExt
      .cast<
        NativeFunction<
          Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Float param)
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, double param)
      >();
  return glMultiTexGenfExtAsFunction(texunit, coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGenfvExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
/// ```
void glMultiTexGenfvExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Float> params,
) {
  final glMultiTexGenfvExtAsFunction = _glMultiTexGenfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Float> params)
      >();
  return glMultiTexGenfvExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGeniExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param)
/// ```
void glMultiTexGeniExt(int texunit, int coord, int pname, int param) {
  final glMultiTexGeniExtAsFunction = _glMultiTexGeniExt
      .cast<
        NativeFunction<
          Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Int32 param)
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, int param)
      >();
  return glMultiTexGeniExtAsFunction(texunit, coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexGenivExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
/// ```
void glMultiTexGenivExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Int32> params,
) {
  final glMultiTexGenivExtAsFunction = _glMultiTexGenivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Int32> params)
      >();
  return glMultiTexGenivExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexEnvfvExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetMultiTexEnvfvExt(
  int texunit,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetMultiTexEnvfvExtAsFunction = _glGetMultiTexEnvfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Float> params)
      >();
  return glGetMultiTexEnvfvExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexEnvivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetMultiTexEnvivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMultiTexEnvivExtAsFunction = _glGetMultiTexEnvivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glGetMultiTexEnvivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexGendvExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
/// ```
void glGetMultiTexGendvExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Double> params,
) {
  final glGetMultiTexGendvExtAsFunction = _glGetMultiTexGendvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Double> params)
      >();
  return glGetMultiTexGendvExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexGenfvExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
/// ```
void glGetMultiTexGenfvExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Float> params,
) {
  final glGetMultiTexGenfvExtAsFunction = _glGetMultiTexGenfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Float> params)
      >();
  return glGetMultiTexGenfvExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexGenivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params)
/// ```
void glGetMultiTexGenivExt(
  int texunit,
  int coord,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMultiTexGenivExtAsFunction = _glGetMultiTexGenivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 coord,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int coord, int pname, Pointer<Int32> params)
      >();
  return glGetMultiTexGenivExtAsFunction(texunit, coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameteriExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param)
/// ```
void glMultiTexParameteriExt(int texunit, int target, int pname, int param) {
  final glMultiTexParameteriExtAsFunction = _glMultiTexParameteriExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Int32 param,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, int param)
      >();
  return glMultiTexParameteriExtAsFunction(texunit, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameterivExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
/// ```
void glMultiTexParameterivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glMultiTexParameterivExtAsFunction = _glMultiTexParameterivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glMultiTexParameterivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameterfExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
/// ```
void glMultiTexParameterfExt(int texunit, int target, int pname, double param) {
  final glMultiTexParameterfExtAsFunction = _glMultiTexParameterfExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Float param,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, double param)
      >();
  return glMultiTexParameterfExtAsFunction(texunit, target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glMultiTexParameterfvExt(
  int texunit,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glMultiTexParameterfvExtAsFunction = _glMultiTexParameterfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Float> params)
      >();
  return glMultiTexParameterfvExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexImage1Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexImage1Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexImage1DextAsFunction = _glMultiTexImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int internalformat,
          int width,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexImage1DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexImage2Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexImage2Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexImage2DextAsFunction = _glMultiTexImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexImage2DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexSubImage1Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexSubImage1DextAsFunction = _glMultiTexSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexSubImage1DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    width,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexSubImage2Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexSubImage2DextAsFunction = _glMultiTexSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexSubImage2DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyMultiTexImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
void glCopyMultiTexImage1Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int border,
) {
  final glCopyMultiTexImage1DextAsFunction = _glCopyMultiTexImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int border,
        )
      >();
  return glCopyMultiTexImage1DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    x,
    y,
    width,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyMultiTexImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
void glCopyMultiTexImage2Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
  int border,
) {
  final glCopyMultiTexImage2DextAsFunction = _glCopyMultiTexImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
          int border,
        )
      >();
  return glCopyMultiTexImage2DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyMultiTexSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
void glCopyMultiTexSubImage1Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
) {
  final glCopyMultiTexSubImage1DextAsFunction = _glCopyMultiTexSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int x,
          int y,
          int width,
        )
      >();
  return glCopyMultiTexSubImage1DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    x,
    y,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyMultiTexSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyMultiTexSubImage2Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyMultiTexSubImage2DextAsFunction = _glCopyMultiTexSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyMultiTexSubImage2DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexImageExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
/// ```
void glGetMultiTexImageExt(
  int texunit,
  int target,
  int level,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glGetMultiTexImageExtAsFunction = _glGetMultiTexImageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetMultiTexImageExtAsFunction(
    texunit,
    target,
    level,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetMultiTexParameterfvExt(
  int texunit,
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetMultiTexParameterfvExtAsFunction = _glGetMultiTexParameterfvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Float> params)
      >();
  return glGetMultiTexParameterfvExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetMultiTexParameterivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMultiTexParameterivExtAsFunction = _glGetMultiTexParameterivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glGetMultiTexParameterivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexLevelParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
/// ```
void glGetMultiTexLevelParameterfvExt(
  int texunit,
  int target,
  int level,
  int pname,
  Pointer<Float> params,
) {
  final glGetMultiTexLevelParameterfvExtAsFunction =
      _glGetMultiTexLevelParameterfvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int pname,
              Pointer<Float> params,
            )
          >();
  return glGetMultiTexLevelParameterfvExtAsFunction(
    texunit,
    target,
    level,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexLevelParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
/// ```
void glGetMultiTexLevelParameterivExt(
  int texunit,
  int target,
  int level,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMultiTexLevelParameterivExtAsFunction =
      _glGetMultiTexLevelParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetMultiTexLevelParameterivExtAsFunction(
    texunit,
    target,
    level,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexImage3Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexImage3Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexImage3DextAsFunction = _glMultiTexImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexImage3DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
void glMultiTexSubImage3Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glMultiTexSubImage3DextAsFunction = _glMultiTexSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glMultiTexSubImage3DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyMultiTexSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glCopyMultiTexSubImage3Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyMultiTexSubImage3DextAsFunction = _glCopyMultiTexSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyMultiTexSubImage3DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableClientStateIndexedExt;

/// ```c
/// GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index)
/// ```
void glEnableClientStateIndexedExt(int array, int index) {
  final glEnableClientStateIndexedExtAsFunction = _glEnableClientStateIndexedExt
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return glEnableClientStateIndexedExtAsFunction(array, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableClientStateIndexedExt;

/// ```c
/// GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index)
/// ```
void glDisableClientStateIndexedExt(int array, int index) {
  final glDisableClientStateIndexedExtAsFunction =
      _glDisableClientStateIndexedExt
          .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
          .asFunction<void Function(int array, int index)>();
  return glDisableClientStateIndexedExtAsFunction(array, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFloatIndexedvExt;

/// ```c
/// GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data)
/// ```
void glGetFloatIndexedvExt(int target, int index, Pointer<Float> data) {
  final glGetFloatIndexedvExtAsFunction = _glGetFloatIndexedvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Float> data)>();
  return glGetFloatIndexedvExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDoubleIndexedvExt;

/// ```c
/// GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data)
/// ```
void glGetDoubleIndexedvExt(int target, int index, Pointer<Double> data) {
  final glGetDoubleIndexedvExtAsFunction = _glGetDoubleIndexedvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Double> data)>();
  return glGetDoubleIndexedvExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPointerIndexedvExt;

/// ```c
/// GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, void **data)
/// ```
void glGetPointerIndexedvExt(
  int target,
  int index,
  Pointer<Pointer<NativeType>> data,
) {
  final glGetPointerIndexedvExtAsFunction = _glGetPointerIndexedvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Pointer<Pointer<NativeType>> data,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Pointer<NativeType>> data)
      >();
  return glGetPointerIndexedvExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableIndexedExt;

/// ```c
/// GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index)
/// ```
void glEnableIndexedExt(int target, int index) {
  final glEnableIndexedExtAsFunction = _glEnableIndexedExt
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return glEnableIndexedExtAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableIndexedExt;

/// ```c
/// GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index)
/// ```
void glDisableIndexedExt(int target, int index) {
  final glDisableIndexedExtAsFunction = _glDisableIndexedExt
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return glDisableIndexedExtAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsEnabledIndexedExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index)
/// ```
int glIsEnabledIndexedExt(int target, int index) {
  final glIsEnabledIndexedExtAsFunction = _glIsEnabledIndexedExt
      .cast<NativeFunction<Int32 Function(Uint32 target, Uint32 index)>>()
      .asFunction<int Function(int target, int index)>();
  return glIsEnabledIndexedExtAsFunction(target, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetIntegerIndexedvExt;

/// ```c
/// GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data)
/// ```
void glGetIntegerIndexedvExt(int target, int index, Pointer<Int32> data) {
  final glGetIntegerIndexedvExtAsFunction = _glGetIntegerIndexedvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Int32> data)>();
  return glGetIntegerIndexedvExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBooleanIndexedvExt;

/// ```c
/// GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data)
/// ```
void glGetBooleanIndexedvExt(int target, int index, Pointer<Int32> data) {
  final glGetBooleanIndexedvExtAsFunction = _glGetBooleanIndexedvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Int32> data)>();
  return glGetBooleanIndexedvExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureImage3Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureImage3DextAsFunction = _glCompressedTextureImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> bits,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int imageSize,
          Pointer<NativeType> bits,
        )
      >();
  return glCompressedTextureImage3DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureImage2Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureImage2DextAsFunction = _glCompressedTextureImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> bits,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int imageSize,
          Pointer<NativeType> bits,
        )
      >();
  return glCompressedTextureImage2DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureImage1Dext(
  int texture,
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureImage1DextAsFunction = _glCompressedTextureImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> bits,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int level,
          int internalformat,
          int width,
          int border,
          int imageSize,
          Pointer<NativeType> bits,
        )
      >();
  return glCompressedTextureImage1DextAsFunction(
    texture,
    target,
    level,
    internalformat,
    width,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureSubImage3Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureSubImage3DextAsFunction =
      _glCompressedTextureSubImage3Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Int32 yoffset,
                Int32 zoffset,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int level,
              int xoffset,
              int yoffset,
              int zoffset,
              int width,
              int height,
              int depth,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedTextureSubImage3DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureSubImage2Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureSubImage2DextAsFunction =
      _glCompressedTextureSubImage2Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Int32 yoffset,
                Uint32 width,
                Uint32 height,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int level,
              int xoffset,
              int yoffset,
              int width,
              int height,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedTextureSubImage2DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTextureSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedTextureSubImage1Dext(
  int texture,
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedTextureSubImage1DextAsFunction =
      _glCompressedTextureSubImage1Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Uint32 width,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int level,
              int xoffset,
              int width,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedTextureSubImage1DextAsFunction(
    texture,
    target,
    level,
    xoffset,
    width,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedTextureImageExt;

/// ```c
/// GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void *img)
/// ```
void glGetCompressedTextureImageExt(
  int texture,
  int target,
  int lod,
  Pointer<NativeType> img,
) {
  final glGetCompressedTextureImageExtAsFunction =
      _glGetCompressedTextureImageExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Int32 lod,
                Pointer<NativeType> img,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int lod,
              Pointer<NativeType> img,
            )
          >();
  return glGetCompressedTextureImageExtAsFunction(texture, target, lod, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedMultiTexImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexImage3Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexImage3DextAsFunction =
      _glCompressedMultiTexImage3Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 border,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int internalformat,
              int width,
              int height,
              int depth,
              int border,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexImage3DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedMultiTexImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexImage2Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexImage2DextAsFunction =
      _glCompressedMultiTexImage2Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
                Int32 border,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int internalformat,
              int width,
              int height,
              int border,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexImage2DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedMultiTexImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexImage1Dext(
  int texunit,
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexImage1DextAsFunction =
      _glCompressedMultiTexImage1Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Uint32 internalformat,
                Uint32 width,
                Int32 border,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int internalformat,
              int width,
              int border,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexImage1DextAsFunction(
    texunit,
    target,
    level,
    internalformat,
    width,
    border,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glCompressedMultiTexSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexSubImage3Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexSubImage3DextAsFunction =
      _glCompressedMultiTexSubImage3Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Int32 yoffset,
                Int32 zoffset,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int xoffset,
              int yoffset,
              int zoffset,
              int width,
              int height,
              int depth,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexSubImage3DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glCompressedMultiTexSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexSubImage2Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexSubImage2DextAsFunction =
      _glCompressedMultiTexSubImage2Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Int32 yoffset,
                Uint32 width,
                Uint32 height,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int xoffset,
              int yoffset,
              int width,
              int height,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexSubImage2DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glCompressedMultiTexSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)
/// ```
void glCompressedMultiTexSubImage1Dext(
  int texunit,
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  Pointer<NativeType> bits,
) {
  final glCompressedMultiTexSubImage1DextAsFunction =
      _glCompressedMultiTexSubImage1Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 level,
                Int32 xoffset,
                Uint32 width,
                Uint32 format,
                Uint32 imageSize,
                Pointer<NativeType> bits,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int level,
              int xoffset,
              int width,
              int format,
              int imageSize,
              Pointer<NativeType> bits,
            )
          >();
  return glCompressedMultiTexSubImage1DextAsFunction(
    texunit,
    target,
    level,
    xoffset,
    width,
    format,
    imageSize,
    bits,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedMultiTexImageExt;

/// ```c
/// GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void *img)
/// ```
void glGetCompressedMultiTexImageExt(
  int texunit,
  int target,
  int lod,
  Pointer<NativeType> img,
) {
  final glGetCompressedMultiTexImageExtAsFunction =
      _glGetCompressedMultiTexImageExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texunit,
                Uint32 target,
                Int32 lod,
                Pointer<NativeType> img,
              )
            >
          >()
          .asFunction<
            void Function(
              int texunit,
              int target,
              int lod,
              Pointer<NativeType> img,
            )
          >();
  return glGetCompressedMultiTexImageExtAsFunction(texunit, target, lod, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoadTransposefExt;

/// ```c
/// GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m)
/// ```
void glMatrixLoadTransposefExt(int mode, Pointer<Float> m) {
  final glMatrixLoadTransposefExtAsFunction = _glMatrixLoadTransposefExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Float> m)>>()
      .asFunction<void Function(int mode, Pointer<Float> m)>();
  return glMatrixLoadTransposefExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoadTransposedExt;

/// ```c
/// GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m)
/// ```
void glMatrixLoadTransposedExt(int mode, Pointer<Double> m) {
  final glMatrixLoadTransposedExtAsFunction = _glMatrixLoadTransposedExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Double> m)>>()
      .asFunction<void Function(int mode, Pointer<Double> m)>();
  return glMatrixLoadTransposedExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMultTransposefExt;

/// ```c
/// GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m)
/// ```
void glMatrixMultTransposefExt(int mode, Pointer<Float> m) {
  final glMatrixMultTransposefExtAsFunction = _glMatrixMultTransposefExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Float> m)>>()
      .asFunction<void Function(int mode, Pointer<Float> m)>();
  return glMatrixMultTransposefExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMultTransposedExt;

/// ```c
/// GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m)
/// ```
void glMatrixMultTransposedExt(int mode, Pointer<Double> m) {
  final glMatrixMultTransposedExtAsFunction = _glMatrixMultTransposedExt
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Double> m)>>()
      .asFunction<void Function(int mode, Pointer<Double> m)>();
  return glMatrixMultTransposedExtAsFunction(mode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferDataExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
/// ```
void glNamedBufferDataExt(
  int buffer,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int usage,
) {
  final glNamedBufferDataExtAsFunction = _glNamedBufferDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 usage,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int usage,
        )
      >();
  return glNamedBufferDataExtAsFunction(buffer, size, data, usage);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferSubDataExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
void glNamedBufferSubDataExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glNamedBufferSubDataExtAsFunction = _glNamedBufferSubDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glNamedBufferSubDataExtAsFunction(buffer, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapNamedBufferExt;

/// ```c
/// GLAPI void *APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access)
/// ```
Pointer<NativeType> glMapNamedBufferExt(int buffer, int access) {
  final glMapNamedBufferExtAsFunction = _glMapNamedBufferExt
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(Uint32 buffer, Uint32 access)
        >
      >()
      .asFunction<Pointer<NativeType> Function(int buffer, int access)>();
  return glMapNamedBufferExtAsFunction(buffer, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapNamedBufferExt;

/// ```c
/// GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer)
/// ```
int glUnmapNamedBufferExt(int buffer) {
  final glUnmapNamedBufferExtAsFunction = _glUnmapNamedBufferExt
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glUnmapNamedBufferExtAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params)
/// ```
void glGetNamedBufferParameterivExt(
  int buffer,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedBufferParameterivExtAsFunction =
      _glGetNamedBufferParameterivExt
          .cast<
            NativeFunction<
              Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int buffer, int pname, Pointer<Int32> params)
          >();
  return glGetNamedBufferParameterivExtAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferPointervExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void **params)
/// ```
void glGetNamedBufferPointervExt(
  int buffer,
  int pname,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetNamedBufferPointervExtAsFunction = _glGetNamedBufferPointervExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 pname,
            Pointer<Pointer<NativeType>> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int pname,
          Pointer<Pointer<NativeType>> params,
        )
      >();
  return glGetNamedBufferPointervExtAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferSubDataExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
/// ```
void glGetNamedBufferSubDataExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glGetNamedBufferSubDataExtAsFunction = _glGetNamedBufferSubDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glGetNamedBufferSubDataExtAsFunction(buffer, offset, size, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1fExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
/// ```
void glProgramUniform1fExt(int program, int location, double v0) {
  final glProgramUniform1fExtAsFunction = _glProgramUniform1fExt
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Float v0)>
      >()
      .asFunction<void Function(int program, int location, double v0)>();
  return glProgramUniform1fExtAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2fExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
/// ```
void glProgramUniform2fExt(int program, int location, double v0, double v1) {
  final glProgramUniform2fExtAsFunction = _glProgramUniform2fExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Float v0, Float v1)
        >
      >()
      .asFunction<
        void Function(int program, int location, double v0, double v1)
      >();
  return glProgramUniform2fExtAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3fExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
void glProgramUniform3fExt(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
) {
  final glProgramUniform3fExtAsFunction = _glProgramUniform3fExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Float v0,
            Float v1,
            Float v2,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
        )
      >();
  return glProgramUniform3fExtAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4fExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
void glProgramUniform4fExt(
  int program,
  int location,
  double v0,
  double v1,
  double v2,
  double v3,
) {
  final glProgramUniform4fExtAsFunction = _glProgramUniform4fExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Float v0,
            Float v1,
            Float v2,
            Float v3,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double v0,
          double v1,
          double v2,
          double v3,
        )
      >();
  return glProgramUniform4fExtAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1iExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
/// ```
void glProgramUniform1iExt(int program, int location, int v0) {
  final glProgramUniform1iExtAsFunction = _glProgramUniform1iExt
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0)>
      >()
      .asFunction<void Function(int program, int location, int v0)>();
  return glProgramUniform1iExtAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2iExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
/// ```
void glProgramUniform2iExt(int program, int location, int v0, int v1) {
  final glProgramUniform2iExtAsFunction = _glProgramUniform2iExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1)
        >
      >()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return glProgramUniform2iExtAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3iExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
/// ```
void glProgramUniform3iExt(int program, int location, int v0, int v1, int v2) {
  final glProgramUniform3iExtAsFunction = _glProgramUniform3iExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int32 v0,
            Int32 v1,
            Int32 v2,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2)
      >();
  return glProgramUniform3iExtAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4iExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
void glProgramUniform4iExt(
  int program,
  int location,
  int v0,
  int v1,
  int v2,
  int v3,
) {
  final glProgramUniform4iExtAsFunction = _glProgramUniform4iExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Int32 v0,
            Int32 v1,
            Int32 v2,
            Int32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2, int v3)
      >();
  return glProgramUniform4iExtAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform1fvExt(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform1fvExtAsFunction = _glProgramUniform1fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform1fvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform2fvExt(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform2fvExtAsFunction = _glProgramUniform2fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform2fvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform3fvExt(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform3fvExtAsFunction = _glProgramUniform3fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform3fvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
/// ```
void glProgramUniform4fvExt(
  int program,
  int location,
  int count,
  Pointer<Float> value,
) {
  final glProgramUniform4fvExtAsFunction = _glProgramUniform4fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Float> value,
        )
      >();
  return glProgramUniform4fvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1ivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform1ivExt(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform1ivExtAsFunction = _glProgramUniform1ivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform1ivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2ivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform2ivExt(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform2ivExtAsFunction = _glProgramUniform2ivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform2ivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3ivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform3ivExt(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform3ivExtAsFunction = _glProgramUniform3ivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform3ivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4ivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
/// ```
void glProgramUniform4ivExt(
  int program,
  int location,
  int count,
  Pointer<Int32> value,
) {
  final glProgramUniform4ivExtAsFunction = _glProgramUniform4ivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Int32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Int32> value,
        )
      >();
  return glProgramUniform4ivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2fvExtAsFunction = _glProgramUniformMatrix2fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix2fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3fvExtAsFunction = _glProgramUniformMatrix3fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix3fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4fvExtAsFunction = _glProgramUniformMatrix4fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Float> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Float> value,
        )
      >();
  return glProgramUniformMatrix4fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x3fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2x3fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2x3fvExtAsFunction =
      _glProgramUniformMatrix2x3fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix2x3fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x2fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3x2fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3x2fvExtAsFunction =
      _glProgramUniformMatrix3x2fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix3x2fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix2x4fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix2x4fvExtAsFunction =
      _glProgramUniformMatrix2x4fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix2x4fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x2fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4x2fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4x2fvExtAsFunction =
      _glProgramUniformMatrix4x2fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix4x2fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix3x4fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix3x4fvExtAsFunction =
      _glProgramUniformMatrix3x4fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix3x4fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x3fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
void glProgramUniformMatrix4x3fvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Float> value,
) {
  final glProgramUniformMatrix4x3fvExtAsFunction =
      _glProgramUniformMatrix4x3fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Float> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Float> value,
            )
          >();
  return glProgramUniformMatrix4x3fvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBufferExt;

/// ```c
/// GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
/// ```
void glTextureBufferExt(
  int texture,
  int target,
  int internalformat,
  int buffer,
) {
  final glTextureBufferExtAsFunction = _glTextureBufferExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 internalformat,
            Uint32 buffer,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int internalformat, int buffer)
      >();
  return glTextureBufferExtAsFunction(texture, target, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexBufferExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
/// ```
void glMultiTexBufferExt(
  int texunit,
  int target,
  int internalformat,
  int buffer,
) {
  final glMultiTexBufferExtAsFunction = _glMultiTexBufferExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 internalformat,
            Uint32 buffer,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int internalformat, int buffer)
      >();
  return glMultiTexBufferExtAsFunction(texunit, target, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params)
/// ```
void glTextureParameterIivExt(
  int texture,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glTextureParameterIivExtAsFunction = _glTextureParameterIivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Int32> params)
      >();
  return glTextureParameterIivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params)
/// ```
void glTextureParameterIuivExt(
  int texture,
  int target,
  int pname,
  Pointer<Uint32> params,
) {
  final glTextureParameterIuivExtAsFunction = _glTextureParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int pname,
          Pointer<Uint32> params,
        )
      >();
  return glTextureParameterIuivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetTextureParameterIivExt(
  int texture,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTextureParameterIivExtAsFunction = _glGetTextureParameterIivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texture, int target, int pname, Pointer<Int32> params)
      >();
  return glGetTextureParameterIivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params)
/// ```
void glGetTextureParameterIuivExt(
  int texture,
  int target,
  int pname,
  Pointer<Uint32> params,
) {
  final glGetTextureParameterIuivExtAsFunction = _glGetTextureParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 pname,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int pname,
          Pointer<Uint32> params,
        )
      >();
  return glGetTextureParameterIuivExtAsFunction(texture, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
/// ```
void glMultiTexParameterIivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glMultiTexParameterIivExtAsFunction = _glMultiTexParameterIivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glMultiTexParameterIivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
/// ```
void glMultiTexParameterIuivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Uint32> params,
) {
  final glMultiTexParameterIuivExtAsFunction = _glMultiTexParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int pname,
          Pointer<Uint32> params,
        )
      >();
  return glMultiTexParameterIuivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetMultiTexParameterIivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMultiTexParameterIivExtAsFunction = _glGetMultiTexParameterIivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int texunit, int target, int pname, Pointer<Int32> params)
      >();
  return glGetMultiTexParameterIivExtAsFunction(texunit, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultiTexParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params)
/// ```
void glGetMultiTexParameterIuivExt(
  int texunit,
  int target,
  int pname,
  Pointer<Uint32> params,
) {
  final glGetMultiTexParameterIuivExtAsFunction = _glGetMultiTexParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texunit,
            Uint32 target,
            Uint32 pname,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int texunit,
          int target,
          int pname,
          Pointer<Uint32> params,
        )
      >();
  return glGetMultiTexParameterIuivExtAsFunction(
    texunit,
    target,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1uiExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
/// ```
void glProgramUniform1uiExt(int program, int location, int v0) {
  final glProgramUniform1uiExtAsFunction = _glProgramUniform1uiExt
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0)>
      >()
      .asFunction<void Function(int program, int location, int v0)>();
  return glProgramUniform1uiExtAsFunction(program, location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2uiExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
/// ```
void glProgramUniform2uiExt(int program, int location, int v0, int v1) {
  final glProgramUniform2uiExtAsFunction = _glProgramUniform2uiExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1)
        >
      >()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return glProgramUniform2uiExtAsFunction(program, location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3uiExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
void glProgramUniform3uiExt(int program, int location, int v0, int v1, int v2) {
  final glProgramUniform3uiExtAsFunction = _glProgramUniform3uiExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2)
      >();
  return glProgramUniform3uiExtAsFunction(program, location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4uiExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
void glProgramUniform4uiExt(
  int program,
  int location,
  int v0,
  int v1,
  int v2,
  int v3,
) {
  final glProgramUniform4uiExtAsFunction = _glProgramUniform4uiExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
            Uint32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, int v0, int v1, int v2, int v3)
      >();
  return glProgramUniform4uiExtAsFunction(program, location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1uivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform1uivExt(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform1uivExtAsFunction = _glProgramUniform1uivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform1uivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2uivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform2uivExt(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform2uivExtAsFunction = _glProgramUniform2uivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform2uivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3uivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform3uivExt(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform3uivExtAsFunction = _glProgramUniform3uivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform3uivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4uivExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
/// ```
void glProgramUniform4uivExt(
  int program,
  int location,
  int count,
  Pointer<Uint32> value,
) {
  final glProgramUniform4uivExtAsFunction = _glProgramUniform4uivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint32> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint32> value,
        )
      >();
  return glProgramUniform4uivExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameters4fvExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
/// ```
void glNamedProgramLocalParameters4fvExt(
  int program,
  int target,
  int index,
  int count,
  Pointer<Float> params,
) {
  final glNamedProgramLocalParameters4fvExtAsFunction =
      _glNamedProgramLocalParameters4fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              int count,
              Pointer<Float> params,
            )
          >();
  return glNamedProgramLocalParameters4fvExtAsFunction(
    program,
    target,
    index,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameterI4iExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
void glNamedProgramLocalParameterI4iExt(
  int program,
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glNamedProgramLocalParameterI4iExtAsFunction =
      _glNamedProgramLocalParameterI4iExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Int32 x,
                Int32 y,
                Int32 z,
                Int32 w,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              int x,
              int y,
              int z,
              int w,
            )
          >();
  return glNamedProgramLocalParameterI4iExtAsFunction(
    program,
    target,
    index,
    x,
    y,
    z,
    w,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameterI4ivExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params)
/// ```
void glNamedProgramLocalParameterI4ivExt(
  int program,
  int target,
  int index,
  Pointer<Int32> params,
) {
  final glNamedProgramLocalParameterI4ivExtAsFunction =
      _glNamedProgramLocalParameterI4ivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Int32> params,
            )
          >();
  return glNamedProgramLocalParameterI4ivExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParametersI4ivExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
/// ```
void glNamedProgramLocalParametersI4ivExt(
  int program,
  int target,
  int index,
  int count,
  Pointer<Int32> params,
) {
  final glNamedProgramLocalParametersI4ivExtAsFunction =
      _glNamedProgramLocalParametersI4ivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              int count,
              Pointer<Int32> params,
            )
          >();
  return glNamedProgramLocalParametersI4ivExtAsFunction(
    program,
    target,
    index,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameterI4uiExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
void glNamedProgramLocalParameterI4uiExt(
  int program,
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glNamedProgramLocalParameterI4uiExtAsFunction =
      _glNamedProgramLocalParameterI4uiExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Uint32 x,
                Uint32 y,
                Uint32 z,
                Uint32 w,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              int x,
              int y,
              int z,
              int w,
            )
          >();
  return glNamedProgramLocalParameterI4uiExtAsFunction(
    program,
    target,
    index,
    x,
    y,
    z,
    w,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameterI4uivExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params)
/// ```
void glNamedProgramLocalParameterI4uivExt(
  int program,
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glNamedProgramLocalParameterI4uivExtAsFunction =
      _glNamedProgramLocalParameterI4uivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Uint32> params,
            )
          >();
  return glNamedProgramLocalParameterI4uivExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParametersI4uivExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
/// ```
void glNamedProgramLocalParametersI4uivExt(
  int program,
  int target,
  int index,
  int count,
  Pointer<Uint32> params,
) {
  final glNamedProgramLocalParametersI4uivExtAsFunction =
      _glNamedProgramLocalParametersI4uivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              int count,
              Pointer<Uint32> params,
            )
          >();
  return glNamedProgramLocalParametersI4uivExtAsFunction(
    program,
    target,
    index,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedProgramLocalParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params)
/// ```
void glGetNamedProgramLocalParameterIivExt(
  int program,
  int target,
  int index,
  Pointer<Int32> params,
) {
  final glGetNamedProgramLocalParameterIivExtAsFunction =
      _glGetNamedProgramLocalParameterIivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Int32> params,
            )
          >();
  return glGetNamedProgramLocalParameterIivExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedProgramLocalParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params)
/// ```
void glGetNamedProgramLocalParameterIuivExt(
  int program,
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glGetNamedProgramLocalParameterIuivExtAsFunction =
      _glGetNamedProgramLocalParameterIuivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Uint32> params,
            )
          >();
  return glGetNamedProgramLocalParameterIuivExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableClientStateiExt;

/// ```c
/// GLAPI void APIENTRY glEnableClientStateiEXT (GLenum array, GLuint index)
/// ```
void glEnableClientStateiExt(int array, int index) {
  final glEnableClientStateiExtAsFunction = _glEnableClientStateiExt
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return glEnableClientStateiExtAsFunction(array, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableClientStateiExt;

/// ```c
/// GLAPI void APIENTRY glDisableClientStateiEXT (GLenum array, GLuint index)
/// ```
void glDisableClientStateiExt(int array, int index) {
  final glDisableClientStateiExtAsFunction = _glDisableClientStateiExt
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return glDisableClientStateiExtAsFunction(array, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFloatiVExt;

/// ```c
/// GLAPI void APIENTRY glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat *params)
/// ```
void glGetFloatiVExt(int pname, int index, Pointer<Float> params) {
  final glGetFloatiVExtAsFunction = _glGetFloatiVExt
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Uint32 index, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int pname, int index, Pointer<Float> params)>();
  return glGetFloatiVExtAsFunction(pname, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDoubleiVExt;

/// ```c
/// GLAPI void APIENTRY glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble *params)
/// ```
void glGetDoubleiVExt(int pname, int index, Pointer<Double> params) {
  final glGetDoubleiVExtAsFunction = _glGetDoubleiVExt
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Uint32 index, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int pname, int index, Pointer<Double> params)
      >();
  return glGetDoubleiVExtAsFunction(pname, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPointeriVExt;

/// ```c
/// GLAPI void APIENTRY glGetPointeri_vEXT (GLenum pname, GLuint index, void **params)
/// ```
void glGetPointeriVExt(
  int pname,
  int index,
  Pointer<Pointer<NativeType>> params,
) {
  final glGetPointeriVExtAsFunction = _glGetPointeriVExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 pname,
            Uint32 index,
            Pointer<Pointer<NativeType>> params,
          )
        >
      >()
      .asFunction<
        void Function(int pname, int index, Pointer<Pointer<NativeType>> params)
      >();
  return glGetPointeriVExtAsFunction(pname, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedProgramStringExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)
/// ```
void glNamedProgramStringExt(
  int program,
  int target,
  int format,
  int len,
  Pointer<NativeType> string,
) {
  final glNamedProgramStringExtAsFunction = _glNamedProgramStringExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 target,
            Uint32 format,
            Uint32 len,
            Pointer<NativeType> string,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int target,
          int format,
          int len,
          Pointer<NativeType> string,
        )
      >();
  return glNamedProgramStringExtAsFunction(
    program,
    target,
    format,
    len,
    string,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameter4dExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glNamedProgramLocalParameter4dExt(
  int program,
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glNamedProgramLocalParameter4dExtAsFunction =
      _glNamedProgramLocalParameter4dExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Double x,
                Double y,
                Double z,
                Double w,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              double x,
              double y,
              double z,
              double w,
            )
          >();
  return glNamedProgramLocalParameter4dExtAsFunction(
    program,
    target,
    index,
    x,
    y,
    z,
    w,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameter4dvExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params)
/// ```
void glNamedProgramLocalParameter4dvExt(
  int program,
  int target,
  int index,
  Pointer<Double> params,
) {
  final glNamedProgramLocalParameter4dvExtAsFunction =
      _glNamedProgramLocalParameter4dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Double> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Double> params,
            )
          >();
  return glNamedProgramLocalParameter4dvExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameter4fExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glNamedProgramLocalParameter4fExt(
  int program,
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glNamedProgramLocalParameter4fExtAsFunction =
      _glNamedProgramLocalParameter4fExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Float x,
                Float y,
                Float z,
                Float w,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              double x,
              double y,
              double z,
              double w,
            )
          >();
  return glNamedProgramLocalParameter4fExtAsFunction(
    program,
    target,
    index,
    x,
    y,
    z,
    w,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedProgramLocalParameter4fvExt;

/// ```c
/// GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params)
/// ```
void glNamedProgramLocalParameter4fvExt(
  int program,
  int target,
  int index,
  Pointer<Float> params,
) {
  final glNamedProgramLocalParameter4fvExtAsFunction =
      _glNamedProgramLocalParameter4fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Float> params,
            )
          >();
  return glNamedProgramLocalParameter4fvExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedProgramLocalParameterdvExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params)
/// ```
void glGetNamedProgramLocalParameterdvExt(
  int program,
  int target,
  int index,
  Pointer<Double> params,
) {
  final glGetNamedProgramLocalParameterdvExtAsFunction =
      _glGetNamedProgramLocalParameterdvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Double> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Double> params,
            )
          >();
  return glGetNamedProgramLocalParameterdvExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedProgramLocalParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params)
/// ```
void glGetNamedProgramLocalParameterfvExt(
  int program,
  int target,
  int index,
  Pointer<Float> params,
) {
  final glGetNamedProgramLocalParameterfvExtAsFunction =
      _glGetNamedProgramLocalParameterfvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 target,
                Uint32 index,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int target,
              int index,
              Pointer<Float> params,
            )
          >();
  return glGetNamedProgramLocalParameterfvExtAsFunction(
    program,
    target,
    index,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedProgramivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params)
/// ```
void glGetNamedProgramivExt(
  int program,
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedProgramivExtAsFunction = _glGetNamedProgramivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 target,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int program, int target, int pname, Pointer<Int32> params)
      >();
  return glGetNamedProgramivExtAsFunction(program, target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedProgramStringExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void *string)
/// ```
void glGetNamedProgramStringExt(
  int program,
  int target,
  int pname,
  Pointer<NativeType> string,
) {
  final glGetNamedProgramStringExtAsFunction = _glGetNamedProgramStringExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 target,
            Uint32 pname,
            Pointer<NativeType> string,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int target,
          int pname,
          Pointer<NativeType> string,
        )
      >();
  return glGetNamedProgramStringExtAsFunction(program, target, pname, string);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedRenderbufferStorageExt;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorageExt(
  int renderbuffer,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageExtAsFunction = _glNamedRenderbufferStorageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 renderbuffer,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int renderbuffer,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glNamedRenderbufferStorageExtAsFunction(
    renderbuffer,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedRenderbufferParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params)
/// ```
void glGetNamedRenderbufferParameterivExt(
  int renderbuffer,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedRenderbufferParameterivExtAsFunction =
      _glGetNamedRenderbufferParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int renderbuffer, int pname, Pointer<Int32> params)
          >();
  return glGetNamedRenderbufferParameterivExtAsFunction(
    renderbuffer,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedRenderbufferStorageMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorageMultisampleExt(
  int renderbuffer,
  int samples,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageMultisampleExtAsFunction =
      _glNamedRenderbufferStorageMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int renderbuffer,
              int samples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glNamedRenderbufferStorageMultisampleExtAsFunction(
    renderbuffer,
    samples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedRenderbufferStorageMultisampleCoverageExt;

/// ```c
/// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glNamedRenderbufferStorageMultisampleCoverageExt(
  int renderbuffer,
  int coverageSamples,
  int colorSamples,
  int internalformat,
  int width,
  int height,
) {
  final glNamedRenderbufferStorageMultisampleCoverageExtAsFunction =
      _glNamedRenderbufferStorageMultisampleCoverageExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 renderbuffer,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int renderbuffer,
              int coverageSamples,
              int colorSamples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glNamedRenderbufferStorageMultisampleCoverageExtAsFunction(
    renderbuffer,
    coverageSamples,
    colorSamples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCheckNamedFramebufferStatusExt;

/// ```c
/// GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target)
/// ```
int glCheckNamedFramebufferStatusExt(int framebuffer, int target) {
  final glCheckNamedFramebufferStatusExtAsFunction =
      _glCheckNamedFramebufferStatusExt
          .cast<
            NativeFunction<Uint32 Function(Uint32 framebuffer, Uint32 target)>
          >()
          .asFunction<int Function(int framebuffer, int target)>();
  return glCheckNamedFramebufferStatusExtAsFunction(framebuffer, target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTexture1Dext;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glNamedFramebufferTexture1Dext(
  int framebuffer,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glNamedFramebufferTexture1DextAsFunction =
      _glNamedFramebufferTexture1Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 textarget,
                Uint32 texture,
                Int32 level,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int textarget,
              int texture,
              int level,
            )
          >();
  return glNamedFramebufferTexture1DextAsFunction(
    framebuffer,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTexture2Dext;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glNamedFramebufferTexture2Dext(
  int framebuffer,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glNamedFramebufferTexture2DextAsFunction =
      _glNamedFramebufferTexture2Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 textarget,
                Uint32 texture,
                Int32 level,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int textarget,
              int texture,
              int level,
            )
          >();
  return glNamedFramebufferTexture2DextAsFunction(
    framebuffer,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTexture3Dext;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
/// ```
void glNamedFramebufferTexture3Dext(
  int framebuffer,
  int attachment,
  int textarget,
  int texture,
  int level,
  int zoffset,
) {
  final glNamedFramebufferTexture3DextAsFunction =
      _glNamedFramebufferTexture3Dext
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 textarget,
                Uint32 texture,
                Int32 level,
                Int32 zoffset,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int textarget,
              int texture,
              int level,
              int zoffset,
            )
          >();
  return glNamedFramebufferTexture3DextAsFunction(
    framebuffer,
    attachment,
    textarget,
    texture,
    level,
    zoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedFramebufferRenderbufferExt;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
void glNamedFramebufferRenderbufferExt(
  int framebuffer,
  int attachment,
  int renderbuffertarget,
  int renderbuffer,
) {
  final glNamedFramebufferRenderbufferExtAsFunction =
      _glNamedFramebufferRenderbufferExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 renderbuffertarget,
                Uint32 renderbuffer,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int renderbuffertarget,
              int renderbuffer,
            )
          >();
  return glNamedFramebufferRenderbufferExtAsFunction(
    framebuffer,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedFramebufferAttachmentParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
/// ```
void glGetNamedFramebufferAttachmentParameterivExt(
  int framebuffer,
  int attachment,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedFramebufferAttachmentParameterivExtAsFunction =
      _glGetNamedFramebufferAttachmentParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetNamedFramebufferAttachmentParameterivExtAsFunction(
    framebuffer,
    attachment,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenerateTextureMipmapExt;

/// ```c
/// GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target)
/// ```
void glGenerateTextureMipmapExt(int texture, int target) {
  final glGenerateTextureMipmapExtAsFunction = _glGenerateTextureMipmapExt
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target)>>()
      .asFunction<void Function(int texture, int target)>();
  return glGenerateTextureMipmapExtAsFunction(texture, target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenerateMultiTexMipmapExt;

/// ```c
/// GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target)
/// ```
void glGenerateMultiTexMipmapExt(int texunit, int target) {
  final glGenerateMultiTexMipmapExtAsFunction = _glGenerateMultiTexMipmapExt
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target)>>()
      .asFunction<void Function(int texunit, int target)>();
  return glGenerateMultiTexMipmapExtAsFunction(texunit, target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferDrawBufferExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode)
/// ```
void glFramebufferDrawBufferExt(int framebuffer, int mode) {
  final glFramebufferDrawBufferExtAsFunction = _glFramebufferDrawBufferExt
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return glFramebufferDrawBufferExtAsFunction(framebuffer, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferDrawBuffersExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs)
/// ```
void glFramebufferDrawBuffersExt(int framebuffer, int n, Pointer<Uint32> bufs) {
  final glFramebufferDrawBuffersExtAsFunction = _glFramebufferDrawBuffersExt
      .cast<
        NativeFunction<
          Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32> bufs)
        >
      >()
      .asFunction<
        void Function(int framebuffer, int n, Pointer<Uint32> bufs)
      >();
  return glFramebufferDrawBuffersExtAsFunction(framebuffer, n, bufs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferReadBufferExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode)
/// ```
void glFramebufferReadBufferExt(int framebuffer, int mode) {
  final glFramebufferReadBufferExtAsFunction = _glFramebufferReadBufferExt
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return glFramebufferReadBufferExtAsFunction(framebuffer, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFramebufferParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params)
/// ```
void glGetFramebufferParameterivExt(
  int framebuffer,
  int pname,
  Pointer<Int32> params,
) {
  final glGetFramebufferParameterivExtAsFunction =
      _glGetFramebufferParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int framebuffer, int pname, Pointer<Int32> params)
          >();
  return glGetFramebufferParameterivExtAsFunction(framebuffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedCopyBufferSubDataExt;

/// ```c
/// GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
void glNamedCopyBufferSubDataExt(
  int readBuffer,
  int writeBuffer,
  Pointer<NativeType> readOffset,
  Pointer<NativeType> writeOffset,
  Pointer<Uint32> size,
) {
  final glNamedCopyBufferSubDataExtAsFunction = _glNamedCopyBufferSubDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 readBuffer,
            Uint32 writeBuffer,
            Pointer<NativeType> readOffset,
            Pointer<NativeType> writeOffset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int readBuffer,
          int writeBuffer,
          Pointer<NativeType> readOffset,
          Pointer<NativeType> writeOffset,
          Pointer<Uint32> size,
        )
      >();
  return glNamedCopyBufferSubDataExtAsFunction(
    readBuffer,
    writeBuffer,
    readOffset,
    writeOffset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTextureExt;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
/// ```
void glNamedFramebufferTextureExt(
  int framebuffer,
  int attachment,
  int texture,
  int level,
) {
  final glNamedFramebufferTextureExtAsFunction = _glNamedFramebufferTextureExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 framebuffer,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(int framebuffer, int attachment, int texture, int level)
      >();
  return glNamedFramebufferTextureExtAsFunction(
    framebuffer,
    attachment,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedFramebufferTextureLayerExt;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
void glNamedFramebufferTextureLayerExt(
  int framebuffer,
  int attachment,
  int texture,
  int level,
  int layer,
) {
  final glNamedFramebufferTextureLayerExtAsFunction =
      _glNamedFramebufferTextureLayerExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 texture,
                Int32 level,
                Int32 layer,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int texture,
              int level,
              int layer,
            )
          >();
  return glNamedFramebufferTextureLayerExtAsFunction(
    framebuffer,
    attachment,
    texture,
    level,
    layer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferTextureFaceExt;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
void glNamedFramebufferTextureFaceExt(
  int framebuffer,
  int attachment,
  int texture,
  int level,
  int face,
) {
  final glNamedFramebufferTextureFaceExtAsFunction =
      _glNamedFramebufferTextureFaceExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 attachment,
                Uint32 texture,
                Int32 level,
                Uint32 face,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int attachment,
              int texture,
              int level,
              int face,
            )
          >();
  return glNamedFramebufferTextureFaceExtAsFunction(
    framebuffer,
    attachment,
    texture,
    level,
    face,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureRenderbufferExt;

/// ```c
/// GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer)
/// ```
void glTextureRenderbufferExt(int texture, int target, int renderbuffer) {
  final glTextureRenderbufferExtAsFunction = _glTextureRenderbufferExt
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 target, Uint32 renderbuffer)
        >
      >()
      .asFunction<void Function(int texture, int target, int renderbuffer)>();
  return glTextureRenderbufferExtAsFunction(texture, target, renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexRenderbufferExt;

/// ```c
/// GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer)
/// ```
void glMultiTexRenderbufferExt(int texunit, int target, int renderbuffer) {
  final glMultiTexRenderbufferExtAsFunction = _glMultiTexRenderbufferExt
      .cast<
        NativeFunction<
          Void Function(Uint32 texunit, Uint32 target, Uint32 renderbuffer)
        >
      >()
      .asFunction<void Function(int texunit, int target, int renderbuffer)>();
  return glMultiTexRenderbufferExtAsFunction(texunit, target, renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayVertexOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayVertexOffsetExt(
  int vaobj,
  int buffer,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayVertexOffsetExtAsFunction = _glVertexArrayVertexOffsetExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 buffer,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int buffer,
          int size,
          int type,
          int stride,
          Pointer<NativeType> offset,
        )
      >();
  return glVertexArrayVertexOffsetExtAsFunction(
    vaobj,
    buffer,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayColorOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayColorOffsetExt(
  int vaobj,
  int buffer,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayColorOffsetExtAsFunction = _glVertexArrayColorOffsetExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 buffer,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int buffer,
          int size,
          int type,
          int stride,
          Pointer<NativeType> offset,
        )
      >();
  return glVertexArrayColorOffsetExtAsFunction(
    vaobj,
    buffer,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayEdgeFlagOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayEdgeFlagOffsetExt(
  int vaobj,
  int buffer,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayEdgeFlagOffsetExtAsFunction =
      _glVertexArrayEdgeFlagOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayEdgeFlagOffsetExtAsFunction(
    vaobj,
    buffer,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayIndexOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayIndexOffsetExt(
  int vaobj,
  int buffer,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayIndexOffsetExtAsFunction = _glVertexArrayIndexOffsetExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 buffer,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int buffer,
          int type,
          int stride,
          Pointer<NativeType> offset,
        )
      >();
  return glVertexArrayIndexOffsetExtAsFunction(
    vaobj,
    buffer,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayNormalOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayNormalOffsetExt(
  int vaobj,
  int buffer,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayNormalOffsetExtAsFunction = _glVertexArrayNormalOffsetExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 buffer,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int buffer,
          int type,
          int stride,
          Pointer<NativeType> offset,
        )
      >();
  return glVertexArrayNormalOffsetExtAsFunction(
    vaobj,
    buffer,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayTexCoordOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayTexCoordOffsetExt(
  int vaobj,
  int buffer,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayTexCoordOffsetExtAsFunction =
      _glVertexArrayTexCoordOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Int32 size,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int size,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayTexCoordOffsetExtAsFunction(
    vaobj,
    buffer,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayMultiTexCoordOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayMultiTexCoordOffsetExt(
  int vaobj,
  int buffer,
  int texunit,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayMultiTexCoordOffsetExtAsFunction =
      _glVertexArrayMultiTexCoordOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 texunit,
                Int32 size,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int texunit,
              int size,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayMultiTexCoordOffsetExtAsFunction(
    vaobj,
    buffer,
    texunit,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayFogCoordOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayFogCoordOffsetExt(
  int vaobj,
  int buffer,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayFogCoordOffsetExtAsFunction =
      _glVertexArrayFogCoordOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayFogCoordOffsetExtAsFunction(
    vaobj,
    buffer,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArraySecondaryColorOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArraySecondaryColorOffsetExt(
  int vaobj,
  int buffer,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArraySecondaryColorOffsetExtAsFunction =
      _glVertexArraySecondaryColorOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Int32 size,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int size,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArraySecondaryColorOffsetExtAsFunction(
    vaobj,
    buffer,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayVertexAttribOffsetExt(
  int vaobj,
  int buffer,
  int index,
  int size,
  int type,
  int normalized,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayVertexAttribOffsetExtAsFunction =
      _glVertexArrayVertexAttribOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 index,
                Int32 size,
                Uint32 type,
                Int32 normalized,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int index,
              int size,
              int type,
              int normalized,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayVertexAttribOffsetExtAsFunction(
    vaobj,
    buffer,
    index,
    size,
    type,
    normalized,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribIOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayVertexAttribIOffsetExt(
  int vaobj,
  int buffer,
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayVertexAttribIOffsetExtAsFunction =
      _glVertexArrayVertexAttribIOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 index,
                Int32 size,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int index,
              int size,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayVertexAttribIOffsetExtAsFunction(
    vaobj,
    buffer,
    index,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexArrayExt;

/// ```c
/// GLAPI void APIENTRY glEnableVertexArrayEXT (GLuint vaobj, GLenum array)
/// ```
void glEnableVertexArrayExt(int vaobj, int array) {
  final glEnableVertexArrayExtAsFunction = _glEnableVertexArrayExt
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 array)>>()
      .asFunction<void Function(int vaobj, int array)>();
  return glEnableVertexArrayExtAsFunction(vaobj, array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexArrayExt;

/// ```c
/// GLAPI void APIENTRY glDisableVertexArrayEXT (GLuint vaobj, GLenum array)
/// ```
void glDisableVertexArrayExt(int vaobj, int array) {
  final glDisableVertexArrayExtAsFunction = _glDisableVertexArrayExt
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 array)>>()
      .asFunction<void Function(int vaobj, int array)>();
  return glDisableVertexArrayExtAsFunction(vaobj, array);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVertexArrayAttribExt;

/// ```c
/// GLAPI void APIENTRY glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index)
/// ```
void glEnableVertexArrayAttribExt(int vaobj, int index) {
  final glEnableVertexArrayAttribExtAsFunction = _glEnableVertexArrayAttribExt
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return glEnableVertexArrayAttribExtAsFunction(vaobj, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVertexArrayAttribExt;

/// ```c
/// GLAPI void APIENTRY glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index)
/// ```
void glDisableVertexArrayAttribExt(int vaobj, int index) {
  final glDisableVertexArrayAttribExtAsFunction = _glDisableVertexArrayAttribExt
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return glDisableVertexArrayAttribExtAsFunction(vaobj, index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayIntegervExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint *param)
/// ```
void glGetVertexArrayIntegervExt(int vaobj, int pname, Pointer<Int32> param) {
  final glGetVertexArrayIntegervExtAsFunction = _glGetVertexArrayIntegervExt
      .cast<
        NativeFunction<
          Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32> param)
        >
      >()
      .asFunction<void Function(int vaobj, int pname, Pointer<Int32> param)>();
  return glGetVertexArrayIntegervExtAsFunction(vaobj, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayPointervExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void **param)
/// ```
void glGetVertexArrayPointervExt(
  int vaobj,
  int pname,
  Pointer<Pointer<NativeType>> param,
) {
  final glGetVertexArrayPointervExtAsFunction = _glGetVertexArrayPointervExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 pname,
            Pointer<Pointer<NativeType>> param,
          )
        >
      >()
      .asFunction<
        void Function(int vaobj, int pname, Pointer<Pointer<NativeType>> param)
      >();
  return glGetVertexArrayPointervExtAsFunction(vaobj, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayIntegeriVExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint *param)
/// ```
void glGetVertexArrayIntegeriVExt(
  int vaobj,
  int index,
  int pname,
  Pointer<Int32> param,
) {
  final glGetVertexArrayIntegeriVExtAsFunction = _glGetVertexArrayIntegeriVExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 index,
            Uint32 pname,
            Pointer<Int32> param,
          )
        >
      >()
      .asFunction<
        void Function(int vaobj, int index, int pname, Pointer<Int32> param)
      >();
  return glGetVertexArrayIntegeriVExtAsFunction(vaobj, index, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexArrayPointeriVExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void **param)
/// ```
void glGetVertexArrayPointeriVExt(
  int vaobj,
  int index,
  int pname,
  Pointer<Pointer<NativeType>> param,
) {
  final glGetVertexArrayPointeriVExtAsFunction = _glGetVertexArrayPointeriVExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 vaobj,
            Uint32 index,
            Uint32 pname,
            Pointer<Pointer<NativeType>> param,
          )
        >
      >()
      .asFunction<
        void Function(
          int vaobj,
          int index,
          int pname,
          Pointer<Pointer<NativeType>> param,
        )
      >();
  return glGetVertexArrayPointeriVExtAsFunction(vaobj, index, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapNamedBufferRangeExt;

/// ```c
/// GLAPI void *APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeType> glMapNamedBufferRangeExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
  int access,
) {
  final glMapNamedBufferRangeExtAsFunction = _glMapNamedBufferRangeExt
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> length,
            Uint32 access,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> length,
          int access,
        )
      >();
  return glMapNamedBufferRangeExtAsFunction(buffer, offset, length, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushMappedNamedBufferRangeExt;

/// ```c
/// GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
void glFlushMappedNamedBufferRangeExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> length,
) {
  final glFlushMappedNamedBufferRangeExtAsFunction =
      _glFlushMappedNamedBufferRangeExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> length,
              )
            >
          >()
          .asFunction<
            void Function(
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> length,
            )
          >();
  return glFlushMappedNamedBufferRangeExtAsFunction(buffer, offset, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferStorageExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
void glNamedBufferStorageExt(
  int buffer,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
  int flags,
) {
  final glNamedBufferStorageExtAsFunction = _glNamedBufferStorageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
          int flags,
        )
      >();
  return glNamedBufferStorageExtAsFunction(buffer, size, data, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedBufferDataExt;

/// ```c
/// GLAPI void APIENTRY glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
void glClearNamedBufferDataExt(
  int buffer,
  int internalformat,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearNamedBufferDataExtAsFunction = _glClearNamedBufferDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 internalformat,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int internalformat,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearNamedBufferDataExtAsFunction(
    buffer,
    internalformat,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearNamedBufferSubDataExt;

/// ```c
/// GLAPI void APIENTRY glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
void glClearNamedBufferSubDataExt(
  int buffer,
  int internalformat,
  Pointer<Uint32> offset,
  Pointer<Uint32> size,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glClearNamedBufferSubDataExtAsFunction = _glClearNamedBufferSubDataExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Uint32 internalformat,
            Pointer<Uint32> offset,
            Pointer<Uint32> size,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          int internalformat,
          Pointer<Uint32> offset,
          Pointer<Uint32> size,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glClearNamedBufferSubDataExtAsFunction(
    buffer,
    internalformat,
    offset,
    size,
    format,
    type,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedFramebufferParameteriExt;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param)
/// ```
void glNamedFramebufferParameteriExt(int framebuffer, int pname, int param) {
  final glNamedFramebufferParameteriExtAsFunction =
      _glNamedFramebufferParameteriExt
          .cast<
            NativeFunction<
              Void Function(Uint32 framebuffer, Uint32 pname, Int32 param)
            >
          >()
          .asFunction<void Function(int framebuffer, int pname, int param)>();
  return glNamedFramebufferParameteriExtAsFunction(framebuffer, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetNamedFramebufferParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params)
/// ```
void glGetNamedFramebufferParameterivExt(
  int framebuffer,
  int pname,
  Pointer<Int32> params,
) {
  final glGetNamedFramebufferParameterivExtAsFunction =
      _glGetNamedFramebufferParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int framebuffer, int pname, Pointer<Int32> params)
          >();
  return glGetNamedFramebufferParameterivExtAsFunction(
    framebuffer,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1dExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x)
/// ```
void glProgramUniform1dExt(int program, int location, double x) {
  final glProgramUniform1dExtAsFunction = _glProgramUniform1dExt
      .cast<
        NativeFunction<Void Function(Uint32 program, Int32 location, Double x)>
      >()
      .asFunction<void Function(int program, int location, double x)>();
  return glProgramUniform1dExtAsFunction(program, location, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2dExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y)
/// ```
void glProgramUniform2dExt(int program, int location, double x, double y) {
  final glProgramUniform2dExtAsFunction = _glProgramUniform2dExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Double x, Double y)
        >
      >()
      .asFunction<
        void Function(int program, int location, double x, double y)
      >();
  return glProgramUniform2dExtAsFunction(program, location, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3dExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glProgramUniform3dExt(
  int program,
  int location,
  double x,
  double y,
  double z,
) {
  final glProgramUniform3dExtAsFunction = _glProgramUniform3dExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Double x,
            Double y,
            Double z,
          )
        >
      >()
      .asFunction<
        void Function(int program, int location, double x, double y, double z)
      >();
  return glProgramUniform3dExtAsFunction(program, location, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4dExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glProgramUniform4dExt(
  int program,
  int location,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramUniform4dExtAsFunction = _glProgramUniform4dExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Double x,
            Double y,
            Double z,
            Double w,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramUniform4dExtAsFunction(program, location, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform1dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform1dvExt(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform1dvExtAsFunction = _glProgramUniform1dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform1dvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform2dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform2dvExt(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform2dvExtAsFunction = _glProgramUniform2dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform2dvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform3dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform3dvExt(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform3dvExtAsFunction = _glProgramUniform3dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform3dvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniform4dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value)
/// ```
void glProgramUniform4dvExt(
  int program,
  int location,
  int count,
  Pointer<Double> value,
) {
  final glProgramUniform4dvExtAsFunction = _glProgramUniform4dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Double> value,
        )
      >();
  return glProgramUniform4dvExtAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2dvExtAsFunction = _glProgramUniformMatrix2dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix2dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3dvExtAsFunction = _glProgramUniformMatrix3dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix3dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4dvExtAsFunction = _glProgramUniformMatrix4dvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Int32 transpose,
            Pointer<Double> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          int transpose,
          Pointer<Double> value,
        )
      >();
  return glProgramUniformMatrix4dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x3dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2x3dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2x3dvExtAsFunction =
      _glProgramUniformMatrix2x3dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix2x3dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix2x4dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix2x4dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix2x4dvExtAsFunction =
      _glProgramUniformMatrix2x4dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix2x4dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x2dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3x2dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3x2dvExtAsFunction =
      _glProgramUniformMatrix3x2dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix3x2dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix3x4dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix3x4dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix3x4dvExtAsFunction =
      _glProgramUniformMatrix3x4dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix3x4dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x2dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4x2dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4x2dvExtAsFunction =
      _glProgramUniformMatrix4x2dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix4x2dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformMatrix4x3dvExt;

/// ```c
/// GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
/// ```
void glProgramUniformMatrix4x3dvExt(
  int program,
  int location,
  int count,
  int transpose,
  Pointer<Double> value,
) {
  final glProgramUniformMatrix4x3dvExtAsFunction =
      _glProgramUniformMatrix4x3dvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 count,
                Int32 transpose,
                Pointer<Double> value,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int count,
              int transpose,
              Pointer<Double> value,
            )
          >();
  return glProgramUniformMatrix4x3dvExtAsFunction(
    program,
    location,
    count,
    transpose,
    value,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBufferRangeExt;

/// ```c
/// GLAPI void APIENTRY glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glTextureBufferRangeExt(
  int texture,
  int target,
  int internalformat,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glTextureBufferRangeExtAsFunction = _glTextureBufferRangeExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 internalformat,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int internalformat,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glTextureBufferRangeExtAsFunction(
    texture,
    target,
    internalformat,
    buffer,
    offset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage1Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
void glTextureStorage1Dext(
  int texture,
  int target,
  int levels,
  int internalformat,
  int width,
) {
  final glTextureStorage1DextAsFunction = _glTextureStorage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int levels,
          int internalformat,
          int width,
        )
      >();
  return glTextureStorage1DextAsFunction(
    texture,
    target,
    levels,
    internalformat,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage2Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glTextureStorage2Dext(
  int texture,
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
) {
  final glTextureStorage2DextAsFunction = _glTextureStorage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glTextureStorage2DextAsFunction(
    texture,
    target,
    levels,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage3Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glTextureStorage3Dext(
  int texture,
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
  int depth,
) {
  final glTextureStorage3DextAsFunction = _glTextureStorage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
          int depth,
        )
      >();
  return glTextureStorage3DextAsFunction(
    texture,
    target,
    levels,
    internalformat,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage2DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
void glTextureStorage2DMultisampleExt(
  int texture,
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int fixedsamplelocations,
) {
  final glTextureStorage2DMultisampleExtAsFunction =
      _glTextureStorage2DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
                Int32 fixedsamplelocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int samples,
              int internalformat,
              int width,
              int height,
              int fixedsamplelocations,
            )
          >();
  return glTextureStorage2DMultisampleExtAsFunction(
    texture,
    target,
    samples,
    internalformat,
    width,
    height,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorage3DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
void glTextureStorage3DMultisampleExt(
  int texture,
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
  int depth,
  int fixedsamplelocations,
) {
  final glTextureStorage3DMultisampleExtAsFunction =
      _glTextureStorage3DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 fixedsamplelocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int samples,
              int internalformat,
              int width,
              int height,
              int depth,
              int fixedsamplelocations,
            )
          >();
  return glTextureStorage3DMultisampleExtAsFunction(
    texture,
    target,
    samples,
    internalformat,
    width,
    height,
    depth,
    fixedsamplelocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayBindVertexBufferExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
void glVertexArrayBindVertexBufferExt(
  int vaobj,
  int bindingindex,
  int buffer,
  Pointer<NativeType> offset,
  int stride,
) {
  final glVertexArrayBindVertexBufferExtAsFunction =
      _glVertexArrayBindVertexBufferExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 bindingindex,
                Uint32 buffer,
                Pointer<NativeType> offset,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int bindingindex,
              int buffer,
              Pointer<NativeType> offset,
              int stride,
            )
          >();
  return glVertexArrayBindVertexBufferExtAsFunction(
    vaobj,
    bindingindex,
    buffer,
    offset,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribFormatExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
void glVertexArrayVertexAttribFormatExt(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int normalized,
  int relativeoffset,
) {
  final glVertexArrayVertexAttribFormatExtAsFunction =
      _glVertexArrayVertexAttribFormatExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 attribindex,
                Int32 size,
                Uint32 type,
                Int32 normalized,
                Uint32 relativeoffset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int attribindex,
              int size,
              int type,
              int normalized,
              int relativeoffset,
            )
          >();
  return glVertexArrayVertexAttribFormatExtAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    normalized,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribIFormatExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexArrayVertexAttribIFormatExt(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexArrayVertexAttribIFormatExtAsFunction =
      _glVertexArrayVertexAttribIFormatExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 attribindex,
                Int32 size,
                Uint32 type,
                Uint32 relativeoffset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int attribindex,
              int size,
              int type,
              int relativeoffset,
            )
          >();
  return glVertexArrayVertexAttribIFormatExtAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribLFormatExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
void glVertexArrayVertexAttribLFormatExt(
  int vaobj,
  int attribindex,
  int size,
  int type,
  int relativeoffset,
) {
  final glVertexArrayVertexAttribLFormatExtAsFunction =
      _glVertexArrayVertexAttribLFormatExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 attribindex,
                Int32 size,
                Uint32 type,
                Uint32 relativeoffset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int attribindex,
              int size,
              int type,
              int relativeoffset,
            )
          >();
  return glVertexArrayVertexAttribLFormatExtAsFunction(
    vaobj,
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribBindingExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
/// ```
void glVertexArrayVertexAttribBindingExt(
  int vaobj,
  int attribindex,
  int bindingindex,
) {
  final glVertexArrayVertexAttribBindingExtAsFunction =
      _glVertexArrayVertexAttribBindingExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 attribindex,
                Uint32 bindingindex,
              )
            >
          >()
          .asFunction<
            void Function(int vaobj, int attribindex, int bindingindex)
          >();
  return glVertexArrayVertexAttribBindingExtAsFunction(
    vaobj,
    attribindex,
    bindingindex,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexBindingDivisorExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor)
/// ```
void glVertexArrayVertexBindingDivisorExt(
  int vaobj,
  int bindingindex,
  int divisor,
) {
  final glVertexArrayVertexBindingDivisorExtAsFunction =
      _glVertexArrayVertexBindingDivisorExt
          .cast<
            NativeFunction<
              Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor)
            >
          >()
          .asFunction<
            void Function(int vaobj, int bindingindex, int divisor)
          >();
  return glVertexArrayVertexBindingDivisorExtAsFunction(
    vaobj,
    bindingindex,
    divisor,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribLOffsetExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
void glVertexArrayVertexAttribLOffsetExt(
  int vaobj,
  int buffer,
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> offset,
) {
  final glVertexArrayVertexAttribLOffsetExtAsFunction =
      _glVertexArrayVertexAttribLOffsetExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 vaobj,
                Uint32 buffer,
                Uint32 index,
                Int32 size,
                Uint32 type,
                Uint32 stride,
                Pointer<NativeType> offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int vaobj,
              int buffer,
              int index,
              int size,
              int type,
              int stride,
              Pointer<NativeType> offset,
            )
          >();
  return glVertexArrayVertexAttribLOffsetExtAsFunction(
    vaobj,
    buffer,
    index,
    size,
    type,
    stride,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexturePageCommitmentExt;

/// ```c
/// GLAPI void APIENTRY glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
/// ```
void glTexturePageCommitmentExt(
  int texture,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int commit,
) {
  final glTexturePageCommitmentExtAsFunction = _glTexturePageCommitmentExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int commit,
        )
      >();
  return glTexturePageCommitmentExtAsFunction(
    texture,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVertexArrayVertexAttribDivisorExt;

/// ```c
/// GLAPI void APIENTRY glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor)
/// ```
void glVertexArrayVertexAttribDivisorExt(int vaobj, int index, int divisor) {
  final glVertexArrayVertexAttribDivisorExtAsFunction =
      _glVertexArrayVertexAttribDivisorExt
          .cast<
            NativeFunction<
              Void Function(Uint32 vaobj, Uint32 index, Uint32 divisor)
            >
          >()
          .asFunction<void Function(int vaobj, int index, int divisor)>();
  return glVertexArrayVertexAttribDivisorExtAsFunction(vaobj, index, divisor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorMaskIndexedExt;

/// ```c
/// GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
/// ```
void glColorMaskIndexedExt(int index, int r, int g, int b, int a) {
  final glColorMaskIndexedExtAsFunction = _glColorMaskIndexedExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 r, Int32 g, Int32 b, Int32 a)
        >
      >()
      .asFunction<void Function(int index, int r, int g, int b, int a)>();
  return glColorMaskIndexedExtAsFunction(index, r, g, b, a);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArraysInstancedExt;

/// ```c
/// GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
/// ```
void glDrawArraysInstancedExt(int mode, int start, int count, int primcount) {
  final glDrawArraysInstancedExtAsFunction = _glDrawArraysInstancedExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Int32 start,
            Uint32 count,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(int mode, int start, int count, int primcount)
      >();
  return glDrawArraysInstancedExtAsFunction(mode, start, count, primcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElementsInstancedExt;

/// ```c
/// GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
/// ```
void glDrawElementsInstancedExt(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
  int primcount,
) {
  final glDrawElementsInstancedExtAsFunction = _glDrawElementsInstancedExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int count,
          int type,
          Pointer<NativeType> indices,
          int primcount,
        )
      >();
  return glDrawElementsInstancedExtAsFunction(
    mode,
    count,
    type,
    indices,
    primcount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawRangeElementsExt;

/// ```c
/// GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
/// ```
void glDrawRangeElementsExt(
  int mode,
  int start,
  int end,
  int count,
  int type,
  Pointer<NativeType> indices,
) {
  final glDrawRangeElementsExtAsFunction = _glDrawRangeElementsExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 start,
            Uint32 end,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int start,
          int end,
          int count,
          int type,
          Pointer<NativeType> indices,
        )
      >();
  return glDrawRangeElementsExtAsFunction(
    mode,
    start,
    end,
    count,
    type,
    indices,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferStorageExternalExt;

/// ```c
/// GLAPI void APIENTRY glBufferStorageExternalEXT (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
/// ```
void glBufferStorageExternalExt(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> clientBuffer,
  int flags,
) {
  final glBufferStorageExternalExtAsFunction = _glBufferStorageExternalExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> clientBuffer,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> clientBuffer,
          int flags,
        )
      >();
  return glBufferStorageExternalExtAsFunction(
    target,
    offset,
    size,
    clientBuffer,
    flags,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferStorageExternalExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferStorageExternalEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
/// ```
void glNamedBufferStorageExternalExt(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> clientBuffer,
  int flags,
) {
  final glNamedBufferStorageExternalExtAsFunction =
      _glNamedBufferStorageExternalExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> size,
                Pointer<NativeType> clientBuffer,
                Uint32 flags,
              )
            >
          >()
          .asFunction<
            void Function(
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> size,
              Pointer<NativeType> clientBuffer,
              int flags,
            )
          >();
  return glNamedBufferStorageExternalExtAsFunction(
    buffer,
    offset,
    size,
    clientBuffer,
    flags,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordfExt;

/// ```c
/// GLAPI void APIENTRY glFogCoordfEXT (GLfloat coord)
/// ```
void glFogCoordfExt(double coord) {
  final glFogCoordfExtAsFunction = _glFogCoordfExt
      .cast<NativeFunction<Void Function(Float coord)>>()
      .asFunction<void Function(double coord)>();
  return glFogCoordfExtAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordfvExt;

/// ```c
/// GLAPI void APIENTRY glFogCoordfvEXT (const GLfloat *coord)
/// ```
void glFogCoordfvExt(Pointer<Float> coord) {
  final glFogCoordfvExtAsFunction = _glFogCoordfvExt
      .cast<NativeFunction<Void Function(Pointer<Float> coord)>>()
      .asFunction<void Function(Pointer<Float> coord)>();
  return glFogCoordfvExtAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoorddExt;

/// ```c
/// GLAPI void APIENTRY glFogCoorddEXT (GLdouble coord)
/// ```
void glFogCoorddExt(double coord) {
  final glFogCoorddExtAsFunction = _glFogCoorddExt
      .cast<NativeFunction<Void Function(Double coord)>>()
      .asFunction<void Function(double coord)>();
  return glFogCoorddExtAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoorddvExt;

/// ```c
/// GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *coord)
/// ```
void glFogCoorddvExt(Pointer<Double> coord) {
  final glFogCoorddvExtAsFunction = _glFogCoorddvExt
      .cast<NativeFunction<Void Function(Pointer<Double> coord)>>()
      .asFunction<void Function(Pointer<Double> coord)>();
  return glFogCoorddvExtAsFunction(coord);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordPointerExt;

/// ```c
/// GLAPI void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride, const void *pointer)
/// ```
void glFogCoordPointerExt(int type, int stride, Pointer<NativeType> pointer) {
  final glFogCoordPointerExtAsFunction = _glFogCoordPointerExt
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> pointer)
      >();
  return glFogCoordPointerExtAsFunction(type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlitFramebufferExt;

/// ```c
/// GLAPI void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
void glBlitFramebufferExt(
  int srcX0,
  int srcY0,
  int srcX1,
  int srcY1,
  int dstX0,
  int dstY0,
  int dstX1,
  int dstY1,
  int mask,
  int filter,
) {
  final glBlitFramebufferExtAsFunction = _glBlitFramebufferExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 srcX0,
            Int32 srcY0,
            Int32 srcX1,
            Int32 srcY1,
            Int32 dstX0,
            Int32 dstY0,
            Int32 dstX1,
            Int32 dstY1,
            Uint32 mask,
            Uint32 filter,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcX0,
          int srcY0,
          int srcX1,
          int srcY1,
          int dstX0,
          int dstY0,
          int dstX1,
          int dstY1,
          int mask,
          int filter,
        )
      >();
  return glBlitFramebufferExtAsFunction(
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glRenderbufferStorageMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorageMultisampleExt(
  int target,
  int samples,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageMultisampleExtAsFunction =
      _glRenderbufferStorageMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 samples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int samples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glRenderbufferStorageMultisampleExtAsFunction(
    target,
    samples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsRenderbufferExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer)
/// ```
int glIsRenderbufferExt(int renderbuffer) {
  final glIsRenderbufferExtAsFunction = _glIsRenderbufferExt
      .cast<NativeFunction<Int32 Function(Uint32 renderbuffer)>>()
      .asFunction<int Function(int renderbuffer)>();
  return glIsRenderbufferExtAsFunction(renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindRenderbufferExt;

/// ```c
/// GLAPI void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint renderbuffer)
/// ```
void glBindRenderbufferExt(int target, int renderbuffer) {
  final glBindRenderbufferExtAsFunction = _glBindRenderbufferExt
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return glBindRenderbufferExtAsFunction(target, renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteRenderbuffersExt;

/// ```c
/// GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers)
/// ```
void glDeleteRenderbuffersExt(int n, Pointer<Uint32> renderbuffers) {
  final glDeleteRenderbuffersExtAsFunction = _glDeleteRenderbuffersExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> renderbuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> renderbuffers)>();
  return glDeleteRenderbuffersExtAsFunction(n, renderbuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenRenderbuffersExt;

/// ```c
/// GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers)
/// ```
void glGenRenderbuffersExt(int n, Pointer<Uint32> renderbuffers) {
  final glGenRenderbuffersExtAsFunction = _glGenRenderbuffersExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> renderbuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> renderbuffers)>();
  return glGenRenderbuffersExtAsFunction(n, renderbuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRenderbufferStorageExt;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorageExt(
  int target,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageExtAsFunction = _glRenderbufferStorageExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int width, int height)
      >();
  return glRenderbufferStorageExtAsFunction(
    target,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetRenderbufferParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetRenderbufferParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetRenderbufferParameterivExtAsFunction =
      _glGetRenderbufferParameterivExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetRenderbufferParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsFramebufferExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer)
/// ```
int glIsFramebufferExt(int framebuffer) {
  final glIsFramebufferExtAsFunction = _glIsFramebufferExt
      .cast<NativeFunction<Int32 Function(Uint32 framebuffer)>>()
      .asFunction<int Function(int framebuffer)>();
  return glIsFramebufferExtAsFunction(framebuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFramebufferExt;

/// ```c
/// GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer)
/// ```
void glBindFramebufferExt(int target, int framebuffer) {
  final glBindFramebufferExtAsFunction = _glBindFramebufferExt
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 framebuffer)>>()
      .asFunction<void Function(int target, int framebuffer)>();
  return glBindFramebufferExtAsFunction(target, framebuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteFramebuffersExt;

/// ```c
/// GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers)
/// ```
void glDeleteFramebuffersExt(int n, Pointer<Uint32> framebuffers) {
  final glDeleteFramebuffersExtAsFunction = _glDeleteFramebuffersExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> framebuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> framebuffers)>();
  return glDeleteFramebuffersExtAsFunction(n, framebuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenFramebuffersExt;

/// ```c
/// GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers)
/// ```
void glGenFramebuffersExt(int n, Pointer<Uint32> framebuffers) {
  final glGenFramebuffersExtAsFunction = _glGenFramebuffersExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> framebuffers)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> framebuffers)>();
  return glGenFramebuffersExtAsFunction(n, framebuffers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCheckFramebufferStatusExt;

/// ```c
/// GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target)
/// ```
int glCheckFramebufferStatusExt(int target) {
  final glCheckFramebufferStatusExtAsFunction = _glCheckFramebufferStatusExt
      .cast<NativeFunction<Uint32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return glCheckFramebufferStatusExtAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture1Dext;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glFramebufferTexture1Dext(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glFramebufferTexture1DextAsFunction = _glFramebufferTexture1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
        )
      >();
  return glFramebufferTexture1DextAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture2Dext;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
void glFramebufferTexture2Dext(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
) {
  final glFramebufferTexture2DextAsFunction = _glFramebufferTexture2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
        )
      >();
  return glFramebufferTexture2DextAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTexture3Dext;

/// ```c
/// GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
/// ```
void glFramebufferTexture3Dext(
  int target,
  int attachment,
  int textarget,
  int texture,
  int level,
  int zoffset,
) {
  final glFramebufferTexture3DextAsFunction = _glFramebufferTexture3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 textarget,
            Uint32 texture,
            Int32 level,
            Int32 zoffset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int textarget,
          int texture,
          int level,
          int zoffset,
        )
      >();
  return glFramebufferTexture3DextAsFunction(
    target,
    attachment,
    textarget,
    texture,
    level,
    zoffset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferRenderbufferExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
void glFramebufferRenderbufferExt(
  int target,
  int attachment,
  int renderbuffertarget,
  int renderbuffer,
) {
  final glFramebufferRenderbufferExtAsFunction = _glFramebufferRenderbufferExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 renderbuffertarget,
            Uint32 renderbuffer,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int renderbuffertarget,
          int renderbuffer,
        )
      >();
  return glFramebufferRenderbufferExtAsFunction(
    target,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetFramebufferAttachmentParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint *params)
/// ```
void glGetFramebufferAttachmentParameterivExt(
  int target,
  int attachment,
  int pname,
  Pointer<Int32> params,
) {
  final glGetFramebufferAttachmentParameterivExtAsFunction =
      _glGetFramebufferAttachmentParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 attachment,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int attachment,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetFramebufferAttachmentParameterivExtAsFunction(
    target,
    attachment,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenerateMipmapExt;

/// ```c
/// GLAPI void APIENTRY glGenerateMipmapEXT (GLenum target)
/// ```
void glGenerateMipmapExt(int target) {
  final glGenerateMipmapExtAsFunction = _glGenerateMipmapExt
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glGenerateMipmapExtAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameteriExt;

/// ```c
/// GLAPI void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
/// ```
void glProgramParameteriExt(int program, int pname, int value) {
  final glProgramParameteriExtAsFunction = _glProgramParameteriExt
      .cast<
        NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>
      >()
      .asFunction<void Function(int program, int pname, int value)>();
  return glProgramParameteriExtAsFunction(program, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameters4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params)
/// ```
void glProgramEnvParameters4fvExt(
  int target,
  int index,
  int count,
  Pointer<Float> params,
) {
  final glProgramEnvParameters4fvExtAsFunction = _glProgramEnvParameters4fvExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 count,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int count, Pointer<Float> params)
      >();
  return glProgramEnvParameters4fvExtAsFunction(target, index, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameters4fvExt;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params)
/// ```
void glProgramLocalParameters4fvExt(
  int target,
  int index,
  int count,
  Pointer<Float> params,
) {
  final glProgramLocalParameters4fvExtAsFunction =
      _glProgramLocalParameters4fvExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int index,
              int count,
              Pointer<Float> params,
            )
          >();
  return glProgramLocalParameters4fvExtAsFunction(target, index, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUniformuivExt;

/// ```c
/// GLAPI void APIENTRY glGetUniformuivEXT (GLuint program, GLint location, GLuint *params)
/// ```
void glGetUniformuivExt(int program, int location, Pointer<Uint32> params) {
  final glGetUniformuivExtAsFunction = _glGetUniformuivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int program, int location, Pointer<Uint32> params)
      >();
  return glGetUniformuivExtAsFunction(program, location, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindFragDataLocationExt;

/// ```c
/// GLAPI void APIENTRY glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name)
/// ```
void glBindFragDataLocationExt(int program, int color, String name) {
  final glBindFragDataLocationExtAsFunction = _glBindFragDataLocationExt
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Uint32 color, Pointer<Utf8> name)
        >
      >()
      .asFunction<void Function(int program, int color, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glBindFragDataLocationExtAsFunction(
    program,
    color,
    namePointer,
  );
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragDataLocationExt;

/// ```c
/// GLAPI GLint APIENTRY glGetFragDataLocationEXT (GLuint program, const GLchar *name)
/// ```
int glGetFragDataLocationExt(int program, String name) {
  final glGetFragDataLocationExtAsFunction = _glGetFragDataLocationExt
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetFragDataLocationExtAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1uiExt;

/// ```c
/// GLAPI void APIENTRY glUniform1uiEXT (GLint location, GLuint v0)
/// ```
void glUniform1uiExt(int location, int v0) {
  final glUniform1uiExtAsFunction = _glUniform1uiExt
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return glUniform1uiExtAsFunction(location, v0);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2uiExt;

/// ```c
/// GLAPI void APIENTRY glUniform2uiEXT (GLint location, GLuint v0, GLuint v1)
/// ```
void glUniform2uiExt(int location, int v0, int v1) {
  final glUniform2uiExtAsFunction = _glUniform2uiExt
      .cast<
        NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1)>
      >()
      .asFunction<void Function(int location, int v0, int v1)>();
  return glUniform2uiExtAsFunction(location, v0, v1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3uiExt;

/// ```c
/// GLAPI void APIENTRY glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
void glUniform3uiExt(int location, int v0, int v1, int v2) {
  final glUniform3uiExtAsFunction = _glUniform3uiExt
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2)
        >
      >()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return glUniform3uiExtAsFunction(location, v0, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4uiExt;

/// ```c
/// GLAPI void APIENTRY glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
void glUniform4uiExt(int location, int v0, int v1, int v2, int v3) {
  final glUniform4uiExtAsFunction = _glUniform4uiExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 location,
            Uint32 v0,
            Uint32 v1,
            Uint32 v2,
            Uint32 v3,
          )
        >
      >()
      .asFunction<
        void Function(int location, int v0, int v1, int v2, int v3)
      >();
  return glUniform4uiExtAsFunction(location, v0, v1, v2, v3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform1uivExt;

/// ```c
/// GLAPI void APIENTRY glUniform1uivEXT (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform1uivExt(int location, int count, Pointer<Uint32> value) {
  final glUniform1uivExtAsFunction = _glUniform1uivExt
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform1uivExtAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform2uivExt;

/// ```c
/// GLAPI void APIENTRY glUniform2uivEXT (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform2uivExt(int location, int count, Pointer<Uint32> value) {
  final glUniform2uivExtAsFunction = _glUniform2uivExt
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform2uivExtAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform3uivExt;

/// ```c
/// GLAPI void APIENTRY glUniform3uivEXT (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform3uivExt(int location, int count, Pointer<Uint32> value) {
  final glUniform3uivExtAsFunction = _glUniform3uivExt
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform3uivExtAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniform4uivExt;

/// ```c
/// GLAPI void APIENTRY glUniform4uivEXT (GLint location, GLsizei count, const GLuint *value)
/// ```
void glUniform4uivExt(int location, int count, Pointer<Uint32> value) {
  final glUniform4uivExtAsFunction = _glUniform4uivExt
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint32> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint32> value)
      >();
  return glUniform4uivExtAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1iExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1iEXT (GLuint index, GLint x)
/// ```
void glVertexAttribI1iExt(int index, int x) {
  final glVertexAttribI1iExtAsFunction = _glVertexAttribI1iExt
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribI1iExtAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2iExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2iEXT (GLuint index, GLint x, GLint y)
/// ```
void glVertexAttribI2iExt(int index, int x, int y) {
  final glVertexAttribI2iExtAsFunction = _glVertexAttribI2iExt
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribI2iExtAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3iExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z)
/// ```
void glVertexAttribI3iExt(int index, int x, int y, int z) {
  final glVertexAttribI3iExtAsFunction = _glVertexAttribI3iExt
      .cast<
        NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y, Int32 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribI3iExtAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4iExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
void glVertexAttribI4iExt(int index, int x, int y, int z, int w) {
  final glVertexAttribI4iExtAsFunction = _glVertexAttribI4iExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribI4iExtAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1uiExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1uiEXT (GLuint index, GLuint x)
/// ```
void glVertexAttribI1uiExt(int index, int x) {
  final glVertexAttribI1uiExtAsFunction = _glVertexAttribI1uiExt
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribI1uiExtAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2uiExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y)
/// ```
void glVertexAttribI2uiExt(int index, int x, int y) {
  final glVertexAttribI2uiExtAsFunction = _glVertexAttribI2uiExt
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x, Uint32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribI2uiExtAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3uiExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z)
/// ```
void glVertexAttribI3uiExt(int index, int x, int y, int z) {
  final glVertexAttribI3uiExtAsFunction = _glVertexAttribI3uiExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribI3uiExtAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4uiExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
void glVertexAttribI4uiExt(int index, int x, int y, int z, int w) {
  final glVertexAttribI4uiExtAsFunction = _glVertexAttribI4uiExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribI4uiExtAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1ivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1ivEXT (GLuint index, const GLint *v)
/// ```
void glVertexAttribI1ivExt(int index, Pointer<Int32> v) {
  final glVertexAttribI1ivExtAsFunction = _glVertexAttribI1ivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI1ivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2ivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2ivEXT (GLuint index, const GLint *v)
/// ```
void glVertexAttribI2ivExt(int index, Pointer<Int32> v) {
  final glVertexAttribI2ivExtAsFunction = _glVertexAttribI2ivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI2ivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3ivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3ivEXT (GLuint index, const GLint *v)
/// ```
void glVertexAttribI3ivExt(int index, Pointer<Int32> v) {
  final glVertexAttribI3ivExtAsFunction = _glVertexAttribI3ivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI3ivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4ivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4ivEXT (GLuint index, const GLint *v)
/// ```
void glVertexAttribI4ivExt(int index, Pointer<Int32> v) {
  final glVertexAttribI4ivExtAsFunction = _glVertexAttribI4ivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32> v)>>()
      .asFunction<void Function(int index, Pointer<Int32> v)>();
  return glVertexAttribI4ivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI1uivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI1uivEXT (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI1uivExt(int index, Pointer<Uint32> v) {
  final glVertexAttribI1uivExtAsFunction = _glVertexAttribI1uivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI1uivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI2uivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI2uivEXT (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI2uivExt(int index, Pointer<Uint32> v) {
  final glVertexAttribI2uivExtAsFunction = _glVertexAttribI2uivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI2uivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI3uivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI3uivEXT (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI3uivExt(int index, Pointer<Uint32> v) {
  final glVertexAttribI3uivExtAsFunction = _glVertexAttribI3uivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI3uivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4uivExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4uivEXT (GLuint index, const GLuint *v)
/// ```
void glVertexAttribI4uivExt(int index, Pointer<Uint32> v) {
  final glVertexAttribI4uivExtAsFunction = _glVertexAttribI4uivExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32> v)>>()
      .asFunction<void Function(int index, Pointer<Uint32> v)>();
  return glVertexAttribI4uivExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4bvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint index, const GLbyte *v)
/// ```
void glVertexAttribI4bvExt(int index, String v) {
  final glVertexAttribI4bvExtAsFunction = _glVertexAttribI4bvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8> v)>>()
      .asFunction<void Function(int index, Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glVertexAttribI4bvExtAsFunction(index, vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4svExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4svEXT (GLuint index, const GLshort *v)
/// ```
void glVertexAttribI4svExt(int index, Pointer<Int16> v) {
  final glVertexAttribI4svExtAsFunction = _glVertexAttribI4svExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttribI4svExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4ubvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v)
/// ```
void glVertexAttribI4ubvExt(int index, Pointer<Uint8> v) {
  final glVertexAttribI4ubvExtAsFunction = _glVertexAttribI4ubvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttribI4ubvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribI4usvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort *v)
/// ```
void glVertexAttribI4usvExt(int index, Pointer<Uint16> v) {
  final glVertexAttribI4usvExtAsFunction = _glVertexAttribI4usvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttribI4usvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribIPointerExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribIPointerExt(
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribIPointerExtAsFunction = _glVertexAttribIPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribIPointerExtAsFunction(
    index,
    size,
    type,
    stride,
    pointer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribIivExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribIivExt(int index, int pname, Pointer<Int32> params) {
  final glGetVertexAttribIivExtAsFunction = _glGetVertexAttribIivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int32> params)>();
  return glGetVertexAttribIivExtAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribIuivExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params)
/// ```
void glGetVertexAttribIuivExt(int index, int pname, Pointer<Uint32> params) {
  final glGetVertexAttribIuivExtAsFunction = _glGetVertexAttribIuivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Uint32> params)
      >();
  return glGetVertexAttribIuivExtAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramExt;

/// ```c
/// GLAPI void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
/// ```
void glGetHistogramExt(
  int target,
  int reset,
  int format,
  int type,
  Pointer<NativeType> values,
) {
  final glGetHistogramExtAsFunction = _glGetHistogramExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          Pointer<NativeType> values,
        )
      >();
  return glGetHistogramExtAsFunction(target, reset, format, type, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetHistogramParameterfvExt(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetHistogramParameterfvExtAsFunction = _glGetHistogramParameterfvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetHistogramParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetHistogramParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetHistogramParameterivExtAsFunction = _glGetHistogramParameterivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetHistogramParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmaxExt;

/// ```c
/// GLAPI void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
/// ```
void glGetMinmaxExt(
  int target,
  int reset,
  int format,
  int type,
  Pointer<NativeType> values,
) {
  final glGetMinmaxExtAsFunction = _glGetMinmaxExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          Pointer<NativeType> values,
        )
      >();
  return glGetMinmaxExtAsFunction(target, reset, format, type, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmaxParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetMinmaxParameterfvExt(int target, int pname, Pointer<Float> params) {
  final glGetMinmaxParameterfvExtAsFunction = _glGetMinmaxParameterfvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetMinmaxParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmaxParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetMinmaxParameterivExt(int target, int pname, Pointer<Int32> params) {
  final glGetMinmaxParameterivExtAsFunction = _glGetMinmaxParameterivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetMinmaxParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glHistogramExt;

/// ```c
/// GLAPI void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
/// ```
void glHistogramExt(int target, int width, int internalformat, int sink) {
  final glHistogramExtAsFunction = _glHistogramExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 width,
            Uint32 internalformat,
            Int32 sink,
          )
        >
      >()
      .asFunction<
        void Function(int target, int width, int internalformat, int sink)
      >();
  return glHistogramExtAsFunction(target, width, internalformat, sink);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMinmaxExt;

/// ```c
/// GLAPI void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink)
/// ```
void glMinmaxExt(int target, int internalformat, int sink) {
  final glMinmaxExtAsFunction = _glMinmaxExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 internalformat, Int32 sink)
        >
      >()
      .asFunction<void Function(int target, int internalformat, int sink)>();
  return glMinmaxExtAsFunction(target, internalformat, sink);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResetHistogramExt;

/// ```c
/// GLAPI void APIENTRY glResetHistogramEXT (GLenum target)
/// ```
void glResetHistogramExt(int target) {
  final glResetHistogramExtAsFunction = _glResetHistogramExt
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glResetHistogramExtAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResetMinmaxExt;

/// ```c
/// GLAPI void APIENTRY glResetMinmaxEXT (GLenum target)
/// ```
void glResetMinmaxExt(int target) {
  final glResetMinmaxExtAsFunction = _glResetMinmaxExt
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glResetMinmaxExtAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexFuncExt;

/// ```c
/// GLAPI void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref)
/// ```
void glIndexFuncExt(int func, double ref) {
  final glIndexFuncExtAsFunction = _glIndexFuncExt
      .cast<NativeFunction<Void Function(Uint32 func, Float ref)>>()
      .asFunction<void Function(int func, double ref)>();
  return glIndexFuncExtAsFunction(func, ref);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexMaterialExt;

/// ```c
/// GLAPI void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode)
/// ```
void glIndexMaterialExt(int face, int mode) {
  final glIndexMaterialExtAsFunction = _glIndexMaterialExt
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return glIndexMaterialExtAsFunction(face, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glApplyTextureExt;

/// ```c
/// GLAPI void APIENTRY glApplyTextureEXT (GLenum mode)
/// ```
void glApplyTextureExt(int mode) {
  final glApplyTextureExtAsFunction = _glApplyTextureExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glApplyTextureExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureLightExt;

/// ```c
/// GLAPI void APIENTRY glTextureLightEXT (GLenum pname)
/// ```
void glTextureLightExt(int pname) {
  final glTextureLightExtAsFunction = _glTextureLightExt
      .cast<NativeFunction<Void Function(Uint32 pname)>>()
      .asFunction<void Function(int pname)>();
  return glTextureLightExtAsFunction(pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureMaterialExt;

/// ```c
/// GLAPI void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode)
/// ```
void glTextureMaterialExt(int face, int mode) {
  final glTextureMaterialExtAsFunction = _glTextureMaterialExt
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return glTextureMaterialExtAsFunction(face, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUnsignedBytevExt;

/// ```c
/// GLAPI void APIENTRY glGetUnsignedBytevEXT (GLenum pname, GLubyte *data)
/// ```
void glGetUnsignedBytevExt(int pname, Pointer<Uint8> data) {
  final glGetUnsignedBytevExtAsFunction = _glGetUnsignedBytevExt
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Uint8> data)>>()
      .asFunction<void Function(int pname, Pointer<Uint8> data)>();
  return glGetUnsignedBytevExtAsFunction(pname, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetUnsignedByteiVExt;

/// ```c
/// GLAPI void APIENTRY glGetUnsignedBytei_vEXT (GLenum target, GLuint index, GLubyte *data)
/// ```
void glGetUnsignedByteiVExt(int target, int index, Pointer<Uint8> data) {
  final glGetUnsignedByteiVExtAsFunction = _glGetUnsignedByteiVExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Uint8> data)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Uint8> data)>();
  return glGetUnsignedByteiVExtAsFunction(target, index, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteMemoryObjectsExt;

/// ```c
/// GLAPI void APIENTRY glDeleteMemoryObjectsEXT (GLsizei n, const GLuint *memoryObjects)
/// ```
void glDeleteMemoryObjectsExt(int n, Pointer<Uint32> memoryObjects) {
  final glDeleteMemoryObjectsExtAsFunction = _glDeleteMemoryObjectsExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> memoryObjects)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> memoryObjects)>();
  return glDeleteMemoryObjectsExtAsFunction(n, memoryObjects);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsMemoryObjectExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsMemoryObjectEXT (GLuint memoryObject)
/// ```
int glIsMemoryObjectExt(int memoryObject) {
  final glIsMemoryObjectExtAsFunction = _glIsMemoryObjectExt
      .cast<NativeFunction<Int32 Function(Uint32 memoryObject)>>()
      .asFunction<int Function(int memoryObject)>();
  return glIsMemoryObjectExtAsFunction(memoryObject);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateMemoryObjectsExt;

/// ```c
/// GLAPI void APIENTRY glCreateMemoryObjectsEXT (GLsizei n, GLuint *memoryObjects)
/// ```
void glCreateMemoryObjectsExt(int n, Pointer<Uint32> memoryObjects) {
  final glCreateMemoryObjectsExtAsFunction = _glCreateMemoryObjectsExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> memoryObjects)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> memoryObjects)>();
  return glCreateMemoryObjectsExtAsFunction(n, memoryObjects);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMemoryObjectParameterivExt;

/// ```c
/// GLAPI void APIENTRY glMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, const GLint *params)
/// ```
void glMemoryObjectParameterivExt(
  int memoryObject,
  int pname,
  Pointer<Int32> params,
) {
  final glMemoryObjectParameterivExtAsFunction = _glMemoryObjectParameterivExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 memoryObject,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int memoryObject, int pname, Pointer<Int32> params)
      >();
  return glMemoryObjectParameterivExtAsFunction(memoryObject, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMemoryObjectParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, GLint *params)
/// ```
void glGetMemoryObjectParameterivExt(
  int memoryObject,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMemoryObjectParameterivExtAsFunction =
      _glGetMemoryObjectParameterivExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 memoryObject,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int memoryObject, int pname, Pointer<Int32> params)
          >();
  return glGetMemoryObjectParameterivExtAsFunction(memoryObject, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageMem2Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorageMem2DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
/// ```
void glTexStorageMem2Dext(
  int target,
  int levels,
  int internalFormat,
  int width,
  int height,
  int memory,
  int offset,
) {
  final glTexStorageMem2DextAsFunction = _glTexStorageMem2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalFormat,
          int width,
          int height,
          int memory,
          int offset,
        )
      >();
  return glTexStorageMem2DextAsFunction(
    target,
    levels,
    internalFormat,
    width,
    height,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageMem2DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTexStorageMem2DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
void glTexStorageMem2DMultisampleExt(
  int target,
  int samples,
  int internalFormat,
  int width,
  int height,
  int fixedSampleLocations,
  int memory,
  int offset,
) {
  final glTexStorageMem2DMultisampleExtAsFunction =
      _glTexStorageMem2DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 samples,
                Uint32 internalFormat,
                Uint32 width,
                Uint32 height,
                Int32 fixedSampleLocations,
                Uint32 memory,
                Uint64 offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int samples,
              int internalFormat,
              int width,
              int height,
              int fixedSampleLocations,
              int memory,
              int offset,
            )
          >();
  return glTexStorageMem2DMultisampleExtAsFunction(
    target,
    samples,
    internalFormat,
    width,
    height,
    fixedSampleLocations,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageMem3Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorageMem3DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
/// ```
void glTexStorageMem3Dext(
  int target,
  int levels,
  int internalFormat,
  int width,
  int height,
  int depth,
  int memory,
  int offset,
) {
  final glTexStorageMem3DextAsFunction = _glTexStorageMem3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalFormat,
          int width,
          int height,
          int depth,
          int memory,
          int offset,
        )
      >();
  return glTexStorageMem3DextAsFunction(
    target,
    levels,
    internalFormat,
    width,
    height,
    depth,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageMem3DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTexStorageMem3DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
void glTexStorageMem3DMultisampleExt(
  int target,
  int samples,
  int internalFormat,
  int width,
  int height,
  int depth,
  int fixedSampleLocations,
  int memory,
  int offset,
) {
  final glTexStorageMem3DMultisampleExtAsFunction =
      _glTexStorageMem3DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 samples,
                Uint32 internalFormat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 fixedSampleLocations,
                Uint32 memory,
                Uint64 offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int samples,
              int internalFormat,
              int width,
              int height,
              int depth,
              int fixedSampleLocations,
              int memory,
              int offset,
            )
          >();
  return glTexStorageMem3DMultisampleExtAsFunction(
    target,
    samples,
    internalFormat,
    width,
    height,
    depth,
    fixedSampleLocations,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferStorageMemExt;

/// ```c
/// GLAPI void APIENTRY glBufferStorageMemEXT (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
/// ```
void glBufferStorageMemExt(
  int target,
  Pointer<Uint32> size,
  int memory,
  int offset,
) {
  final glBufferStorageMemExtAsFunction = _glBufferStorageMemExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<Uint32> size,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(int target, Pointer<Uint32> size, int memory, int offset)
      >();
  return glBufferStorageMemExtAsFunction(target, size, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorageMem2Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorageMem2DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
/// ```
void glTextureStorageMem2Dext(
  int texture,
  int levels,
  int internalFormat,
  int width,
  int height,
  int memory,
  int offset,
) {
  final glTextureStorageMem2DextAsFunction = _glTextureStorageMem2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int levels,
          int internalFormat,
          int width,
          int height,
          int memory,
          int offset,
        )
      >();
  return glTextureStorageMem2DextAsFunction(
    texture,
    levels,
    internalFormat,
    width,
    height,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTextureStorageMem2DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTextureStorageMem2DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
void glTextureStorageMem2DMultisampleExt(
  int texture,
  int samples,
  int internalFormat,
  int width,
  int height,
  int fixedSampleLocations,
  int memory,
  int offset,
) {
  final glTextureStorageMem2DMultisampleExtAsFunction =
      _glTextureStorageMem2DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 samples,
                Uint32 internalFormat,
                Uint32 width,
                Uint32 height,
                Int32 fixedSampleLocations,
                Uint32 memory,
                Uint64 offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int samples,
              int internalFormat,
              int width,
              int height,
              int fixedSampleLocations,
              int memory,
              int offset,
            )
          >();
  return glTextureStorageMem2DMultisampleExtAsFunction(
    texture,
    samples,
    internalFormat,
    width,
    height,
    fixedSampleLocations,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorageMem3Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorageMem3DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
/// ```
void glTextureStorageMem3Dext(
  int texture,
  int levels,
  int internalFormat,
  int width,
  int height,
  int depth,
  int memory,
  int offset,
) {
  final glTextureStorageMem3DextAsFunction = _glTextureStorageMem3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int levels,
          int internalFormat,
          int width,
          int height,
          int depth,
          int memory,
          int offset,
        )
      >();
  return glTextureStorageMem3DextAsFunction(
    texture,
    levels,
    internalFormat,
    width,
    height,
    depth,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTextureStorageMem3DMultisampleExt;

/// ```c
/// GLAPI void APIENTRY glTextureStorageMem3DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
void glTextureStorageMem3DMultisampleExt(
  int texture,
  int samples,
  int internalFormat,
  int width,
  int height,
  int depth,
  int fixedSampleLocations,
  int memory,
  int offset,
) {
  final glTextureStorageMem3DMultisampleExtAsFunction =
      _glTextureStorageMem3DMultisampleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 samples,
                Uint32 internalFormat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 fixedSampleLocations,
                Uint32 memory,
                Uint64 offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int samples,
              int internalFormat,
              int width,
              int height,
              int depth,
              int fixedSampleLocations,
              int memory,
              int offset,
            )
          >();
  return glTextureStorageMem3DMultisampleExtAsFunction(
    texture,
    samples,
    internalFormat,
    width,
    height,
    depth,
    fixedSampleLocations,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferStorageMemExt;

/// ```c
/// GLAPI void APIENTRY glNamedBufferStorageMemEXT (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
/// ```
void glNamedBufferStorageMemExt(
  int buffer,
  Pointer<Uint32> size,
  int memory,
  int offset,
) {
  final glNamedBufferStorageMemExtAsFunction = _glNamedBufferStorageMemExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Uint32> size,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(int buffer, Pointer<Uint32> size, int memory, int offset)
      >();
  return glNamedBufferStorageMemExtAsFunction(buffer, size, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorageMem1Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorageMem1DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
/// ```
void glTexStorageMem1Dext(
  int target,
  int levels,
  int internalFormat,
  int width,
  int memory,
  int offset,
) {
  final glTexStorageMem1DextAsFunction = _glTexStorageMem1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalFormat,
          int width,
          int memory,
          int offset,
        )
      >();
  return glTexStorageMem1DextAsFunction(
    target,
    levels,
    internalFormat,
    width,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureStorageMem1Dext;

/// ```c
/// GLAPI void APIENTRY glTextureStorageMem1DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
/// ```
void glTextureStorageMem1Dext(
  int texture,
  int levels,
  int internalFormat,
  int width,
  int memory,
  int offset,
) {
  final glTextureStorageMem1DextAsFunction = _glTextureStorageMem1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 levels,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 memory,
            Uint64 offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int levels,
          int internalFormat,
          int width,
          int memory,
          int offset,
        )
      >();
  return glTextureStorageMem1DextAsFunction(
    texture,
    levels,
    internalFormat,
    width,
    memory,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportMemoryFdExt;

/// ```c
/// GLAPI void APIENTRY glImportMemoryFdEXT (GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
/// ```
void glImportMemoryFdExt(int memory, int size, int handleType, int fd) {
  final glImportMemoryFdExtAsFunction = _glImportMemoryFdExt
      .cast<
        NativeFunction<
          Void Function(Uint32 memory, Uint64 size, Uint32 handleType, Int32 fd)
        >
      >()
      .asFunction<
        void Function(int memory, int size, int handleType, int fd)
      >();
  return glImportMemoryFdExtAsFunction(memory, size, handleType, fd);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportMemoryWin32HandleExt;

/// ```c
/// GLAPI void APIENTRY glImportMemoryWin32HandleEXT (GLuint memory, GLuint64 size, GLenum handleType, void *handle)
/// ```
void glImportMemoryWin32HandleExt(
  int memory,
  int size,
  int handleType,
  Pointer<NativeType> handle,
) {
  final glImportMemoryWin32HandleExtAsFunction = _glImportMemoryWin32HandleExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 memory,
            Uint64 size,
            Uint32 handleType,
            Pointer<NativeType> handle,
          )
        >
      >()
      .asFunction<
        void Function(
          int memory,
          int size,
          int handleType,
          Pointer<NativeType> handle,
        )
      >();
  return glImportMemoryWin32HandleExtAsFunction(
    memory,
    size,
    handleType,
    handle,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportMemoryWin32NameExt;

/// ```c
/// GLAPI void APIENTRY glImportMemoryWin32NameEXT (GLuint memory, GLuint64 size, GLenum handleType, const void *name)
/// ```
void glImportMemoryWin32NameExt(
  int memory,
  int size,
  int handleType,
  Pointer<NativeType> name,
) {
  final glImportMemoryWin32NameExtAsFunction = _glImportMemoryWin32NameExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 memory,
            Uint64 size,
            Uint32 handleType,
            Pointer<NativeType> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int memory,
          int size,
          int handleType,
          Pointer<NativeType> name,
        )
      >();
  return glImportMemoryWin32NameExtAsFunction(memory, size, handleType, name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawArraysExt;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
/// ```
void glMultiDrawArraysExt(
  int mode,
  Pointer<Int32> first,
  Pointer<Uint32> count,
  int primcount,
) {
  final glMultiDrawArraysExtAsFunction = _glMultiDrawArraysExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Int32> first,
            Pointer<Uint32> count,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Int32> first,
          Pointer<Uint32> count,
          int primcount,
        )
      >();
  return glMultiDrawArraysExtAsFunction(mode, first, count, primcount);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawElementsExt;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)
/// ```
void glMultiDrawElementsExt(
  int mode,
  Pointer<Uint32> count,
  int type,
  Pointer<Pointer<NativeType>> indices,
  int primcount,
) {
  final glMultiDrawElementsExtAsFunction = _glMultiDrawElementsExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Pointer<Uint32> count,
            Uint32 type,
            Pointer<Pointer<NativeType>> indices,
            Uint32 primcount,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          Pointer<Uint32> count,
          int type,
          Pointer<Pointer<NativeType>> indices,
          int primcount,
        )
      >();
  return glMultiDrawElementsExtAsFunction(
    mode,
    count,
    type,
    indices,
    primcount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleMaskExt;

/// ```c
/// GLAPI void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert)
/// ```
void glSampleMaskExt(double value, int invert) {
  final glSampleMaskExtAsFunction = _glSampleMaskExt
      .cast<NativeFunction<Void Function(Float value, Int32 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return glSampleMaskExtAsFunction(value, invert);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplePatternExt;

/// ```c
/// GLAPI void APIENTRY glSamplePatternEXT (GLenum pattern)
/// ```
void glSamplePatternExt(int pattern) {
  final glSamplePatternExtAsFunction = _glSamplePatternExt
      .cast<NativeFunction<Void Function(Uint32 pattern)>>()
      .asFunction<void Function(int pattern)>();
  return glSamplePatternExtAsFunction(pattern);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableExt;

/// ```c
/// GLAPI void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table)
/// ```
void glColorTableExt(
  int target,
  int internalFormat,
  int width,
  int format,
  int type,
  Pointer<NativeType> table,
) {
  final glColorTableExtAsFunction = _glColorTableExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalFormat,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalFormat,
          int width,
          int format,
          int type,
          Pointer<NativeType> table,
        )
      >();
  return glColorTableExtAsFunction(
    target,
    internalFormat,
    width,
    format,
    type,
    table,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableExt;

/// ```c
/// GLAPI void APIENTRY glGetColorTableEXT (GLenum target, GLenum format, GLenum type, void *data)
/// ```
void glGetColorTableExt(
  int target,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glGetColorTableExtAsFunction = _glGetColorTableExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glGetColorTableExtAsFunction(target, format, type, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetColorTableParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetColorTableParameterivExtAsFunction = _glGetColorTableParameterivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetColorTableParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetColorTableParameterfvExt(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetColorTableParameterfvExtAsFunction = _glGetColorTableParameterfvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetColorTableParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransformParameteriExt;

/// ```c
/// GLAPI void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param)
/// ```
void glPixelTransformParameteriExt(int target, int pname, int param) {
  final glPixelTransformParameteriExtAsFunction = _glPixelTransformParameteriExt
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glPixelTransformParameteriExtAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransformParameterfExt;

/// ```c
/// GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param)
/// ```
void glPixelTransformParameterfExt(int target, int pname, double param) {
  final glPixelTransformParameterfExtAsFunction = _glPixelTransformParameterfExt
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int target, int pname, double param)>();
  return glPixelTransformParameterfExtAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransformParameterivExt;

/// ```c
/// GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params)
/// ```
void glPixelTransformParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glPixelTransformParameterivExtAsFunction =
      _glPixelTransformParameterivExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glPixelTransformParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransformParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glPixelTransformParameterfvExt(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glPixelTransformParameterfvExtAsFunction =
      _glPixelTransformParameterfvExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Float> params)
          >();
  return glPixelTransformParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetPixelTransformParameterivExt;

/// ```c
/// GLAPI void APIENTRY glGetPixelTransformParameterivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetPixelTransformParameterivExt(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetPixelTransformParameterivExtAsFunction =
      _glGetPixelTransformParameterivExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetPixelTransformParameterivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetPixelTransformParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glGetPixelTransformParameterfvEXT (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetPixelTransformParameterfvExt(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetPixelTransformParameterfvExtAsFunction =
      _glGetPixelTransformParameterfvExt
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Float> params)
          >();
  return glGetPixelTransformParameterfvExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfExt;

/// ```c
/// GLAPI void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param)
/// ```
void glPointParameterfExt(int pname, double param) {
  final glPointParameterfExtAsFunction = _glPointParameterfExt
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPointParameterfExtAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfvExt;

/// ```c
/// GLAPI void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat *params)
/// ```
void glPointParameterfvExt(int pname, Pointer<Float> params) {
  final glPointParameterfvExtAsFunction = _glPointParameterfvExt
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glPointParameterfvExtAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonOffsetExt;

/// ```c
/// GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat factor, GLfloat bias)
/// ```
void glPolygonOffsetExt(double factor, double bias) {
  final glPolygonOffsetExtAsFunction = _glPolygonOffsetExt
      .cast<NativeFunction<Void Function(Float factor, Float bias)>>()
      .asFunction<void Function(double factor, double bias)>();
  return glPolygonOffsetExtAsFunction(factor, bias);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonOffsetClampExt;

/// ```c
/// GLAPI void APIENTRY glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp)
/// ```
void glPolygonOffsetClampExt(double factor, double units, double clamp) {
  final glPolygonOffsetClampExtAsFunction = _glPolygonOffsetClampExt
      .cast<
        NativeFunction<Void Function(Float factor, Float units, Float clamp)>
      >()
      .asFunction<void Function(double factor, double units, double clamp)>();
  return glPolygonOffsetClampExtAsFunction(factor, units, clamp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProvokingVertexExt;

/// ```c
/// GLAPI void APIENTRY glProvokingVertexEXT (GLenum mode)
/// ```
void glProvokingVertexExt(int mode) {
  final glProvokingVertexExtAsFunction = _glProvokingVertexExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glProvokingVertexExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterSamplesExt;

/// ```c
/// GLAPI void APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
/// ```
void glRasterSamplesExt(int samples, int fixedsamplelocations) {
  final glRasterSamplesExtAsFunction = _glRasterSamplesExt
      .cast<
        NativeFunction<
          Void Function(Uint32 samples, Int32 fixedsamplelocations)
        >
      >()
      .asFunction<void Function(int samples, int fixedsamplelocations)>();
  return glRasterSamplesExtAsFunction(samples, fixedsamplelocations);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3bExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue)
/// ```
void glSecondaryColor3bExt(int red, int green, int blue) {
  final glSecondaryColor3bExtAsFunction = _glSecondaryColor3bExt
      .cast<NativeFunction<Void Function(Int8 red, Int8 green, Int8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3bExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3bvExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3bvEXT (const GLbyte *v)
/// ```
void glSecondaryColor3bvExt(String v) {
  final glSecondaryColor3bvExtAsFunction = _glSecondaryColor3bvExt
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glSecondaryColor3bvExtAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3dExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue)
/// ```
void glSecondaryColor3dExt(double red, double green, double blue) {
  final glSecondaryColor3dExtAsFunction = _glSecondaryColor3dExt
      .cast<
        NativeFunction<Void Function(Double red, Double green, Double blue)>
      >()
      .asFunction<void Function(double red, double green, double blue)>();
  return glSecondaryColor3dExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3dvExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3dvEXT (const GLdouble *v)
/// ```
void glSecondaryColor3dvExt(Pointer<Double> v) {
  final glSecondaryColor3dvExtAsFunction = _glSecondaryColor3dvExt
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glSecondaryColor3dvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3fExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue)
/// ```
void glSecondaryColor3fExt(double red, double green, double blue) {
  final glSecondaryColor3fExtAsFunction = _glSecondaryColor3fExt
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return glSecondaryColor3fExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3fvExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3fvEXT (const GLfloat *v)
/// ```
void glSecondaryColor3fvExt(Pointer<Float> v) {
  final glSecondaryColor3fvExtAsFunction = _glSecondaryColor3fvExt
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glSecondaryColor3fvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3iExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3iEXT (GLint red, GLint green, GLint blue)
/// ```
void glSecondaryColor3iExt(int red, int green, int blue) {
  final glSecondaryColor3iExtAsFunction = _glSecondaryColor3iExt
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3iExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ivExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ivEXT (const GLint *v)
/// ```
void glSecondaryColor3ivExt(Pointer<Int32> v) {
  final glSecondaryColor3ivExtAsFunction = _glSecondaryColor3ivExt
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glSecondaryColor3ivExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3sExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue)
/// ```
void glSecondaryColor3sExt(int red, int green, int blue) {
  final glSecondaryColor3sExtAsFunction = _glSecondaryColor3sExt
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3sExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3svExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3svEXT (const GLshort *v)
/// ```
void glSecondaryColor3svExt(Pointer<Int16> v) {
  final glSecondaryColor3svExtAsFunction = _glSecondaryColor3svExt
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glSecondaryColor3svExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ubExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue)
/// ```
void glSecondaryColor3ubExt(int red, int green, int blue) {
  final glSecondaryColor3ubExtAsFunction = _glSecondaryColor3ubExt
      .cast<NativeFunction<Void Function(Uint8 red, Uint8 green, Uint8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3ubExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3ubvExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3ubvEXT (const GLubyte *v)
/// ```
void glSecondaryColor3ubvExt(Pointer<Uint8> v) {
  final glSecondaryColor3ubvExtAsFunction = _glSecondaryColor3ubvExt
      .cast<NativeFunction<Void Function(Pointer<Uint8> v)>>()
      .asFunction<void Function(Pointer<Uint8> v)>();
  return glSecondaryColor3ubvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3uiExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue)
/// ```
void glSecondaryColor3uiExt(int red, int green, int blue) {
  final glSecondaryColor3uiExtAsFunction = _glSecondaryColor3uiExt
      .cast<
        NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3uiExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3uivExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3uivEXT (const GLuint *v)
/// ```
void glSecondaryColor3uivExt(Pointer<Uint32> v) {
  final glSecondaryColor3uivExtAsFunction = _glSecondaryColor3uivExt
      .cast<NativeFunction<Void Function(Pointer<Uint32> v)>>()
      .asFunction<void Function(Pointer<Uint32> v)>();
  return glSecondaryColor3uivExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3usExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue)
/// ```
void glSecondaryColor3usExt(int red, int green, int blue) {
  final glSecondaryColor3usExtAsFunction = _glSecondaryColor3usExt
      .cast<
        NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3usExtAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3usvExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *v)
/// ```
void glSecondaryColor3usvExt(Pointer<Uint16> v) {
  final glSecondaryColor3usvExtAsFunction = _glSecondaryColor3usvExt
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glSecondaryColor3usvExtAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorPointerExt;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glSecondaryColorPointerExt(
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glSecondaryColorPointerExtAsFunction = _glSecondaryColorPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glSecondaryColorPointerExtAsFunction(size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenSemaphoresExt;

/// ```c
/// GLAPI void APIENTRY glGenSemaphoresEXT (GLsizei n, GLuint *semaphores)
/// ```
void glGenSemaphoresExt(int n, Pointer<Uint32> semaphores) {
  final glGenSemaphoresExtAsFunction = _glGenSemaphoresExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> semaphores)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> semaphores)>();
  return glGenSemaphoresExtAsFunction(n, semaphores);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteSemaphoresExt;

/// ```c
/// GLAPI void APIENTRY glDeleteSemaphoresEXT (GLsizei n, const GLuint *semaphores)
/// ```
void glDeleteSemaphoresExt(int n, Pointer<Uint32> semaphores) {
  final glDeleteSemaphoresExtAsFunction = _glDeleteSemaphoresExt
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> semaphores)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> semaphores)>();
  return glDeleteSemaphoresExtAsFunction(n, semaphores);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsSemaphoreExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsSemaphoreEXT (GLuint semaphore)
/// ```
int glIsSemaphoreExt(int semaphore) {
  final glIsSemaphoreExtAsFunction = _glIsSemaphoreExt
      .cast<NativeFunction<Int32 Function(Uint32 semaphore)>>()
      .asFunction<int Function(int semaphore)>();
  return glIsSemaphoreExtAsFunction(semaphore);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSemaphoreParameterui64vExt;

/// ```c
/// GLAPI void APIENTRY glSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, const GLuint64 *params)
/// ```
void glSemaphoreParameterui64vExt(
  int semaphore,
  int pname,
  Pointer<Uint64> params,
) {
  final glSemaphoreParameterui64vExtAsFunction = _glSemaphoreParameterui64vExt
      .cast<
        NativeFunction<
          Void Function(Uint32 semaphore, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int semaphore, int pname, Pointer<Uint64> params)
      >();
  return glSemaphoreParameterui64vExtAsFunction(semaphore, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSemaphoreParameterui64vExt;

/// ```c
/// GLAPI void APIENTRY glGetSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, GLuint64 *params)
/// ```
void glGetSemaphoreParameterui64vExt(
  int semaphore,
  int pname,
  Pointer<Uint64> params,
) {
  final glGetSemaphoreParameterui64vExtAsFunction =
      _glGetSemaphoreParameterui64vExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 semaphore,
                Uint32 pname,
                Pointer<Uint64> params,
              )
            >
          >()
          .asFunction<
            void Function(int semaphore, int pname, Pointer<Uint64> params)
          >();
  return glGetSemaphoreParameterui64vExtAsFunction(semaphore, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWaitSemaphoreExt;

/// ```c
/// GLAPI void APIENTRY glWaitSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
/// ```
void glWaitSemaphoreExt(
  int semaphore,
  int numBufferBarriers,
  Pointer<Uint32> buffers,
  int numTextureBarriers,
  Pointer<Uint32> textures,
  Pointer<Uint32> srcLayouts,
) {
  final glWaitSemaphoreExtAsFunction = _glWaitSemaphoreExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 semaphore,
            Uint32 numBufferBarriers,
            Pointer<Uint32> buffers,
            Uint32 numTextureBarriers,
            Pointer<Uint32> textures,
            Pointer<Uint32> srcLayouts,
          )
        >
      >()
      .asFunction<
        void Function(
          int semaphore,
          int numBufferBarriers,
          Pointer<Uint32> buffers,
          int numTextureBarriers,
          Pointer<Uint32> textures,
          Pointer<Uint32> srcLayouts,
        )
      >();
  return glWaitSemaphoreExtAsFunction(
    semaphore,
    numBufferBarriers,
    buffers,
    numTextureBarriers,
    textures,
    srcLayouts,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSignalSemaphoreExt;

/// ```c
/// GLAPI void APIENTRY glSignalSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
/// ```
void glSignalSemaphoreExt(
  int semaphore,
  int numBufferBarriers,
  Pointer<Uint32> buffers,
  int numTextureBarriers,
  Pointer<Uint32> textures,
  Pointer<Uint32> dstLayouts,
) {
  final glSignalSemaphoreExtAsFunction = _glSignalSemaphoreExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 semaphore,
            Uint32 numBufferBarriers,
            Pointer<Uint32> buffers,
            Uint32 numTextureBarriers,
            Pointer<Uint32> textures,
            Pointer<Uint32> dstLayouts,
          )
        >
      >()
      .asFunction<
        void Function(
          int semaphore,
          int numBufferBarriers,
          Pointer<Uint32> buffers,
          int numTextureBarriers,
          Pointer<Uint32> textures,
          Pointer<Uint32> dstLayouts,
        )
      >();
  return glSignalSemaphoreExtAsFunction(
    semaphore,
    numBufferBarriers,
    buffers,
    numTextureBarriers,
    textures,
    dstLayouts,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportSemaphoreFdExt;

/// ```c
/// GLAPI void APIENTRY glImportSemaphoreFdEXT (GLuint semaphore, GLenum handleType, GLint fd)
/// ```
void glImportSemaphoreFdExt(int semaphore, int handleType, int fd) {
  final glImportSemaphoreFdExtAsFunction = _glImportSemaphoreFdExt
      .cast<
        NativeFunction<
          Void Function(Uint32 semaphore, Uint32 handleType, Int32 fd)
        >
      >()
      .asFunction<void Function(int semaphore, int handleType, int fd)>();
  return glImportSemaphoreFdExtAsFunction(semaphore, handleType, fd);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportSemaphoreWin32HandleExt;

/// ```c
/// GLAPI void APIENTRY glImportSemaphoreWin32HandleEXT (GLuint semaphore, GLenum handleType, void *handle)
/// ```
void glImportSemaphoreWin32HandleExt(
  int semaphore,
  int handleType,
  Pointer<NativeType> handle,
) {
  final glImportSemaphoreWin32HandleExtAsFunction =
      _glImportSemaphoreWin32HandleExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 semaphore,
                Uint32 handleType,
                Pointer<NativeType> handle,
              )
            >
          >()
          .asFunction<
            void Function(
              int semaphore,
              int handleType,
              Pointer<NativeType> handle,
            )
          >();
  return glImportSemaphoreWin32HandleExtAsFunction(
    semaphore,
    handleType,
    handle,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportSemaphoreWin32NameExt;

/// ```c
/// GLAPI void APIENTRY glImportSemaphoreWin32NameEXT (GLuint semaphore, GLenum handleType, const void *name)
/// ```
void glImportSemaphoreWin32NameExt(
  int semaphore,
  int handleType,
  Pointer<NativeType> name,
) {
  final glImportSemaphoreWin32NameExtAsFunction = _glImportSemaphoreWin32NameExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 semaphore,
            Uint32 handleType,
            Pointer<NativeType> name,
          )
        >
      >()
      .asFunction<
        void Function(int semaphore, int handleType, Pointer<NativeType> name)
      >();
  return glImportSemaphoreWin32NameExtAsFunction(semaphore, handleType, name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUseShaderProgramExt;

/// ```c
/// GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program)
/// ```
void glUseShaderProgramExt(int type, int program) {
  final glUseShaderProgramExtAsFunction = _glUseShaderProgramExt
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 program)>>()
      .asFunction<void Function(int type, int program)>();
  return glUseShaderProgramExtAsFunction(type, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveProgramExt;

/// ```c
/// GLAPI void APIENTRY glActiveProgramEXT (GLuint program)
/// ```
void glActiveProgramExt(int program) {
  final glActiveProgramExtAsFunction = _glActiveProgramExt
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return glActiveProgramExtAsFunction(program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateShaderProgramExt;

/// ```c
/// GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string)
/// ```
int glCreateShaderProgramExt(int type, String string) {
  final glCreateShaderProgramExtAsFunction = _glCreateShaderProgramExt
      .cast<
        NativeFunction<Uint32 Function(Uint32 type, Pointer<Utf8> string)>
      >()
      .asFunction<int Function(int type, Pointer<Utf8> string)>();
  final stringPointer = string.toNativeUtf8();
  final result = glCreateShaderProgramExtAsFunction(type, stringPointer);
  calloc.free(stringPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferFetchBarrierExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferFetchBarrierEXT (void)
/// ```
void glFramebufferFetchBarrierExt() {
  final glFramebufferFetchBarrierExtAsFunction = _glFramebufferFetchBarrierExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFramebufferFetchBarrierExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindImageTextureExt;

/// ```c
/// GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
/// ```
void glBindImageTextureExt(
  int index,
  int texture,
  int level,
  int layered,
  int layer,
  int access,
  int format,
) {
  final glBindImageTextureExtAsFunction = _glBindImageTextureExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 texture,
            Int32 level,
            Int32 layered,
            Int32 layer,
            Uint32 access,
            Int32 format,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int texture,
          int level,
          int layered,
          int layer,
          int access,
          int format,
        )
      >();
  return glBindImageTextureExtAsFunction(
    index,
    texture,
    level,
    layered,
    layer,
    access,
    format,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMemoryBarrierExt;

/// ```c
/// GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers)
/// ```
void glMemoryBarrierExt(int barriers) {
  final glMemoryBarrierExtAsFunction = _glMemoryBarrierExt
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return glMemoryBarrierExtAsFunction(barriers);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilClearTagExt;

/// ```c
/// GLAPI void APIENTRY glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag)
/// ```
void glStencilClearTagExt(int stencilTagBits, int stencilClearTag) {
  final glStencilClearTagExtAsFunction = _glStencilClearTagExt
      .cast<
        NativeFunction<
          Void Function(Uint32 stencilTagBits, Uint32 stencilClearTag)
        >
      >()
      .asFunction<void Function(int stencilTagBits, int stencilClearTag)>();
  return glStencilClearTagExtAsFunction(stencilTagBits, stencilClearTag);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveStencilFaceExt;

/// ```c
/// GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum face)
/// ```
void glActiveStencilFaceExt(int face) {
  final glActiveStencilFaceExtAsFunction = _glActiveStencilFaceExt
      .cast<NativeFunction<Void Function(Uint32 face)>>()
      .asFunction<void Function(int face)>();
  return glActiveStencilFaceExtAsFunction(face);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage1Dext;

/// ```c
/// GLAPI void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexSubImage1Dext(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage1DextAsFunction = _glTexSubImage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage1DextAsFunction(
    target,
    level,
    xoffset,
    width,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage2Dext;

/// ```c
/// GLAPI void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexSubImage2Dext(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage2DextAsFunction = _glTexSubImage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage2DextAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage3Dext;

/// ```c
/// GLAPI void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexImage3Dext(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexImage3DextAsFunction = _glTexImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexImage3DextAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage3Dext;

/// ```c
/// GLAPI void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexSubImage3Dext(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage3DextAsFunction = _glTexSubImage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage3DextAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureLayerExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
void glFramebufferTextureLayerExt(
  int target,
  int attachment,
  int texture,
  int level,
  int layer,
) {
  final glFramebufferTextureLayerExtAsFunction = _glFramebufferTextureLayerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
            Int32 layer,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int texture,
          int level,
          int layer,
        )
      >();
  return glFramebufferTextureLayerExtAsFunction(
    target,
    attachment,
    texture,
    level,
    layer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexBufferExt;

/// ```c
/// GLAPI void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
/// ```
void glTexBufferExt(int target, int internalformat, int buffer) {
  final glTexBufferExtAsFunction = _glTexBufferExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int internalformat, int buffer)>();
  return glTexBufferExtAsFunction(target, internalformat, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params)
/// ```
void glTexParameterIivExt(int target, int pname, Pointer<Int32> params) {
  final glTexParameterIivExtAsFunction = _glTexParameterIivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexParameterIivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params)
/// ```
void glTexParameterIuivExt(int target, int pname, Pointer<Uint32> params) {
  final glTexParameterIuivExtAsFunction = _glTexParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Uint32> params)
      >();
  return glTexParameterIuivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterIivExt;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetTexParameterIivExt(int target, int pname, Pointer<Int32> params) {
  final glGetTexParameterIivExtAsFunction = _glGetTexParameterIivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexParameterIivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterIuivExt;

/// ```c
/// GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params)
/// ```
void glGetTexParameterIuivExt(int target, int pname, Pointer<Uint32> params) {
  final glGetTexParameterIuivExtAsFunction = _glGetTexParameterIuivExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Uint32> params)
      >();
  return glGetTexParameterIuivExtAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearColorIiExt;

/// ```c
/// GLAPI void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha)
/// ```
void glClearColorIiExt(int red, int green, int blue, int alpha) {
  final glClearColorIiExtAsFunction = _glClearColorIiExt
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glClearColorIiExtAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearColorIuiExt;

/// ```c
/// GLAPI void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha)
/// ```
void glClearColorIuiExt(int red, int green, int blue, int alpha) {
  final glClearColorIuiExtAsFunction = _glClearColorIuiExt
      .cast<
        NativeFunction<
          Void Function(Uint32 red, Uint32 green, Uint32 blue, Uint32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glClearColorIuiExtAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAreTexturesResidentExt;

/// ```c
/// GLAPI GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences)
/// ```
int glAreTexturesResidentExt(
  int n,
  Pointer<Uint32> textures,
  Pointer<Int32> residences,
) {
  final glAreTexturesResidentExtAsFunction = _glAreTexturesResidentExt
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 n,
            Pointer<Uint32> textures,
            Pointer<Int32> residences,
          )
        >
      >()
      .asFunction<
        int Function(int n, Pointer<Uint32> textures, Pointer<Int32> residences)
      >();
  return glAreTexturesResidentExtAsFunction(n, textures, residences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTextureExt;

/// ```c
/// GLAPI void APIENTRY glBindTextureEXT (GLenum target, GLuint texture)
/// ```
void glBindTextureExt(int target, int texture) {
  final glBindTextureExtAsFunction = _glBindTextureExt
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 texture)>>()
      .asFunction<void Function(int target, int texture)>();
  return glBindTextureExtAsFunction(target, texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteTexturesExt;

/// ```c
/// GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures)
/// ```
void glDeleteTexturesExt(int n, Pointer<Uint32> textures) {
  final glDeleteTexturesExtAsFunction = _glDeleteTexturesExt
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32> textures)>();
  return glDeleteTexturesExtAsFunction(n, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenTexturesExt;

/// ```c
/// GLAPI void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures)
/// ```
void glGenTexturesExt(int n, Pointer<Uint32> textures) {
  final glGenTexturesExtAsFunction = _glGenTexturesExt
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32> textures)>();
  return glGenTexturesExtAsFunction(n, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTextureExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsTextureEXT (GLuint texture)
/// ```
int glIsTextureExt(int texture) {
  final glIsTextureExtAsFunction = _glIsTextureExt
      .cast<NativeFunction<Int32 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return glIsTextureExtAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrioritizeTexturesExt;

/// ```c
/// GLAPI void APIENTRY glPrioritizeTexturesEXT (GLsizei n, const GLuint *textures, const GLclampf *priorities)
/// ```
void glPrioritizeTexturesExt(
  int n,
  Pointer<Uint32> textures,
  Pointer<Float> priorities,
) {
  final glPrioritizeTexturesExtAsFunction = _glPrioritizeTexturesExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 n,
            Pointer<Uint32> textures,
            Pointer<Float> priorities,
          )
        >
      >()
      .asFunction<
        void Function(
          int n,
          Pointer<Uint32> textures,
          Pointer<Float> priorities,
        )
      >();
  return glPrioritizeTexturesExtAsFunction(n, textures, priorities);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureNormalExt;

/// ```c
/// GLAPI void APIENTRY glTextureNormalEXT (GLenum mode)
/// ```
void glTextureNormalExt(int mode) {
  final glTextureNormalExtAsFunction = _glTextureNormalExt
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glTextureNormalExtAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage1Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
void glTexStorage1Dext(int target, int levels, int internalformat, int width) {
  final glTexStorage1DextAsFunction = _glTexStorage1Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int levels, int internalformat, int width)
      >();
  return glTexStorage1DextAsFunction(target, levels, internalformat, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage2Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glTexStorage2Dext(
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
) {
  final glTexStorage2DextAsFunction = _glTexStorage2Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
        )
      >();
  return glTexStorage2DextAsFunction(
    target,
    levels,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexStorage3Dext;

/// ```c
/// GLAPI void APIENTRY glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glTexStorage3Dext(
  int target,
  int levels,
  int internalformat,
  int width,
  int height,
  int depth,
) {
  final glTexStorage3DextAsFunction = _glTexStorage3Dext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 levels,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int levels,
          int internalformat,
          int width,
          int height,
          int depth,
        )
      >();
  return glTexStorage3DextAsFunction(
    target,
    levels,
    internalformat,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjecti64vExt;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 *params)
/// ```
void glGetQueryObjecti64vExt(int id, int pname, Pointer<Int64> params) {
  final glGetQueryObjecti64vExtAsFunction = _glGetQueryObjecti64vExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int64> params)>();
  return glGetQueryObjecti64vExtAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetQueryObjectui64vExt;

/// ```c
/// GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 *params)
/// ```
void glGetQueryObjectui64vExt(int id, int pname, Pointer<Uint64> params) {
  final glGetQueryObjectui64vExtAsFunction = _glGetQueryObjectui64vExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint64> params)>();
  return glGetQueryObjectui64vExtAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginTransformFeedbackExt;

/// ```c
/// GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode)
/// ```
void glBeginTransformFeedbackExt(int primitiveMode) {
  final glBeginTransformFeedbackExtAsFunction = _glBeginTransformFeedbackExt
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return glBeginTransformFeedbackExtAsFunction(primitiveMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndTransformFeedbackExt;

/// ```c
/// GLAPI void APIENTRY glEndTransformFeedbackEXT (void)
/// ```
void glEndTransformFeedbackExt() {
  final glEndTransformFeedbackExtAsFunction = _glEndTransformFeedbackExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndTransformFeedbackExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferRangeExt;

/// ```c
/// GLAPI void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glBindBufferRangeExt(
  int target,
  int index,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glBindBufferRangeExtAsFunction = _glBindBufferRangeExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glBindBufferRangeExtAsFunction(target, index, buffer, offset, size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferOffsetExt;

/// ```c
/// GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
/// ```
void glBindBufferOffsetExt(
  int target,
  int index,
  int buffer,
  Pointer<NativeType> offset,
) {
  final glBindBufferOffsetExtAsFunction = _glBindBufferOffsetExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 buffer,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int buffer,
          Pointer<NativeType> offset,
        )
      >();
  return glBindBufferOffsetExtAsFunction(target, index, buffer, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferBaseExt;

/// ```c
/// GLAPI void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer)
/// ```
void glBindBufferBaseExt(int target, int index, int buffer) {
  final glBindBufferBaseExtAsFunction = _glBindBufferBaseExt
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int index, int buffer)>();
  return glBindBufferBaseExtAsFunction(target, index, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackVaryingsExt;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
/// ```
void glTransformFeedbackVaryingsExt(
  int program,
  int count,
  Pointer<Pointer<Int8>> varyings,
  int bufferMode,
) {
  final glTransformFeedbackVaryingsExtAsFunction =
      _glTransformFeedbackVaryingsExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 count,
                Pointer<Pointer<Int8>> varyings,
                Uint32 bufferMode,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int count,
              Pointer<Pointer<Int8>> varyings,
              int bufferMode,
            )
          >();
  return glTransformFeedbackVaryingsExtAsFunction(
    program,
    count,
    varyings,
    bufferMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbackVaryingExt;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
/// ```
void glGetTransformFeedbackVaryingExt(
  int program,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Uint32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetTransformFeedbackVaryingExtAsFunction =
      _glGetTransformFeedbackVaryingExt
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 index,
                Uint32 bufSize,
                Pointer<Uint32> length,
                Pointer<Uint32> size,
                Pointer<Uint32> type,
                Pointer<Int8> name,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int index,
              int bufSize,
              Pointer<Uint32> length,
              Pointer<Uint32> size,
              Pointer<Uint32> type,
              Pointer<Int8> name,
            )
          >();
  return glGetTransformFeedbackVaryingExtAsFunction(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glArrayElementExt;

/// ```c
/// GLAPI void APIENTRY glArrayElementEXT (GLint i)
/// ```
void glArrayElementExt(int i) {
  final glArrayElementExtAsFunction = _glArrayElementExt
      .cast<NativeFunction<Void Function(Int32 i)>>()
      .asFunction<void Function(int i)>();
  return glArrayElementExtAsFunction(i);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorPointerExt;

/// ```c
/// GLAPI void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
void glColorPointerExt(
  int size,
  int type,
  int stride,
  int count,
  Pointer<NativeType> pointer,
) {
  final glColorPointerExtAsFunction = _glColorPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Uint32 count,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          int count,
          Pointer<NativeType> pointer,
        )
      >();
  return glColorPointerExtAsFunction(size, type, stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArraysExt;

/// ```c
/// GLAPI void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei count)
/// ```
void glDrawArraysExt(int mode, int first, int count) {
  final glDrawArraysExtAsFunction = _glDrawArraysExt
      .cast<
        NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count)>
      >()
      .asFunction<void Function(int mode, int first, int count)>();
  return glDrawArraysExtAsFunction(mode, first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlagPointerExt;

/// ```c
/// GLAPI void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer)
/// ```
void glEdgeFlagPointerExt(int stride, int count, Pointer<Int32> pointer) {
  final glEdgeFlagPointerExtAsFunction = _glEdgeFlagPointerExt
      .cast<
        NativeFunction<
          Void Function(Uint32 stride, Uint32 count, Pointer<Int32> pointer)
        >
      >()
      .asFunction<
        void Function(int stride, int count, Pointer<Int32> pointer)
      >();
  return glEdgeFlagPointerExtAsFunction(stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPointervExt;

/// ```c
/// GLAPI void APIENTRY glGetPointervEXT (GLenum pname, void **params)
/// ```
void glGetPointervExt(int pname, Pointer<Pointer<NativeType>> params) {
  final glGetPointervExtAsFunction = _glGetPointervExt
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Pointer<Pointer<NativeType>> params)
        >
      >()
      .asFunction<
        void Function(int pname, Pointer<Pointer<NativeType>> params)
      >();
  return glGetPointervExtAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexPointerExt;

/// ```c
/// GLAPI void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
void glIndexPointerExt(
  int type,
  int stride,
  int count,
  Pointer<NativeType> pointer,
) {
  final glIndexPointerExtAsFunction = _glIndexPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Uint32 stride,
            Uint32 count,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          int count,
          Pointer<NativeType> pointer,
        )
      >();
  return glIndexPointerExtAsFunction(type, stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalPointerExt;

/// ```c
/// GLAPI void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
void glNormalPointerExt(
  int type,
  int stride,
  int count,
  Pointer<NativeType> pointer,
) {
  final glNormalPointerExtAsFunction = _glNormalPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Uint32 stride,
            Uint32 count,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          int count,
          Pointer<NativeType> pointer,
        )
      >();
  return glNormalPointerExtAsFunction(type, stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordPointerExt;

/// ```c
/// GLAPI void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
void glTexCoordPointerExt(
  int size,
  int type,
  int stride,
  int count,
  Pointer<NativeType> pointer,
) {
  final glTexCoordPointerExtAsFunction = _glTexCoordPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Uint32 count,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          int count,
          Pointer<NativeType> pointer,
        )
      >();
  return glTexCoordPointerExtAsFunction(size, type, stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexPointerExt;

/// ```c
/// GLAPI void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
void glVertexPointerExt(
  int size,
  int type,
  int stride,
  int count,
  Pointer<NativeType> pointer,
) {
  final glVertexPointerExtAsFunction = _glVertexPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Uint32 count,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          int count,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexPointerExtAsFunction(size, type, stride, count, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1dExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1dEXT (GLuint index, GLdouble x)
/// ```
void glVertexAttribL1dExt(int index, double x) {
  final glVertexAttribL1dExtAsFunction = _glVertexAttribL1dExt
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttribL1dExtAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2dExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y)
/// ```
void glVertexAttribL2dExt(int index, double x, double y) {
  final glVertexAttribL2dExtAsFunction = _glVertexAttribL2dExt
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttribL2dExtAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3dExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexAttribL3dExt(int index, double x, double y, double z) {
  final glVertexAttribL3dExtAsFunction = _glVertexAttribL3dExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttribL3dExtAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4dExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexAttribL4dExt(int index, double x, double y, double z, double w) {
  final glVertexAttribL4dExtAsFunction = _glVertexAttribL4dExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttribL4dExtAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1dvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1dvEXT (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL1dvExt(int index, Pointer<Double> v) {
  final glVertexAttribL1dvExtAsFunction = _glVertexAttribL1dvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL1dvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2dvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2dvEXT (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL2dvExt(int index, Pointer<Double> v) {
  final glVertexAttribL2dvExtAsFunction = _glVertexAttribL2dvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL2dvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3dvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL3dvExt(int index, Pointer<Double> v) {
  final glVertexAttribL3dvExtAsFunction = _glVertexAttribL3dvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL3dvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4dvExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble *v)
/// ```
void glVertexAttribL4dvExt(int index, Pointer<Double> v) {
  final glVertexAttribL4dvExtAsFunction = _glVertexAttribL4dvExt
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttribL4dvExtAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribLPointerExt;

/// ```c
/// GLAPI void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribLPointerExt(
  int index,
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribLPointerExtAsFunction = _glVertexAttribLPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribLPointerExtAsFunction(
    index,
    size,
    type,
    stride,
    pointer,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribLdvExt;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetVertexAttribLdvExt(int index, int pname, Pointer<Double> params) {
  final glGetVertexAttribLdvExtAsFunction = _glGetVertexAttribLdvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Double> params)
      >();
  return glGetVertexAttribLdvExtAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginVertexShaderExt;

/// ```c
/// GLAPI void APIENTRY glBeginVertexShaderEXT (void)
/// ```
void glBeginVertexShaderExt() {
  final glBeginVertexShaderExtAsFunction = _glBeginVertexShaderExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glBeginVertexShaderExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndVertexShaderExt;

/// ```c
/// GLAPI void APIENTRY glEndVertexShaderEXT (void)
/// ```
void glEndVertexShaderExt() {
  final glEndVertexShaderExtAsFunction = _glEndVertexShaderExt
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndVertexShaderExtAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVertexShaderExt;

/// ```c
/// GLAPI void APIENTRY glBindVertexShaderEXT (GLuint id)
/// ```
void glBindVertexShaderExt(int id) {
  final glBindVertexShaderExtAsFunction = _glBindVertexShaderExt
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glBindVertexShaderExtAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenVertexShadersExt;

/// ```c
/// GLAPI GLuint APIENTRY glGenVertexShadersEXT (GLuint range)
/// ```
int glGenVertexShadersExt(int range) {
  final glGenVertexShadersExtAsFunction = _glGenVertexShadersExt
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return glGenVertexShadersExtAsFunction(range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteVertexShaderExt;

/// ```c
/// GLAPI void APIENTRY glDeleteVertexShaderEXT (GLuint id)
/// ```
void glDeleteVertexShaderExt(int id) {
  final glDeleteVertexShaderExtAsFunction = _glDeleteVertexShaderExt
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glDeleteVertexShaderExtAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderOp1Ext;

/// ```c
/// GLAPI void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1)
/// ```
void glShaderOp1Ext(int op, int res, int arg1) {
  final glShaderOp1ExtAsFunction = _glShaderOp1Ext
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 res, Uint32 arg1)>>()
      .asFunction<void Function(int op, int res, int arg1)>();
  return glShaderOp1ExtAsFunction(op, res, arg1);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderOp2Ext;

/// ```c
/// GLAPI void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2)
/// ```
void glShaderOp2Ext(int op, int res, int arg1, int arg2) {
  final glShaderOp2ExtAsFunction = _glShaderOp2Ext
      .cast<
        NativeFunction<
          Void Function(Uint32 op, Uint32 res, Uint32 arg1, Uint32 arg2)
        >
      >()
      .asFunction<void Function(int op, int res, int arg1, int arg2)>();
  return glShaderOp2ExtAsFunction(op, res, arg1, arg2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShaderOp3Ext;

/// ```c
/// GLAPI void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
/// ```
void glShaderOp3Ext(int op, int res, int arg1, int arg2, int arg3) {
  final glShaderOp3ExtAsFunction = _glShaderOp3Ext
      .cast<
        NativeFunction<
          Void Function(
            Uint32 op,
            Uint32 res,
            Uint32 arg1,
            Uint32 arg2,
            Uint32 arg3,
          )
        >
      >()
      .asFunction<
        void Function(int op, int res, int arg1, int arg2, int arg3)
      >();
  return glShaderOp3ExtAsFunction(op, res, arg1, arg2, arg3);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSwizzleExt;

/// ```c
/// GLAPI void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
/// ```
void glSwizzleExt(int res, int in_, int outX, int outY, int outZ, int outW) {
  final glSwizzleExtAsFunction = _glSwizzleExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 res,
            Uint32 in_,
            Uint32 outX,
            Uint32 outY,
            Uint32 outZ,
            Uint32 outW,
          )
        >
      >()
      .asFunction<
        void Function(int res, int in_, int outX, int outY, int outZ, int outW)
      >();
  return glSwizzleExtAsFunction(res, in_, outX, outY, outZ, outW);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWriteMaskExt;

/// ```c
/// GLAPI void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
/// ```
void glWriteMaskExt(int res, int in_, int outX, int outY, int outZ, int outW) {
  final glWriteMaskExtAsFunction = _glWriteMaskExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 res,
            Uint32 in_,
            Uint32 outX,
            Uint32 outY,
            Uint32 outZ,
            Uint32 outW,
          )
        >
      >()
      .asFunction<
        void Function(int res, int in_, int outX, int outY, int outZ, int outW)
      >();
  return glWriteMaskExtAsFunction(res, in_, outX, outY, outZ, outW);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInsertComponentExt;

/// ```c
/// GLAPI void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint num)
/// ```
void glInsertComponentExt(int res, int src, int num) {
  final glInsertComponentExtAsFunction = _glInsertComponentExt
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 src, Uint32 num)>>()
      .asFunction<void Function(int res, int src, int num)>();
  return glInsertComponentExtAsFunction(res, src, num);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glExtractComponentExt;

/// ```c
/// GLAPI void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint num)
/// ```
void glExtractComponentExt(int res, int src, int num) {
  final glExtractComponentExtAsFunction = _glExtractComponentExt
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 src, Uint32 num)>>()
      .asFunction<void Function(int res, int src, int num)>();
  return glExtractComponentExtAsFunction(res, src, num);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenSymbolsExt;

/// ```c
/// GLAPI GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
/// ```
int glGenSymbolsExt(int datatype, int storagetype, int range, int components) {
  final glGenSymbolsExtAsFunction = _glGenSymbolsExt
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 datatype,
            Uint32 storagetype,
            Uint32 range,
            Uint32 components,
          )
        >
      >()
      .asFunction<
        int Function(int datatype, int storagetype, int range, int components)
      >();
  return glGenSymbolsExtAsFunction(datatype, storagetype, range, components);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetInvariantExt;

/// ```c
/// GLAPI void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const void *addr)
/// ```
void glSetInvariantExt(int id, int type, Pointer<NativeType> addr) {
  final glSetInvariantExtAsFunction = _glSetInvariantExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 type, Pointer<NativeType> addr)
        >
      >()
      .asFunction<void Function(int id, int type, Pointer<NativeType> addr)>();
  return glSetInvariantExtAsFunction(id, type, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetLocalConstantExt;

/// ```c
/// GLAPI void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const void *addr)
/// ```
void glSetLocalConstantExt(int id, int type, Pointer<NativeType> addr) {
  final glSetLocalConstantExtAsFunction = _glSetLocalConstantExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 type, Pointer<NativeType> addr)
        >
      >()
      .asFunction<void Function(int id, int type, Pointer<NativeType> addr)>();
  return glSetLocalConstantExtAsFunction(id, type, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantbvExt;

/// ```c
/// GLAPI void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr)
/// ```
void glVariantbvExt(int id, String addr) {
  final glVariantbvExtAsFunction = _glVariantbvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Utf8> addr)>>()
      .asFunction<void Function(int id, Pointer<Utf8> addr)>();
  final addrPointer = addr.toNativeUtf8();
  final result = glVariantbvExtAsFunction(id, addrPointer);
  calloc.free(addrPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantsvExt;

/// ```c
/// GLAPI void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr)
/// ```
void glVariantsvExt(int id, Pointer<Int16> addr) {
  final glVariantsvExtAsFunction = _glVariantsvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Int16> addr)>>()
      .asFunction<void Function(int id, Pointer<Int16> addr)>();
  return glVariantsvExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantivExt;

/// ```c
/// GLAPI void APIENTRY glVariantivEXT (GLuint id, const GLint *addr)
/// ```
void glVariantivExt(int id, Pointer<Int32> addr) {
  final glVariantivExtAsFunction = _glVariantivExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Int32> addr)>>()
      .asFunction<void Function(int id, Pointer<Int32> addr)>();
  return glVariantivExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantfvExt;

/// ```c
/// GLAPI void APIENTRY glVariantfvEXT (GLuint id, const GLfloat *addr)
/// ```
void glVariantfvExt(int id, Pointer<Float> addr) {
  final glVariantfvExtAsFunction = _glVariantfvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Float> addr)>>()
      .asFunction<void Function(int id, Pointer<Float> addr)>();
  return glVariantfvExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantdvExt;

/// ```c
/// GLAPI void APIENTRY glVariantdvEXT (GLuint id, const GLdouble *addr)
/// ```
void glVariantdvExt(int id, Pointer<Double> addr) {
  final glVariantdvExtAsFunction = _glVariantdvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Double> addr)>>()
      .asFunction<void Function(int id, Pointer<Double> addr)>();
  return glVariantdvExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantubvExt;

/// ```c
/// GLAPI void APIENTRY glVariantubvEXT (GLuint id, const GLubyte *addr)
/// ```
void glVariantubvExt(int id, Pointer<Uint8> addr) {
  final glVariantubvExtAsFunction = _glVariantubvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint8> addr)>>()
      .asFunction<void Function(int id, Pointer<Uint8> addr)>();
  return glVariantubvExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantusvExt;

/// ```c
/// GLAPI void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr)
/// ```
void glVariantusvExt(int id, Pointer<Uint16> addr) {
  final glVariantusvExtAsFunction = _glVariantusvExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint16> addr)>>()
      .asFunction<void Function(int id, Pointer<Uint16> addr)>();
  return glVariantusvExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantuivExt;

/// ```c
/// GLAPI void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr)
/// ```
void glVariantuivExt(int id, Pointer<Uint32> addr) {
  final glVariantuivExtAsFunction = _glVariantuivExt
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint32> addr)>>()
      .asFunction<void Function(int id, Pointer<Uint32> addr)>();
  return glVariantuivExtAsFunction(id, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVariantPointerExt;

/// ```c
/// GLAPI void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const void *addr)
/// ```
void glVariantPointerExt(
  int id,
  int type,
  int stride,
  Pointer<NativeType> addr,
) {
  final glVariantPointerExtAsFunction = _glVariantPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> addr,
          )
        >
      >()
      .asFunction<
        void Function(int id, int type, int stride, Pointer<NativeType> addr)
      >();
  return glVariantPointerExtAsFunction(id, type, stride, addr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableVariantClientStateExt;

/// ```c
/// GLAPI void APIENTRY glEnableVariantClientStateEXT (GLuint id)
/// ```
void glEnableVariantClientStateExt(int id) {
  final glEnableVariantClientStateExtAsFunction = _glEnableVariantClientStateExt
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glEnableVariantClientStateExtAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableVariantClientStateExt;

/// ```c
/// GLAPI void APIENTRY glDisableVariantClientStateEXT (GLuint id)
/// ```
void glDisableVariantClientStateExt(int id) {
  final glDisableVariantClientStateExtAsFunction =
      _glDisableVariantClientStateExt
          .cast<NativeFunction<Void Function(Uint32 id)>>()
          .asFunction<void Function(int id)>();
  return glDisableVariantClientStateExtAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindLightParameterExt;

/// ```c
/// GLAPI GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value)
/// ```
int glBindLightParameterExt(int light, int value) {
  final glBindLightParameterExtAsFunction = _glBindLightParameterExt
      .cast<NativeFunction<Uint32 Function(Uint32 light, Uint32 value)>>()
      .asFunction<int Function(int light, int value)>();
  return glBindLightParameterExtAsFunction(light, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindMaterialParameterExt;

/// ```c
/// GLAPI GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum value)
/// ```
int glBindMaterialParameterExt(int face, int value) {
  final glBindMaterialParameterExtAsFunction = _glBindMaterialParameterExt
      .cast<NativeFunction<Uint32 Function(Uint32 face, Uint32 value)>>()
      .asFunction<int Function(int face, int value)>();
  return glBindMaterialParameterExtAsFunction(face, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTexGenParameterExt;

/// ```c
/// GLAPI GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value)
/// ```
int glBindTexGenParameterExt(int unit, int coord, int value) {
  final glBindTexGenParameterExtAsFunction = _glBindTexGenParameterExt
      .cast<
        NativeFunction<Uint32 Function(Uint32 unit, Uint32 coord, Uint32 value)>
      >()
      .asFunction<int Function(int unit, int coord, int value)>();
  return glBindTexGenParameterExtAsFunction(unit, coord, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTextureUnitParameterExt;

/// ```c
/// GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum value)
/// ```
int glBindTextureUnitParameterExt(int unit, int value) {
  final glBindTextureUnitParameterExtAsFunction = _glBindTextureUnitParameterExt
      .cast<NativeFunction<Uint32 Function(Uint32 unit, Uint32 value)>>()
      .asFunction<int Function(int unit, int value)>();
  return glBindTextureUnitParameterExtAsFunction(unit, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindParameterExt;

/// ```c
/// GLAPI GLuint APIENTRY glBindParameterEXT (GLenum value)
/// ```
int glBindParameterExt(int value) {
  final glBindParameterExtAsFunction = _glBindParameterExt
      .cast<NativeFunction<Uint32 Function(Uint32 value)>>()
      .asFunction<int Function(int value)>();
  return glBindParameterExtAsFunction(value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsVariantEnabledExt;

/// ```c
/// GLAPI GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap)
/// ```
int glIsVariantEnabledExt(int id, int cap) {
  final glIsVariantEnabledExtAsFunction = _glIsVariantEnabledExt
      .cast<NativeFunction<Int32 Function(Uint32 id, Uint32 cap)>>()
      .asFunction<int Function(int id, int cap)>();
  return glIsVariantEnabledExtAsFunction(id, cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantBooleanvExt;

/// ```c
/// GLAPI void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data)
/// ```
void glGetVariantBooleanvExt(int id, int value, Pointer<Int32> data) {
  final glGetVariantBooleanvExtAsFunction = _glGetVariantBooleanvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetVariantBooleanvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantIntegervExt;

/// ```c
/// GLAPI void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data)
/// ```
void glGetVariantIntegervExt(int id, int value, Pointer<Int32> data) {
  final glGetVariantIntegervExtAsFunction = _glGetVariantIntegervExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetVariantIntegervExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantFloatvExt;

/// ```c
/// GLAPI void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data)
/// ```
void glGetVariantFloatvExt(int id, int value, Pointer<Float> data) {
  final glGetVariantFloatvExtAsFunction = _glGetVariantFloatvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Float> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Float> data)>();
  return glGetVariantFloatvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVariantPointervExt;

/// ```c
/// GLAPI void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, void **data)
/// ```
void glGetVariantPointervExt(
  int id,
  int value,
  Pointer<Pointer<NativeType>> data,
) {
  final glGetVariantPointervExtAsFunction = _glGetVariantPointervExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 value,
            Pointer<Pointer<NativeType>> data,
          )
        >
      >()
      .asFunction<
        void Function(int id, int value, Pointer<Pointer<NativeType>> data)
      >();
  return glGetVariantPointervExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInvariantBooleanvExt;

/// ```c
/// GLAPI void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data)
/// ```
void glGetInvariantBooleanvExt(int id, int value, Pointer<Int32> data) {
  final glGetInvariantBooleanvExtAsFunction = _glGetInvariantBooleanvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetInvariantBooleanvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInvariantIntegervExt;

/// ```c
/// GLAPI void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data)
/// ```
void glGetInvariantIntegervExt(int id, int value, Pointer<Int32> data) {
  final glGetInvariantIntegervExtAsFunction = _glGetInvariantIntegervExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetInvariantIntegervExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInvariantFloatvExt;

/// ```c
/// GLAPI void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data)
/// ```
void glGetInvariantFloatvExt(int id, int value, Pointer<Float> data) {
  final glGetInvariantFloatvExtAsFunction = _glGetInvariantFloatvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Float> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Float> data)>();
  return glGetInvariantFloatvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLocalConstantBooleanvExt;

/// ```c
/// GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data)
/// ```
void glGetLocalConstantBooleanvExt(int id, int value, Pointer<Int32> data) {
  final glGetLocalConstantBooleanvExtAsFunction = _glGetLocalConstantBooleanvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetLocalConstantBooleanvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLocalConstantIntegervExt;

/// ```c
/// GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data)
/// ```
void glGetLocalConstantIntegervExt(int id, int value, Pointer<Int32> data) {
  final glGetLocalConstantIntegervExtAsFunction = _glGetLocalConstantIntegervExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Int32> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Int32> data)>();
  return glGetLocalConstantIntegervExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLocalConstantFloatvExt;

/// ```c
/// GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data)
/// ```
void glGetLocalConstantFloatvExt(int id, int value, Pointer<Float> data) {
  final glGetLocalConstantFloatvExtAsFunction = _glGetLocalConstantFloatvExt
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 value, Pointer<Float> data)
        >
      >()
      .asFunction<void Function(int id, int value, Pointer<Float> data)>();
  return glGetLocalConstantFloatvExtAsFunction(id, value, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexWeightfExt;

/// ```c
/// GLAPI void APIENTRY glVertexWeightfEXT (GLfloat weight)
/// ```
void glVertexWeightfExt(double weight) {
  final glVertexWeightfExtAsFunction = _glVertexWeightfExt
      .cast<NativeFunction<Void Function(Float weight)>>()
      .asFunction<void Function(double weight)>();
  return glVertexWeightfExtAsFunction(weight);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexWeightfvExt;

/// ```c
/// GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *weight)
/// ```
void glVertexWeightfvExt(Pointer<Float> weight) {
  final glVertexWeightfvExtAsFunction = _glVertexWeightfvExt
      .cast<NativeFunction<Void Function(Pointer<Float> weight)>>()
      .asFunction<void Function(Pointer<Float> weight)>();
  return glVertexWeightfvExtAsFunction(weight);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexWeightPointerExt;

/// ```c
/// GLAPI void APIENTRY glVertexWeightPointerEXT (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexWeightPointerExt(
  int size,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexWeightPointerExtAsFunction = _glVertexWeightPointerExt
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexWeightPointerExtAsFunction(size, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAcquireKeyedMutexWin32Ext;

/// ```c
/// GLAPI GLboolean APIENTRY glAcquireKeyedMutexWin32EXT (GLuint memory, GLuint64 key, GLuint timeout)
/// ```
int glAcquireKeyedMutexWin32Ext(int memory, int key, int timeout) {
  final glAcquireKeyedMutexWin32ExtAsFunction = _glAcquireKeyedMutexWin32Ext
      .cast<
        NativeFunction<
          Int32 Function(Uint32 memory, Uint64 key, Uint32 timeout)
        >
      >()
      .asFunction<int Function(int memory, int key, int timeout)>();
  return glAcquireKeyedMutexWin32ExtAsFunction(memory, key, timeout);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReleaseKeyedMutexWin32Ext;

/// ```c
/// GLAPI GLboolean APIENTRY glReleaseKeyedMutexWin32EXT (GLuint memory, GLuint64 key)
/// ```
int glReleaseKeyedMutexWin32Ext(int memory, int key) {
  final glReleaseKeyedMutexWin32ExtAsFunction = _glReleaseKeyedMutexWin32Ext
      .cast<NativeFunction<Int32 Function(Uint32 memory, Uint64 key)>>()
      .asFunction<int Function(int memory, int key)>();
  return glReleaseKeyedMutexWin32ExtAsFunction(memory, key);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowRectanglesExt;

/// ```c
/// GLAPI void APIENTRY glWindowRectanglesEXT (GLenum mode, GLsizei count, const GLint *box)
/// ```
void glWindowRectanglesExt(int mode, int count, Pointer<Int32> box) {
  final glWindowRectanglesExtAsFunction = _glWindowRectanglesExt
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Uint32 count, Pointer<Int32> box)
        >
      >()
      .asFunction<void Function(int mode, int count, Pointer<Int32> box)>();
  return glWindowRectanglesExtAsFunction(mode, count, box);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImportSyncExt;

/// ```c
/// GLAPI GLsync APIENTRY glImportSyncEXT (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
/// ```
Pointer<NativeType> glImportSyncExt(
  int externalSyncType,
  Pointer<NativeType> externalSync,
  int flags,
) {
  final glImportSyncExtAsFunction = _glImportSyncExt
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Uint32 externalSyncType,
            Pointer<NativeType> externalSync,
            Uint32 flags,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          int externalSyncType,
          Pointer<NativeType> externalSync,
          int flags,
        )
      >();
  return glImportSyncExtAsFunction(externalSyncType, externalSync, flags);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrameTerminatorGremedy;

/// ```c
/// GLAPI void APIENTRY glFrameTerminatorGREMEDY (void)
/// ```
void glFrameTerminatorGremedy() {
  final glFrameTerminatorGremedyAsFunction = _glFrameTerminatorGremedy
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFrameTerminatorGremedyAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStringMarkerGremedy;

/// ```c
/// GLAPI void APIENTRY glStringMarkerGREMEDY (GLsizei len, const void *string)
/// ```
void glStringMarkerGremedy(int len, Pointer<NativeType> string) {
  final glStringMarkerGremedyAsFunction = _glStringMarkerGremedy
      .cast<
        NativeFunction<Void Function(Uint32 len, Pointer<NativeType> string)>
      >()
      .asFunction<void Function(int len, Pointer<NativeType> string)>();
  return glStringMarkerGremedyAsFunction(len, string);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImageTransformParameteriHp;

/// ```c
/// GLAPI void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param)
/// ```
void glImageTransformParameteriHp(int target, int pname, int param) {
  final glImageTransformParameteriHpAsFunction = _glImageTransformParameteriHp
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glImageTransformParameteriHpAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImageTransformParameterfHp;

/// ```c
/// GLAPI void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param)
/// ```
void glImageTransformParameterfHp(int target, int pname, double param) {
  final glImageTransformParameterfHpAsFunction = _glImageTransformParameterfHp
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int target, int pname, double param)>();
  return glImageTransformParameterfHpAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImageTransformParameterivHp;

/// ```c
/// GLAPI void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params)
/// ```
void glImageTransformParameterivHp(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glImageTransformParameterivHpAsFunction = _glImageTransformParameterivHp
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glImageTransformParameterivHpAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glImageTransformParameterfvHp;

/// ```c
/// GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glImageTransformParameterfvHp(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glImageTransformParameterfvHpAsFunction = _glImageTransformParameterfvHp
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glImageTransformParameterfvHpAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetImageTransformParameterivHp;

/// ```c
/// GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetImageTransformParameterivHp(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetImageTransformParameterivHpAsFunction =
      _glGetImageTransformParameterivHp
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetImageTransformParameterivHpAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetImageTransformParameterfvHp;

/// ```c
/// GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetImageTransformParameterfvHp(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetImageTransformParameterfvHpAsFunction =
      _glGetImageTransformParameterfvHp
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Float> params)
          >();
  return glGetImageTransformParameterfvHpAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiModeDrawArraysIbm;

/// ```c
/// GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
/// ```
void glMultiModeDrawArraysIbm(
  Pointer<Uint32> mode,
  Pointer<Int32> first,
  Pointer<Uint32> count,
  int primcount,
  int modestride,
) {
  final glMultiModeDrawArraysIbmAsFunction = _glMultiModeDrawArraysIbm
      .cast<
        NativeFunction<
          Void Function(
            Pointer<Uint32> mode,
            Pointer<Int32> first,
            Pointer<Uint32> count,
            Uint32 primcount,
            Int32 modestride,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<Uint32> mode,
          Pointer<Int32> first,
          Pointer<Uint32> count,
          int primcount,
          int modestride,
        )
      >();
  return glMultiModeDrawArraysIbmAsFunction(
    mode,
    first,
    count,
    primcount,
    modestride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiModeDrawElementsIbm;

/// ```c
/// GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride)
/// ```
void glMultiModeDrawElementsIbm(
  Pointer<Uint32> mode,
  Pointer<Uint32> count,
  int type,
  Pointer<Pointer<NativeType>> indices,
  int primcount,
  int modestride,
) {
  final glMultiModeDrawElementsIbmAsFunction = _glMultiModeDrawElementsIbm
      .cast<
        NativeFunction<
          Void Function(
            Pointer<Uint32> mode,
            Pointer<Uint32> count,
            Uint32 type,
            Pointer<Pointer<NativeType>> indices,
            Uint32 primcount,
            Int32 modestride,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<Uint32> mode,
          Pointer<Uint32> count,
          int type,
          Pointer<Pointer<NativeType>> indices,
          int primcount,
          int modestride,
        )
      >();
  return glMultiModeDrawElementsIbmAsFunction(
    mode,
    count,
    type,
    indices,
    primcount,
    modestride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushStaticDataIbm;

/// ```c
/// GLAPI void APIENTRY glFlushStaticDataIBM (GLenum target)
/// ```
void glFlushStaticDataIbm(int target) {
  final glFlushStaticDataIbmAsFunction = _glFlushStaticDataIbm
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glFlushStaticDataIbmAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glColorPointerListIbm(
  int size,
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glColorPointerListIbmAsFunction = _glColorPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glColorPointerListIbmAsFunction(
    size,
    type,
    stride,
    pointer,
    ptrstride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glSecondaryColorPointerListIbm(
  int size,
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glSecondaryColorPointerListIbmAsFunction =
      _glSecondaryColorPointerListIbm
          .cast<
            NativeFunction<
              Void Function(
                Int32 size,
                Uint32 type,
                Int32 stride,
                Pointer<Pointer<NativeType>> pointer,
                Int32 ptrstride,
              )
            >
          >()
          .asFunction<
            void Function(
              int size,
              int type,
              int stride,
              Pointer<Pointer<NativeType>> pointer,
              int ptrstride,
            )
          >();
  return glSecondaryColorPointerListIbmAsFunction(
    size,
    type,
    stride,
    pointer,
    ptrstride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlagPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean **pointer, GLint ptrstride)
/// ```
void glEdgeFlagPointerListIbm(
  int stride,
  Pointer<Pointer<Int32>> pointer,
  int ptrstride,
) {
  final glEdgeFlagPointerListIbmAsFunction = _glEdgeFlagPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Int32 stride,
            Pointer<Pointer<Int32>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int stride,
          Pointer<Pointer<Int32>> pointer,
          int ptrstride,
        )
      >();
  return glEdgeFlagPointerListIbmAsFunction(stride, pointer, ptrstride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glFogCoordPointerListIbm(
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glFogCoordPointerListIbmAsFunction = _glFogCoordPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glFogCoordPointerListIbmAsFunction(type, stride, pointer, ptrstride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glIndexPointerListIbm(
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glIndexPointerListIbmAsFunction = _glIndexPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glIndexPointerListIbmAsFunction(type, stride, pointer, ptrstride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glNormalPointerListIbm(
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glNormalPointerListIbmAsFunction = _glNormalPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glNormalPointerListIbmAsFunction(type, stride, pointer, ptrstride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glTexCoordPointerListIbm(
  int size,
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glTexCoordPointerListIbmAsFunction = _glTexCoordPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glTexCoordPointerListIbmAsFunction(
    size,
    type,
    stride,
    pointer,
    ptrstride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexPointerListIbm;

/// ```c
/// GLAPI void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
/// ```
void glVertexPointerListIbm(
  int size,
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
  int ptrstride,
) {
  final glVertexPointerListIbmAsFunction = _glVertexPointerListIbm
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Int32 stride,
            Pointer<Pointer<NativeType>> pointer,
            Int32 ptrstride,
          )
        >
      >()
      .asFunction<
        void Function(
          int size,
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
          int ptrstride,
        )
      >();
  return glVertexPointerListIbmAsFunction(
    size,
    type,
    stride,
    pointer,
    ptrstride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFuncSeparateIngr;

/// ```c
/// GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
/// ```
void glBlendFuncSeparateIngr(
  int sfactorRgb,
  int dfactorRgb,
  int sfactorAlpha,
  int dfactorAlpha,
) {
  final glBlendFuncSeparateIngrAsFunction = _glBlendFuncSeparateIngr
      .cast<
        NativeFunction<
          Void Function(
            Uint32 sfactorRgb,
            Uint32 dfactorRgb,
            Uint32 sfactorAlpha,
            Uint32 dfactorAlpha,
          )
        >
      >()
      .asFunction<
        void Function(
          int sfactorRgb,
          int dfactorRgb,
          int sfactorAlpha,
          int dfactorAlpha,
        )
      >();
  return glBlendFuncSeparateIngrAsFunction(
    sfactorRgb,
    dfactorRgb,
    sfactorAlpha,
    dfactorAlpha,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glApplyFramebufferAttachmentCmaaintel;

/// ```c
/// GLAPI void APIENTRY glApplyFramebufferAttachmentCMAAINTEL (void)
/// ```
void glApplyFramebufferAttachmentCmaaintel() {
  final glApplyFramebufferAttachmentCmaaintelAsFunction =
      _glApplyFramebufferAttachmentCmaaintel
          .cast<NativeFunction<Void Function()>>()
          .asFunction<void Function()>();
  return glApplyFramebufferAttachmentCmaaintelAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSyncTextureIntel;

/// ```c
/// GLAPI void APIENTRY glSyncTextureINTEL (GLuint texture)
/// ```
void glSyncTextureIntel(int texture) {
  final glSyncTextureIntelAsFunction = _glSyncTextureIntel
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glSyncTextureIntelAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUnmapTexture2Dintel;

/// ```c
/// GLAPI void APIENTRY glUnmapTexture2DINTEL (GLuint texture, GLint level)
/// ```
void glUnmapTexture2Dintel(int texture, int level) {
  final glUnmapTexture2DintelAsFunction = _glUnmapTexture2Dintel
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int texture, int level)>();
  return glUnmapTexture2DintelAsFunction(texture, level);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapTexture2Dintel;

/// ```c
/// GLAPI void *APIENTRY glMapTexture2DINTEL (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
/// ```
Pointer<NativeType> glMapTexture2Dintel(
  int texture,
  int level,
  int access,
  Pointer<Int32> stride,
  Pointer<Uint32> layout,
) {
  final glMapTexture2DintelAsFunction = _glMapTexture2Dintel
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Uint32 texture,
            Int32 level,
            Uint32 access,
            Pointer<Int32> stride,
            Pointer<Uint32> layout,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          int texture,
          int level,
          int access,
          Pointer<Int32> stride,
          Pointer<Uint32> layout,
        )
      >();
  return glMapTexture2DintelAsFunction(texture, level, access, stride, layout);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexPointervIntel;

/// ```c
/// GLAPI void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const void **pointer)
/// ```
void glVertexPointervIntel(
  int size,
  int type,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glVertexPointervIntelAsFunction = _glVertexPointervIntel
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, Pointer<Pointer<NativeType>> pointer)
      >();
  return glVertexPointervIntelAsFunction(size, type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalPointervIntel;

/// ```c
/// GLAPI void APIENTRY glNormalPointervINTEL (GLenum type, const void **pointer)
/// ```
void glNormalPointervIntel(int type, Pointer<Pointer<NativeType>> pointer) {
  final glNormalPointervIntelAsFunction = _glNormalPointervIntel
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Pointer<Pointer<NativeType>> pointer)
        >
      >()
      .asFunction<
        void Function(int type, Pointer<Pointer<NativeType>> pointer)
      >();
  return glNormalPointervIntelAsFunction(type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorPointervIntel;

/// ```c
/// GLAPI void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const void **pointer)
/// ```
void glColorPointervIntel(
  int size,
  int type,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glColorPointervIntelAsFunction = _glColorPointervIntel
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, Pointer<Pointer<NativeType>> pointer)
      >();
  return glColorPointervIntelAsFunction(size, type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordPointervIntel;

/// ```c
/// GLAPI void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const void **pointer)
/// ```
void glTexCoordPointervIntel(
  int size,
  int type,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glTexCoordPointervIntelAsFunction = _glTexCoordPointervIntel
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, Pointer<Pointer<NativeType>> pointer)
      >();
  return glTexCoordPointervIntelAsFunction(size, type, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginPerfQueryIntel;

/// ```c
/// GLAPI void APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle)
/// ```
void glBeginPerfQueryIntel(int queryHandle) {
  final glBeginPerfQueryIntelAsFunction = _glBeginPerfQueryIntel
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return glBeginPerfQueryIntelAsFunction(queryHandle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreatePerfQueryIntel;

/// ```c
/// GLAPI void APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint *queryHandle)
/// ```
void glCreatePerfQueryIntel(int queryId, Pointer<Uint32> queryHandle) {
  final glCreatePerfQueryIntelAsFunction = _glCreatePerfQueryIntel
      .cast<
        NativeFunction<
          Void Function(Uint32 queryId, Pointer<Uint32> queryHandle)
        >
      >()
      .asFunction<void Function(int queryId, Pointer<Uint32> queryHandle)>();
  return glCreatePerfQueryIntelAsFunction(queryId, queryHandle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeletePerfQueryIntel;

/// ```c
/// GLAPI void APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle)
/// ```
void glDeletePerfQueryIntel(int queryHandle) {
  final glDeletePerfQueryIntelAsFunction = _glDeletePerfQueryIntel
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return glDeletePerfQueryIntelAsFunction(queryHandle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndPerfQueryIntel;

/// ```c
/// GLAPI void APIENTRY glEndPerfQueryINTEL (GLuint queryHandle)
/// ```
void glEndPerfQueryIntel(int queryHandle) {
  final glEndPerfQueryIntelAsFunction = _glEndPerfQueryIntel
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return glEndPerfQueryIntelAsFunction(queryHandle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFirstPerfQueryIdIntel;

/// ```c
/// GLAPI void APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId)
/// ```
void glGetFirstPerfQueryIdIntel(Pointer<Uint32> queryId) {
  final glGetFirstPerfQueryIdIntelAsFunction = _glGetFirstPerfQueryIdIntel
      .cast<NativeFunction<Void Function(Pointer<Uint32> queryId)>>()
      .asFunction<void Function(Pointer<Uint32> queryId)>();
  return glGetFirstPerfQueryIdIntelAsFunction(queryId);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNextPerfQueryIdIntel;

/// ```c
/// GLAPI void APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint *nextQueryId)
/// ```
void glGetNextPerfQueryIdIntel(int queryId, Pointer<Uint32> nextQueryId) {
  final glGetNextPerfQueryIdIntelAsFunction = _glGetNextPerfQueryIdIntel
      .cast<
        NativeFunction<
          Void Function(Uint32 queryId, Pointer<Uint32> nextQueryId)
        >
      >()
      .asFunction<void Function(int queryId, Pointer<Uint32> nextQueryId)>();
  return glGetNextPerfQueryIdIntelAsFunction(queryId, nextQueryId);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfCounterInfoIntel;

/// ```c
/// GLAPI void APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
/// ```
void glGetPerfCounterInfoIntel(
  int queryId,
  int counterId,
  int counterNameLength,
  Pointer<Int8> counterName,
  int counterDescLength,
  Pointer<Int8> counterDesc,
  Pointer<Uint32> counterOffset,
  Pointer<Uint32> counterDataSize,
  Pointer<Uint32> counterTypeEnum,
  Pointer<Uint32> counterDataTypeEnum,
  Pointer<Uint64> rawCounterMaxValue,
) {
  final glGetPerfCounterInfoIntelAsFunction = _glGetPerfCounterInfoIntel
      .cast<
        NativeFunction<
          Void Function(
            Uint32 queryId,
            Uint32 counterId,
            Uint32 counterNameLength,
            Pointer<Int8> counterName,
            Uint32 counterDescLength,
            Pointer<Int8> counterDesc,
            Pointer<Uint32> counterOffset,
            Pointer<Uint32> counterDataSize,
            Pointer<Uint32> counterTypeEnum,
            Pointer<Uint32> counterDataTypeEnum,
            Pointer<Uint64> rawCounterMaxValue,
          )
        >
      >()
      .asFunction<
        void Function(
          int queryId,
          int counterId,
          int counterNameLength,
          Pointer<Int8> counterName,
          int counterDescLength,
          Pointer<Int8> counterDesc,
          Pointer<Uint32> counterOffset,
          Pointer<Uint32> counterDataSize,
          Pointer<Uint32> counterTypeEnum,
          Pointer<Uint32> counterDataTypeEnum,
          Pointer<Uint64> rawCounterMaxValue,
        )
      >();
  return glGetPerfCounterInfoIntelAsFunction(
    queryId,
    counterId,
    counterNameLength,
    counterName,
    counterDescLength,
    counterDesc,
    counterOffset,
    counterDataSize,
    counterTypeEnum,
    counterDataTypeEnum,
    rawCounterMaxValue,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfQueryDataIntel;

/// ```c
/// GLAPI void APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)
/// ```
void glGetPerfQueryDataIntel(
  int queryHandle,
  int flags,
  int dataSize,
  Pointer<NativeType> data,
  Pointer<Uint32> bytesWritten,
) {
  final glGetPerfQueryDataIntelAsFunction = _glGetPerfQueryDataIntel
      .cast<
        NativeFunction<
          Void Function(
            Uint32 queryHandle,
            Uint32 flags,
            Uint32 dataSize,
            Pointer<NativeType> data,
            Pointer<Uint32> bytesWritten,
          )
        >
      >()
      .asFunction<
        void Function(
          int queryHandle,
          int flags,
          int dataSize,
          Pointer<NativeType> data,
          Pointer<Uint32> bytesWritten,
        )
      >();
  return glGetPerfQueryDataIntelAsFunction(
    queryHandle,
    flags,
    dataSize,
    data,
    bytesWritten,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfQueryIdByNameIntel;

/// ```c
/// GLAPI void APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint *queryId)
/// ```
void glGetPerfQueryIdByNameIntel(
  Pointer<Int8> queryName,
  Pointer<Uint32> queryId,
) {
  final glGetPerfQueryIdByNameIntelAsFunction = _glGetPerfQueryIdByNameIntel
      .cast<
        NativeFunction<
          Void Function(Pointer<Int8> queryName, Pointer<Uint32> queryId)
        >
      >()
      .asFunction<
        void Function(Pointer<Int8> queryName, Pointer<Uint32> queryId)
      >();
  return glGetPerfQueryIdByNameIntelAsFunction(queryName, queryId);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPerfQueryInfoIntel;

/// ```c
/// GLAPI void APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
/// ```
void glGetPerfQueryInfoIntel(
  int queryId,
  int queryNameLength,
  Pointer<Int8> queryName,
  Pointer<Uint32> dataSize,
  Pointer<Uint32> noCounters,
  Pointer<Uint32> noInstances,
  Pointer<Uint32> capsMask,
) {
  final glGetPerfQueryInfoIntelAsFunction = _glGetPerfQueryInfoIntel
      .cast<
        NativeFunction<
          Void Function(
            Uint32 queryId,
            Uint32 queryNameLength,
            Pointer<Int8> queryName,
            Pointer<Uint32> dataSize,
            Pointer<Uint32> noCounters,
            Pointer<Uint32> noInstances,
            Pointer<Uint32> capsMask,
          )
        >
      >()
      .asFunction<
        void Function(
          int queryId,
          int queryNameLength,
          Pointer<Int8> queryName,
          Pointer<Uint32> dataSize,
          Pointer<Uint32> noCounters,
          Pointer<Uint32> noInstances,
          Pointer<Uint32> capsMask,
        )
      >();
  return glGetPerfQueryInfoIntelAsFunction(
    queryId,
    queryNameLength,
    queryName,
    dataSize,
    noCounters,
    noInstances,
    capsMask,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferParameteriMesa;

/// ```c
/// GLAPI void APIENTRY glFramebufferParameteriMESA (GLenum target, GLenum pname, GLint param)
/// ```
void glFramebufferParameteriMesa(int target, int pname, int param) {
  final glFramebufferParameteriMesaAsFunction = _glFramebufferParameteriMesa
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glFramebufferParameteriMesaAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFramebufferParameterivMesa;

/// ```c
/// GLAPI void APIENTRY glGetFramebufferParameterivMESA (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetFramebufferParameterivMesa(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetFramebufferParameterivMesaAsFunction =
      _glGetFramebufferParameterivMesa
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int pname, Pointer<Int32> params)
          >();
  return glGetFramebufferParameterivMesaAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResizeBuffersMesa;

/// ```c
/// GLAPI void APIENTRY glResizeBuffersMESA (void)
/// ```
void glResizeBuffersMesa() {
  final glResizeBuffersMesaAsFunction = _glResizeBuffersMesa
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glResizeBuffersMesaAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2dMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2dMESA (GLdouble x, GLdouble y)
/// ```
void glWindowPos2dMesa(double x, double y) {
  final glWindowPos2dMesaAsFunction = _glWindowPos2dMesa
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2dMesaAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2dvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2dvMESA (const GLdouble *v)
/// ```
void glWindowPos2dvMesa(Pointer<Double> v) {
  final glWindowPos2dvMesaAsFunction = _glWindowPos2dvMesa
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos2dvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2fMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2fMESA (GLfloat x, GLfloat y)
/// ```
void glWindowPos2fMesa(double x, double y) {
  final glWindowPos2fMesaAsFunction = _glWindowPos2fMesa
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return glWindowPos2fMesaAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2fvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2fvMESA (const GLfloat *v)
/// ```
void glWindowPos2fvMesa(Pointer<Float> v) {
  final glWindowPos2fvMesaAsFunction = _glWindowPos2fvMesa
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos2fvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2iMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2iMESA (GLint x, GLint y)
/// ```
void glWindowPos2iMesa(int x, int y) {
  final glWindowPos2iMesaAsFunction = _glWindowPos2iMesa
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2iMesaAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2ivMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2ivMESA (const GLint *v)
/// ```
void glWindowPos2ivMesa(Pointer<Int32> v) {
  final glWindowPos2ivMesaAsFunction = _glWindowPos2ivMesa
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos2ivMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2sMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2sMESA (GLshort x, GLshort y)
/// ```
void glWindowPos2sMesa(int x, int y) {
  final glWindowPos2sMesaAsFunction = _glWindowPos2sMesa
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glWindowPos2sMesaAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos2svMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos2svMESA (const GLshort *v)
/// ```
void glWindowPos2svMesa(Pointer<Int16> v) {
  final glWindowPos2svMesaAsFunction = _glWindowPos2svMesa
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos2svMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3dMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z)
/// ```
void glWindowPos3dMesa(double x, double y, double z) {
  final glWindowPos3dMesaAsFunction = _glWindowPos3dMesa
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3dMesaAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3dvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3dvMESA (const GLdouble *v)
/// ```
void glWindowPos3dvMesa(Pointer<Double> v) {
  final glWindowPos3dvMesaAsFunction = _glWindowPos3dvMesa
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos3dvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3fMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z)
/// ```
void glWindowPos3fMesa(double x, double y, double z) {
  final glWindowPos3fMesaAsFunction = _glWindowPos3fMesa
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glWindowPos3fMesaAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3fvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3fvMESA (const GLfloat *v)
/// ```
void glWindowPos3fvMesa(Pointer<Float> v) {
  final glWindowPos3fvMesaAsFunction = _glWindowPos3fvMesa
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos3fvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3iMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3iMESA (GLint x, GLint y, GLint z)
/// ```
void glWindowPos3iMesa(int x, int y, int z) {
  final glWindowPos3iMesaAsFunction = _glWindowPos3iMesa
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3iMesaAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3ivMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3ivMESA (const GLint *v)
/// ```
void glWindowPos3ivMesa(Pointer<Int32> v) {
  final glWindowPos3ivMesaAsFunction = _glWindowPos3ivMesa
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos3ivMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3sMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3sMESA (GLshort x, GLshort y, GLshort z)
/// ```
void glWindowPos3sMesa(int x, int y, int z) {
  final glWindowPos3sMesaAsFunction = _glWindowPos3sMesa
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glWindowPos3sMesaAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos3svMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos3svMESA (const GLshort *v)
/// ```
void glWindowPos3svMesa(Pointer<Int16> v) {
  final glWindowPos3svMesaAsFunction = _glWindowPos3svMesa
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos3svMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4dMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glWindowPos4dMesa(double x, double y, double z, double w) {
  final glWindowPos4dMesaAsFunction = _glWindowPos4dMesa
      .cast<
        NativeFunction<Void Function(Double x, Double y, Double z, Double w)>
      >()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glWindowPos4dMesaAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4dvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4dvMESA (const GLdouble *v)
/// ```
void glWindowPos4dvMesa(Pointer<Double> v) {
  final glWindowPos4dvMesaAsFunction = _glWindowPos4dvMesa
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glWindowPos4dvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4fMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glWindowPos4fMesa(double x, double y, double z, double w) {
  final glWindowPos4fMesaAsFunction = _glWindowPos4fMesa
      .cast<NativeFunction<Void Function(Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glWindowPos4fMesaAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4fvMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4fvMESA (const GLfloat *v)
/// ```
void glWindowPos4fvMesa(Pointer<Float> v) {
  final glWindowPos4fvMesaAsFunction = _glWindowPos4fvMesa
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glWindowPos4fvMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4iMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w)
/// ```
void glWindowPos4iMesa(int x, int y, int z, int w) {
  final glWindowPos4iMesaAsFunction = _glWindowPos4iMesa
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glWindowPos4iMesaAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4ivMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4ivMESA (const GLint *v)
/// ```
void glWindowPos4ivMesa(Pointer<Int32> v) {
  final glWindowPos4ivMesaAsFunction = _glWindowPos4ivMesa
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glWindowPos4ivMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4sMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
void glWindowPos4sMesa(int x, int y, int z, int w) {
  final glWindowPos4sMesaAsFunction = _glWindowPos4sMesa
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glWindowPos4sMesaAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWindowPos4svMesa;

/// ```c
/// GLAPI void APIENTRY glWindowPos4svMESA (const GLshort *v)
/// ```
void glWindowPos4svMesa(Pointer<Int16> v) {
  final glWindowPos4svMesaAsFunction = _glWindowPos4svMesa
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glWindowPos4svMesaAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginConditionalRenderNvx;

/// ```c
/// GLAPI void APIENTRY glBeginConditionalRenderNVX (GLuint id)
/// ```
void glBeginConditionalRenderNvx(int id) {
  final glBeginConditionalRenderNvxAsFunction = _glBeginConditionalRenderNvx
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glBeginConditionalRenderNvxAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndConditionalRenderNvx;

/// ```c
/// GLAPI void APIENTRY glEndConditionalRenderNVX (void)
/// ```
void glEndConditionalRenderNvx() {
  final glEndConditionalRenderNvxAsFunction = _glEndConditionalRenderNvx
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndConditionalRenderNvxAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUploadGpuMaskNvx;

/// ```c
/// GLAPI void APIENTRY glUploadGPUMaskNVX (GLbitfield mask)
/// ```
void glUploadGpuMaskNvx(int mask) {
  final glUploadGpuMaskNvxAsFunction = _glUploadGpuMaskNvx
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glUploadGpuMaskNvxAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastViewportArrayvNvx;

/// ```c
/// GLAPI void APIENTRY glMulticastViewportArrayvNVX (GLuint gpu, GLuint first, GLsizei count, const GLfloat *v)
/// ```
void glMulticastViewportArrayvNvx(
  int gpu,
  int first,
  int count,
  Pointer<Float> v,
) {
  final glMulticastViewportArrayvNvxAsFunction = _glMulticastViewportArrayvNvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 gpu,
            Uint32 first,
            Uint32 count,
            Pointer<Float> v,
          )
        >
      >()
      .asFunction<
        void Function(int gpu, int first, int count, Pointer<Float> v)
      >();
  return glMulticastViewportArrayvNvxAsFunction(gpu, first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMulticastViewportPositionWScaleNvx;

/// ```c
/// GLAPI void APIENTRY glMulticastViewportPositionWScaleNVX (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff)
/// ```
void glMulticastViewportPositionWScaleNvx(
  int gpu,
  int index,
  double xcoeff,
  double ycoeff,
) {
  final glMulticastViewportPositionWScaleNvxAsFunction =
      _glMulticastViewportPositionWScaleNvx
          .cast<
            NativeFunction<
              Void Function(
                Uint32 gpu,
                Uint32 index,
                Float xcoeff,
                Float ycoeff,
              )
            >
          >()
          .asFunction<
            void Function(int gpu, int index, double xcoeff, double ycoeff)
          >();
  return glMulticastViewportPositionWScaleNvxAsFunction(
    gpu,
    index,
    xcoeff,
    ycoeff,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastScissorArrayvNvx;

/// ```c
/// GLAPI void APIENTRY glMulticastScissorArrayvNVX (GLuint gpu, GLuint first, GLsizei count, const GLint *v)
/// ```
void glMulticastScissorArrayvNvx(
  int gpu,
  int first,
  int count,
  Pointer<Int32> v,
) {
  final glMulticastScissorArrayvNvxAsFunction = _glMulticastScissorArrayvNvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 gpu,
            Uint32 first,
            Uint32 count,
            Pointer<Int32> v,
          )
        >
      >()
      .asFunction<
        void Function(int gpu, int first, int count, Pointer<Int32> v)
      >();
  return glMulticastScissorArrayvNvxAsFunction(gpu, first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAsyncCopyBufferSubDataNvx;

/// ```c
/// GLAPI GLuint APIENTRY glAsyncCopyBufferSubDataNVX (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGPU, GLbitfield writeGPUMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray)
/// ```
int glAsyncCopyBufferSubDataNvx(
  int waitSemaphoreCount,
  Pointer<Uint32> waitSemaphoreArray,
  Pointer<Uint64> fenceValueArray,
  int readGpu,
  int writeGpuMask,
  int readBuffer,
  int writeBuffer,
  Pointer<NativeType> readOffset,
  Pointer<NativeType> writeOffset,
  Pointer<Uint32> size,
  int signalSemaphoreCount,
  Pointer<Uint32> signalSemaphoreArray,
  Pointer<Uint64> signalValueArray,
) {
  final glAsyncCopyBufferSubDataNvxAsFunction = _glAsyncCopyBufferSubDataNvx
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 waitSemaphoreCount,
            Pointer<Uint32> waitSemaphoreArray,
            Pointer<Uint64> fenceValueArray,
            Uint32 readGpu,
            Uint32 writeGpuMask,
            Uint32 readBuffer,
            Uint32 writeBuffer,
            Pointer<NativeType> readOffset,
            Pointer<NativeType> writeOffset,
            Pointer<Uint32> size,
            Uint32 signalSemaphoreCount,
            Pointer<Uint32> signalSemaphoreArray,
            Pointer<Uint64> signalValueArray,
          )
        >
      >()
      .asFunction<
        int Function(
          int waitSemaphoreCount,
          Pointer<Uint32> waitSemaphoreArray,
          Pointer<Uint64> fenceValueArray,
          int readGpu,
          int writeGpuMask,
          int readBuffer,
          int writeBuffer,
          Pointer<NativeType> readOffset,
          Pointer<NativeType> writeOffset,
          Pointer<Uint32> size,
          int signalSemaphoreCount,
          Pointer<Uint32> signalSemaphoreArray,
          Pointer<Uint64> signalValueArray,
        )
      >();
  return glAsyncCopyBufferSubDataNvxAsFunction(
    waitSemaphoreCount,
    waitSemaphoreArray,
    fenceValueArray,
    readGpu,
    writeGpuMask,
    readBuffer,
    writeBuffer,
    readOffset,
    writeOffset,
    size,
    signalSemaphoreCount,
    signalSemaphoreArray,
    signalValueArray,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAsyncCopyImageSubDataNvx;

/// ```c
/// GLAPI GLuint APIENTRY glAsyncCopyImageSubDataNVX (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGPU, GLbitfield dstGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray)
/// ```
int glAsyncCopyImageSubDataNvx(
  int waitSemaphoreCount,
  Pointer<Uint32> waitSemaphoreArray,
  Pointer<Uint64> waitValueArray,
  int srcGpu,
  int dstGpuMask,
  int srcName,
  int srcTarget,
  int srcLevel,
  int srcX,
  int srcY,
  int srcZ,
  int dstName,
  int dstTarget,
  int dstLevel,
  int dstX,
  int dstY,
  int dstZ,
  int srcWidth,
  int srcHeight,
  int srcDepth,
  int signalSemaphoreCount,
  Pointer<Uint32> signalSemaphoreArray,
  Pointer<Uint64> signalValueArray,
) {
  final glAsyncCopyImageSubDataNvxAsFunction = _glAsyncCopyImageSubDataNvx
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 waitSemaphoreCount,
            Pointer<Uint32> waitSemaphoreArray,
            Pointer<Uint64> waitValueArray,
            Uint32 srcGpu,
            Uint32 dstGpuMask,
            Uint32 srcName,
            Uint32 srcTarget,
            Int32 srcLevel,
            Int32 srcX,
            Int32 srcY,
            Int32 srcZ,
            Uint32 dstName,
            Uint32 dstTarget,
            Int32 dstLevel,
            Int32 dstX,
            Int32 dstY,
            Int32 dstZ,
            Uint32 srcWidth,
            Uint32 srcHeight,
            Uint32 srcDepth,
            Uint32 signalSemaphoreCount,
            Pointer<Uint32> signalSemaphoreArray,
            Pointer<Uint64> signalValueArray,
          )
        >
      >()
      .asFunction<
        int Function(
          int waitSemaphoreCount,
          Pointer<Uint32> waitSemaphoreArray,
          Pointer<Uint64> waitValueArray,
          int srcGpu,
          int dstGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth,
          int signalSemaphoreCount,
          Pointer<Uint32> signalSemaphoreArray,
          Pointer<Uint64> signalValueArray,
        )
      >();
  return glAsyncCopyImageSubDataNvxAsFunction(
    waitSemaphoreCount,
    waitSemaphoreArray,
    waitValueArray,
    srcGpu,
    dstGpuMask,
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srcY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    srcWidth,
    srcHeight,
    srcDepth,
    signalSemaphoreCount,
    signalSemaphoreArray,
    signalValueArray,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLgpuNamedBufferSubDataNvx;

/// ```c
/// GLAPI void APIENTRY glLGPUNamedBufferSubDataNVX (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
void glLgpuNamedBufferSubDataNvx(
  int gpuMask,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glLgpuNamedBufferSubDataNvxAsFunction = _glLgpuNamedBufferSubDataNvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 gpuMask,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int gpuMask,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glLgpuNamedBufferSubDataNvxAsFunction(
    gpuMask,
    buffer,
    offset,
    size,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLgpuCopyImageSubDataNvx;

/// ```c
/// GLAPI void APIENTRY glLGPUCopyImageSubDataNVX (GLuint sourceGPU, GLbitfield destinationGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glLgpuCopyImageSubDataNvx(
  int sourceGpu,
  int destinationGpuMask,
  int srcName,
  int srcTarget,
  int srcLevel,
  int srcX,
  int srxY,
  int srcZ,
  int dstName,
  int dstTarget,
  int dstLevel,
  int dstX,
  int dstY,
  int dstZ,
  int width,
  int height,
  int depth,
) {
  final glLgpuCopyImageSubDataNvxAsFunction = _glLgpuCopyImageSubDataNvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 sourceGpu,
            Uint32 destinationGpuMask,
            Uint32 srcName,
            Uint32 srcTarget,
            Int32 srcLevel,
            Int32 srcX,
            Int32 srxY,
            Int32 srcZ,
            Uint32 dstName,
            Uint32 dstTarget,
            Int32 dstLevel,
            Int32 dstX,
            Int32 dstY,
            Int32 dstZ,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int sourceGpu,
          int destinationGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srxY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int width,
          int height,
          int depth,
        )
      >();
  return glLgpuCopyImageSubDataNvxAsFunction(
    sourceGpu,
    destinationGpuMask,
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srxY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLgpuInterlockNvx;

/// ```c
/// GLAPI void APIENTRY glLGPUInterlockNVX (void)
/// ```
void glLgpuInterlockNvx() {
  final glLgpuInterlockNvxAsFunction = _glLgpuInterlockNvx
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glLgpuInterlockNvxAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateProgressFenceNvx;

/// ```c
/// GLAPI GLuint APIENTRY glCreateProgressFenceNVX (void)
/// ```
int glCreateProgressFenceNvx() {
  final glCreateProgressFenceNvxAsFunction = _glCreateProgressFenceNvx
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return glCreateProgressFenceNvxAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSignalSemaphoreui64Nvx;

/// ```c
/// GLAPI void APIENTRY glSignalSemaphoreui64NVX (GLuint signalGPU, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
/// ```
void glSignalSemaphoreui64Nvx(
  int signalGpu,
  int fenceObjectCount,
  Pointer<Uint32> semaphoreArray,
  Pointer<Uint64> fenceValueArray,
) {
  final glSignalSemaphoreui64NvxAsFunction = _glSignalSemaphoreui64Nvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 signalGpu,
            Uint32 fenceObjectCount,
            Pointer<Uint32> semaphoreArray,
            Pointer<Uint64> fenceValueArray,
          )
        >
      >()
      .asFunction<
        void Function(
          int signalGpu,
          int fenceObjectCount,
          Pointer<Uint32> semaphoreArray,
          Pointer<Uint64> fenceValueArray,
        )
      >();
  return glSignalSemaphoreui64NvxAsFunction(
    signalGpu,
    fenceObjectCount,
    semaphoreArray,
    fenceValueArray,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWaitSemaphoreui64Nvx;

/// ```c
/// GLAPI void APIENTRY glWaitSemaphoreui64NVX (GLuint waitGPU, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
/// ```
void glWaitSemaphoreui64Nvx(
  int waitGpu,
  int fenceObjectCount,
  Pointer<Uint32> semaphoreArray,
  Pointer<Uint64> fenceValueArray,
) {
  final glWaitSemaphoreui64NvxAsFunction = _glWaitSemaphoreui64Nvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 waitGpu,
            Uint32 fenceObjectCount,
            Pointer<Uint32> semaphoreArray,
            Pointer<Uint64> fenceValueArray,
          )
        >
      >()
      .asFunction<
        void Function(
          int waitGpu,
          int fenceObjectCount,
          Pointer<Uint32> semaphoreArray,
          Pointer<Uint64> fenceValueArray,
        )
      >();
  return glWaitSemaphoreui64NvxAsFunction(
    waitGpu,
    fenceObjectCount,
    semaphoreArray,
    fenceValueArray,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientWaitSemaphoreui64Nvx;

/// ```c
/// GLAPI void APIENTRY glClientWaitSemaphoreui64NVX (GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
/// ```
void glClientWaitSemaphoreui64Nvx(
  int fenceObjectCount,
  Pointer<Uint32> semaphoreArray,
  Pointer<Uint64> fenceValueArray,
) {
  final glClientWaitSemaphoreui64NvxAsFunction = _glClientWaitSemaphoreui64Nvx
      .cast<
        NativeFunction<
          Void Function(
            Uint32 fenceObjectCount,
            Pointer<Uint32> semaphoreArray,
            Pointer<Uint64> fenceValueArray,
          )
        >
      >()
      .asFunction<
        void Function(
          int fenceObjectCount,
          Pointer<Uint32> semaphoreArray,
          Pointer<Uint64> fenceValueArray,
        )
      >();
  return glClientWaitSemaphoreui64NvxAsFunction(
    fenceObjectCount,
    semaphoreArray,
    fenceValueArray,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaToCoverageDitherControlNv;

/// ```c
/// GLAPI void APIENTRY glAlphaToCoverageDitherControlNV (GLenum mode)
/// ```
void glAlphaToCoverageDitherControlNv(int mode) {
  final glAlphaToCoverageDitherControlNvAsFunction =
      _glAlphaToCoverageDitherControlNv
          .cast<NativeFunction<Void Function(Uint32 mode)>>()
          .asFunction<void Function(int mode)>();
  return glAlphaToCoverageDitherControlNvAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawArraysIndirectBindlessNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
void glMultiDrawArraysIndirectBindlessNv(
  int mode,
  Pointer<NativeType> indirect,
  int drawCount,
  int stride,
  int vertexBufferCount,
) {
  final glMultiDrawArraysIndirectBindlessNvAsFunction =
      _glMultiDrawArraysIndirectBindlessNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Pointer<NativeType> indirect,
                Uint32 drawCount,
                Uint32 stride,
                Int32 vertexBufferCount,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              Pointer<NativeType> indirect,
              int drawCount,
              int stride,
              int vertexBufferCount,
            )
          >();
  return glMultiDrawArraysIndirectBindlessNvAsFunction(
    mode,
    indirect,
    drawCount,
    stride,
    vertexBufferCount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawElementsIndirectBindlessNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
void glMultiDrawElementsIndirectBindlessNv(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  int drawCount,
  int stride,
  int vertexBufferCount,
) {
  final glMultiDrawElementsIndirectBindlessNvAsFunction =
      _glMultiDrawElementsIndirectBindlessNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 type,
                Pointer<NativeType> indirect,
                Uint32 drawCount,
                Uint32 stride,
                Int32 vertexBufferCount,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int type,
              Pointer<NativeType> indirect,
              int drawCount,
              int stride,
              int vertexBufferCount,
            )
          >();
  return glMultiDrawElementsIndirectBindlessNvAsFunction(
    mode,
    type,
    indirect,
    drawCount,
    stride,
    vertexBufferCount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawArraysIndirectBindlessCountNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
void glMultiDrawArraysIndirectBindlessCountNv(
  int mode,
  Pointer<NativeType> indirect,
  int drawCount,
  int maxDrawCount,
  int stride,
  int vertexBufferCount,
) {
  final glMultiDrawArraysIndirectBindlessCountNvAsFunction =
      _glMultiDrawArraysIndirectBindlessCountNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Pointer<NativeType> indirect,
                Uint32 drawCount,
                Uint32 maxDrawCount,
                Uint32 stride,
                Int32 vertexBufferCount,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              Pointer<NativeType> indirect,
              int drawCount,
              int maxDrawCount,
              int stride,
              int vertexBufferCount,
            )
          >();
  return glMultiDrawArraysIndirectBindlessCountNvAsFunction(
    mode,
    indirect,
    drawCount,
    maxDrawCount,
    stride,
    vertexBufferCount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawElementsIndirectBindlessCountNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
void glMultiDrawElementsIndirectBindlessCountNv(
  int mode,
  int type,
  Pointer<NativeType> indirect,
  int drawCount,
  int maxDrawCount,
  int stride,
  int vertexBufferCount,
) {
  final glMultiDrawElementsIndirectBindlessCountNvAsFunction =
      _glMultiDrawElementsIndirectBindlessCountNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 mode,
                Uint32 type,
                Pointer<NativeType> indirect,
                Uint32 drawCount,
                Uint32 maxDrawCount,
                Uint32 stride,
                Int32 vertexBufferCount,
              )
            >
          >()
          .asFunction<
            void Function(
              int mode,
              int type,
              Pointer<NativeType> indirect,
              int drawCount,
              int maxDrawCount,
              int stride,
              int vertexBufferCount,
            )
          >();
  return glMultiDrawElementsIndirectBindlessCountNvAsFunction(
    mode,
    type,
    indirect,
    drawCount,
    maxDrawCount,
    stride,
    vertexBufferCount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureHandleNv;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetTextureHandleNV (GLuint texture)
/// ```
int glGetTextureHandleNv(int texture) {
  final glGetTextureHandleNvAsFunction = _glGetTextureHandleNv
      .cast<NativeFunction<Uint64 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return glGetTextureHandleNvAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTextureSamplerHandleNv;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
/// ```
int glGetTextureSamplerHandleNv(int texture, int sampler) {
  final glGetTextureSamplerHandleNvAsFunction = _glGetTextureSamplerHandleNv
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Uint32 sampler)>>()
      .asFunction<int Function(int texture, int sampler)>();
  return glGetTextureSamplerHandleNvAsFunction(texture, sampler);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeTextureHandleResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeTextureHandleResidentNV (GLuint64 handle)
/// ```
void glMakeTextureHandleResidentNv(int handle) {
  final glMakeTextureHandleResidentNvAsFunction = _glMakeTextureHandleResidentNv
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return glMakeTextureHandleResidentNvAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeTextureHandleNonResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeTextureHandleNonResidentNV (GLuint64 handle)
/// ```
void glMakeTextureHandleNonResidentNv(int handle) {
  final glMakeTextureHandleNonResidentNvAsFunction =
      _glMakeTextureHandleNonResidentNv
          .cast<NativeFunction<Void Function(Uint64 handle)>>()
          .asFunction<void Function(int handle)>();
  return glMakeTextureHandleNonResidentNvAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetImageHandleNv;

/// ```c
/// GLAPI GLuint64 APIENTRY glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
/// ```
int glGetImageHandleNv(
  int texture,
  int level,
  int layered,
  int layer,
  int format,
) {
  final glGetImageHandleNvAsFunction = _glGetImageHandleNv
      .cast<
        NativeFunction<
          Uint64 Function(
            Uint32 texture,
            Int32 level,
            Int32 layered,
            Int32 layer,
            Uint32 format,
          )
        >
      >()
      .asFunction<
        int Function(int texture, int level, int layered, int layer, int format)
      >();
  return glGetImageHandleNvAsFunction(texture, level, layered, layer, format);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeImageHandleResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
/// ```
void glMakeImageHandleResidentNv(int handle, int access) {
  final glMakeImageHandleResidentNvAsFunction = _glMakeImageHandleResidentNv
      .cast<NativeFunction<Void Function(Uint64 handle, Uint32 access)>>()
      .asFunction<void Function(int handle, int access)>();
  return glMakeImageHandleResidentNvAsFunction(handle, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeImageHandleNonResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeImageHandleNonResidentNV (GLuint64 handle)
/// ```
void glMakeImageHandleNonResidentNv(int handle) {
  final glMakeImageHandleNonResidentNvAsFunction =
      _glMakeImageHandleNonResidentNv
          .cast<NativeFunction<Void Function(Uint64 handle)>>()
          .asFunction<void Function(int handle)>();
  return glMakeImageHandleNonResidentNvAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformHandleui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniformHandleui64NV (GLint location, GLuint64 value)
/// ```
void glUniformHandleui64Nv(int location, int value) {
  final glUniformHandleui64NvAsFunction = _glUniformHandleui64Nv
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return glUniformHandleui64NvAsFunction(location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformHandleui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 *value)
/// ```
void glUniformHandleui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniformHandleui64vNvAsFunction = _glUniformHandleui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniformHandleui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformHandleui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
/// ```
void glProgramUniformHandleui64Nv(int program, int location, int value) {
  final glProgramUniformHandleui64NvAsFunction = _glProgramUniformHandleui64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint64 value)
        >
      >()
      .asFunction<void Function(int program, int location, int value)>();
  return glProgramUniformHandleui64NvAsFunction(program, location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformHandleui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
/// ```
void glProgramUniformHandleui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> values,
) {
  final glProgramUniformHandleui64vNvAsFunction = _glProgramUniformHandleui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> values,
        )
      >();
  return glProgramUniformHandleui64vNvAsFunction(
    program,
    location,
    count,
    values,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTextureHandleResidentNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsTextureHandleResidentNV (GLuint64 handle)
/// ```
int glIsTextureHandleResidentNv(int handle) {
  final glIsTextureHandleResidentNvAsFunction = _glIsTextureHandleResidentNv
      .cast<NativeFunction<Int32 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return glIsTextureHandleResidentNvAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsImageHandleResidentNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsImageHandleResidentNV (GLuint64 handle)
/// ```
int glIsImageHandleResidentNv(int handle) {
  final glIsImageHandleResidentNvAsFunction = _glIsImageHandleResidentNv
      .cast<NativeFunction<Int32 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return glIsImageHandleResidentNvAsFunction(handle);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendParameteriNv;

/// ```c
/// GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value)
/// ```
void glBlendParameteriNv(int pname, int value) {
  final glBlendParameteriNvAsFunction = _glBlendParameteriNv
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int pname, int value)>();
  return glBlendParameteriNvAsFunction(pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendBarrierNv;

/// ```c
/// GLAPI void APIENTRY glBlendBarrierNV (void)
/// ```
void glBlendBarrierNv() {
  final glBlendBarrierNvAsFunction = _glBlendBarrierNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glBlendBarrierNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewportPositionWScaleNv;

/// ```c
/// GLAPI void APIENTRY glViewportPositionWScaleNV (GLuint index, GLfloat xcoeff, GLfloat ycoeff)
/// ```
void glViewportPositionWScaleNv(int index, double xcoeff, double ycoeff) {
  final glViewportPositionWScaleNvAsFunction = _glViewportPositionWScaleNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Float xcoeff, Float ycoeff)>
      >()
      .asFunction<void Function(int index, double xcoeff, double ycoeff)>();
  return glViewportPositionWScaleNvAsFunction(index, xcoeff, ycoeff);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateStatesNv;

/// ```c
/// GLAPI void APIENTRY glCreateStatesNV (GLsizei n, GLuint *states)
/// ```
void glCreateStatesNv(int n, Pointer<Uint32> states) {
  final glCreateStatesNvAsFunction = _glCreateStatesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> states)>>()
      .asFunction<void Function(int n, Pointer<Uint32> states)>();
  return glCreateStatesNvAsFunction(n, states);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteStatesNv;

/// ```c
/// GLAPI void APIENTRY glDeleteStatesNV (GLsizei n, const GLuint *states)
/// ```
void glDeleteStatesNv(int n, Pointer<Uint32> states) {
  final glDeleteStatesNvAsFunction = _glDeleteStatesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> states)>>()
      .asFunction<void Function(int n, Pointer<Uint32> states)>();
  return glDeleteStatesNvAsFunction(n, states);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsStateNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsStateNV (GLuint state)
/// ```
int glIsStateNv(int state) {
  final glIsStateNvAsFunction = _glIsStateNv
      .cast<NativeFunction<Int32 Function(Uint32 state)>>()
      .asFunction<int Function(int state)>();
  return glIsStateNvAsFunction(state);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStateCaptureNv;

/// ```c
/// GLAPI void APIENTRY glStateCaptureNV (GLuint state, GLenum mode)
/// ```
void glStateCaptureNv(int state, int mode) {
  final glStateCaptureNvAsFunction = _glStateCaptureNv
      .cast<NativeFunction<Void Function(Uint32 state, Uint32 mode)>>()
      .asFunction<void Function(int state, int mode)>();
  return glStateCaptureNvAsFunction(state, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCommandHeaderNv;

/// ```c
/// GLAPI GLuint APIENTRY glGetCommandHeaderNV (GLenum tokenID, GLuint size)
/// ```
int glGetCommandHeaderNv(int tokenId, int size) {
  final glGetCommandHeaderNvAsFunction = _glGetCommandHeaderNv
      .cast<NativeFunction<Uint32 Function(Uint32 tokenId, Uint32 size)>>()
      .asFunction<int Function(int tokenId, int size)>();
  return glGetCommandHeaderNvAsFunction(tokenId, size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetStageIndexNv;

/// ```c
/// GLAPI GLushort APIENTRY glGetStageIndexNV (GLenum shadertype)
/// ```
int glGetStageIndexNv(int shadertype) {
  final glGetStageIndexNvAsFunction = _glGetStageIndexNv
      .cast<NativeFunction<Uint16 Function(Uint32 shadertype)>>()
      .asFunction<int Function(int shadertype)>();
  return glGetStageIndexNvAsFunction(shadertype);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawCommandsNv;

/// ```c
/// GLAPI void APIENTRY glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count)
/// ```
void glDrawCommandsNv(
  int primitiveMode,
  int buffer,
  Pointer<Pointer<NativeType>> indirects,
  Pointer<Uint32> sizes,
  int count,
) {
  final glDrawCommandsNvAsFunction = _glDrawCommandsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 primitiveMode,
            Uint32 buffer,
            Pointer<Pointer<NativeType>> indirects,
            Pointer<Uint32> sizes,
            Uint32 count,
          )
        >
      >()
      .asFunction<
        void Function(
          int primitiveMode,
          int buffer,
          Pointer<Pointer<NativeType>> indirects,
          Pointer<Uint32> sizes,
          int count,
        )
      >();
  return glDrawCommandsNvAsFunction(
    primitiveMode,
    buffer,
    indirects,
    sizes,
    count,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawCommandsAddressNv;

/// ```c
/// GLAPI void APIENTRY glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count)
/// ```
void glDrawCommandsAddressNv(
  int primitiveMode,
  Pointer<Uint64> indirects,
  Pointer<Uint32> sizes,
  int count,
) {
  final glDrawCommandsAddressNvAsFunction = _glDrawCommandsAddressNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 primitiveMode,
            Pointer<Uint64> indirects,
            Pointer<Uint32> sizes,
            Uint32 count,
          )
        >
      >()
      .asFunction<
        void Function(
          int primitiveMode,
          Pointer<Uint64> indirects,
          Pointer<Uint32> sizes,
          int count,
        )
      >();
  return glDrawCommandsAddressNvAsFunction(
    primitiveMode,
    indirects,
    sizes,
    count,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawCommandsStatesNv;

/// ```c
/// GLAPI void APIENTRY glDrawCommandsStatesNV (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
/// ```
void glDrawCommandsStatesNv(
  int buffer,
  Pointer<Pointer<NativeType>> indirects,
  Pointer<Uint32> sizes,
  Pointer<Uint32> states,
  Pointer<Uint32> fbos,
  int count,
) {
  final glDrawCommandsStatesNvAsFunction = _glDrawCommandsStatesNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 buffer,
            Pointer<Pointer<NativeType>> indirects,
            Pointer<Uint32> sizes,
            Pointer<Uint32> states,
            Pointer<Uint32> fbos,
            Uint32 count,
          )
        >
      >()
      .asFunction<
        void Function(
          int buffer,
          Pointer<Pointer<NativeType>> indirects,
          Pointer<Uint32> sizes,
          Pointer<Uint32> states,
          Pointer<Uint32> fbos,
          int count,
        )
      >();
  return glDrawCommandsStatesNvAsFunction(
    buffer,
    indirects,
    sizes,
    states,
    fbos,
    count,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawCommandsStatesAddressNv;

/// ```c
/// GLAPI void APIENTRY glDrawCommandsStatesAddressNV (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
/// ```
void glDrawCommandsStatesAddressNv(
  Pointer<Uint64> indirects,
  Pointer<Uint32> sizes,
  Pointer<Uint32> states,
  Pointer<Uint32> fbos,
  int count,
) {
  final glDrawCommandsStatesAddressNvAsFunction = _glDrawCommandsStatesAddressNv
      .cast<
        NativeFunction<
          Void Function(
            Pointer<Uint64> indirects,
            Pointer<Uint32> sizes,
            Pointer<Uint32> states,
            Pointer<Uint32> fbos,
            Uint32 count,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<Uint64> indirects,
          Pointer<Uint32> sizes,
          Pointer<Uint32> states,
          Pointer<Uint32> fbos,
          int count,
        )
      >();
  return glDrawCommandsStatesAddressNvAsFunction(
    indirects,
    sizes,
    states,
    fbos,
    count,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateCommandListsNv;

/// ```c
/// GLAPI void APIENTRY glCreateCommandListsNV (GLsizei n, GLuint *lists)
/// ```
void glCreateCommandListsNv(int n, Pointer<Uint32> lists) {
  final glCreateCommandListsNvAsFunction = _glCreateCommandListsNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> lists)>>()
      .asFunction<void Function(int n, Pointer<Uint32> lists)>();
  return glCreateCommandListsNvAsFunction(n, lists);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteCommandListsNv;

/// ```c
/// GLAPI void APIENTRY glDeleteCommandListsNV (GLsizei n, const GLuint *lists)
/// ```
void glDeleteCommandListsNv(int n, Pointer<Uint32> lists) {
  final glDeleteCommandListsNvAsFunction = _glDeleteCommandListsNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> lists)>>()
      .asFunction<void Function(int n, Pointer<Uint32> lists)>();
  return glDeleteCommandListsNvAsFunction(n, lists);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsCommandListNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsCommandListNV (GLuint list)
/// ```
int glIsCommandListNv(int list) {
  final glIsCommandListNvAsFunction = _glIsCommandListNv
      .cast<NativeFunction<Int32 Function(Uint32 list)>>()
      .asFunction<int Function(int list)>();
  return glIsCommandListNvAsFunction(list);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListDrawCommandsStatesClientNv;

/// ```c
/// GLAPI void APIENTRY glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
/// ```
void glListDrawCommandsStatesClientNv(
  int list,
  int segment,
  Pointer<Pointer<NativeType>> indirects,
  Pointer<Uint32> sizes,
  Pointer<Uint32> states,
  Pointer<Uint32> fbos,
  int count,
) {
  final glListDrawCommandsStatesClientNvAsFunction =
      _glListDrawCommandsStatesClientNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 list,
                Uint32 segment,
                Pointer<Pointer<NativeType>> indirects,
                Pointer<Uint32> sizes,
                Pointer<Uint32> states,
                Pointer<Uint32> fbos,
                Uint32 count,
              )
            >
          >()
          .asFunction<
            void Function(
              int list,
              int segment,
              Pointer<Pointer<NativeType>> indirects,
              Pointer<Uint32> sizes,
              Pointer<Uint32> states,
              Pointer<Uint32> fbos,
              int count,
            )
          >();
  return glListDrawCommandsStatesClientNvAsFunction(
    list,
    segment,
    indirects,
    sizes,
    states,
    fbos,
    count,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCommandListSegmentsNv;

/// ```c
/// GLAPI void APIENTRY glCommandListSegmentsNV (GLuint list, GLuint segments)
/// ```
void glCommandListSegmentsNv(int list, int segments) {
  final glCommandListSegmentsNvAsFunction = _glCommandListSegmentsNv
      .cast<NativeFunction<Void Function(Uint32 list, Uint32 segments)>>()
      .asFunction<void Function(int list, int segments)>();
  return glCommandListSegmentsNvAsFunction(list, segments);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompileCommandListNv;

/// ```c
/// GLAPI void APIENTRY glCompileCommandListNV (GLuint list)
/// ```
void glCompileCommandListNv(int list) {
  final glCompileCommandListNvAsFunction = _glCompileCommandListNv
      .cast<NativeFunction<Void Function(Uint32 list)>>()
      .asFunction<void Function(int list)>();
  return glCompileCommandListNvAsFunction(list);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCallCommandListNv;

/// ```c
/// GLAPI void APIENTRY glCallCommandListNV (GLuint list)
/// ```
void glCallCommandListNv(int list) {
  final glCallCommandListNvAsFunction = _glCallCommandListNv
      .cast<NativeFunction<Void Function(Uint32 list)>>()
      .asFunction<void Function(int list)>();
  return glCallCommandListNvAsFunction(list);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginConditionalRenderNv;

/// ```c
/// GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode)
/// ```
void glBeginConditionalRenderNv(int id, int mode) {
  final glBeginConditionalRenderNvAsFunction = _glBeginConditionalRenderNv
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 mode)>>()
      .asFunction<void Function(int id, int mode)>();
  return glBeginConditionalRenderNvAsFunction(id, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndConditionalRenderNv;

/// ```c
/// GLAPI void APIENTRY glEndConditionalRenderNV (void)
/// ```
void glEndConditionalRenderNv() {
  final glEndConditionalRenderNvAsFunction = _glEndConditionalRenderNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndConditionalRenderNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSubpixelPrecisionBiasNv;

/// ```c
/// GLAPI void APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
/// ```
void glSubpixelPrecisionBiasNv(int xbits, int ybits) {
  final glSubpixelPrecisionBiasNvAsFunction = _glSubpixelPrecisionBiasNv
      .cast<NativeFunction<Void Function(Uint32 xbits, Uint32 ybits)>>()
      .asFunction<void Function(int xbits, int ybits)>();
  return glSubpixelPrecisionBiasNvAsFunction(xbits, ybits);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConservativeRasterParameterfNv;

/// ```c
/// GLAPI void APIENTRY glConservativeRasterParameterfNV (GLenum pname, GLfloat value)
/// ```
void glConservativeRasterParameterfNv(int pname, double value) {
  final glConservativeRasterParameterfNvAsFunction =
      _glConservativeRasterParameterfNv
          .cast<NativeFunction<Void Function(Uint32 pname, Float value)>>()
          .asFunction<void Function(int pname, double value)>();
  return glConservativeRasterParameterfNvAsFunction(pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConservativeRasterParameteriNv;

/// ```c
/// GLAPI void APIENTRY glConservativeRasterParameteriNV (GLenum pname, GLint param)
/// ```
void glConservativeRasterParameteriNv(int pname, int param) {
  final glConservativeRasterParameteriNvAsFunction =
      _glConservativeRasterParameteriNv
          .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
          .asFunction<void Function(int pname, int param)>();
  return glConservativeRasterParameteriNvAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyImageSubDataNv;

/// ```c
/// GLAPI void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
/// ```
void glCopyImageSubDataNv(
  int srcName,
  int srcTarget,
  int srcLevel,
  int srcX,
  int srcY,
  int srcZ,
  int dstName,
  int dstTarget,
  int dstLevel,
  int dstX,
  int dstY,
  int dstZ,
  int width,
  int height,
  int depth,
) {
  final glCopyImageSubDataNvAsFunction = _glCopyImageSubDataNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 srcName,
            Uint32 srcTarget,
            Int32 srcLevel,
            Int32 srcX,
            Int32 srcY,
            Int32 srcZ,
            Uint32 dstName,
            Uint32 dstTarget,
            Int32 dstLevel,
            Int32 dstX,
            Int32 dstY,
            Int32 dstZ,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int width,
          int height,
          int depth,
        )
      >();
  return glCopyImageSubDataNvAsFunction(
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srcY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    width,
    height,
    depth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRangedNv;

/// ```c
/// GLAPI void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar)
/// ```
void glDepthRangedNv(double zNear, double zFar) {
  final glDepthRangedNvAsFunction = _glDepthRangedNv
      .cast<NativeFunction<Void Function(Double zNear, Double zFar)>>()
      .asFunction<void Function(double zNear, double zFar)>();
  return glDepthRangedNvAsFunction(zNear, zFar);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearDepthdNv;

/// ```c
/// GLAPI void APIENTRY glClearDepthdNV (GLdouble depth)
/// ```
void glClearDepthdNv(double depth) {
  final glClearDepthdNvAsFunction = _glClearDepthdNv
      .cast<NativeFunction<Void Function(Double depth)>>()
      .asFunction<void Function(double depth)>();
  return glClearDepthdNvAsFunction(depth);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthBoundsdNv;

/// ```c
/// GLAPI void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax)
/// ```
void glDepthBoundsdNv(double zmin, double zmax) {
  final glDepthBoundsdNvAsFunction = _glDepthBoundsdNv
      .cast<NativeFunction<Void Function(Double zmin, Double zmax)>>()
      .asFunction<void Function(double zmin, double zmax)>();
  return glDepthBoundsdNvAsFunction(zmin, zmax);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawTextureNv;

/// ```c
/// GLAPI void APIENTRY glDrawTextureNV (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
/// ```
void glDrawTextureNv(
  int texture,
  int sampler,
  double x0,
  double y0,
  double x1,
  double y1,
  double z,
  double s0,
  double t0,
  double s1,
  double t1,
) {
  final glDrawTextureNvAsFunction = _glDrawTextureNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 sampler,
            Float x0,
            Float y0,
            Float x1,
            Float y1,
            Float z,
            Float s0,
            Float t0,
            Float s1,
            Float t1,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int sampler,
          double x0,
          double y0,
          double x1,
          double y1,
          double z,
          double s0,
          double t0,
          double s1,
          double t1,
        )
      >();
  return glDrawTextureNvAsFunction(
    texture,
    sampler,
    x0,
    y0,
    x1,
    y1,
    z,
    s0,
    t0,
    s1,
    t1,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawVkImageNv;

/// ```c
/// GLAPI void APIENTRY glDrawVkImageNV (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
/// ```
void glDrawVkImageNv(
  int vkImage,
  int sampler,
  double x0,
  double y0,
  double x1,
  double y1,
  double z,
  double s0,
  double t0,
  double s1,
  double t1,
) {
  final glDrawVkImageNvAsFunction = _glDrawVkImageNv
      .cast<
        NativeFunction<
          Void Function(
            Uint64 vkImage,
            Uint32 sampler,
            Float x0,
            Float y0,
            Float x1,
            Float y1,
            Float z,
            Float s0,
            Float t0,
            Float s1,
            Float t1,
          )
        >
      >()
      .asFunction<
        void Function(
          int vkImage,
          int sampler,
          double x0,
          double y0,
          double x1,
          double y1,
          double z,
          double s0,
          double t0,
          double s1,
          double t1,
        )
      >();
  return glDrawVkImageNvAsFunction(
    vkImage,
    sampler,
    x0,
    y0,
    x1,
    y1,
    z,
    s0,
    t0,
    s1,
    t1,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVkProcAddrNv;

/// ```c
/// GLAPI GLVULKANPROCNV APIENTRY glGetVkProcAddrNV (const GLchar *name)
/// ```
Pointer<NativeFunction<GLVULKANPROCNV>> glGetVkProcAddrNv(String name) {
  final glGetVkProcAddrNvAsFunction = _glGetVkProcAddrNv
      .cast<
        NativeFunction<
          Pointer<NativeFunction<GLVULKANPROCNV>> Function(Pointer<Utf8> name)
        >
      >()
      .asFunction<
        Pointer<NativeFunction<GLVULKANPROCNV>> Function(Pointer<Utf8> name)
      >();
  final namePointer = name.toNativeUtf8();
  final result = glGetVkProcAddrNvAsFunction(namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWaitVkSemaphoreNv;

/// ```c
/// GLAPI void APIENTRY glWaitVkSemaphoreNV (GLuint64 vkSemaphore)
/// ```
void glWaitVkSemaphoreNv(int vkSemaphore) {
  final glWaitVkSemaphoreNvAsFunction = _glWaitVkSemaphoreNv
      .cast<NativeFunction<Void Function(Uint64 vkSemaphore)>>()
      .asFunction<void Function(int vkSemaphore)>();
  return glWaitVkSemaphoreNvAsFunction(vkSemaphore);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSignalVkSemaphoreNv;

/// ```c
/// GLAPI void APIENTRY glSignalVkSemaphoreNV (GLuint64 vkSemaphore)
/// ```
void glSignalVkSemaphoreNv(int vkSemaphore) {
  final glSignalVkSemaphoreNvAsFunction = _glSignalVkSemaphoreNv
      .cast<NativeFunction<Void Function(Uint64 vkSemaphore)>>()
      .asFunction<void Function(int vkSemaphore)>();
  return glSignalVkSemaphoreNvAsFunction(vkSemaphore);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSignalVkFenceNv;

/// ```c
/// GLAPI void APIENTRY glSignalVkFenceNV (GLuint64 vkFence)
/// ```
void glSignalVkFenceNv(int vkFence) {
  final glSignalVkFenceNvAsFunction = _glSignalVkFenceNv
      .cast<NativeFunction<Void Function(Uint64 vkFence)>>()
      .asFunction<void Function(int vkFence)>();
  return glSignalVkFenceNvAsFunction(vkFence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapControlPointsNv;

/// ```c
/// GLAPI void APIENTRY glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)
/// ```
void glMapControlPointsNv(
  int target,
  int index,
  int type,
  int ustride,
  int vstride,
  int uorder,
  int vorder,
  int packed,
  Pointer<NativeType> points,
) {
  final glMapControlPointsNvAsFunction = _glMapControlPointsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 type,
            Uint32 ustride,
            Uint32 vstride,
            Int32 uorder,
            Int32 vorder,
            Int32 packed,
            Pointer<NativeType> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int type,
          int ustride,
          int vstride,
          int uorder,
          int vorder,
          int packed,
          Pointer<NativeType> points,
        )
      >();
  return glMapControlPointsNvAsFunction(
    target,
    index,
    type,
    ustride,
    vstride,
    uorder,
    vorder,
    packed,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapParameterivNv;

/// ```c
/// GLAPI void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const GLint *params)
/// ```
void glMapParameterivNv(int target, int pname, Pointer<Int32> params) {
  final glMapParameterivNvAsFunction = _glMapParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glMapParameterivNvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glMapParameterfvNv(int target, int pname, Pointer<Float> params) {
  final glMapParameterfvNvAsFunction = _glMapParameterfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glMapParameterfvNvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapControlPointsNv;

/// ```c
/// GLAPI void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)
/// ```
void glGetMapControlPointsNv(
  int target,
  int index,
  int type,
  int ustride,
  int vstride,
  int packed,
  Pointer<NativeType> points,
) {
  final glGetMapControlPointsNvAsFunction = _glGetMapControlPointsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 type,
            Uint32 ustride,
            Uint32 vstride,
            Int32 packed,
            Pointer<NativeType> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int type,
          int ustride,
          int vstride,
          int packed,
          Pointer<NativeType> points,
        )
      >();
  return glGetMapControlPointsNvAsFunction(
    target,
    index,
    type,
    ustride,
    vstride,
    packed,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetMapParameterivNv(int target, int pname, Pointer<Int32> params) {
  final glGetMapParameterivNvAsFunction = _glGetMapParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetMapParameterivNvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetMapParameterfvNv(int target, int pname, Pointer<Float> params) {
  final glGetMapParameterfvNvAsFunction = _glGetMapParameterfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetMapParameterfvNvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapAttribParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params)
/// ```
void glGetMapAttribParameterivNv(
  int target,
  int index,
  int pname,
  Pointer<Int32> params,
) {
  final glGetMapAttribParameterivNvAsFunction = _glGetMapAttribParameterivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int pname, Pointer<Int32> params)
      >();
  return glGetMapAttribParameterivNvAsFunction(target, index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapAttribParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetMapAttribParameterfvNv(
  int target,
  int index,
  int pname,
  Pointer<Float> params,
) {
  final glGetMapAttribParameterfvNvAsFunction = _glGetMapAttribParameterfvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int pname, Pointer<Float> params)
      >();
  return glGetMapAttribParameterfvNvAsFunction(target, index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalMapsNv;

/// ```c
/// GLAPI void APIENTRY glEvalMapsNV (GLenum target, GLenum mode)
/// ```
void glEvalMapsNv(int target, int mode) {
  final glEvalMapsNvAsFunction = _glEvalMapsNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 mode)>>()
      .asFunction<void Function(int target, int mode)>();
  return glEvalMapsNvAsFunction(target, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMultisamplefvNv;

/// ```c
/// GLAPI void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat *val)
/// ```
void glGetMultisamplefvNv(int pname, int index, Pointer<Float> val) {
  final glGetMultisamplefvNvAsFunction = _glGetMultisamplefvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Uint32 index, Pointer<Float> val)
        >
      >()
      .asFunction<void Function(int pname, int index, Pointer<Float> val)>();
  return glGetMultisamplefvNvAsFunction(pname, index, val);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleMaskIndexedNv;

/// ```c
/// GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask)
/// ```
void glSampleMaskIndexedNv(int index, int mask) {
  final glSampleMaskIndexedNvAsFunction = _glSampleMaskIndexedNv
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 mask)>>()
      .asFunction<void Function(int index, int mask)>();
  return glSampleMaskIndexedNvAsFunction(index, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexRenderbufferNv;

/// ```c
/// GLAPI void APIENTRY glTexRenderbufferNV (GLenum target, GLuint renderbuffer)
/// ```
void glTexRenderbufferNv(int target, int renderbuffer) {
  final glTexRenderbufferNvAsFunction = _glTexRenderbufferNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return glTexRenderbufferNvAsFunction(target, renderbuffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteFencesNv;

/// ```c
/// GLAPI void APIENTRY glDeleteFencesNV (GLsizei n, const GLuint *fences)
/// ```
void glDeleteFencesNv(int n, Pointer<Uint32> fences) {
  final glDeleteFencesNvAsFunction = _glDeleteFencesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32> fences)>();
  return glDeleteFencesNvAsFunction(n, fences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenFencesNv;

/// ```c
/// GLAPI void APIENTRY glGenFencesNV (GLsizei n, GLuint *fences)
/// ```
void glGenFencesNv(int n, Pointer<Uint32> fences) {
  final glGenFencesNvAsFunction = _glGenFencesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32> fences)>();
  return glGenFencesNvAsFunction(n, fences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsFenceNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsFenceNV (GLuint fence)
/// ```
int glIsFenceNv(int fence) {
  final glIsFenceNvAsFunction = _glIsFenceNv
      .cast<NativeFunction<Int32 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return glIsFenceNvAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTestFenceNv;

/// ```c
/// GLAPI GLboolean APIENTRY glTestFenceNV (GLuint fence)
/// ```
int glTestFenceNv(int fence) {
  final glTestFenceNvAsFunction = _glTestFenceNv
      .cast<NativeFunction<Int32 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return glTestFenceNvAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFenceivNv;

/// ```c
/// GLAPI void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint *params)
/// ```
void glGetFenceivNv(int fence, int pname, Pointer<Int32> params) {
  final glGetFenceivNvAsFunction = _glGetFenceivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 fence, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int fence, int pname, Pointer<Int32> params)>();
  return glGetFenceivNvAsFunction(fence, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinishFenceNv;

/// ```c
/// GLAPI void APIENTRY glFinishFenceNV (GLuint fence)
/// ```
void glFinishFenceNv(int fence) {
  final glFinishFenceNvAsFunction = _glFinishFenceNv
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return glFinishFenceNvAsFunction(fence);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSetFenceNv;

/// ```c
/// GLAPI void APIENTRY glSetFenceNV (GLuint fence, GLenum condition)
/// ```
void glSetFenceNv(int fence, int condition) {
  final glSetFenceNvAsFunction = _glSetFenceNv
      .cast<NativeFunction<Void Function(Uint32 fence, Uint32 condition)>>()
      .asFunction<void Function(int fence, int condition)>();
  return glSetFenceNvAsFunction(fence, condition);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentCoverageColorNv;

/// ```c
/// GLAPI void APIENTRY glFragmentCoverageColorNV (GLuint color)
/// ```
void glFragmentCoverageColorNv(int color) {
  final glFragmentCoverageColorNvAsFunction = _glFragmentCoverageColorNv
      .cast<NativeFunction<Void Function(Uint32 color)>>()
      .asFunction<void Function(int color)>();
  return glFragmentCoverageColorNvAsFunction(color);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramNamedParameter4fNv;

/// ```c
/// GLAPI void APIENTRY glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glProgramNamedParameter4fNv(
  int id,
  int len,
  Pointer<Uint8> name,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramNamedParameter4fNvAsFunction = _glProgramNamedParameter4fNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 len,
            Pointer<Uint8> name,
            Float x,
            Float y,
            Float z,
            Float w,
          )
        >
      >()
      .asFunction<
        void Function(
          int id,
          int len,
          Pointer<Uint8> name,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramNamedParameter4fNvAsFunction(id, len, name, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramNamedParameter4fvNv;

/// ```c
/// GLAPI void APIENTRY glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
/// ```
void glProgramNamedParameter4fvNv(
  int id,
  int len,
  Pointer<Uint8> name,
  Pointer<Float> v,
) {
  final glProgramNamedParameter4fvNvAsFunction = _glProgramNamedParameter4fvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 len,
            Pointer<Uint8> name,
            Pointer<Float> v,
          )
        >
      >()
      .asFunction<
        void Function(int id, int len, Pointer<Uint8> name, Pointer<Float> v)
      >();
  return glProgramNamedParameter4fvNvAsFunction(id, len, name, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramNamedParameter4dNv;

/// ```c
/// GLAPI void APIENTRY glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glProgramNamedParameter4dNv(
  int id,
  int len,
  Pointer<Uint8> name,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramNamedParameter4dNvAsFunction = _glProgramNamedParameter4dNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 len,
            Pointer<Uint8> name,
            Double x,
            Double y,
            Double z,
            Double w,
          )
        >
      >()
      .asFunction<
        void Function(
          int id,
          int len,
          Pointer<Uint8> name,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramNamedParameter4dNvAsFunction(id, len, name, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramNamedParameter4dvNv;

/// ```c
/// GLAPI void APIENTRY glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
/// ```
void glProgramNamedParameter4dvNv(
  int id,
  int len,
  Pointer<Uint8> name,
  Pointer<Double> v,
) {
  final glProgramNamedParameter4dvNvAsFunction = _glProgramNamedParameter4dvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 id,
            Uint32 len,
            Pointer<Uint8> name,
            Pointer<Double> v,
          )
        >
      >()
      .asFunction<
        void Function(int id, int len, Pointer<Uint8> name, Pointer<Double> v)
      >();
  return glProgramNamedParameter4dvNvAsFunction(id, len, name, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramNamedParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
/// ```
void glGetProgramNamedParameterfvNv(
  int id,
  int len,
  Pointer<Uint8> name,
  Pointer<Float> params,
) {
  final glGetProgramNamedParameterfvNvAsFunction =
      _glGetProgramNamedParameterfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 id,
                Uint32 len,
                Pointer<Uint8> name,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int id,
              int len,
              Pointer<Uint8> name,
              Pointer<Float> params,
            )
          >();
  return glGetProgramNamedParameterfvNvAsFunction(id, len, name, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramNamedParameterdvNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
/// ```
void glGetProgramNamedParameterdvNv(
  int id,
  int len,
  Pointer<Uint8> name,
  Pointer<Double> params,
) {
  final glGetProgramNamedParameterdvNvAsFunction =
      _glGetProgramNamedParameterdvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 id,
                Uint32 len,
                Pointer<Uint8> name,
                Pointer<Double> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int id,
              int len,
              Pointer<Uint8> name,
              Pointer<Double> params,
            )
          >();
  return glGetProgramNamedParameterdvNvAsFunction(id, len, name, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverageModulationTableNv;

/// ```c
/// GLAPI void APIENTRY glCoverageModulationTableNV (GLsizei n, const GLfloat *v)
/// ```
void glCoverageModulationTableNv(int n, Pointer<Float> v) {
  final glCoverageModulationTableNvAsFunction = _glCoverageModulationTableNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Float> v)>>()
      .asFunction<void Function(int n, Pointer<Float> v)>();
  return glCoverageModulationTableNvAsFunction(n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCoverageModulationTableNv;

/// ```c
/// GLAPI void APIENTRY glGetCoverageModulationTableNV (GLsizei bufSize, GLfloat *v)
/// ```
void glGetCoverageModulationTableNv(int bufSize, Pointer<Float> v) {
  final glGetCoverageModulationTableNvAsFunction =
      _glGetCoverageModulationTableNv
          .cast<
            NativeFunction<Void Function(Uint32 bufSize, Pointer<Float> v)>
          >()
          .asFunction<void Function(int bufSize, Pointer<Float> v)>();
  return glGetCoverageModulationTableNvAsFunction(bufSize, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverageModulationNv;

/// ```c
/// GLAPI void APIENTRY glCoverageModulationNV (GLenum components)
/// ```
void glCoverageModulationNv(int components) {
  final glCoverageModulationNvAsFunction = _glCoverageModulationNv
      .cast<NativeFunction<Void Function(Uint32 components)>>()
      .asFunction<void Function(int components)>();
  return glCoverageModulationNvAsFunction(components);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glRenderbufferStorageMultisampleCoverageNv;

/// ```c
/// GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
void glRenderbufferStorageMultisampleCoverageNv(
  int target,
  int coverageSamples,
  int colorSamples,
  int internalformat,
  int width,
  int height,
) {
  final glRenderbufferStorageMultisampleCoverageNvAsFunction =
      _glRenderbufferStorageMultisampleCoverageNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Uint32 internalformat,
                Uint32 width,
                Uint32 height,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int coverageSamples,
              int colorSamples,
              int internalformat,
              int width,
              int height,
            )
          >();
  return glRenderbufferStorageMultisampleCoverageNvAsFunction(
    target,
    coverageSamples,
    colorSamples,
    internalformat,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramVertexLimitNv;

/// ```c
/// GLAPI void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit)
/// ```
void glProgramVertexLimitNv(int target, int limit) {
  final glProgramVertexLimitNvAsFunction = _glProgramVertexLimitNv
      .cast<NativeFunction<Void Function(Uint32 target, Int32 limit)>>()
      .asFunction<void Function(int target, int limit)>();
  return glProgramVertexLimitNvAsFunction(target, limit);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
void glFramebufferTextureExt(
  int target,
  int attachment,
  int texture,
  int level,
) {
  final glFramebufferTextureExtAsFunction = _glFramebufferTextureExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
          )
        >
      >()
      .asFunction<
        void Function(int target, int attachment, int texture, int level)
      >();
  return glFramebufferTextureExtAsFunction(target, attachment, texture, level);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureFaceExt;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
void glFramebufferTextureFaceExt(
  int target,
  int attachment,
  int texture,
  int level,
  int face,
) {
  final glFramebufferTextureFaceExtAsFunction = _glFramebufferTextureFaceExt
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 attachment,
            Uint32 texture,
            Int32 level,
            Uint32 face,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int attachment,
          int texture,
          int level,
          int face,
        )
      >();
  return glFramebufferTextureFaceExtAsFunction(
    target,
    attachment,
    texture,
    level,
    face,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRenderGpuMaskNv;

/// ```c
/// GLAPI void APIENTRY glRenderGPUMaskNV (GLbitfield mask)
/// ```
void glRenderGpuMaskNv(int mask) {
  final glRenderGpuMaskNvAsFunction = _glRenderGpuMaskNv
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glRenderGpuMaskNvAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastBufferSubDataNv;

/// ```c
/// GLAPI void APIENTRY glMulticastBufferSubDataNV (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
void glMulticastBufferSubDataNv(
  int gpuMask,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  Pointer<NativeType> data,
) {
  final glMulticastBufferSubDataNvAsFunction = _glMulticastBufferSubDataNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 gpuMask,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int gpuMask,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          Pointer<NativeType> data,
        )
      >();
  return glMulticastBufferSubDataNvAsFunction(
    gpuMask,
    buffer,
    offset,
    size,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastCopyBufferSubDataNv;

/// ```c
/// GLAPI void APIENTRY glMulticastCopyBufferSubDataNV (GLuint readGPU, GLbitfield writeGPUMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
void glMulticastCopyBufferSubDataNv(
  int readGpu,
  int writeGpuMask,
  int readBuffer,
  int writeBuffer,
  Pointer<NativeType> readOffset,
  Pointer<NativeType> writeOffset,
  Pointer<Uint32> size,
) {
  final glMulticastCopyBufferSubDataNvAsFunction =
      _glMulticastCopyBufferSubDataNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 readGpu,
                Uint32 writeGpuMask,
                Uint32 readBuffer,
                Uint32 writeBuffer,
                Pointer<NativeType> readOffset,
                Pointer<NativeType> writeOffset,
                Pointer<Uint32> size,
              )
            >
          >()
          .asFunction<
            void Function(
              int readGpu,
              int writeGpuMask,
              int readBuffer,
              int writeBuffer,
              Pointer<NativeType> readOffset,
              Pointer<NativeType> writeOffset,
              Pointer<Uint32> size,
            )
          >();
  return glMulticastCopyBufferSubDataNvAsFunction(
    readGpu,
    writeGpuMask,
    readBuffer,
    writeBuffer,
    readOffset,
    writeOffset,
    size,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastCopyImageSubDataNv;

/// ```c
/// GLAPI void APIENTRY glMulticastCopyImageSubDataNV (GLuint srcGPU, GLbitfield dstGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
/// ```
void glMulticastCopyImageSubDataNv(
  int srcGpu,
  int dstGpuMask,
  int srcName,
  int srcTarget,
  int srcLevel,
  int srcX,
  int srcY,
  int srcZ,
  int dstName,
  int dstTarget,
  int dstLevel,
  int dstX,
  int dstY,
  int dstZ,
  int srcWidth,
  int srcHeight,
  int srcDepth,
) {
  final glMulticastCopyImageSubDataNvAsFunction = _glMulticastCopyImageSubDataNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 srcGpu,
            Uint32 dstGpuMask,
            Uint32 srcName,
            Uint32 srcTarget,
            Int32 srcLevel,
            Int32 srcX,
            Int32 srcY,
            Int32 srcZ,
            Uint32 dstName,
            Uint32 dstTarget,
            Int32 dstLevel,
            Int32 dstX,
            Int32 dstY,
            Int32 dstZ,
            Uint32 srcWidth,
            Uint32 srcHeight,
            Uint32 srcDepth,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcGpu,
          int dstGpuMask,
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth,
        )
      >();
  return glMulticastCopyImageSubDataNvAsFunction(
    srcGpu,
    dstGpuMask,
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srcY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    srcWidth,
    srcHeight,
    srcDepth,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastBlitFramebufferNv;

/// ```c
/// GLAPI void APIENTRY glMulticastBlitFramebufferNV (GLuint srcGPU, GLuint dstGPU, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
void glMulticastBlitFramebufferNv(
  int srcGpu,
  int dstGpu,
  int srcX0,
  int srcY0,
  int srcX1,
  int srcY1,
  int dstX0,
  int dstY0,
  int dstX1,
  int dstY1,
  int mask,
  int filter,
) {
  final glMulticastBlitFramebufferNvAsFunction = _glMulticastBlitFramebufferNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 srcGpu,
            Uint32 dstGpu,
            Int32 srcX0,
            Int32 srcY0,
            Int32 srcX1,
            Int32 srcY1,
            Int32 dstX0,
            Int32 dstY0,
            Int32 dstX1,
            Int32 dstY1,
            Uint32 mask,
            Uint32 filter,
          )
        >
      >()
      .asFunction<
        void Function(
          int srcGpu,
          int dstGpu,
          int srcX0,
          int srcY0,
          int srcX1,
          int srcY1,
          int dstX0,
          int dstY0,
          int dstX1,
          int dstY1,
          int mask,
          int filter,
        )
      >();
  return glMulticastBlitFramebufferNvAsFunction(
    srcGpu,
    dstGpu,
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMulticastFramebufferSampleLocationsfvNv;

/// ```c
/// GLAPI void APIENTRY glMulticastFramebufferSampleLocationsfvNV (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
/// ```
void glMulticastFramebufferSampleLocationsfvNv(
  int gpu,
  int framebuffer,
  int start,
  int count,
  Pointer<Float> v,
) {
  final glMulticastFramebufferSampleLocationsfvNvAsFunction =
      _glMulticastFramebufferSampleLocationsfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 gpu,
                Uint32 framebuffer,
                Uint32 start,
                Uint32 count,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              int gpu,
              int framebuffer,
              int start,
              int count,
              Pointer<Float> v,
            )
          >();
  return glMulticastFramebufferSampleLocationsfvNvAsFunction(
    gpu,
    framebuffer,
    start,
    count,
    v,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastBarrierNv;

/// ```c
/// GLAPI void APIENTRY glMulticastBarrierNV (void)
/// ```
void glMulticastBarrierNv() {
  final glMulticastBarrierNvAsFunction = _glMulticastBarrierNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glMulticastBarrierNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastWaitSyncNv;

/// ```c
/// GLAPI void APIENTRY glMulticastWaitSyncNV (GLuint signalGPU, GLbitfield waitGPUMask)
/// ```
void glMulticastWaitSyncNv(int signalGpu, int waitGpuMask) {
  final glMulticastWaitSyncNvAsFunction = _glMulticastWaitSyncNv
      .cast<
        NativeFunction<Void Function(Uint32 signalGpu, Uint32 waitGpuMask)>
      >()
      .asFunction<void Function(int signalGpu, int waitGpuMask)>();
  return glMulticastWaitSyncNvAsFunction(signalGpu, waitGpuMask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastGetQueryObjectivNv;

/// ```c
/// GLAPI void APIENTRY glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id, GLenum pname, GLint *params)
/// ```
void glMulticastGetQueryObjectivNv(
  int gpu,
  int id,
  int pname,
  Pointer<Int32> params,
) {
  final glMulticastGetQueryObjectivNvAsFunction = _glMulticastGetQueryObjectivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 gpu,
            Uint32 id,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int gpu, int id, int pname, Pointer<Int32> params)
      >();
  return glMulticastGetQueryObjectivNvAsFunction(gpu, id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastGetQueryObjectuivNv;

/// ```c
/// GLAPI void APIENTRY glMulticastGetQueryObjectuivNV (GLuint gpu, GLuint id, GLenum pname, GLuint *params)
/// ```
void glMulticastGetQueryObjectuivNv(
  int gpu,
  int id,
  int pname,
  Pointer<Uint32> params,
) {
  final glMulticastGetQueryObjectuivNvAsFunction =
      _glMulticastGetQueryObjectuivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 gpu,
                Uint32 id,
                Uint32 pname,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(int gpu, int id, int pname, Pointer<Uint32> params)
          >();
  return glMulticastGetQueryObjectuivNvAsFunction(gpu, id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastGetQueryObjecti64vNv;

/// ```c
/// GLAPI void APIENTRY glMulticastGetQueryObjecti64vNV (GLuint gpu, GLuint id, GLenum pname, GLint64 *params)
/// ```
void glMulticastGetQueryObjecti64vNv(
  int gpu,
  int id,
  int pname,
  Pointer<Int64> params,
) {
  final glMulticastGetQueryObjecti64vNvAsFunction =
      _glMulticastGetQueryObjecti64vNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 gpu,
                Uint32 id,
                Uint32 pname,
                Pointer<Int64> params,
              )
            >
          >()
          .asFunction<
            void Function(int gpu, int id, int pname, Pointer<Int64> params)
          >();
  return glMulticastGetQueryObjecti64vNvAsFunction(gpu, id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMulticastGetQueryObjectui64vNv;

/// ```c
/// GLAPI void APIENTRY glMulticastGetQueryObjectui64vNV (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params)
/// ```
void glMulticastGetQueryObjectui64vNv(
  int gpu,
  int id,
  int pname,
  Pointer<Uint64> params,
) {
  final glMulticastGetQueryObjectui64vNvAsFunction =
      _glMulticastGetQueryObjectui64vNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 gpu,
                Uint32 id,
                Uint32 pname,
                Pointer<Uint64> params,
              )
            >
          >()
          .asFunction<
            void Function(int gpu, int id, int pname, Pointer<Uint64> params)
          >();
  return glMulticastGetQueryObjectui64vNvAsFunction(gpu, id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameterI4iNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
void glProgramLocalParameterI4iNv(
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramLocalParameterI4iNvAsFunction = _glProgramLocalParameterI4iNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Int32 x,
            Int32 y,
            Int32 z,
            Int32 w,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int x, int y, int z, int w)
      >();
  return glProgramLocalParameterI4iNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameterI4ivNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params)
/// ```
void glProgramLocalParameterI4ivNv(
  int target,
  int index,
  Pointer<Int32> params,
) {
  final glProgramLocalParameterI4ivNvAsFunction = _glProgramLocalParameterI4ivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Int32> params)
      >();
  return glProgramLocalParameterI4ivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParametersI4ivNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params)
/// ```
void glProgramLocalParametersI4ivNv(
  int target,
  int index,
  int count,
  Pointer<Int32> params,
) {
  final glProgramLocalParametersI4ivNvAsFunction =
      _glProgramLocalParametersI4ivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int index,
              int count,
              Pointer<Int32> params,
            )
          >();
  return glProgramLocalParametersI4ivNvAsFunction(target, index, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameterI4uiNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
void glProgramLocalParameterI4uiNv(
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramLocalParameterI4uiNvAsFunction = _glProgramLocalParameterI4uiNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 x,
            Uint32 y,
            Uint32 z,
            Uint32 w,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int x, int y, int z, int w)
      >();
  return glProgramLocalParameterI4uiNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParameterI4uivNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params)
/// ```
void glProgramLocalParameterI4uivNv(
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glProgramLocalParameterI4uivNvAsFunction =
      _glProgramLocalParameterI4uivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Uint32> params)
          >();
  return glProgramLocalParameterI4uivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramLocalParametersI4uivNv;

/// ```c
/// GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params)
/// ```
void glProgramLocalParametersI4uivNv(
  int target,
  int index,
  int count,
  Pointer<Uint32> params,
) {
  final glProgramLocalParametersI4uivNvAsFunction =
      _glProgramLocalParametersI4uivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 index,
                Uint32 count,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int index,
              int count,
              Pointer<Uint32> params,
            )
          >();
  return glProgramLocalParametersI4uivNvAsFunction(
    target,
    index,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameterI4iNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
void glProgramEnvParameterI4iNv(
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramEnvParameterI4iNvAsFunction = _glProgramEnvParameterI4iNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Int32 x,
            Int32 y,
            Int32 z,
            Int32 w,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int x, int y, int z, int w)
      >();
  return glProgramEnvParameterI4iNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameterI4ivNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params)
/// ```
void glProgramEnvParameterI4ivNv(int target, int index, Pointer<Int32> params) {
  final glProgramEnvParameterI4ivNvAsFunction = _glProgramEnvParameterI4ivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Int32> params)
      >();
  return glProgramEnvParameterI4ivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParametersI4ivNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params)
/// ```
void glProgramEnvParametersI4ivNv(
  int target,
  int index,
  int count,
  Pointer<Int32> params,
) {
  final glProgramEnvParametersI4ivNvAsFunction = _glProgramEnvParametersI4ivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 count,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int count, Pointer<Int32> params)
      >();
  return glProgramEnvParametersI4ivNvAsFunction(target, index, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameterI4uiNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
void glProgramEnvParameterI4uiNv(
  int target,
  int index,
  int x,
  int y,
  int z,
  int w,
) {
  final glProgramEnvParameterI4uiNvAsFunction = _glProgramEnvParameterI4uiNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 x,
            Uint32 y,
            Uint32 z,
            Uint32 w,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int x, int y, int z, int w)
      >();
  return glProgramEnvParameterI4uiNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParameterI4uivNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params)
/// ```
void glProgramEnvParameterI4uivNv(
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glProgramEnvParameterI4uivNvAsFunction = _glProgramEnvParameterI4uivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Uint32> params)
      >();
  return glProgramEnvParameterI4uivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramEnvParametersI4uivNv;

/// ```c
/// GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params)
/// ```
void glProgramEnvParametersI4uivNv(
  int target,
  int index,
  int count,
  Pointer<Uint32> params,
) {
  final glProgramEnvParametersI4uivNvAsFunction = _glProgramEnvParametersI4uivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 count,
            Pointer<Uint32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int count, Pointer<Uint32> params)
      >();
  return glProgramEnvParametersI4uivNvAsFunction(target, index, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramLocalParameterIivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params)
/// ```
void glGetProgramLocalParameterIivNv(
  int target,
  int index,
  Pointer<Int32> params,
) {
  final glGetProgramLocalParameterIivNvAsFunction =
      _glGetProgramLocalParameterIivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Int32> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Int32> params)
          >();
  return glGetProgramLocalParameterIivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramLocalParameterIuivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params)
/// ```
void glGetProgramLocalParameterIuivNv(
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glGetProgramLocalParameterIuivNvAsFunction =
      _glGetProgramLocalParameterIuivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Uint32> params)
          >();
  return glGetProgramLocalParameterIuivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramEnvParameterIivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params)
/// ```
void glGetProgramEnvParameterIivNv(
  int target,
  int index,
  Pointer<Int32> params,
) {
  final glGetProgramEnvParameterIivNvAsFunction = _glGetProgramEnvParameterIivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int index, Pointer<Int32> params)
      >();
  return glGetProgramEnvParameterIivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramEnvParameterIuivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params)
/// ```
void glGetProgramEnvParameterIuivNv(
  int target,
  int index,
  Pointer<Uint32> params,
) {
  final glGetProgramEnvParameterIuivNvAsFunction =
      _glGetProgramEnvParameterIuivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Uint32> params)
          >();
  return glGetProgramEnvParameterIuivNvAsFunction(target, index, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glProgramSubroutineParametersuivNv;

/// ```c
/// GLAPI void APIENTRY glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint *params)
/// ```
void glProgramSubroutineParametersuivNv(
  int target,
  int count,
  Pointer<Uint32> params,
) {
  final glProgramSubroutineParametersuivNvAsFunction =
      _glProgramSubroutineParametersuivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 count, Pointer<Uint32> params)
            >
          >()
          .asFunction<
            void Function(int target, int count, Pointer<Uint32> params)
          >();
  return glProgramSubroutineParametersuivNvAsFunction(target, count, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetProgramSubroutineParameteruivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint *param)
/// ```
void glGetProgramSubroutineParameteruivNv(
  int target,
  int index,
  Pointer<Uint32> param,
) {
  final glGetProgramSubroutineParameteruivNvAsFunction =
      _glGetProgramSubroutineParameteruivNv
          .cast<
            NativeFunction<
              Void Function(Uint32 target, Uint32 index, Pointer<Uint32> param)
            >
          >()
          .asFunction<
            void Function(int target, int index, Pointer<Uint32> param)
          >();
  return glGetProgramSubroutineParameteruivNvAsFunction(target, index, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2hNv;

/// ```c
/// GLAPI void APIENTRY glVertex2hNV (GLhalfNV x, GLhalfNV y)
/// ```
void glVertex2hNv(int x, int y) {
  final glVertex2hNvAsFunction = _glVertex2hNv
      .cast<NativeFunction<Void Function(Uint16 x, Uint16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glVertex2hNvAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2hvNv;

/// ```c
/// GLAPI void APIENTRY glVertex2hvNV (const GLhalfNV *v)
/// ```
void glVertex2hvNv(Pointer<Uint16> v) {
  final glVertex2hvNvAsFunction = _glVertex2hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glVertex2hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3hNv;

/// ```c
/// GLAPI void APIENTRY glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z)
/// ```
void glVertex3hNv(int x, int y, int z) {
  final glVertex3hNvAsFunction = _glVertex3hNv
      .cast<NativeFunction<Void Function(Uint16 x, Uint16 y, Uint16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glVertex3hNvAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3hvNv;

/// ```c
/// GLAPI void APIENTRY glVertex3hvNV (const GLhalfNV *v)
/// ```
void glVertex3hvNv(Pointer<Uint16> v) {
  final glVertex3hvNvAsFunction = _glVertex3hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glVertex3hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4hNv;

/// ```c
/// GLAPI void APIENTRY glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
/// ```
void glVertex4hNv(int x, int y, int z, int w) {
  final glVertex4hNvAsFunction = _glVertex4hNv
      .cast<
        NativeFunction<Void Function(Uint16 x, Uint16 y, Uint16 z, Uint16 w)>
      >()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glVertex4hNvAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4hvNv;

/// ```c
/// GLAPI void APIENTRY glVertex4hvNV (const GLhalfNV *v)
/// ```
void glVertex4hvNv(Pointer<Uint16> v) {
  final glVertex4hvNvAsFunction = _glVertex4hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glVertex4hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3hNv;

/// ```c
/// GLAPI void APIENTRY glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
/// ```
void glNormal3hNv(int nx, int ny, int nz) {
  final glNormal3hNvAsFunction = _glNormal3hNv
      .cast<NativeFunction<Void Function(Uint16 nx, Uint16 ny, Uint16 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return glNormal3hNvAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3hvNv;

/// ```c
/// GLAPI void APIENTRY glNormal3hvNV (const GLhalfNV *v)
/// ```
void glNormal3hvNv(Pointer<Uint16> v) {
  final glNormal3hvNvAsFunction = _glNormal3hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glNormal3hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3hNv;

/// ```c
/// GLAPI void APIENTRY glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
/// ```
void glColor3hNv(int red, int green, int blue) {
  final glColor3hNvAsFunction = _glColor3hNv
      .cast<
        NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3hNvAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3hvNv;

/// ```c
/// GLAPI void APIENTRY glColor3hvNV (const GLhalfNV *v)
/// ```
void glColor3hvNv(Pointer<Uint16> v) {
  final glColor3hvNvAsFunction = _glColor3hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glColor3hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4hNv;

/// ```c
/// GLAPI void APIENTRY glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
/// ```
void glColor4hNv(int red, int green, int blue, int alpha) {
  final glColor4hNvAsFunction = _glColor4hNv
      .cast<
        NativeFunction<
          Void Function(Uint16 red, Uint16 green, Uint16 blue, Uint16 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4hNvAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4hvNv;

/// ```c
/// GLAPI void APIENTRY glColor4hvNV (const GLhalfNV *v)
/// ```
void glColor4hvNv(Pointer<Uint16> v) {
  final glColor4hvNvAsFunction = _glColor4hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glColor4hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1hNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord1hNV (GLhalfNV s)
/// ```
void glTexCoord1hNv(int s) {
  final glTexCoord1hNvAsFunction = _glTexCoord1hNv
      .cast<NativeFunction<Void Function(Uint16 s)>>()
      .asFunction<void Function(int s)>();
  return glTexCoord1hNvAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1hvNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord1hvNV (const GLhalfNV *v)
/// ```
void glTexCoord1hvNv(Pointer<Uint16> v) {
  final glTexCoord1hvNvAsFunction = _glTexCoord1hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glTexCoord1hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2hNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord2hNV (GLhalfNV s, GLhalfNV t)
/// ```
void glTexCoord2hNv(int s, int t) {
  final glTexCoord2hNvAsFunction = _glTexCoord2hNv
      .cast<NativeFunction<Void Function(Uint16 s, Uint16 t)>>()
      .asFunction<void Function(int s, int t)>();
  return glTexCoord2hNvAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2hvNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord2hvNV (const GLhalfNV *v)
/// ```
void glTexCoord2hvNv(Pointer<Uint16> v) {
  final glTexCoord2hvNvAsFunction = _glTexCoord2hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glTexCoord2hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3hNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r)
/// ```
void glTexCoord3hNv(int s, int t, int r) {
  final glTexCoord3hNvAsFunction = _glTexCoord3hNv
      .cast<NativeFunction<Void Function(Uint16 s, Uint16 t, Uint16 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return glTexCoord3hNvAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3hvNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord3hvNV (const GLhalfNV *v)
/// ```
void glTexCoord3hvNv(Pointer<Uint16> v) {
  final glTexCoord3hvNvAsFunction = _glTexCoord3hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glTexCoord3hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4hNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
/// ```
void glTexCoord4hNv(int s, int t, int r, int q) {
  final glTexCoord4hNvAsFunction = _glTexCoord4hNv
      .cast<
        NativeFunction<Void Function(Uint16 s, Uint16 t, Uint16 r, Uint16 q)>
      >()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return glTexCoord4hNvAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4hvNv;

/// ```c
/// GLAPI void APIENTRY glTexCoord4hvNV (const GLhalfNV *v)
/// ```
void glTexCoord4hvNv(Pointer<Uint16> v) {
  final glTexCoord4hvNvAsFunction = _glTexCoord4hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glTexCoord4hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1hNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s)
/// ```
void glMultiTexCoord1hNv(int target, int s) {
  final glMultiTexCoord1hNvAsFunction = _glMultiTexCoord1hNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return glMultiTexCoord1hNvAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1hvNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v)
/// ```
void glMultiTexCoord1hvNv(int target, Pointer<Uint16> v) {
  final glMultiTexCoord1hvNvAsFunction = _glMultiTexCoord1hvNv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint16> v)>>()
      .asFunction<void Function(int target, Pointer<Uint16> v)>();
  return glMultiTexCoord1hvNvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2hNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t)
/// ```
void glMultiTexCoord2hNv(int target, int s, int t) {
  final glMultiTexCoord2hNvAsFunction = _glMultiTexCoord2hNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint16 s, Uint16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return glMultiTexCoord2hNvAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2hvNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v)
/// ```
void glMultiTexCoord2hvNv(int target, Pointer<Uint16> v) {
  final glMultiTexCoord2hvNvAsFunction = _glMultiTexCoord2hvNv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint16> v)>>()
      .asFunction<void Function(int target, Pointer<Uint16> v)>();
  return glMultiTexCoord2hvNvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3hNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
/// ```
void glMultiTexCoord3hNv(int target, int s, int t, int r) {
  final glMultiTexCoord3hNvAsFunction = _glMultiTexCoord3hNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint16 s, Uint16 t, Uint16 r)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return glMultiTexCoord3hNvAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3hvNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v)
/// ```
void glMultiTexCoord3hvNv(int target, Pointer<Uint16> v) {
  final glMultiTexCoord3hvNvAsFunction = _glMultiTexCoord3hvNv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint16> v)>>()
      .asFunction<void Function(int target, Pointer<Uint16> v)>();
  return glMultiTexCoord3hvNvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4hNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
/// ```
void glMultiTexCoord4hNv(int target, int s, int t, int r, int q) {
  final glMultiTexCoord4hNvAsFunction = _glMultiTexCoord4hNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint16 s, Uint16 t, Uint16 r, Uint16 q)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return glMultiTexCoord4hNvAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4hvNv;

/// ```c
/// GLAPI void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v)
/// ```
void glMultiTexCoord4hvNv(int target, Pointer<Uint16> v) {
  final glMultiTexCoord4hvNvAsFunction = _glMultiTexCoord4hvNv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint16> v)>>()
      .asFunction<void Function(int target, Pointer<Uint16> v)>();
  return glMultiTexCoord4hvNvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordhNv;

/// ```c
/// GLAPI void APIENTRY glFogCoordhNV (GLhalfNV fog)
/// ```
void glFogCoordhNv(int fog) {
  final glFogCoordhNvAsFunction = _glFogCoordhNv
      .cast<NativeFunction<Void Function(Uint16 fog)>>()
      .asFunction<void Function(int fog)>();
  return glFogCoordhNvAsFunction(fog);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordhvNv;

/// ```c
/// GLAPI void APIENTRY glFogCoordhvNV (const GLhalfNV *fog)
/// ```
void glFogCoordhvNv(Pointer<Uint16> fog) {
  final glFogCoordhvNvAsFunction = _glFogCoordhvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> fog)>>()
      .asFunction<void Function(Pointer<Uint16> fog)>();
  return glFogCoordhvNvAsFunction(fog);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3hNv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
/// ```
void glSecondaryColor3hNv(int red, int green, int blue) {
  final glSecondaryColor3hNvAsFunction = _glSecondaryColor3hNv
      .cast<
        NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glSecondaryColor3hNvAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColor3hvNv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColor3hvNV (const GLhalfNV *v)
/// ```
void glSecondaryColor3hvNv(Pointer<Uint16> v) {
  final glSecondaryColor3hvNvAsFunction = _glSecondaryColor3hvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glSecondaryColor3hvNvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexWeighthNv;

/// ```c
/// GLAPI void APIENTRY glVertexWeighthNV (GLhalfNV weight)
/// ```
void glVertexWeighthNv(int weight) {
  final glVertexWeighthNvAsFunction = _glVertexWeighthNv
      .cast<NativeFunction<Void Function(Uint16 weight)>>()
      .asFunction<void Function(int weight)>();
  return glVertexWeighthNvAsFunction(weight);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexWeighthvNv;

/// ```c
/// GLAPI void APIENTRY glVertexWeighthvNV (const GLhalfNV *weight)
/// ```
void glVertexWeighthvNv(Pointer<Uint16> weight) {
  final glVertexWeighthvNvAsFunction = _glVertexWeighthvNv
      .cast<NativeFunction<Void Function(Pointer<Uint16> weight)>>()
      .asFunction<void Function(Pointer<Uint16> weight)>();
  return glVertexWeighthvNvAsFunction(weight);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1hNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1hNV (GLuint index, GLhalfNV x)
/// ```
void glVertexAttrib1hNv(int index, int x) {
  final glVertexAttrib1hNvAsFunction = _glVertexAttrib1hNv
      .cast<NativeFunction<Void Function(Uint32 index, Uint16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttrib1hNvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v)
/// ```
void glVertexAttrib1hvNv(int index, Pointer<Uint16> v) {
  final glVertexAttrib1hvNvAsFunction = _glVertexAttrib1hvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib1hvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2hNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y)
/// ```
void glVertexAttrib2hNv(int index, int x, int y) {
  final glVertexAttrib2hNvAsFunction = _glVertexAttrib2hNv
      .cast<NativeFunction<Void Function(Uint32 index, Uint16 x, Uint16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttrib2hNvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v)
/// ```
void glVertexAttrib2hvNv(int index, Pointer<Uint16> v) {
  final glVertexAttrib2hvNvAsFunction = _glVertexAttrib2hvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib2hvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3hNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
/// ```
void glVertexAttrib3hNv(int index, int x, int y, int z) {
  final glVertexAttrib3hNvAsFunction = _glVertexAttrib3hNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint16 x, Uint16 y, Uint16 z)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttrib3hNvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v)
/// ```
void glVertexAttrib3hvNv(int index, Pointer<Uint16> v) {
  final glVertexAttrib3hvNvAsFunction = _glVertexAttrib3hvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib3hvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4hNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
/// ```
void glVertexAttrib4hNv(int index, int x, int y, int z, int w) {
  final glVertexAttrib4hNvAsFunction = _glVertexAttrib4hNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint16 x, Uint16 y, Uint16 z, Uint16 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4hNvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v)
/// ```
void glVertexAttrib4hvNv(int index, Pointer<Uint16> v) {
  final glVertexAttrib4hvNvAsFunction = _glVertexAttrib4hvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16> v)>>()
      .asFunction<void Function(int index, Pointer<Uint16> v)>();
  return glVertexAttrib4hvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs1hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV *v)
/// ```
void glVertexAttribs1hvNv(int index, int n, Pointer<Uint16> v) {
  final glVertexAttribs1hvNvAsFunction = _glVertexAttribs1hvNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v)>
      >()
      .asFunction<void Function(int index, int n, Pointer<Uint16> v)>();
  return glVertexAttribs1hvNvAsFunction(index, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs2hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV *v)
/// ```
void glVertexAttribs2hvNv(int index, int n, Pointer<Uint16> v) {
  final glVertexAttribs2hvNvAsFunction = _glVertexAttribs2hvNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v)>
      >()
      .asFunction<void Function(int index, int n, Pointer<Uint16> v)>();
  return glVertexAttribs2hvNvAsFunction(index, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs3hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV *v)
/// ```
void glVertexAttribs3hvNv(int index, int n, Pointer<Uint16> v) {
  final glVertexAttribs3hvNvAsFunction = _glVertexAttribs3hvNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v)>
      >()
      .asFunction<void Function(int index, int n, Pointer<Uint16> v)>();
  return glVertexAttribs3hvNvAsFunction(index, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs4hvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV *v)
/// ```
void glVertexAttribs4hvNv(int index, int n, Pointer<Uint16> v) {
  final glVertexAttribs4hvNvAsFunction = _glVertexAttribs4hvNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v)>
      >()
      .asFunction<void Function(int index, int n, Pointer<Uint16> v)>();
  return glVertexAttribs4hvNvAsFunction(index, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInternalformatSampleivNv;

/// ```c
/// GLAPI void APIENTRY glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params)
/// ```
void glGetInternalformatSampleivNv(
  int target,
  int internalformat,
  int samples,
  int pname,
  int count,
  Pointer<Int32> params,
) {
  final glGetInternalformatSampleivNvAsFunction = _glGetInternalformatSampleivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 samples,
            Uint32 pname,
            Uint32 count,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int samples,
          int pname,
          int count,
          Pointer<Int32> params,
        )
      >();
  return glGetInternalformatSampleivNvAsFunction(
    target,
    internalformat,
    samples,
    pname,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetMemoryObjectDetachedResourcesuivNv;

/// ```c
/// GLAPI void APIENTRY glGetMemoryObjectDetachedResourcesuivNV (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params)
/// ```
void glGetMemoryObjectDetachedResourcesuivNv(
  int memory,
  int pname,
  int first,
  int count,
  Pointer<Uint32> params,
) {
  final glGetMemoryObjectDetachedResourcesuivNvAsFunction =
      _glGetMemoryObjectDetachedResourcesuivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 memory,
                Uint32 pname,
                Int32 first,
                Uint32 count,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int memory,
              int pname,
              int first,
              int count,
              Pointer<Uint32> params,
            )
          >();
  return glGetMemoryObjectDetachedResourcesuivNvAsFunction(
    memory,
    pname,
    first,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResetMemoryObjectParameterNv;

/// ```c
/// GLAPI void APIENTRY glResetMemoryObjectParameterNV (GLuint memory, GLenum pname)
/// ```
void glResetMemoryObjectParameterNv(int memory, int pname) {
  final glResetMemoryObjectParameterNvAsFunction =
      _glResetMemoryObjectParameterNv
          .cast<NativeFunction<Void Function(Uint32 memory, Uint32 pname)>>()
          .asFunction<void Function(int memory, int pname)>();
  return glResetMemoryObjectParameterNvAsFunction(memory, pname);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexAttachMemoryNv;

/// ```c
/// GLAPI void APIENTRY glTexAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset)
/// ```
void glTexAttachMemoryNv(int target, int memory, int offset) {
  final glTexAttachMemoryNvAsFunction = _glTexAttachMemoryNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 memory, Uint64 offset)
        >
      >()
      .asFunction<void Function(int target, int memory, int offset)>();
  return glTexAttachMemoryNvAsFunction(target, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferAttachMemoryNv;

/// ```c
/// GLAPI void APIENTRY glBufferAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset)
/// ```
void glBufferAttachMemoryNv(int target, int memory, int offset) {
  final glBufferAttachMemoryNvAsFunction = _glBufferAttachMemoryNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 memory, Uint64 offset)
        >
      >()
      .asFunction<void Function(int target, int memory, int offset)>();
  return glBufferAttachMemoryNvAsFunction(target, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureAttachMemoryNv;

/// ```c
/// GLAPI void APIENTRY glTextureAttachMemoryNV (GLuint texture, GLuint memory, GLuint64 offset)
/// ```
void glTextureAttachMemoryNv(int texture, int memory, int offset) {
  final glTextureAttachMemoryNvAsFunction = _glTextureAttachMemoryNv
      .cast<
        NativeFunction<
          Void Function(Uint32 texture, Uint32 memory, Uint64 offset)
        >
      >()
      .asFunction<void Function(int texture, int memory, int offset)>();
  return glTextureAttachMemoryNvAsFunction(texture, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferAttachMemoryNv;

/// ```c
/// GLAPI void APIENTRY glNamedBufferAttachMemoryNV (GLuint buffer, GLuint memory, GLuint64 offset)
/// ```
void glNamedBufferAttachMemoryNv(int buffer, int memory, int offset) {
  final glNamedBufferAttachMemoryNvAsFunction = _glNamedBufferAttachMemoryNv
      .cast<
        NativeFunction<
          Void Function(Uint32 buffer, Uint32 memory, Uint64 offset)
        >
      >()
      .asFunction<void Function(int buffer, int memory, int offset)>();
  return glNamedBufferAttachMemoryNvAsFunction(buffer, memory, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferPageCommitmentMemNv;

/// ```c
/// GLAPI void APIENTRY glBufferPageCommitmentMemNV (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
/// ```
void glBufferPageCommitmentMemNv(
  int target,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int memory,
  int memOffset,
  int commit,
) {
  final glBufferPageCommitmentMemNvAsFunction = _glBufferPageCommitmentMemNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
            Uint32 memory,
            Uint64 memOffset,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
          int memory,
          int memOffset,
          int commit,
        )
      >();
  return glBufferPageCommitmentMemNvAsFunction(
    target,
    offset,
    size,
    memory,
    memOffset,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexPageCommitmentMemNv;

/// ```c
/// GLAPI void APIENTRY glTexPageCommitmentMemNV (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)
/// ```
void glTexPageCommitmentMemNv(
  int target,
  int layer,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int memory,
  int offset,
  int commit,
) {
  final glTexPageCommitmentMemNvAsFunction = _glTexPageCommitmentMemNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 layer,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 memory,
            Uint64 offset,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int layer,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int memory,
          int offset,
          int commit,
        )
      >();
  return glTexPageCommitmentMemNvAsFunction(
    target,
    layer,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    memory,
    offset,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNamedBufferPageCommitmentMemNv;

/// ```c
/// GLAPI void APIENTRY glNamedBufferPageCommitmentMemNV (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
/// ```
void glNamedBufferPageCommitmentMemNv(
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
  int memory,
  int memOffset,
  int commit,
) {
  final glNamedBufferPageCommitmentMemNvAsFunction =
      _glNamedBufferPageCommitmentMemNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 buffer,
                Pointer<NativeType> offset,
                Pointer<Uint32> size,
                Uint32 memory,
                Uint64 memOffset,
                Int32 commit,
              )
            >
          >()
          .asFunction<
            void Function(
              int buffer,
              Pointer<NativeType> offset,
              Pointer<Uint32> size,
              int memory,
              int memOffset,
              int commit,
            )
          >();
  return glNamedBufferPageCommitmentMemNvAsFunction(
    buffer,
    offset,
    size,
    memory,
    memOffset,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexturePageCommitmentMemNv;

/// ```c
/// GLAPI void APIENTRY glTexturePageCommitmentMemNV (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)
/// ```
void glTexturePageCommitmentMemNv(
  int texture,
  int layer,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int memory,
  int offset,
  int commit,
) {
  final glTexturePageCommitmentMemNvAsFunction = _glTexturePageCommitmentMemNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Int32 layer,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 memory,
            Uint64 offset,
            Int32 commit,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int layer,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int memory,
          int offset,
          int commit,
        )
      >();
  return glTexturePageCommitmentMemNvAsFunction(
    texture,
    layer,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    memory,
    offset,
    commit,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawMeshTasksNv;

/// ```c
/// GLAPI void APIENTRY glDrawMeshTasksNV (GLuint first, GLuint count)
/// ```
void glDrawMeshTasksNv(int first, int count) {
  final glDrawMeshTasksNvAsFunction = _glDrawMeshTasksNv
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count)>>()
      .asFunction<void Function(int first, int count)>();
  return glDrawMeshTasksNvAsFunction(first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawMeshTasksIndirectNv;

/// ```c
/// GLAPI void APIENTRY glDrawMeshTasksIndirectNV (GLintptr indirect)
/// ```
void glDrawMeshTasksIndirectNv(Pointer<NativeType> indirect) {
  final glDrawMeshTasksIndirectNvAsFunction = _glDrawMeshTasksIndirectNv
      .cast<NativeFunction<Void Function(Pointer<NativeType> indirect)>>()
      .asFunction<void Function(Pointer<NativeType> indirect)>();
  return glDrawMeshTasksIndirectNvAsFunction(indirect);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiDrawMeshTasksIndirectNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawMeshTasksIndirectNV (GLintptr indirect, GLsizei drawcount, GLsizei stride)
/// ```
void glMultiDrawMeshTasksIndirectNv(
  Pointer<NativeType> indirect,
  int drawcount,
  int stride,
) {
  final glMultiDrawMeshTasksIndirectNvAsFunction =
      _glMultiDrawMeshTasksIndirectNv
          .cast<
            NativeFunction<
              Void Function(
                Pointer<NativeType> indirect,
                Uint32 drawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<NativeType> indirect,
              int drawcount,
              int stride,
            )
          >();
  return glMultiDrawMeshTasksIndirectNvAsFunction(indirect, drawcount, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glMultiDrawMeshTasksIndirectCountNv;

/// ```c
/// GLAPI void APIENTRY glMultiDrawMeshTasksIndirectCountNV (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
void glMultiDrawMeshTasksIndirectCountNv(
  Pointer<NativeType> indirect,
  Pointer<NativeType> drawcount,
  int maxdrawcount,
  int stride,
) {
  final glMultiDrawMeshTasksIndirectCountNvAsFunction =
      _glMultiDrawMeshTasksIndirectCountNv
          .cast<
            NativeFunction<
              Void Function(
                Pointer<NativeType> indirect,
                Pointer<NativeType> drawcount,
                Uint32 maxdrawcount,
                Uint32 stride,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<NativeType> indirect,
              Pointer<NativeType> drawcount,
              int maxdrawcount,
              int stride,
            )
          >();
  return glMultiDrawMeshTasksIndirectCountNvAsFunction(
    indirect,
    drawcount,
    maxdrawcount,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenOcclusionQueriesNv;

/// ```c
/// GLAPI void APIENTRY glGenOcclusionQueriesNV (GLsizei n, GLuint *ids)
/// ```
void glGenOcclusionQueriesNv(int n, Pointer<Uint32> ids) {
  final glGenOcclusionQueriesNvAsFunction = _glGenOcclusionQueriesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glGenOcclusionQueriesNvAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteOcclusionQueriesNv;

/// ```c
/// GLAPI void APIENTRY glDeleteOcclusionQueriesNV (GLsizei n, const GLuint *ids)
/// ```
void glDeleteOcclusionQueriesNv(int n, Pointer<Uint32> ids) {
  final glDeleteOcclusionQueriesNvAsFunction = _glDeleteOcclusionQueriesNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glDeleteOcclusionQueriesNvAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsOcclusionQueryNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsOcclusionQueryNV (GLuint id)
/// ```
int glIsOcclusionQueryNv(int id) {
  final glIsOcclusionQueryNvAsFunction = _glIsOcclusionQueryNv
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsOcclusionQueryNvAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginOcclusionQueryNv;

/// ```c
/// GLAPI void APIENTRY glBeginOcclusionQueryNV (GLuint id)
/// ```
void glBeginOcclusionQueryNv(int id) {
  final glBeginOcclusionQueryNvAsFunction = _glBeginOcclusionQueryNv
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return glBeginOcclusionQueryNvAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndOcclusionQueryNv;

/// ```c
/// GLAPI void APIENTRY glEndOcclusionQueryNV (void)
/// ```
void glEndOcclusionQueryNv() {
  final glEndOcclusionQueryNvAsFunction = _glEndOcclusionQueryNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndOcclusionQueryNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetOcclusionQueryivNv;

/// ```c
/// GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params)
/// ```
void glGetOcclusionQueryivNv(int id, int pname, Pointer<Int32> params) {
  final glGetOcclusionQueryivNvAsFunction = _glGetOcclusionQueryivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int32> params)>();
  return glGetOcclusionQueryivNvAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetOcclusionQueryuivNv;

/// ```c
/// GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params)
/// ```
void glGetOcclusionQueryuivNv(int id, int pname, Pointer<Uint32> params) {
  final glGetOcclusionQueryuivNvAsFunction = _glGetOcclusionQueryuivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint32> params)>();
  return glGetOcclusionQueryuivNvAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramBufferParametersfvNv;

/// ```c
/// GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params)
/// ```
void glProgramBufferParametersfvNv(
  int target,
  int bindingIndex,
  int wordIndex,
  int count,
  Pointer<Float> params,
) {
  final glProgramBufferParametersfvNvAsFunction = _glProgramBufferParametersfvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 bindingIndex,
            Uint32 wordIndex,
            Uint32 count,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int bindingIndex,
          int wordIndex,
          int count,
          Pointer<Float> params,
        )
      >();
  return glProgramBufferParametersfvNvAsFunction(
    target,
    bindingIndex,
    wordIndex,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramBufferParametersIivNv;

/// ```c
/// GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params)
/// ```
void glProgramBufferParametersIivNv(
  int target,
  int bindingIndex,
  int wordIndex,
  int count,
  Pointer<Int32> params,
) {
  final glProgramBufferParametersIivNvAsFunction =
      _glProgramBufferParametersIivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 bindingIndex,
                Uint32 wordIndex,
                Uint32 count,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int bindingIndex,
              int wordIndex,
              int count,
              Pointer<Int32> params,
            )
          >();
  return glProgramBufferParametersIivNvAsFunction(
    target,
    bindingIndex,
    wordIndex,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramBufferParametersIuivNv;

/// ```c
/// GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params)
/// ```
void glProgramBufferParametersIuivNv(
  int target,
  int bindingIndex,
  int wordIndex,
  int count,
  Pointer<Uint32> params,
) {
  final glProgramBufferParametersIuivNvAsFunction =
      _glProgramBufferParametersIuivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 bindingIndex,
                Uint32 wordIndex,
                Uint32 count,
                Pointer<Uint32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int bindingIndex,
              int wordIndex,
              int count,
              Pointer<Uint32> params,
            )
          >();
  return glProgramBufferParametersIuivNvAsFunction(
    target,
    bindingIndex,
    wordIndex,
    count,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenPathsNv;

/// ```c
/// GLAPI GLuint APIENTRY glGenPathsNV (GLsizei range)
/// ```
int glGenPathsNv(int range) {
  final glGenPathsNvAsFunction = _glGenPathsNv
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return glGenPathsNvAsFunction(range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeletePathsNv;

/// ```c
/// GLAPI void APIENTRY glDeletePathsNV (GLuint path, GLsizei range)
/// ```
void glDeletePathsNv(int path, int range) {
  final glDeletePathsNvAsFunction = _glDeletePathsNv
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 range)>>()
      .asFunction<void Function(int path, int range)>();
  return glDeletePathsNvAsFunction(path, range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsPathNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsPathNV (GLuint path)
/// ```
int glIsPathNv(int path) {
  final glIsPathNvAsFunction = _glIsPathNv
      .cast<NativeFunction<Int32 Function(Uint32 path)>>()
      .asFunction<int Function(int path)>();
  return glIsPathNvAsFunction(path);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathCommandsNv;

/// ```c
/// GLAPI void APIENTRY glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
void glPathCommandsNv(
  int path,
  int numCommands,
  Pointer<Uint8> commands,
  int numCoords,
  int coordType,
  Pointer<NativeType> coords,
) {
  final glPathCommandsNvAsFunction = _glPathCommandsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 numCommands,
            Pointer<Uint8> commands,
            Uint32 numCoords,
            Uint32 coordType,
            Pointer<NativeType> coords,
          )
        >
      >()
      .asFunction<
        void Function(
          int path,
          int numCommands,
          Pointer<Uint8> commands,
          int numCoords,
          int coordType,
          Pointer<NativeType> coords,
        )
      >();
  return glPathCommandsNvAsFunction(
    path,
    numCommands,
    commands,
    numCoords,
    coordType,
    coords,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathCoordsNv;

/// ```c
/// GLAPI void APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
void glPathCoordsNv(
  int path,
  int numCoords,
  int coordType,
  Pointer<NativeType> coords,
) {
  final glPathCoordsNvAsFunction = _glPathCoordsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 numCoords,
            Uint32 coordType,
            Pointer<NativeType> coords,
          )
        >
      >()
      .asFunction<
        void Function(
          int path,
          int numCoords,
          int coordType,
          Pointer<NativeType> coords,
        )
      >();
  return glPathCoordsNvAsFunction(path, numCoords, coordType, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathSubCommandsNv;

/// ```c
/// GLAPI void APIENTRY glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
void glPathSubCommandsNv(
  int path,
  int commandStart,
  int commandsToDelete,
  int numCommands,
  Pointer<Uint8> commands,
  int numCoords,
  int coordType,
  Pointer<NativeType> coords,
) {
  final glPathSubCommandsNvAsFunction = _glPathSubCommandsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 commandStart,
            Uint32 commandsToDelete,
            Uint32 numCommands,
            Pointer<Uint8> commands,
            Uint32 numCoords,
            Uint32 coordType,
            Pointer<NativeType> coords,
          )
        >
      >()
      .asFunction<
        void Function(
          int path,
          int commandStart,
          int commandsToDelete,
          int numCommands,
          Pointer<Uint8> commands,
          int numCoords,
          int coordType,
          Pointer<NativeType> coords,
        )
      >();
  return glPathSubCommandsNvAsFunction(
    path,
    commandStart,
    commandsToDelete,
    numCommands,
    commands,
    numCoords,
    coordType,
    coords,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathSubCoordsNv;

/// ```c
/// GLAPI void APIENTRY glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
void glPathSubCoordsNv(
  int path,
  int coordStart,
  int numCoords,
  int coordType,
  Pointer<NativeType> coords,
) {
  final glPathSubCoordsNvAsFunction = _glPathSubCoordsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 coordStart,
            Uint32 numCoords,
            Uint32 coordType,
            Pointer<NativeType> coords,
          )
        >
      >()
      .asFunction<
        void Function(
          int path,
          int coordStart,
          int numCoords,
          int coordType,
          Pointer<NativeType> coords,
        )
      >();
  return glPathSubCoordsNvAsFunction(
    path,
    coordStart,
    numCoords,
    coordType,
    coords,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathStringNv;

/// ```c
/// GLAPI void APIENTRY glPathStringNV (GLuint path, GLenum format, GLsizei length, const void *pathString)
/// ```
void glPathStringNv(
  int path,
  int format,
  int length,
  Pointer<NativeType> pathString,
) {
  final glPathStringNvAsFunction = _glPathStringNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 format,
            Uint32 length,
            Pointer<NativeType> pathString,
          )
        >
      >()
      .asFunction<
        void Function(
          int path,
          int format,
          int length,
          Pointer<NativeType> pathString,
        )
      >();
  return glPathStringNvAsFunction(path, format, length, pathString);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathGlyphsNv;

/// ```c
/// GLAPI void APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
void glPathGlyphsNv(
  int firstPathName,
  int fontTarget,
  Pointer<NativeType> fontName,
  int fontStyle,
  int numGlyphs,
  int type,
  Pointer<NativeType> charcodes,
  int handleMissingGlyphs,
  int pathParameterTemplate,
  double emScale,
) {
  final glPathGlyphsNvAsFunction = _glPathGlyphsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 firstPathName,
            Uint32 fontTarget,
            Pointer<NativeType> fontName,
            Uint32 fontStyle,
            Uint32 numGlyphs,
            Uint32 type,
            Pointer<NativeType> charcodes,
            Uint32 handleMissingGlyphs,
            Uint32 pathParameterTemplate,
            Float emScale,
          )
        >
      >()
      .asFunction<
        void Function(
          int firstPathName,
          int fontTarget,
          Pointer<NativeType> fontName,
          int fontStyle,
          int numGlyphs,
          int type,
          Pointer<NativeType> charcodes,
          int handleMissingGlyphs,
          int pathParameterTemplate,
          double emScale,
        )
      >();
  return glPathGlyphsNvAsFunction(
    firstPathName,
    fontTarget,
    fontName,
    fontStyle,
    numGlyphs,
    type,
    charcodes,
    handleMissingGlyphs,
    pathParameterTemplate,
    emScale,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathGlyphRangeNv;

/// ```c
/// GLAPI void APIENTRY glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
void glPathGlyphRangeNv(
  int firstPathName,
  int fontTarget,
  Pointer<NativeType> fontName,
  int fontStyle,
  int firstGlyph,
  int numGlyphs,
  int handleMissingGlyphs,
  int pathParameterTemplate,
  double emScale,
) {
  final glPathGlyphRangeNvAsFunction = _glPathGlyphRangeNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 firstPathName,
            Uint32 fontTarget,
            Pointer<NativeType> fontName,
            Uint32 fontStyle,
            Uint32 firstGlyph,
            Uint32 numGlyphs,
            Uint32 handleMissingGlyphs,
            Uint32 pathParameterTemplate,
            Float emScale,
          )
        >
      >()
      .asFunction<
        void Function(
          int firstPathName,
          int fontTarget,
          Pointer<NativeType> fontName,
          int fontStyle,
          int firstGlyph,
          int numGlyphs,
          int handleMissingGlyphs,
          int pathParameterTemplate,
          double emScale,
        )
      >();
  return glPathGlyphRangeNvAsFunction(
    firstPathName,
    fontTarget,
    fontName,
    fontStyle,
    firstGlyph,
    numGlyphs,
    handleMissingGlyphs,
    pathParameterTemplate,
    emScale,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glWeightPathsNv;

/// ```c
/// GLAPI void APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
/// ```
void glWeightPathsNv(
  int resultPath,
  int numPaths,
  Pointer<Uint32> paths,
  Pointer<Float> weights,
) {
  final glWeightPathsNvAsFunction = _glWeightPathsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 resultPath,
            Uint32 numPaths,
            Pointer<Uint32> paths,
            Pointer<Float> weights,
          )
        >
      >()
      .asFunction<
        void Function(
          int resultPath,
          int numPaths,
          Pointer<Uint32> paths,
          Pointer<Float> weights,
        )
      >();
  return glWeightPathsNvAsFunction(resultPath, numPaths, paths, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyPathNv;

/// ```c
/// GLAPI void APIENTRY glCopyPathNV (GLuint resultPath, GLuint srcPath)
/// ```
void glCopyPathNv(int resultPath, int srcPath) {
  final glCopyPathNvAsFunction = _glCopyPathNv
      .cast<NativeFunction<Void Function(Uint32 resultPath, Uint32 srcPath)>>()
      .asFunction<void Function(int resultPath, int srcPath)>();
  return glCopyPathNvAsFunction(resultPath, srcPath);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInterpolatePathsNv;

/// ```c
/// GLAPI void APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
/// ```
void glInterpolatePathsNv(int resultPath, int pathA, int pathB, double weight) {
  final glInterpolatePathsNvAsFunction = _glInterpolatePathsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 resultPath,
            Uint32 pathA,
            Uint32 pathB,
            Float weight,
          )
        >
      >()
      .asFunction<
        void Function(int resultPath, int pathA, int pathB, double weight)
      >();
  return glInterpolatePathsNvAsFunction(resultPath, pathA, pathB, weight);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformPathNv;

/// ```c
/// GLAPI void APIENTRY glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
/// ```
void glTransformPathNv(
  int resultPath,
  int srcPath,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glTransformPathNvAsFunction = _glTransformPathNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 resultPath,
            Uint32 srcPath,
            Uint32 transformType,
            Pointer<Float> transformValues,
          )
        >
      >()
      .asFunction<
        void Function(
          int resultPath,
          int srcPath,
          int transformType,
          Pointer<Float> transformValues,
        )
      >();
  return glTransformPathNvAsFunction(
    resultPath,
    srcPath,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathParameterivNv;

/// ```c
/// GLAPI void APIENTRY glPathParameterivNV (GLuint path, GLenum pname, const GLint *value)
/// ```
void glPathParameterivNv(int path, int pname, Pointer<Int32> value) {
  final glPathParameterivNvAsFunction = _glPathParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 path, Uint32 pname, Pointer<Int32> value)
        >
      >()
      .asFunction<void Function(int path, int pname, Pointer<Int32> value)>();
  return glPathParameterivNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathParameteriNv;

/// ```c
/// GLAPI void APIENTRY glPathParameteriNV (GLuint path, GLenum pname, GLint value)
/// ```
void glPathParameteriNv(int path, int pname, int value) {
  final glPathParameteriNvAsFunction = _glPathParameteriNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Uint32 pname, Int32 value)>
      >()
      .asFunction<void Function(int path, int pname, int value)>();
  return glPathParameteriNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat *value)
/// ```
void glPathParameterfvNv(int path, int pname, Pointer<Float> value) {
  final glPathParameterfvNvAsFunction = _glPathParameterfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 path, Uint32 pname, Pointer<Float> value)
        >
      >()
      .asFunction<void Function(int path, int pname, Pointer<Float> value)>();
  return glPathParameterfvNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathParameterfNv;

/// ```c
/// GLAPI void APIENTRY glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
/// ```
void glPathParameterfNv(int path, int pname, double value) {
  final glPathParameterfNvAsFunction = _glPathParameterfNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Uint32 pname, Float value)>
      >()
      .asFunction<void Function(int path, int pname, double value)>();
  return glPathParameterfNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathDashArrayNv;

/// ```c
/// GLAPI void APIENTRY glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat *dashArray)
/// ```
void glPathDashArrayNv(int path, int dashCount, Pointer<Float> dashArray) {
  final glPathDashArrayNvAsFunction = _glPathDashArrayNv
      .cast<
        NativeFunction<
          Void Function(Uint32 path, Uint32 dashCount, Pointer<Float> dashArray)
        >
      >()
      .asFunction<
        void Function(int path, int dashCount, Pointer<Float> dashArray)
      >();
  return glPathDashArrayNvAsFunction(path, dashCount, dashArray);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathStencilFuncNv;

/// ```c
/// GLAPI void APIENTRY glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
/// ```
void glPathStencilFuncNv(int func, int ref, int mask) {
  final glPathStencilFuncNvAsFunction = _glPathStencilFuncNv
      .cast<
        NativeFunction<Void Function(Uint32 func, Int32 ref, Uint32 mask)>
      >()
      .asFunction<void Function(int func, int ref, int mask)>();
  return glPathStencilFuncNvAsFunction(func, ref, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathStencilDepthOffsetNv;

/// ```c
/// GLAPI void APIENTRY glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
/// ```
void glPathStencilDepthOffsetNv(double factor, double units) {
  final glPathStencilDepthOffsetNvAsFunction = _glPathStencilDepthOffsetNv
      .cast<NativeFunction<Void Function(Float factor, Float units)>>()
      .asFunction<void Function(double factor, double units)>();
  return glPathStencilDepthOffsetNvAsFunction(factor, units);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilFillPathNv;

/// ```c
/// GLAPI void APIENTRY glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
/// ```
void glStencilFillPathNv(int path, int fillMode, int mask) {
  final glStencilFillPathNvAsFunction = _glStencilFillPathNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Uint32 fillMode, Uint32 mask)>
      >()
      .asFunction<void Function(int path, int fillMode, int mask)>();
  return glStencilFillPathNvAsFunction(path, fillMode, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilStrokePathNv;

/// ```c
/// GLAPI void APIENTRY glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
/// ```
void glStencilStrokePathNv(int path, int reference, int mask) {
  final glStencilStrokePathNvAsFunction = _glStencilStrokePathNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Int32 reference, Uint32 mask)>
      >()
      .asFunction<void Function(int path, int reference, int mask)>();
  return glStencilStrokePathNvAsFunction(path, reference, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilFillPathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
/// ```
void glStencilFillPathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int fillMode,
  int mask,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glStencilFillPathInstancedNvAsFunction = _glStencilFillPathInstancedNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numPaths,
            Uint32 pathNameType,
            Pointer<NativeType> paths,
            Uint32 pathBase,
            Uint32 fillMode,
            Uint32 mask,
            Uint32 transformType,
            Pointer<Float> transformValues,
          )
        >
      >()
      .asFunction<
        void Function(
          int numPaths,
          int pathNameType,
          Pointer<NativeType> paths,
          int pathBase,
          int fillMode,
          int mask,
          int transformType,
          Pointer<Float> transformValues,
        )
      >();
  return glStencilFillPathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    fillMode,
    mask,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilStrokePathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
/// ```
void glStencilStrokePathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int reference,
  int mask,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glStencilStrokePathInstancedNvAsFunction =
      _glStencilStrokePathInstancedNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 numPaths,
                Uint32 pathNameType,
                Pointer<NativeType> paths,
                Uint32 pathBase,
                Int32 reference,
                Uint32 mask,
                Uint32 transformType,
                Pointer<Float> transformValues,
              )
            >
          >()
          .asFunction<
            void Function(
              int numPaths,
              int pathNameType,
              Pointer<NativeType> paths,
              int pathBase,
              int reference,
              int mask,
              int transformType,
              Pointer<Float> transformValues,
            )
          >();
  return glStencilStrokePathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    reference,
    mask,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathCoverDepthFuncNv;

/// ```c
/// GLAPI void APIENTRY glPathCoverDepthFuncNV (GLenum func)
/// ```
void glPathCoverDepthFuncNv(int func) {
  final glPathCoverDepthFuncNvAsFunction = _glPathCoverDepthFuncNv
      .cast<NativeFunction<Void Function(Uint32 func)>>()
      .asFunction<void Function(int func)>();
  return glPathCoverDepthFuncNvAsFunction(func);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverFillPathNv;

/// ```c
/// GLAPI void APIENTRY glCoverFillPathNV (GLuint path, GLenum coverMode)
/// ```
void glCoverFillPathNv(int path, int coverMode) {
  final glCoverFillPathNvAsFunction = _glCoverFillPathNv
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int coverMode)>();
  return glCoverFillPathNvAsFunction(path, coverMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverStrokePathNv;

/// ```c
/// GLAPI void APIENTRY glCoverStrokePathNV (GLuint path, GLenum coverMode)
/// ```
void glCoverStrokePathNv(int path, int coverMode) {
  final glCoverStrokePathNvAsFunction = _glCoverStrokePathNv
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int coverMode)>();
  return glCoverStrokePathNvAsFunction(path, coverMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverFillPathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
void glCoverFillPathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int coverMode,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glCoverFillPathInstancedNvAsFunction = _glCoverFillPathInstancedNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numPaths,
            Uint32 pathNameType,
            Pointer<NativeType> paths,
            Uint32 pathBase,
            Uint32 coverMode,
            Uint32 transformType,
            Pointer<Float> transformValues,
          )
        >
      >()
      .asFunction<
        void Function(
          int numPaths,
          int pathNameType,
          Pointer<NativeType> paths,
          int pathBase,
          int coverMode,
          int transformType,
          Pointer<Float> transformValues,
        )
      >();
  return glCoverFillPathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    coverMode,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCoverStrokePathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
void glCoverStrokePathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int coverMode,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glCoverStrokePathInstancedNvAsFunction = _glCoverStrokePathInstancedNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numPaths,
            Uint32 pathNameType,
            Pointer<NativeType> paths,
            Uint32 pathBase,
            Uint32 coverMode,
            Uint32 transformType,
            Pointer<Float> transformValues,
          )
        >
      >()
      .asFunction<
        void Function(
          int numPaths,
          int pathNameType,
          Pointer<NativeType> paths,
          int pathBase,
          int coverMode,
          int transformType,
          Pointer<Float> transformValues,
        )
      >();
  return glCoverStrokePathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    coverMode,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetPathParameterivNV (GLuint path, GLenum pname, GLint *value)
/// ```
void glGetPathParameterivNv(int path, int pname, Pointer<Int32> value) {
  final glGetPathParameterivNvAsFunction = _glGetPathParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 path, Uint32 pname, Pointer<Int32> value)
        >
      >()
      .asFunction<void Function(int path, int pname, Pointer<Int32> value)>();
  return glGetPathParameterivNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat *value)
/// ```
void glGetPathParameterfvNv(int path, int pname, Pointer<Float> value) {
  final glGetPathParameterfvNvAsFunction = _glGetPathParameterfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 path, Uint32 pname, Pointer<Float> value)
        >
      >()
      .asFunction<void Function(int path, int pname, Pointer<Float> value)>();
  return glGetPathParameterfvNvAsFunction(path, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathCommandsNv;

/// ```c
/// GLAPI void APIENTRY glGetPathCommandsNV (GLuint path, GLubyte *commands)
/// ```
void glGetPathCommandsNv(int path, Pointer<Uint8> commands) {
  final glGetPathCommandsNvAsFunction = _glGetPathCommandsNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Pointer<Uint8> commands)>
      >()
      .asFunction<void Function(int path, Pointer<Uint8> commands)>();
  return glGetPathCommandsNvAsFunction(path, commands);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathCoordsNv;

/// ```c
/// GLAPI void APIENTRY glGetPathCoordsNV (GLuint path, GLfloat *coords)
/// ```
void glGetPathCoordsNv(int path, Pointer<Float> coords) {
  final glGetPathCoordsNvAsFunction = _glGetPathCoordsNv
      .cast<NativeFunction<Void Function(Uint32 path, Pointer<Float> coords)>>()
      .asFunction<void Function(int path, Pointer<Float> coords)>();
  return glGetPathCoordsNvAsFunction(path, coords);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathDashArrayNv;

/// ```c
/// GLAPI void APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat *dashArray)
/// ```
void glGetPathDashArrayNv(int path, Pointer<Float> dashArray) {
  final glGetPathDashArrayNvAsFunction = _glGetPathDashArrayNv
      .cast<
        NativeFunction<Void Function(Uint32 path, Pointer<Float> dashArray)>
      >()
      .asFunction<void Function(int path, Pointer<Float> dashArray)>();
  return glGetPathDashArrayNvAsFunction(path, dashArray);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathMetricsNv;

/// ```c
/// GLAPI void APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
/// ```
void glGetPathMetricsNv(
  int metricQueryMask,
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int stride,
  Pointer<Float> metrics,
) {
  final glGetPathMetricsNvAsFunction = _glGetPathMetricsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 metricQueryMask,
            Uint32 numPaths,
            Uint32 pathNameType,
            Pointer<NativeType> paths,
            Uint32 pathBase,
            Uint32 stride,
            Pointer<Float> metrics,
          )
        >
      >()
      .asFunction<
        void Function(
          int metricQueryMask,
          int numPaths,
          int pathNameType,
          Pointer<NativeType> paths,
          int pathBase,
          int stride,
          Pointer<Float> metrics,
        )
      >();
  return glGetPathMetricsNvAsFunction(
    metricQueryMask,
    numPaths,
    pathNameType,
    paths,
    pathBase,
    stride,
    metrics,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathMetricRangeNv;

/// ```c
/// GLAPI void APIENTRY glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
/// ```
void glGetPathMetricRangeNv(
  int metricQueryMask,
  int firstPathName,
  int numPaths,
  int stride,
  Pointer<Float> metrics,
) {
  final glGetPathMetricRangeNvAsFunction = _glGetPathMetricRangeNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 metricQueryMask,
            Uint32 firstPathName,
            Uint32 numPaths,
            Uint32 stride,
            Pointer<Float> metrics,
          )
        >
      >()
      .asFunction<
        void Function(
          int metricQueryMask,
          int firstPathName,
          int numPaths,
          int stride,
          Pointer<Float> metrics,
        )
      >();
  return glGetPathMetricRangeNvAsFunction(
    metricQueryMask,
    firstPathName,
    numPaths,
    stride,
    metrics,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathSpacingNv;

/// ```c
/// GLAPI void APIENTRY glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
/// ```
void glGetPathSpacingNv(
  int pathListMode,
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  double advanceScale,
  double kerningScale,
  int transformType,
  Pointer<Float> returnedSpacing,
) {
  final glGetPathSpacingNvAsFunction = _glGetPathSpacingNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 pathListMode,
            Uint32 numPaths,
            Uint32 pathNameType,
            Pointer<NativeType> paths,
            Uint32 pathBase,
            Float advanceScale,
            Float kerningScale,
            Uint32 transformType,
            Pointer<Float> returnedSpacing,
          )
        >
      >()
      .asFunction<
        void Function(
          int pathListMode,
          int numPaths,
          int pathNameType,
          Pointer<NativeType> paths,
          int pathBase,
          double advanceScale,
          double kerningScale,
          int transformType,
          Pointer<Float> returnedSpacing,
        )
      >();
  return glGetPathSpacingNvAsFunction(
    pathListMode,
    numPaths,
    pathNameType,
    paths,
    pathBase,
    advanceScale,
    kerningScale,
    transformType,
    returnedSpacing,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsPointInFillPathNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
/// ```
int glIsPointInFillPathNv(int path, int mask, double x, double y) {
  final glIsPointInFillPathNvAsFunction = _glIsPointInFillPathNv
      .cast<
        NativeFunction<
          Int32 Function(Uint32 path, Uint32 mask, Float x, Float y)
        >
      >()
      .asFunction<int Function(int path, int mask, double x, double y)>();
  return glIsPointInFillPathNvAsFunction(path, mask, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsPointInStrokePathNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
/// ```
int glIsPointInStrokePathNv(int path, double x, double y) {
  final glIsPointInStrokePathNvAsFunction = _glIsPointInStrokePathNv
      .cast<NativeFunction<Int32 Function(Uint32 path, Float x, Float y)>>()
      .asFunction<int Function(int path, double x, double y)>();
  return glIsPointInStrokePathNvAsFunction(path, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathLengthNv;

/// ```c
/// GLAPI GLfloat APIENTRY glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
/// ```
double glGetPathLengthNv(int path, int startSegment, int numSegments) {
  final glGetPathLengthNvAsFunction = _glGetPathLengthNv
      .cast<
        NativeFunction<
          Float Function(Uint32 path, Uint32 startSegment, Uint32 numSegments)
        >
      >()
      .asFunction<
        double Function(int path, int startSegment, int numSegments)
      >();
  return glGetPathLengthNvAsFunction(path, startSegment, numSegments);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointAlongPathNv;

/// ```c
/// GLAPI GLboolean APIENTRY glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
/// ```
int glPointAlongPathNv(
  int path,
  int startSegment,
  int numSegments,
  double distance,
  Pointer<Float> x,
  Pointer<Float> y,
  Pointer<Float> tangentX,
  Pointer<Float> tangentY,
) {
  final glPointAlongPathNvAsFunction = _glPointAlongPathNv
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 path,
            Uint32 startSegment,
            Uint32 numSegments,
            Float distance,
            Pointer<Float> x,
            Pointer<Float> y,
            Pointer<Float> tangentX,
            Pointer<Float> tangentY,
          )
        >
      >()
      .asFunction<
        int Function(
          int path,
          int startSegment,
          int numSegments,
          double distance,
          Pointer<Float> x,
          Pointer<Float> y,
          Pointer<Float> tangentX,
          Pointer<Float> tangentY,
        )
      >();
  return glPointAlongPathNvAsFunction(
    path,
    startSegment,
    numSegments,
    distance,
    x,
    y,
    tangentX,
    tangentY,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoad3x2fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixLoad3x2fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixLoad3x2fNvAsFunction = _glMatrixLoad3x2fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixLoad3x2fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoad3x3fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixLoad3x3fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixLoad3x3fNvAsFunction = _glMatrixLoad3x3fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixLoad3x3fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixLoadTranspose3x3fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixLoadTranspose3x3fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixLoadTranspose3x3fNvAsFunction = _glMatrixLoadTranspose3x3fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixLoadTranspose3x3fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMult3x2fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixMult3x2fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixMult3x2fNvAsFunction = _glMatrixMult3x2fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixMult3x2fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMult3x3fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixMult3x3fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixMult3x3fNvAsFunction = _glMatrixMult3x3fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixMult3x3fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMultTranspose3x3fNv;

/// ```c
/// GLAPI void APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat *m)
/// ```
void glMatrixMultTranspose3x3fNv(int matrixMode, Pointer<Float> m) {
  final glMatrixMultTranspose3x3fNvAsFunction = _glMatrixMultTranspose3x3fNv
      .cast<
        NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float> m)>
      >()
      .asFunction<void Function(int matrixMode, Pointer<Float> m)>();
  return glMatrixMultTranspose3x3fNvAsFunction(matrixMode, m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilThenCoverFillPathNv;

/// ```c
/// GLAPI void APIENTRY glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
/// ```
void glStencilThenCoverFillPathNv(
  int path,
  int fillMode,
  int mask,
  int coverMode,
) {
  final glStencilThenCoverFillPathNvAsFunction = _glStencilThenCoverFillPathNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 path,
            Uint32 fillMode,
            Uint32 mask,
            Uint32 coverMode,
          )
        >
      >()
      .asFunction<
        void Function(int path, int fillMode, int mask, int coverMode)
      >();
  return glStencilThenCoverFillPathNvAsFunction(
    path,
    fillMode,
    mask,
    coverMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilThenCoverStrokePathNv;

/// ```c
/// GLAPI void APIENTRY glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
/// ```
void glStencilThenCoverStrokePathNv(
  int path,
  int reference,
  int mask,
  int coverMode,
) {
  final glStencilThenCoverStrokePathNvAsFunction =
      _glStencilThenCoverStrokePathNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 path,
                Int32 reference,
                Uint32 mask,
                Uint32 coverMode,
              )
            >
          >()
          .asFunction<
            void Function(int path, int reference, int mask, int coverMode)
          >();
  return glStencilThenCoverStrokePathNvAsFunction(
    path,
    reference,
    mask,
    coverMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glStencilThenCoverFillPathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
void glStencilThenCoverFillPathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int fillMode,
  int mask,
  int coverMode,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glStencilThenCoverFillPathInstancedNvAsFunction =
      _glStencilThenCoverFillPathInstancedNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 numPaths,
                Uint32 pathNameType,
                Pointer<NativeType> paths,
                Uint32 pathBase,
                Uint32 fillMode,
                Uint32 mask,
                Uint32 coverMode,
                Uint32 transformType,
                Pointer<Float> transformValues,
              )
            >
          >()
          .asFunction<
            void Function(
              int numPaths,
              int pathNameType,
              Pointer<NativeType> paths,
              int pathBase,
              int fillMode,
              int mask,
              int coverMode,
              int transformType,
              Pointer<Float> transformValues,
            )
          >();
  return glStencilThenCoverFillPathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    fillMode,
    mask,
    coverMode,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glStencilThenCoverStrokePathInstancedNv;

/// ```c
/// GLAPI void APIENTRY glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
void glStencilThenCoverStrokePathInstancedNv(
  int numPaths,
  int pathNameType,
  Pointer<NativeType> paths,
  int pathBase,
  int reference,
  int mask,
  int coverMode,
  int transformType,
  Pointer<Float> transformValues,
) {
  final glStencilThenCoverStrokePathInstancedNvAsFunction =
      _glStencilThenCoverStrokePathInstancedNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 numPaths,
                Uint32 pathNameType,
                Pointer<NativeType> paths,
                Uint32 pathBase,
                Int32 reference,
                Uint32 mask,
                Uint32 coverMode,
                Uint32 transformType,
                Pointer<Float> transformValues,
              )
            >
          >()
          .asFunction<
            void Function(
              int numPaths,
              int pathNameType,
              Pointer<NativeType> paths,
              int pathBase,
              int reference,
              int mask,
              int coverMode,
              int transformType,
              Pointer<Float> transformValues,
            )
          >();
  return glStencilThenCoverStrokePathInstancedNvAsFunction(
    numPaths,
    pathNameType,
    paths,
    pathBase,
    reference,
    mask,
    coverMode,
    transformType,
    transformValues,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathGlyphIndexRangeNv;

/// ```c
/// GLAPI GLenum APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount)
/// ```
int glPathGlyphIndexRangeNv(
  int fontTarget,
  Pointer<NativeType> fontName,
  int fontStyle,
  int pathParameterTemplate,
  double emScale,
  Pointer<Uint32> baseAndCount,
) {
  final glPathGlyphIndexRangeNvAsFunction = _glPathGlyphIndexRangeNv
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 fontTarget,
            Pointer<NativeType> fontName,
            Uint32 fontStyle,
            Uint32 pathParameterTemplate,
            Float emScale,
            Pointer<Uint32> baseAndCount,
          )
        >
      >()
      .asFunction<
        int Function(
          int fontTarget,
          Pointer<NativeType> fontName,
          int fontStyle,
          int pathParameterTemplate,
          double emScale,
          Pointer<Uint32> baseAndCount,
        )
      >();
  return glPathGlyphIndexRangeNvAsFunction(
    fontTarget,
    fontName,
    fontStyle,
    pathParameterTemplate,
    emScale,
    baseAndCount,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathGlyphIndexArrayNv;

/// ```c
/// GLAPI GLenum APIENTRY glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
int glPathGlyphIndexArrayNv(
  int firstPathName,
  int fontTarget,
  Pointer<NativeType> fontName,
  int fontStyle,
  int firstGlyphIndex,
  int numGlyphs,
  int pathParameterTemplate,
  double emScale,
) {
  final glPathGlyphIndexArrayNvAsFunction = _glPathGlyphIndexArrayNv
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 firstPathName,
            Uint32 fontTarget,
            Pointer<NativeType> fontName,
            Uint32 fontStyle,
            Uint32 firstGlyphIndex,
            Uint32 numGlyphs,
            Uint32 pathParameterTemplate,
            Float emScale,
          )
        >
      >()
      .asFunction<
        int Function(
          int firstPathName,
          int fontTarget,
          Pointer<NativeType> fontName,
          int fontStyle,
          int firstGlyphIndex,
          int numGlyphs,
          int pathParameterTemplate,
          double emScale,
        )
      >();
  return glPathGlyphIndexArrayNvAsFunction(
    firstPathName,
    fontTarget,
    fontName,
    fontStyle,
    firstGlyphIndex,
    numGlyphs,
    pathParameterTemplate,
    emScale,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathMemoryGlyphIndexArrayNv;

/// ```c
/// GLAPI GLenum APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
int glPathMemoryGlyphIndexArrayNv(
  int firstPathName,
  int fontTarget,
  Pointer<Uint32> fontSize,
  Pointer<NativeType> fontData,
  int faceIndex,
  int firstGlyphIndex,
  int numGlyphs,
  int pathParameterTemplate,
  double emScale,
) {
  final glPathMemoryGlyphIndexArrayNvAsFunction = _glPathMemoryGlyphIndexArrayNv
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 firstPathName,
            Uint32 fontTarget,
            Pointer<Uint32> fontSize,
            Pointer<NativeType> fontData,
            Uint32 faceIndex,
            Uint32 firstGlyphIndex,
            Uint32 numGlyphs,
            Uint32 pathParameterTemplate,
            Float emScale,
          )
        >
      >()
      .asFunction<
        int Function(
          int firstPathName,
          int fontTarget,
          Pointer<Uint32> fontSize,
          Pointer<NativeType> fontData,
          int faceIndex,
          int firstGlyphIndex,
          int numGlyphs,
          int pathParameterTemplate,
          double emScale,
        )
      >();
  return glPathMemoryGlyphIndexArrayNvAsFunction(
    firstPathName,
    fontTarget,
    fontSize,
    fontData,
    faceIndex,
    firstGlyphIndex,
    numGlyphs,
    pathParameterTemplate,
    emScale,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramPathFragmentInputGenNv;

/// ```c
/// GLAPI void APIENTRY glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)
/// ```
void glProgramPathFragmentInputGenNv(
  int program,
  int location,
  int genMode,
  int components,
  Pointer<Float> coeffs,
) {
  final glProgramPathFragmentInputGenNvAsFunction =
      _glProgramPathFragmentInputGenNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Int32 location,
                Uint32 genMode,
                Int32 components,
                Pointer<Float> coeffs,
              )
            >
          >()
          .asFunction<
            void Function(
              int program,
              int location,
              int genMode,
              int components,
              Pointer<Float> coeffs,
            )
          >();
  return glProgramPathFragmentInputGenNvAsFunction(
    program,
    location,
    genMode,
    components,
    coeffs,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramResourcefvNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params)
/// ```
void glGetProgramResourcefvNv(
  int program,
  int programInterface,
  int index,
  int propCount,
  Pointer<Uint32> props,
  int count,
  Pointer<Uint32> length,
  Pointer<Float> params,
) {
  final glGetProgramResourcefvNvAsFunction = _glGetProgramResourcefvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 programInterface,
            Uint32 index,
            Uint32 propCount,
            Pointer<Uint32> props,
            Uint32 count,
            Pointer<Uint32> length,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int programInterface,
          int index,
          int propCount,
          Pointer<Uint32> props,
          int count,
          Pointer<Uint32> length,
          Pointer<Float> params,
        )
      >();
  return glGetProgramResourcefvNvAsFunction(
    program,
    programInterface,
    index,
    propCount,
    props,
    count,
    length,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathColorGenNv;

/// ```c
/// GLAPI void APIENTRY glPathColorGenNV (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
/// ```
void glPathColorGenNv(
  int color,
  int genMode,
  int colorFormat,
  Pointer<Float> coeffs,
) {
  final glPathColorGenNvAsFunction = _glPathColorGenNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 color,
            Uint32 genMode,
            Uint32 colorFormat,
            Pointer<Float> coeffs,
          )
        >
      >()
      .asFunction<
        void Function(
          int color,
          int genMode,
          int colorFormat,
          Pointer<Float> coeffs,
        )
      >();
  return glPathColorGenNvAsFunction(color, genMode, colorFormat, coeffs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathTexGenNv;

/// ```c
/// GLAPI void APIENTRY glPathTexGenNV (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
/// ```
void glPathTexGenNv(
  int texCoordSet,
  int genMode,
  int components,
  Pointer<Float> coeffs,
) {
  final glPathTexGenNvAsFunction = _glPathTexGenNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texCoordSet,
            Uint32 genMode,
            Int32 components,
            Pointer<Float> coeffs,
          )
        >
      >()
      .asFunction<
        void Function(
          int texCoordSet,
          int genMode,
          int components,
          Pointer<Float> coeffs,
        )
      >();
  return glPathTexGenNvAsFunction(texCoordSet, genMode, components, coeffs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPathFogGenNv;

/// ```c
/// GLAPI void APIENTRY glPathFogGenNV (GLenum genMode)
/// ```
void glPathFogGenNv(int genMode) {
  final glPathFogGenNvAsFunction = _glPathFogGenNv
      .cast<NativeFunction<Void Function(Uint32 genMode)>>()
      .asFunction<void Function(int genMode)>();
  return glPathFogGenNvAsFunction(genMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathColorGenivNv;

/// ```c
/// GLAPI void APIENTRY glGetPathColorGenivNV (GLenum color, GLenum pname, GLint *value)
/// ```
void glGetPathColorGenivNv(int color, int pname, Pointer<Int32> value) {
  final glGetPathColorGenivNvAsFunction = _glGetPathColorGenivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 color, Uint32 pname, Pointer<Int32> value)
        >
      >()
      .asFunction<void Function(int color, int pname, Pointer<Int32> value)>();
  return glGetPathColorGenivNvAsFunction(color, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathColorGenfvNv;

/// ```c
/// GLAPI void APIENTRY glGetPathColorGenfvNV (GLenum color, GLenum pname, GLfloat *value)
/// ```
void glGetPathColorGenfvNv(int color, int pname, Pointer<Float> value) {
  final glGetPathColorGenfvNvAsFunction = _glGetPathColorGenfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 color, Uint32 pname, Pointer<Float> value)
        >
      >()
      .asFunction<void Function(int color, int pname, Pointer<Float> value)>();
  return glGetPathColorGenfvNvAsFunction(color, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathTexGenivNv;

/// ```c
/// GLAPI void APIENTRY glGetPathTexGenivNV (GLenum texCoordSet, GLenum pname, GLint *value)
/// ```
void glGetPathTexGenivNv(int texCoordSet, int pname, Pointer<Int32> value) {
  final glGetPathTexGenivNvAsFunction = _glGetPathTexGenivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Int32> value)
        >
      >()
      .asFunction<
        void Function(int texCoordSet, int pname, Pointer<Int32> value)
      >();
  return glGetPathTexGenivNvAsFunction(texCoordSet, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPathTexGenfvNv;

/// ```c
/// GLAPI void APIENTRY glGetPathTexGenfvNV (GLenum texCoordSet, GLenum pname, GLfloat *value)
/// ```
void glGetPathTexGenfvNv(int texCoordSet, int pname, Pointer<Float> value) {
  final glGetPathTexGenfvNvAsFunction = _glGetPathTexGenfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Float> value)
        >
      >()
      .asFunction<
        void Function(int texCoordSet, int pname, Pointer<Float> value)
      >();
  return glGetPathTexGenfvNvAsFunction(texCoordSet, pname, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelDataRangeNv;

/// ```c
/// GLAPI void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length, const void *pointer)
/// ```
void glPixelDataRangeNv(int target, int length, Pointer<NativeType> pointer) {
  final glPixelDataRangeNvAsFunction = _glPixelDataRangeNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 length,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int target, int length, Pointer<NativeType> pointer)
      >();
  return glPixelDataRangeNvAsFunction(target, length, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushPixelDataRangeNv;

/// ```c
/// GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum target)
/// ```
void glFlushPixelDataRangeNv(int target) {
  final glFlushPixelDataRangeNvAsFunction = _glFlushPixelDataRangeNv
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glFlushPixelDataRangeNvAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameteriNv;

/// ```c
/// GLAPI void APIENTRY glPointParameteriNV (GLenum pname, GLint param)
/// ```
void glPointParameteriNv(int pname, int param) {
  final glPointParameteriNvAsFunction = _glPointParameteriNv
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPointParameteriNvAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterivNv;

/// ```c
/// GLAPI void APIENTRY glPointParameterivNV (GLenum pname, const GLint *params)
/// ```
void glPointParameterivNv(int pname, Pointer<Int32> params) {
  final glPointParameterivNvAsFunction = _glPointParameterivNv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glPointParameterivNvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPresentFrameKeyedNv;

/// ```c
/// GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
/// ```
void glPresentFrameKeyedNv(
  int videoSlot,
  int minPresentTime,
  int beginPresentTimeId,
  int presentDurationId,
  int type,
  int target0,
  int fill0,
  int key0,
  int target1,
  int fill1,
  int key1,
) {
  final glPresentFrameKeyedNvAsFunction = _glPresentFrameKeyedNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoSlot,
            Uint64 minPresentTime,
            Uint32 beginPresentTimeId,
            Uint32 presentDurationId,
            Uint32 type,
            Uint32 target0,
            Uint32 fill0,
            Uint32 key0,
            Uint32 target1,
            Uint32 fill1,
            Uint32 key1,
          )
        >
      >()
      .asFunction<
        void Function(
          int videoSlot,
          int minPresentTime,
          int beginPresentTimeId,
          int presentDurationId,
          int type,
          int target0,
          int fill0,
          int key0,
          int target1,
          int fill1,
          int key1,
        )
      >();
  return glPresentFrameKeyedNvAsFunction(
    videoSlot,
    minPresentTime,
    beginPresentTimeId,
    presentDurationId,
    type,
    target0,
    fill0,
    key0,
    target1,
    fill1,
    key1,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPresentFrameDualFillNv;

/// ```c
/// GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
/// ```
void glPresentFrameDualFillNv(
  int videoSlot,
  int minPresentTime,
  int beginPresentTimeId,
  int presentDurationId,
  int type,
  int target0,
  int fill0,
  int target1,
  int fill1,
  int target2,
  int fill2,
  int target3,
  int fill3,
) {
  final glPresentFrameDualFillNvAsFunction = _glPresentFrameDualFillNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoSlot,
            Uint64 minPresentTime,
            Uint32 beginPresentTimeId,
            Uint32 presentDurationId,
            Uint32 type,
            Uint32 target0,
            Uint32 fill0,
            Uint32 target1,
            Uint32 fill1,
            Uint32 target2,
            Uint32 fill2,
            Uint32 target3,
            Uint32 fill3,
          )
        >
      >()
      .asFunction<
        void Function(
          int videoSlot,
          int minPresentTime,
          int beginPresentTimeId,
          int presentDurationId,
          int type,
          int target0,
          int fill0,
          int target1,
          int fill1,
          int target2,
          int fill2,
          int target3,
          int fill3,
        )
      >();
  return glPresentFrameDualFillNvAsFunction(
    videoSlot,
    minPresentTime,
    beginPresentTimeId,
    presentDurationId,
    type,
    target0,
    fill0,
    target1,
    fill1,
    target2,
    fill2,
    target3,
    fill3,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoivNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint *params)
/// ```
void glGetVideoivNv(int videoSlot, int pname, Pointer<Int32> params) {
  final glGetVideoivNvAsFunction = _glGetVideoivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int videoSlot, int pname, Pointer<Int32> params)
      >();
  return glGetVideoivNvAsFunction(videoSlot, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideouivNv;

/// ```c
/// GLAPI void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint *params)
/// ```
void glGetVideouivNv(int videoSlot, int pname, Pointer<Uint32> params) {
  final glGetVideouivNvAsFunction = _glGetVideouivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Uint32> params)
        >
      >()
      .asFunction<
        void Function(int videoSlot, int pname, Pointer<Uint32> params)
      >();
  return glGetVideouivNvAsFunction(videoSlot, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoi64vNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT *params)
/// ```
void glGetVideoi64vNv(int videoSlot, int pname, Pointer<Int64> params) {
  final glGetVideoi64vNvAsFunction = _glGetVideoi64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<
        void Function(int videoSlot, int pname, Pointer<Int64> params)
      >();
  return glGetVideoi64vNvAsFunction(videoSlot, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT *params)
/// ```
void glGetVideoui64vNv(int videoSlot, int pname, Pointer<Uint64> params) {
  final glGetVideoui64vNvAsFunction = _glGetVideoui64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int videoSlot, int pname, Pointer<Uint64> params)
      >();
  return glGetVideoui64vNvAsFunction(videoSlot, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrimitiveRestartNv;

/// ```c
/// GLAPI void APIENTRY glPrimitiveRestartNV (void)
/// ```
void glPrimitiveRestartNv() {
  final glPrimitiveRestartNvAsFunction = _glPrimitiveRestartNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPrimitiveRestartNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrimitiveRestartIndexNv;

/// ```c
/// GLAPI void APIENTRY glPrimitiveRestartIndexNV (GLuint index)
/// ```
void glPrimitiveRestartIndexNv(int index) {
  final glPrimitiveRestartIndexNvAsFunction = _glPrimitiveRestartIndexNv
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return glPrimitiveRestartIndexNvAsFunction(index);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glQueryResourceNv;

/// ```c
/// GLAPI GLint APIENTRY glQueryResourceNV (GLenum queryType, GLint tagId, GLuint count, GLint *buffer)
/// ```
int glQueryResourceNv(
  int queryType,
  int tagId,
  int count,
  Pointer<Int32> buffer,
) {
  final glQueryResourceNvAsFunction = _glQueryResourceNv
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 queryType,
            Int32 tagId,
            Uint32 count,
            Pointer<Int32> buffer,
          )
        >
      >()
      .asFunction<
        int Function(int queryType, int tagId, int count, Pointer<Int32> buffer)
      >();
  return glQueryResourceNvAsFunction(queryType, tagId, count, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenQueryResourceTagNv;

/// ```c
/// GLAPI void APIENTRY glGenQueryResourceTagNV (GLsizei n, GLint *tagIds)
/// ```
void glGenQueryResourceTagNv(int n, Pointer<Int32> tagIds) {
  final glGenQueryResourceTagNvAsFunction = _glGenQueryResourceTagNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Int32> tagIds)>>()
      .asFunction<void Function(int n, Pointer<Int32> tagIds)>();
  return glGenQueryResourceTagNvAsFunction(n, tagIds);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteQueryResourceTagNv;

/// ```c
/// GLAPI void APIENTRY glDeleteQueryResourceTagNV (GLsizei n, const GLint *tagIds)
/// ```
void glDeleteQueryResourceTagNv(int n, Pointer<Int32> tagIds) {
  final glDeleteQueryResourceTagNvAsFunction = _glDeleteQueryResourceTagNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Int32> tagIds)>>()
      .asFunction<void Function(int n, Pointer<Int32> tagIds)>();
  return glDeleteQueryResourceTagNvAsFunction(n, tagIds);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glQueryResourceTagNv;

/// ```c
/// GLAPI void APIENTRY glQueryResourceTagNV (GLint tagId, const GLchar *tagString)
/// ```
void glQueryResourceTagNv(int tagId, String tagString) {
  final glQueryResourceTagNvAsFunction = _glQueryResourceTagNv
      .cast<
        NativeFunction<Void Function(Int32 tagId, Pointer<Utf8> tagString)>
      >()
      .asFunction<void Function(int tagId, Pointer<Utf8> tagString)>();
  final tagStringPointer = tagString.toNativeUtf8();
  final result = glQueryResourceTagNvAsFunction(tagId, tagStringPointer);
  calloc.free(tagStringPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat *params)
/// ```
void glCombinerParameterfvNv(int pname, Pointer<Float> params) {
  final glCombinerParameterfvNvAsFunction = _glCombinerParameterfvNv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glCombinerParameterfvNvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerParameterfNv;

/// ```c
/// GLAPI void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param)
/// ```
void glCombinerParameterfNv(int pname, double param) {
  final glCombinerParameterfNvAsFunction = _glCombinerParameterfNv
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glCombinerParameterfNvAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerParameterivNv;

/// ```c
/// GLAPI void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint *params)
/// ```
void glCombinerParameterivNv(int pname, Pointer<Int32> params) {
  final glCombinerParameterivNvAsFunction = _glCombinerParameterivNv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glCombinerParameterivNvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerParameteriNv;

/// ```c
/// GLAPI void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param)
/// ```
void glCombinerParameteriNv(int pname, int param) {
  final glCombinerParameteriNvAsFunction = _glCombinerParameteriNv
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glCombinerParameteriNvAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerInputNv;

/// ```c
/// GLAPI void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
/// ```
void glCombinerInputNv(
  int stage,
  int portion,
  int variable,
  int input,
  int mapping,
  int componentUsage,
) {
  final glCombinerInputNvAsFunction = _glCombinerInputNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 stage,
            Uint32 portion,
            Uint32 variable,
            Uint32 input,
            Uint32 mapping,
            Uint32 componentUsage,
          )
        >
      >()
      .asFunction<
        void Function(
          int stage,
          int portion,
          int variable,
          int input,
          int mapping,
          int componentUsage,
        )
      >();
  return glCombinerInputNvAsFunction(
    stage,
    portion,
    variable,
    input,
    mapping,
    componentUsage,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerOutputNv;

/// ```c
/// GLAPI void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
/// ```
void glCombinerOutputNv(
  int stage,
  int portion,
  int abOutput,
  int cdOutput,
  int sumOutput,
  int scale,
  int bias,
  int abDotProduct,
  int cdDotProduct,
  int muxSum,
) {
  final glCombinerOutputNvAsFunction = _glCombinerOutputNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 stage,
            Uint32 portion,
            Uint32 abOutput,
            Uint32 cdOutput,
            Uint32 sumOutput,
            Uint32 scale,
            Uint32 bias,
            Int32 abDotProduct,
            Int32 cdDotProduct,
            Int32 muxSum,
          )
        >
      >()
      .asFunction<
        void Function(
          int stage,
          int portion,
          int abOutput,
          int cdOutput,
          int sumOutput,
          int scale,
          int bias,
          int abDotProduct,
          int cdDotProduct,
          int muxSum,
        )
      >();
  return glCombinerOutputNvAsFunction(
    stage,
    portion,
    abOutput,
    cdOutput,
    sumOutput,
    scale,
    bias,
    abDotProduct,
    cdDotProduct,
    muxSum,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinalCombinerInputNv;

/// ```c
/// GLAPI void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
/// ```
void glFinalCombinerInputNv(
  int variable,
  int input,
  int mapping,
  int componentUsage,
) {
  final glFinalCombinerInputNvAsFunction = _glFinalCombinerInputNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 variable,
            Uint32 input,
            Uint32 mapping,
            Uint32 componentUsage,
          )
        >
      >()
      .asFunction<
        void Function(int variable, int input, int mapping, int componentUsage)
      >();
  return glFinalCombinerInputNvAsFunction(
    variable,
    input,
    mapping,
    componentUsage,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCombinerInputParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
/// ```
void glGetCombinerInputParameterfvNv(
  int stage,
  int portion,
  int variable,
  int pname,
  Pointer<Float> params,
) {
  final glGetCombinerInputParameterfvNvAsFunction =
      _glGetCombinerInputParameterfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 stage,
                Uint32 portion,
                Uint32 variable,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int stage,
              int portion,
              int variable,
              int pname,
              Pointer<Float> params,
            )
          >();
  return glGetCombinerInputParameterfvNvAsFunction(
    stage,
    portion,
    variable,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCombinerInputParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
/// ```
void glGetCombinerInputParameterivNv(
  int stage,
  int portion,
  int variable,
  int pname,
  Pointer<Int32> params,
) {
  final glGetCombinerInputParameterivNvAsFunction =
      _glGetCombinerInputParameterivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 stage,
                Uint32 portion,
                Uint32 variable,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int stage,
              int portion,
              int variable,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetCombinerInputParameterivNvAsFunction(
    stage,
    portion,
    variable,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCombinerOutputParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
/// ```
void glGetCombinerOutputParameterfvNv(
  int stage,
  int portion,
  int pname,
  Pointer<Float> params,
) {
  final glGetCombinerOutputParameterfvNvAsFunction =
      _glGetCombinerOutputParameterfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 stage,
                Uint32 portion,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int stage,
              int portion,
              int pname,
              Pointer<Float> params,
            )
          >();
  return glGetCombinerOutputParameterfvNvAsFunction(
    stage,
    portion,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCombinerOutputParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params)
/// ```
void glGetCombinerOutputParameterivNv(
  int stage,
  int portion,
  int pname,
  Pointer<Int32> params,
) {
  final glGetCombinerOutputParameterivNvAsFunction =
      _glGetCombinerOutputParameterivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 stage,
                Uint32 portion,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int stage,
              int portion,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glGetCombinerOutputParameterivNvAsFunction(
    stage,
    portion,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetFinalCombinerInputParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params)
/// ```
void glGetFinalCombinerInputParameterfvNv(
  int variable,
  int pname,
  Pointer<Float> params,
) {
  final glGetFinalCombinerInputParameterfvNvAsFunction =
      _glGetFinalCombinerInputParameterfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 variable,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(int variable, int pname, Pointer<Float> params)
          >();
  return glGetFinalCombinerInputParameterfvNvAsFunction(
    variable,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetFinalCombinerInputParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params)
/// ```
void glGetFinalCombinerInputParameterivNv(
  int variable,
  int pname,
  Pointer<Int32> params,
) {
  final glGetFinalCombinerInputParameterivNvAsFunction =
      _glGetFinalCombinerInputParameterivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 variable,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(int variable, int pname, Pointer<Int32> params)
          >();
  return glGetFinalCombinerInputParameterivNvAsFunction(
    variable,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCombinerStageParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params)
/// ```
void glCombinerStageParameterfvNv(int stage, int pname, Pointer<Float> params) {
  final glCombinerStageParameterfvNvAsFunction = _glCombinerStageParameterfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 stage, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int stage, int pname, Pointer<Float> params)>();
  return glCombinerStageParameterfvNvAsFunction(stage, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCombinerStageParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params)
/// ```
void glGetCombinerStageParameterfvNv(
  int stage,
  int pname,
  Pointer<Float> params,
) {
  final glGetCombinerStageParameterfvNvAsFunction =
      _glGetCombinerStageParameterfvNv
          .cast<
            NativeFunction<
              Void Function(Uint32 stage, Uint32 pname, Pointer<Float> params)
            >
          >()
          .asFunction<
            void Function(int stage, int pname, Pointer<Float> params)
          >();
  return glGetCombinerStageParameterfvNvAsFunction(stage, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferSampleLocationsfvNv;

/// ```c
/// GLAPI void APIENTRY glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat *v)
/// ```
void glFramebufferSampleLocationsfvNv(
  int target,
  int start,
  int count,
  Pointer<Float> v,
) {
  final glFramebufferSampleLocationsfvNvAsFunction =
      _glFramebufferSampleLocationsfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 start,
                Uint32 count,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(int target, int start, int count, Pointer<Float> v)
          >();
  return glFramebufferSampleLocationsfvNvAsFunction(target, start, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glNamedFramebufferSampleLocationsfvNv;

/// ```c
/// GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
/// ```
void glNamedFramebufferSampleLocationsfvNv(
  int framebuffer,
  int start,
  int count,
  Pointer<Float> v,
) {
  final glNamedFramebufferSampleLocationsfvNvAsFunction =
      _glNamedFramebufferSampleLocationsfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 framebuffer,
                Uint32 start,
                Uint32 count,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              int framebuffer,
              int start,
              int count,
              Pointer<Float> v,
            )
          >();
  return glNamedFramebufferSampleLocationsfvNvAsFunction(
    framebuffer,
    start,
    count,
    v,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResolveDepthValuesNv;

/// ```c
/// GLAPI void APIENTRY glResolveDepthValuesNV (void)
/// ```
void glResolveDepthValuesNv() {
  final glResolveDepthValuesNvAsFunction = _glResolveDepthValuesNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glResolveDepthValuesNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissorExclusiveNv;

/// ```c
/// GLAPI void APIENTRY glScissorExclusiveNV (GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
void glScissorExclusiveNv(int x, int y, int width, int height) {
  final glScissorExclusiveNvAsFunction = _glScissorExclusiveNv
      .cast<
        NativeFunction<
          Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height)
        >
      >()
      .asFunction<void Function(int x, int y, int width, int height)>();
  return glScissorExclusiveNvAsFunction(x, y, width, height);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissorExclusiveArrayvNv;

/// ```c
/// GLAPI void APIENTRY glScissorExclusiveArrayvNV (GLuint first, GLsizei count, const GLint *v)
/// ```
void glScissorExclusiveArrayvNv(int first, int count, Pointer<Int32> v) {
  final glScissorExclusiveArrayvNvAsFunction = _glScissorExclusiveArrayvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 first, Uint32 count, Pointer<Int32> v)
        >
      >()
      .asFunction<void Function(int first, int count, Pointer<Int32> v)>();
  return glScissorExclusiveArrayvNvAsFunction(first, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeBufferResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access)
/// ```
void glMakeBufferResidentNv(int target, int access) {
  final glMakeBufferResidentNvAsFunction = _glMakeBufferResidentNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 access)>>()
      .asFunction<void Function(int target, int access)>();
  return glMakeBufferResidentNvAsFunction(target, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeBufferNonResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target)
/// ```
void glMakeBufferNonResidentNv(int target) {
  final glMakeBufferNonResidentNvAsFunction = _glMakeBufferNonResidentNv
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glMakeBufferNonResidentNvAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsBufferResidentNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target)
/// ```
int glIsBufferResidentNv(int target) {
  final glIsBufferResidentNvAsFunction = _glIsBufferResidentNv
      .cast<NativeFunction<Int32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return glIsBufferResidentNvAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeNamedBufferResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access)
/// ```
void glMakeNamedBufferResidentNv(int buffer, int access) {
  final glMakeNamedBufferResidentNvAsFunction = _glMakeNamedBufferResidentNv
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 access)>>()
      .asFunction<void Function(int buffer, int access)>();
  return glMakeNamedBufferResidentNvAsFunction(buffer, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMakeNamedBufferNonResidentNv;

/// ```c
/// GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer)
/// ```
void glMakeNamedBufferNonResidentNv(int buffer) {
  final glMakeNamedBufferNonResidentNvAsFunction =
      _glMakeNamedBufferNonResidentNv
          .cast<NativeFunction<Void Function(Uint32 buffer)>>()
          .asFunction<void Function(int buffer)>();
  return glMakeNamedBufferNonResidentNvAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsNamedBufferResidentNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer)
/// ```
int glIsNamedBufferResidentNv(int buffer) {
  final glIsNamedBufferResidentNvAsFunction = _glIsNamedBufferResidentNv
      .cast<NativeFunction<Int32 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return glIsNamedBufferResidentNvAsFunction(buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBufferParameterui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params)
/// ```
void glGetBufferParameterui64vNv(
  int target,
  int pname,
  Pointer<Uint64> params,
) {
  final glGetBufferParameterui64vNvAsFunction = _glGetBufferParameterui64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Uint64> params)
      >();
  return glGetBufferParameterui64vNvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetNamedBufferParameterui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params)
/// ```
void glGetNamedBufferParameterui64vNv(
  int buffer,
  int pname,
  Pointer<Uint64> params,
) {
  final glGetNamedBufferParameterui64vNvAsFunction =
      _glGetNamedBufferParameterui64vNv
          .cast<
            NativeFunction<
              Void Function(Uint32 buffer, Uint32 pname, Pointer<Uint64> params)
            >
          >()
          .asFunction<
            void Function(int buffer, int pname, Pointer<Uint64> params)
          >();
  return glGetNamedBufferParameterui64vNvAsFunction(buffer, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetIntegerui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result)
/// ```
void glGetIntegerui64vNv(int value, Pointer<Uint64> result) {
  final glGetIntegerui64vNvAsFunction = _glGetIntegerui64vNv
      .cast<
        NativeFunction<Void Function(Uint32 value, Pointer<Uint64> result)>
      >()
      .asFunction<void Function(int value, Pointer<Uint64> result)>();
  return glGetIntegerui64vNvAsFunction(value, result);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformui64Nv;

/// ```c
/// GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value)
/// ```
void glUniformui64Nv(int location, int value) {
  final glUniformui64NvAsFunction = _glUniformui64Nv
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return glUniformui64NvAsFunction(location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glUniformui64vNv;

/// ```c
/// GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glUniformui64vNv(int location, int count, Pointer<Uint64> value) {
  final glUniformui64vNvAsFunction = _glUniformui64vNv
      .cast<
        NativeFunction<
          Void Function(Int32 location, Uint32 count, Pointer<Uint64> value)
        >
      >()
      .asFunction<
        void Function(int location, int count, Pointer<Uint64> value)
      >();
  return glUniformui64vNvAsFunction(location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformui64Nv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value)
/// ```
void glProgramUniformui64Nv(int program, int location, int value) {
  final glProgramUniformui64NvAsFunction = _glProgramUniformui64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 program, Int32 location, Uint64 value)
        >
      >()
      .asFunction<void Function(int program, int location, int value)>();
  return glProgramUniformui64NvAsFunction(program, location, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramUniformui64vNv;

/// ```c
/// GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
/// ```
void glProgramUniformui64vNv(
  int program,
  int location,
  int count,
  Pointer<Uint64> value,
) {
  final glProgramUniformui64vNvAsFunction = _glProgramUniformui64vNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Int32 location,
            Uint32 count,
            Pointer<Uint64> value,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int location,
          int count,
          Pointer<Uint64> value,
        )
      >();
  return glProgramUniformui64vNvAsFunction(program, location, count, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindShadingRateImageNv;

/// ```c
/// GLAPI void APIENTRY glBindShadingRateImageNV (GLuint texture)
/// ```
void glBindShadingRateImageNv(int texture) {
  final glBindShadingRateImageNvAsFunction = _glBindShadingRateImageNv
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glBindShadingRateImageNvAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetShadingRateImagePaletteNv;

/// ```c
/// GLAPI void APIENTRY glGetShadingRateImagePaletteNV (GLuint viewport, GLuint entry, GLenum *rate)
/// ```
void glGetShadingRateImagePaletteNv(
  int viewport,
  int entry,
  Pointer<Uint32> rate,
) {
  final glGetShadingRateImagePaletteNvAsFunction =
      _glGetShadingRateImagePaletteNv
          .cast<
            NativeFunction<
              Void Function(Uint32 viewport, Uint32 entry, Pointer<Uint32> rate)
            >
          >()
          .asFunction<
            void Function(int viewport, int entry, Pointer<Uint32> rate)
          >();
  return glGetShadingRateImagePaletteNvAsFunction(viewport, entry, rate);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glGetShadingRateSampleLocationivNv;

/// ```c
/// GLAPI void APIENTRY glGetShadingRateSampleLocationivNV (GLenum rate, GLuint samples, GLuint index, GLint *location)
/// ```
void glGetShadingRateSampleLocationivNv(
  int rate,
  int samples,
  int index,
  Pointer<Int32> location,
) {
  final glGetShadingRateSampleLocationivNvAsFunction =
      _glGetShadingRateSampleLocationivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rate,
                Uint32 samples,
                Uint32 index,
                Pointer<Int32> location,
              )
            >
          >()
          .asFunction<
            void Function(
              int rate,
              int samples,
              int index,
              Pointer<Int32> location,
            )
          >();
  return glGetShadingRateSampleLocationivNvAsFunction(
    rate,
    samples,
    index,
    location,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShadingRateImageBarrierNv;

/// ```c
/// GLAPI void APIENTRY glShadingRateImageBarrierNV (GLboolean synchronize)
/// ```
void glShadingRateImageBarrierNv(int synchronize) {
  final glShadingRateImageBarrierNvAsFunction = _glShadingRateImageBarrierNv
      .cast<NativeFunction<Void Function(Int32 synchronize)>>()
      .asFunction<void Function(int synchronize)>();
  return glShadingRateImageBarrierNvAsFunction(synchronize);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShadingRateImagePaletteNv;

/// ```c
/// GLAPI void APIENTRY glShadingRateImagePaletteNV (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates)
/// ```
void glShadingRateImagePaletteNv(
  int viewport,
  int first,
  int count,
  Pointer<Uint32> rates,
) {
  final glShadingRateImagePaletteNvAsFunction = _glShadingRateImagePaletteNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 viewport,
            Uint32 first,
            Uint32 count,
            Pointer<Uint32> rates,
          )
        >
      >()
      .asFunction<
        void Function(int viewport, int first, int count, Pointer<Uint32> rates)
      >();
  return glShadingRateImagePaletteNvAsFunction(viewport, first, count, rates);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShadingRateSampleOrderNv;

/// ```c
/// GLAPI void APIENTRY glShadingRateSampleOrderNV (GLenum order)
/// ```
void glShadingRateSampleOrderNv(int order) {
  final glShadingRateSampleOrderNvAsFunction = _glShadingRateSampleOrderNv
      .cast<NativeFunction<Void Function(Uint32 order)>>()
      .asFunction<void Function(int order)>();
  return glShadingRateSampleOrderNvAsFunction(order);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShadingRateSampleOrderCustomNv;

/// ```c
/// GLAPI void APIENTRY glShadingRateSampleOrderCustomNV (GLenum rate, GLuint samples, const GLint *locations)
/// ```
void glShadingRateSampleOrderCustomNv(
  int rate,
  int samples,
  Pointer<Int32> locations,
) {
  final glShadingRateSampleOrderCustomNvAsFunction =
      _glShadingRateSampleOrderCustomNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rate,
                Uint32 samples,
                Pointer<Int32> locations,
              )
            >
          >()
          .asFunction<
            void Function(int rate, int samples, Pointer<Int32> locations)
          >();
  return glShadingRateSampleOrderCustomNvAsFunction(rate, samples, locations);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureBarrierNv;

/// ```c
/// GLAPI void APIENTRY glTextureBarrierNV (void)
/// ```
void glTextureBarrierNv() {
  final glTextureBarrierNvAsFunction = _glTextureBarrierNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glTextureBarrierNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexImage2DMultisampleCoverageNv;

/// ```c
/// GLAPI void APIENTRY glTexImage2DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
void glTexImage2DMultisampleCoverageNv(
  int target,
  int coverageSamples,
  int colorSamples,
  int internalFormat,
  int width,
  int height,
  int fixedSampleLocations,
) {
  final glTexImage2DMultisampleCoverageNvAsFunction =
      _glTexImage2DMultisampleCoverageNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Int32 internalFormat,
                Uint32 width,
                Uint32 height,
                Int32 fixedSampleLocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int coverageSamples,
              int colorSamples,
              int internalFormat,
              int width,
              int height,
              int fixedSampleLocations,
            )
          >();
  return glTexImage2DMultisampleCoverageNvAsFunction(
    target,
    coverageSamples,
    colorSamples,
    internalFormat,
    width,
    height,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexImage3DMultisampleCoverageNv;

/// ```c
/// GLAPI void APIENTRY glTexImage3DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
void glTexImage3DMultisampleCoverageNv(
  int target,
  int coverageSamples,
  int colorSamples,
  int internalFormat,
  int width,
  int height,
  int depth,
  int fixedSampleLocations,
) {
  final glTexImage3DMultisampleCoverageNvAsFunction =
      _glTexImage3DMultisampleCoverageNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Int32 internalFormat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 fixedSampleLocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int coverageSamples,
              int colorSamples,
              int internalFormat,
              int width,
              int height,
              int depth,
              int fixedSampleLocations,
            )
          >();
  return glTexImage3DMultisampleCoverageNvAsFunction(
    target,
    coverageSamples,
    colorSamples,
    internalFormat,
    width,
    height,
    depth,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureImage2DMultisampleNv;

/// ```c
/// GLAPI void APIENTRY glTextureImage2DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
void glTextureImage2DMultisampleNv(
  int texture,
  int target,
  int samples,
  int internalFormat,
  int width,
  int height,
  int fixedSampleLocations,
) {
  final glTextureImage2DMultisampleNvAsFunction = _glTextureImage2DMultisampleNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 samples,
            Int32 internalFormat,
            Uint32 width,
            Uint32 height,
            Int32 fixedSampleLocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int samples,
          int internalFormat,
          int width,
          int height,
          int fixedSampleLocations,
        )
      >();
  return glTextureImage2DMultisampleNvAsFunction(
    texture,
    target,
    samples,
    internalFormat,
    width,
    height,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureImage3DMultisampleNv;

/// ```c
/// GLAPI void APIENTRY glTextureImage3DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
void glTextureImage3DMultisampleNv(
  int texture,
  int target,
  int samples,
  int internalFormat,
  int width,
  int height,
  int depth,
  int fixedSampleLocations,
) {
  final glTextureImage3DMultisampleNvAsFunction = _glTextureImage3DMultisampleNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 texture,
            Uint32 target,
            Uint32 samples,
            Int32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 fixedSampleLocations,
          )
        >
      >()
      .asFunction<
        void Function(
          int texture,
          int target,
          int samples,
          int internalFormat,
          int width,
          int height,
          int depth,
          int fixedSampleLocations,
        )
      >();
  return glTextureImage3DMultisampleNvAsFunction(
    texture,
    target,
    samples,
    internalFormat,
    width,
    height,
    depth,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTextureImage2DMultisampleCoverageNv;

/// ```c
/// GLAPI void APIENTRY glTextureImage2DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
void glTextureImage2DMultisampleCoverageNv(
  int texture,
  int target,
  int coverageSamples,
  int colorSamples,
  int internalFormat,
  int width,
  int height,
  int fixedSampleLocations,
) {
  final glTextureImage2DMultisampleCoverageNvAsFunction =
      _glTextureImage2DMultisampleCoverageNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Int32 internalFormat,
                Uint32 width,
                Uint32 height,
                Int32 fixedSampleLocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int coverageSamples,
              int colorSamples,
              int internalFormat,
              int width,
              int height,
              int fixedSampleLocations,
            )
          >();
  return glTextureImage2DMultisampleCoverageNvAsFunction(
    texture,
    target,
    coverageSamples,
    colorSamples,
    internalFormat,
    width,
    height,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTextureImage3DMultisampleCoverageNv;

/// ```c
/// GLAPI void APIENTRY glTextureImage3DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
void glTextureImage3DMultisampleCoverageNv(
  int texture,
  int target,
  int coverageSamples,
  int colorSamples,
  int internalFormat,
  int width,
  int height,
  int depth,
  int fixedSampleLocations,
) {
  final glTextureImage3DMultisampleCoverageNvAsFunction =
      _glTextureImage3DMultisampleCoverageNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 texture,
                Uint32 target,
                Uint32 coverageSamples,
                Uint32 colorSamples,
                Int32 internalFormat,
                Uint32 width,
                Uint32 height,
                Uint32 depth,
                Int32 fixedSampleLocations,
              )
            >
          >()
          .asFunction<
            void Function(
              int texture,
              int target,
              int coverageSamples,
              int colorSamples,
              int internalFormat,
              int width,
              int height,
              int depth,
              int fixedSampleLocations,
            )
          >();
  return glTextureImage3DMultisampleCoverageNvAsFunction(
    texture,
    target,
    coverageSamples,
    colorSamples,
    internalFormat,
    width,
    height,
    depth,
    fixedSampleLocations,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCreateSemaphoresNv;

/// ```c
/// GLAPI void APIENTRY glCreateSemaphoresNV (GLsizei n, GLuint *semaphores)
/// ```
void glCreateSemaphoresNv(int n, Pointer<Uint32> semaphores) {
  final glCreateSemaphoresNvAsFunction = _glCreateSemaphoresNv
      .cast<
        NativeFunction<Void Function(Uint32 n, Pointer<Uint32> semaphores)>
      >()
      .asFunction<void Function(int n, Pointer<Uint32> semaphores)>();
  return glCreateSemaphoresNvAsFunction(n, semaphores);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSemaphoreParameterivNv;

/// ```c
/// GLAPI void APIENTRY glSemaphoreParameterivNV (GLuint semaphore, GLenum pname, const GLint *params)
/// ```
void glSemaphoreParameterivNv(int semaphore, int pname, Pointer<Int32> params) {
  final glSemaphoreParameterivNvAsFunction = _glSemaphoreParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 semaphore, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int semaphore, int pname, Pointer<Int32> params)
      >();
  return glSemaphoreParameterivNvAsFunction(semaphore, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSemaphoreParameterivNv;

/// ```c
/// GLAPI void APIENTRY glGetSemaphoreParameterivNV (GLuint semaphore, GLenum pname, GLint *params)
/// ```
void glGetSemaphoreParameterivNv(
  int semaphore,
  int pname,
  Pointer<Int32> params,
) {
  final glGetSemaphoreParameterivNvAsFunction = _glGetSemaphoreParameterivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 semaphore, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int semaphore, int pname, Pointer<Int32> params)
      >();
  return glGetSemaphoreParameterivNvAsFunction(semaphore, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode)
/// ```
void glBeginTransformFeedbackNv(int primitiveMode) {
  final glBeginTransformFeedbackNvAsFunction = _glBeginTransformFeedbackNv
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return glBeginTransformFeedbackNvAsFunction(primitiveMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glEndTransformFeedbackNV (void)
/// ```
void glEndTransformFeedbackNv() {
  final glEndTransformFeedbackNvAsFunction = _glEndTransformFeedbackNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndTransformFeedbackNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackAttribsNv;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLsizei count, const GLint *attribs, GLenum bufferMode)
/// ```
void glTransformFeedbackAttribsNv(
  int count,
  Pointer<Int32> attribs,
  int bufferMode,
) {
  final glTransformFeedbackAttribsNvAsFunction = _glTransformFeedbackAttribsNv
      .cast<
        NativeFunction<
          Void Function(Uint32 count, Pointer<Int32> attribs, Uint32 bufferMode)
        >
      >()
      .asFunction<
        void Function(int count, Pointer<Int32> attribs, int bufferMode)
      >();
  return glTransformFeedbackAttribsNvAsFunction(count, attribs, bufferMode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferRangeNv;

/// ```c
/// GLAPI void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
void glBindBufferRangeNv(
  int target,
  int index,
  int buffer,
  Pointer<NativeType> offset,
  Pointer<Uint32> size,
) {
  final glBindBufferRangeNvAsFunction = _glBindBufferRangeNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 buffer,
            Pointer<NativeType> offset,
            Pointer<Uint32> size,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int buffer,
          Pointer<NativeType> offset,
          Pointer<Uint32> size,
        )
      >();
  return glBindBufferRangeNvAsFunction(target, index, buffer, offset, size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferOffsetNv;

/// ```c
/// GLAPI void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
/// ```
void glBindBufferOffsetNv(
  int target,
  int index,
  int buffer,
  Pointer<NativeType> offset,
) {
  final glBindBufferOffsetNvAsFunction = _glBindBufferOffsetNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 buffer,
            Pointer<NativeType> offset,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          int buffer,
          Pointer<NativeType> offset,
        )
      >();
  return glBindBufferOffsetNvAsFunction(target, index, buffer, offset);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindBufferBaseNv;

/// ```c
/// GLAPI void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer)
/// ```
void glBindBufferBaseNv(int target, int index, int buffer) {
  final glBindBufferBaseNvAsFunction = _glBindBufferBaseNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Uint32 buffer)
        >
      >()
      .asFunction<void Function(int target, int index, int buffer)>();
  return glBindBufferBaseNvAsFunction(target, index, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTransformFeedbackVaryingsNv;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
/// ```
void glTransformFeedbackVaryingsNv(
  int program,
  int count,
  Pointer<Int32> locations,
  int bufferMode,
) {
  final glTransformFeedbackVaryingsNvAsFunction = _glTransformFeedbackVaryingsNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 count,
            Pointer<Int32> locations,
            Uint32 bufferMode,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int count,
          Pointer<Int32> locations,
          int bufferMode,
        )
      >();
  return glTransformFeedbackVaryingsNvAsFunction(
    program,
    count,
    locations,
    bufferMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveVaryingNv;

/// ```c
/// GLAPI void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name)
/// ```
void glActiveVaryingNv(int program, String name) {
  final glActiveVaryingNvAsFunction = _glActiveVaryingNv
      .cast<NativeFunction<Void Function(Uint32 program, Pointer<Utf8> name)>>()
      .asFunction<void Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glActiveVaryingNvAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVaryingLocationNv;

/// ```c
/// GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar *name)
/// ```
int glGetVaryingLocationNv(int program, String name) {
  final glGetVaryingLocationNvAsFunction = _glGetVaryingLocationNv
      .cast<
        NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8> name)>
      >()
      .asFunction<int Function(int program, Pointer<Utf8> name)>();
  final namePointer = name.toNativeUtf8();
  final result = glGetVaryingLocationNvAsFunction(program, namePointer);
  calloc.free(namePointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetActiveVaryingNv;

/// ```c
/// GLAPI void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
/// ```
void glGetActiveVaryingNv(
  int program,
  int index,
  int bufSize,
  Pointer<Uint32> length,
  Pointer<Uint32> size,
  Pointer<Uint32> type,
  Pointer<Int8> name,
) {
  final glGetActiveVaryingNvAsFunction = _glGetActiveVaryingNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 program,
            Uint32 index,
            Uint32 bufSize,
            Pointer<Uint32> length,
            Pointer<Uint32> size,
            Pointer<Uint32> type,
            Pointer<Int8> name,
          )
        >
      >()
      .asFunction<
        void Function(
          int program,
          int index,
          int bufSize,
          Pointer<Uint32> length,
          Pointer<Uint32> size,
          Pointer<Uint32> type,
          Pointer<Int8> name,
        )
      >();
  return glGetActiveVaryingNvAsFunction(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTransformFeedbackVaryingNv;

/// ```c
/// GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint *location)
/// ```
void glGetTransformFeedbackVaryingNv(
  int program,
  int index,
  Pointer<Int32> location,
) {
  final glGetTransformFeedbackVaryingNvAsFunction =
      _glGetTransformFeedbackVaryingNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 program,
                Uint32 index,
                Pointer<Int32> location,
              )
            >
          >()
          .asFunction<
            void Function(int program, int index, Pointer<Int32> location)
          >();
  return glGetTransformFeedbackVaryingNvAsFunction(program, index, location);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTransformFeedbackStreamAttribsNv;

/// ```c
/// GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode)
/// ```
void glTransformFeedbackStreamAttribsNv(
  int count,
  Pointer<Int32> attribs,
  int nbuffers,
  Pointer<Int32> bufstreams,
  int bufferMode,
) {
  final glTransformFeedbackStreamAttribsNvAsFunction =
      _glTransformFeedbackStreamAttribsNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 count,
                Pointer<Int32> attribs,
                Uint32 nbuffers,
                Pointer<Int32> bufstreams,
                Uint32 bufferMode,
              )
            >
          >()
          .asFunction<
            void Function(
              int count,
              Pointer<Int32> attribs,
              int nbuffers,
              Pointer<Int32> bufstreams,
              int bufferMode,
            )
          >();
  return glTransformFeedbackStreamAttribsNvAsFunction(
    count,
    attribs,
    nbuffers,
    bufstreams,
    bufferMode,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id)
/// ```
void glBindTransformFeedbackNv(int target, int id) {
  final glBindTransformFeedbackNvAsFunction = _glBindTransformFeedbackNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return glBindTransformFeedbackNvAsFunction(target, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteTransformFeedbacksNv;

/// ```c
/// GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint *ids)
/// ```
void glDeleteTransformFeedbacksNv(int n, Pointer<Uint32> ids) {
  final glDeleteTransformFeedbacksNvAsFunction = _glDeleteTransformFeedbacksNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glDeleteTransformFeedbacksNvAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenTransformFeedbacksNv;

/// ```c
/// GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids)
/// ```
void glGenTransformFeedbacksNv(int n, Pointer<Uint32> ids) {
  final glGenTransformFeedbacksNvAsFunction = _glGenTransformFeedbacksNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32> ids)>();
  return glGenTransformFeedbacksNvAsFunction(n, ids);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTransformFeedbackNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsTransformFeedbackNV (GLuint id)
/// ```
int glIsTransformFeedbackNv(int id) {
  final glIsTransformFeedbackNvAsFunction = _glIsTransformFeedbackNv
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsTransformFeedbackNvAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPauseTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glPauseTransformFeedbackNV (void)
/// ```
void glPauseTransformFeedbackNv() {
  final glPauseTransformFeedbackNvAsFunction = _glPauseTransformFeedbackNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPauseTransformFeedbackNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResumeTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glResumeTransformFeedbackNV (void)
/// ```
void glResumeTransformFeedbackNv() {
  final glResumeTransformFeedbackNvAsFunction = _glResumeTransformFeedbackNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glResumeTransformFeedbackNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawTransformFeedbackNv;

/// ```c
/// GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id)
/// ```
void glDrawTransformFeedbackNv(int mode, int id) {
  final glDrawTransformFeedbackNvAsFunction = _glDrawTransformFeedbackNv
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id)>>()
      .asFunction<void Function(int mode, int id)>();
  return glDrawTransformFeedbackNvAsFunction(mode, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauInitNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUInitNV (const void *vdpDevice, const void *getProcAddress)
/// ```
void glVdpauInitNv(
  Pointer<NativeType> vdpDevice,
  Pointer<NativeType> getProcAddress,
) {
  final glVdpauInitNvAsFunction = _glVdpauInitNv
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> vdpDevice,
            Pointer<NativeType> getProcAddress,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> vdpDevice,
          Pointer<NativeType> getProcAddress,
        )
      >();
  return glVdpauInitNvAsFunction(vdpDevice, getProcAddress);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauFiniNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUFiniNV (void)
/// ```
void glVdpauFiniNv() {
  final glVdpauFiniNvAsFunction = _glVdpauFiniNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glVdpauFiniNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauRegisterVideoSurfaceNv;

/// ```c
/// GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
/// ```
Pointer<NativeType> glVdpauRegisterVideoSurfaceNv(
  Pointer<NativeType> vdpSurface,
  int target,
  int numTextureNames,
  Pointer<Uint32> textureNames,
) {
  final glVdpauRegisterVideoSurfaceNvAsFunction = _glVdpauRegisterVideoSurfaceNv
      .cast<
        NativeFunction<
          Pointer<NativeType> Function(
            Pointer<NativeType> vdpSurface,
            Uint32 target,
            Uint32 numTextureNames,
            Pointer<Uint32> textureNames,
          )
        >
      >()
      .asFunction<
        Pointer<NativeType> Function(
          Pointer<NativeType> vdpSurface,
          int target,
          int numTextureNames,
          Pointer<Uint32> textureNames,
        )
      >();
  return glVdpauRegisterVideoSurfaceNvAsFunction(
    vdpSurface,
    target,
    numTextureNames,
    textureNames,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauRegisterOutputSurfaceNv;

/// ```c
/// GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
/// ```
Pointer<NativeType> glVdpauRegisterOutputSurfaceNv(
  Pointer<NativeType> vdpSurface,
  int target,
  int numTextureNames,
  Pointer<Uint32> textureNames,
) {
  final glVdpauRegisterOutputSurfaceNvAsFunction =
      _glVdpauRegisterOutputSurfaceNv
          .cast<
            NativeFunction<
              Pointer<NativeType> Function(
                Pointer<NativeType> vdpSurface,
                Uint32 target,
                Uint32 numTextureNames,
                Pointer<Uint32> textureNames,
              )
            >
          >()
          .asFunction<
            Pointer<NativeType> Function(
              Pointer<NativeType> vdpSurface,
              int target,
              int numTextureNames,
              Pointer<Uint32> textureNames,
            )
          >();
  return glVdpauRegisterOutputSurfaceNvAsFunction(
    vdpSurface,
    target,
    numTextureNames,
    textureNames,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauIsSurfaceNv;

/// ```c
/// GLAPI GLboolean APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface)
/// ```
int glVdpauIsSurfaceNv(Pointer<NativeType> surface) {
  final glVdpauIsSurfaceNvAsFunction = _glVdpauIsSurfaceNv
      .cast<NativeFunction<Int32 Function(Pointer<NativeType> surface)>>()
      .asFunction<int Function(Pointer<NativeType> surface)>();
  return glVdpauIsSurfaceNvAsFunction(surface);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauUnregisterSurfaceNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface)
/// ```
void glVdpauUnregisterSurfaceNv(Pointer<NativeType> surface) {
  final glVdpauUnregisterSurfaceNvAsFunction = _glVdpauUnregisterSurfaceNv
      .cast<NativeFunction<Void Function(Pointer<NativeType> surface)>>()
      .asFunction<void Function(Pointer<NativeType> surface)>();
  return glVdpauUnregisterSurfaceNvAsFunction(surface);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauGetSurfaceivNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values)
/// ```
void glVdpauGetSurfaceivNv(
  Pointer<NativeType> surface,
  int pname,
  int count,
  Pointer<Uint32> length,
  Pointer<Int32> values,
) {
  final glVdpauGetSurfaceivNvAsFunction = _glVdpauGetSurfaceivNv
      .cast<
        NativeFunction<
          Void Function(
            Pointer<NativeType> surface,
            Uint32 pname,
            Uint32 count,
            Pointer<Uint32> length,
            Pointer<Int32> values,
          )
        >
      >()
      .asFunction<
        void Function(
          Pointer<NativeType> surface,
          int pname,
          int count,
          Pointer<Uint32> length,
          Pointer<Int32> values,
        )
      >();
  return glVdpauGetSurfaceivNvAsFunction(surface, pname, count, length, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauSurfaceAccessNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access)
/// ```
void glVdpauSurfaceAccessNv(Pointer<NativeType> surface, int access) {
  final glVdpauSurfaceAccessNvAsFunction = _glVdpauSurfaceAccessNv
      .cast<
        NativeFunction<
          Void Function(Pointer<NativeType> surface, Uint32 access)
        >
      >()
      .asFunction<void Function(Pointer<NativeType> surface, int access)>();
  return glVdpauSurfaceAccessNvAsFunction(surface, access);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauMapSurfacesNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
/// ```
void glVdpauMapSurfacesNv(
  int numSurfaces,
  Pointer<Pointer<NativeType>> surfaces,
) {
  final glVdpauMapSurfacesNvAsFunction = _glVdpauMapSurfacesNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numSurfaces,
            Pointer<Pointer<NativeType>> surfaces,
          )
        >
      >()
      .asFunction<
        void Function(int numSurfaces, Pointer<Pointer<NativeType>> surfaces)
      >();
  return glVdpauMapSurfacesNvAsFunction(numSurfaces, surfaces);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVdpauUnmapSurfacesNv;

/// ```c
/// GLAPI void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces)
/// ```
void glVdpauUnmapSurfacesNv(
  int numSurface,
  Pointer<Pointer<NativeType>> surfaces,
) {
  final glVdpauUnmapSurfacesNvAsFunction = _glVdpauUnmapSurfacesNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 numSurface,
            Pointer<Pointer<NativeType>> surfaces,
          )
        >
      >()
      .asFunction<
        void Function(int numSurface, Pointer<Pointer<NativeType>> surfaces)
      >();
  return glVdpauUnmapSurfacesNvAsFunction(numSurface, surfaces);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVdpauRegisterVideoSurfaceWithPictureStructureNv;

/// ```c
/// GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceWithPictureStructureNV (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure)
/// ```
Pointer<NativeType> glVdpauRegisterVideoSurfaceWithPictureStructureNv(
  Pointer<NativeType> vdpSurface,
  int target,
  int numTextureNames,
  Pointer<Uint32> textureNames,
  int isFrameStructure,
) {
  final glVdpauRegisterVideoSurfaceWithPictureStructureNvAsFunction =
      _glVdpauRegisterVideoSurfaceWithPictureStructureNv
          .cast<
            NativeFunction<
              Pointer<NativeType> Function(
                Pointer<NativeType> vdpSurface,
                Uint32 target,
                Uint32 numTextureNames,
                Pointer<Uint32> textureNames,
                Int32 isFrameStructure,
              )
            >
          >()
          .asFunction<
            Pointer<NativeType> Function(
              Pointer<NativeType> vdpSurface,
              int target,
              int numTextureNames,
              Pointer<Uint32> textureNames,
              int isFrameStructure,
            )
          >();
  return glVdpauRegisterVideoSurfaceWithPictureStructureNvAsFunction(
    vdpSurface,
    target,
    numTextureNames,
    textureNames,
    isFrameStructure,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushVertexArrayRangeNv;

/// ```c
/// GLAPI void APIENTRY glFlushVertexArrayRangeNV (void)
/// ```
void glFlushVertexArrayRangeNv() {
  final glFlushVertexArrayRangeNvAsFunction = _glFlushVertexArrayRangeNv
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFlushVertexArrayRangeNvAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexArrayRangeNv;

/// ```c
/// GLAPI void APIENTRY glVertexArrayRangeNV (GLsizei length, const void *pointer)
/// ```
void glVertexArrayRangeNv(int length, Pointer<NativeType> pointer) {
  final glVertexArrayRangeNvAsFunction = _glVertexArrayRangeNv
      .cast<
        NativeFunction<
          Void Function(Uint32 length, Pointer<NativeType> pointer)
        >
      >()
      .asFunction<void Function(int length, Pointer<NativeType> pointer)>();
  return glVertexArrayRangeNvAsFunction(length, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1i64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x)
/// ```
void glVertexAttribL1i64Nv(int index, int x) {
  final glVertexAttribL1i64NvAsFunction = _glVertexAttribL1i64Nv
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribL1i64NvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2i64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y)
/// ```
void glVertexAttribL2i64Nv(int index, int x, int y) {
  final glVertexAttribL2i64NvAsFunction = _glVertexAttribL2i64Nv
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x, Int64 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribL2i64NvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3i64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
void glVertexAttribL3i64Nv(int index, int x, int y, int z) {
  final glVertexAttribL3i64NvAsFunction = _glVertexAttribL3i64Nv
      .cast<
        NativeFunction<Void Function(Uint32 index, Int64 x, Int64 y, Int64 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribL3i64NvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4i64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
void glVertexAttribL4i64Nv(int index, int x, int y, int z, int w) {
  final glVertexAttribL4i64NvAsFunction = _glVertexAttribL4i64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int64 x, Int64 y, Int64 z, Int64 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribL4i64NvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1i64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v)
/// ```
void glVertexAttribL1i64vNv(int index, Pointer<Int64> v) {
  final glVertexAttribL1i64vNvAsFunction = _glVertexAttribL1i64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64> v)>>()
      .asFunction<void Function(int index, Pointer<Int64> v)>();
  return glVertexAttribL1i64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2i64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v)
/// ```
void glVertexAttribL2i64vNv(int index, Pointer<Int64> v) {
  final glVertexAttribL2i64vNvAsFunction = _glVertexAttribL2i64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64> v)>>()
      .asFunction<void Function(int index, Pointer<Int64> v)>();
  return glVertexAttribL2i64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3i64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v)
/// ```
void glVertexAttribL3i64vNv(int index, Pointer<Int64> v) {
  final glVertexAttribL3i64vNvAsFunction = _glVertexAttribL3i64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64> v)>>()
      .asFunction<void Function(int index, Pointer<Int64> v)>();
  return glVertexAttribL3i64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4i64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v)
/// ```
void glVertexAttribL4i64vNv(int index, Pointer<Int64> v) {
  final glVertexAttribL4i64vNvAsFunction = _glVertexAttribL4i64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64> v)>>()
      .asFunction<void Function(int index, Pointer<Int64> v)>();
  return glVertexAttribL4i64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1ui64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x)
/// ```
void glVertexAttribL1ui64Nv(int index, int x) {
  final glVertexAttribL1ui64NvAsFunction = _glVertexAttribL1ui64Nv
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttribL1ui64NvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2ui64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y)
/// ```
void glVertexAttribL2ui64Nv(int index, int x, int y) {
  final glVertexAttribL2ui64NvAsFunction = _glVertexAttribL2ui64Nv
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttribL2ui64NvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3ui64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
void glVertexAttribL3ui64Nv(int index, int x, int y, int z) {
  final glVertexAttribL3ui64NvAsFunction = _glVertexAttribL3ui64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttribL3ui64NvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4ui64Nv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
void glVertexAttribL4ui64Nv(int index, int x, int y, int z, int w) {
  final glVertexAttribL4ui64NvAsFunction = _glVertexAttribL4ui64Nv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z, Uint64 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttribL4ui64NvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL1ui64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v)
/// ```
void glVertexAttribL1ui64vNv(int index, Pointer<Uint64> v) {
  final glVertexAttribL1ui64vNvAsFunction = _glVertexAttribL1ui64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64> v)>>()
      .asFunction<void Function(int index, Pointer<Uint64> v)>();
  return glVertexAttribL1ui64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL2ui64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v)
/// ```
void glVertexAttribL2ui64vNv(int index, Pointer<Uint64> v) {
  final glVertexAttribL2ui64vNvAsFunction = _glVertexAttribL2ui64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64> v)>>()
      .asFunction<void Function(int index, Pointer<Uint64> v)>();
  return glVertexAttribL2ui64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL3ui64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v)
/// ```
void glVertexAttribL3ui64vNv(int index, Pointer<Uint64> v) {
  final glVertexAttribL3ui64vNvAsFunction = _glVertexAttribL3ui64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64> v)>>()
      .asFunction<void Function(int index, Pointer<Uint64> v)>();
  return glVertexAttribL3ui64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribL4ui64vNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v)
/// ```
void glVertexAttribL4ui64vNv(int index, Pointer<Uint64> v) {
  final glVertexAttribL4ui64vNvAsFunction = _glVertexAttribL4ui64vNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64> v)>>()
      .asFunction<void Function(int index, Pointer<Uint64> v)>();
  return glVertexAttribL4ui64vNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribLi64vNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params)
/// ```
void glGetVertexAttribLi64vNv(int index, int pname, Pointer<Int64> params) {
  final glGetVertexAttribLi64vNvAsFunction = _glGetVertexAttribLi64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int64> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int64> params)>();
  return glGetVertexAttribLi64vNvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribLui64vNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params)
/// ```
void glGetVertexAttribLui64vNv(int index, int pname, Pointer<Uint64> params) {
  final glGetVertexAttribLui64vNvAsFunction = _glGetVertexAttribLui64vNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Uint64> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Uint64> params)
      >();
  return glGetVertexAttribLui64vNvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribLFormatNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride)
/// ```
void glVertexAttribLFormatNv(int index, int size, int type, int stride) {
  final glVertexAttribLFormatNvAsFunction = _glVertexAttribLFormatNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride)
        >
      >()
      .asFunction<void Function(int index, int size, int type, int stride)>();
  return glVertexAttribLFormatNvAsFunction(index, size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBufferAddressRangeNv;

/// ```c
/// GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
/// ```
void glBufferAddressRangeNv(
  int pname,
  int index,
  int address,
  Pointer<Uint32> length,
) {
  final glBufferAddressRangeNvAsFunction = _glBufferAddressRangeNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 pname,
            Uint32 index,
            Uint64 address,
            Pointer<Uint32> length,
          )
        >
      >()
      .asFunction<
        void Function(int pname, int index, int address, Pointer<Uint32> length)
      >();
  return glBufferAddressRangeNvAsFunction(pname, index, address, length);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexFormatNv;

/// ```c
/// GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride)
/// ```
void glVertexFormatNv(int size, int type, int stride) {
  final glVertexFormatNvAsFunction = _glVertexFormatNv
      .cast<
        NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>
      >()
      .asFunction<void Function(int size, int type, int stride)>();
  return glVertexFormatNvAsFunction(size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalFormatNv;

/// ```c
/// GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride)
/// ```
void glNormalFormatNv(int type, int stride) {
  final glNormalFormatNvAsFunction = _glNormalFormatNv
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return glNormalFormatNvAsFunction(type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorFormatNv;

/// ```c
/// GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride)
/// ```
void glColorFormatNv(int size, int type, int stride) {
  final glColorFormatNvAsFunction = _glColorFormatNv
      .cast<
        NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>
      >()
      .asFunction<void Function(int size, int type, int stride)>();
  return glColorFormatNvAsFunction(size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexFormatNv;

/// ```c
/// GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride)
/// ```
void glIndexFormatNv(int type, int stride) {
  final glIndexFormatNvAsFunction = _glIndexFormatNv
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return glIndexFormatNvAsFunction(type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordFormatNv;

/// ```c
/// GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride)
/// ```
void glTexCoordFormatNv(int size, int type, int stride) {
  final glTexCoordFormatNvAsFunction = _glTexCoordFormatNv
      .cast<
        NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>
      >()
      .asFunction<void Function(int size, int type, int stride)>();
  return glTexCoordFormatNvAsFunction(size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlagFormatNv;

/// ```c
/// GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride)
/// ```
void glEdgeFlagFormatNv(int stride) {
  final glEdgeFlagFormatNvAsFunction = _glEdgeFlagFormatNv
      .cast<NativeFunction<Void Function(Uint32 stride)>>()
      .asFunction<void Function(int stride)>();
  return glEdgeFlagFormatNvAsFunction(stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSecondaryColorFormatNv;

/// ```c
/// GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride)
/// ```
void glSecondaryColorFormatNv(int size, int type, int stride) {
  final glSecondaryColorFormatNvAsFunction = _glSecondaryColorFormatNv
      .cast<
        NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>
      >()
      .asFunction<void Function(int size, int type, int stride)>();
  return glSecondaryColorFormatNvAsFunction(size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogCoordFormatNv;

/// ```c
/// GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride)
/// ```
void glFogCoordFormatNv(int type, int stride) {
  final glFogCoordFormatNvAsFunction = _glFogCoordFormatNv
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return glFogCoordFormatNvAsFunction(type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribFormatNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
/// ```
void glVertexAttribFormatNv(
  int index,
  int size,
  int type,
  int normalized,
  int stride,
) {
  final glVertexAttribFormatNvAsFunction = _glVertexAttribFormatNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 size,
            Uint32 type,
            Int32 normalized,
            Uint32 stride,
          )
        >
      >()
      .asFunction<
        void Function(int index, int size, int type, int normalized, int stride)
      >();
  return glVertexAttribFormatNvAsFunction(
    index,
    size,
    type,
    normalized,
    stride,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribIFormatNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride)
/// ```
void glVertexAttribIFormatNv(int index, int size, int type, int stride) {
  final glVertexAttribIFormatNvAsFunction = _glVertexAttribIFormatNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride)
        >
      >()
      .asFunction<void Function(int index, int size, int type, int stride)>();
  return glVertexAttribIFormatNvAsFunction(index, size, type, stride);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetIntegerui64iVNv;

/// ```c
/// GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result)
/// ```
void glGetIntegerui64iVNv(int value, int index, Pointer<Uint64> result) {
  final glGetIntegerui64iVNvAsFunction = _glGetIntegerui64iVNv
      .cast<
        NativeFunction<
          Void Function(Uint32 value, Uint32 index, Pointer<Uint64> result)
        >
      >()
      .asFunction<
        void Function(int value, int index, Pointer<Uint64> result)
      >();
  return glGetIntegerui64iVNvAsFunction(value, index, result);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAreProgramsResidentNv;

/// ```c
/// GLAPI GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences)
/// ```
int glAreProgramsResidentNv(
  int n,
  Pointer<Uint32> programs,
  Pointer<Int32> residences,
) {
  final glAreProgramsResidentNvAsFunction = _glAreProgramsResidentNv
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 n,
            Pointer<Uint32> programs,
            Pointer<Int32> residences,
          )
        >
      >()
      .asFunction<
        int Function(int n, Pointer<Uint32> programs, Pointer<Int32> residences)
      >();
  return glAreProgramsResidentNvAsFunction(n, programs, residences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindProgramNv;

/// ```c
/// GLAPI void APIENTRY glBindProgramNV (GLenum target, GLuint id)
/// ```
void glBindProgramNv(int target, int id) {
  final glBindProgramNvAsFunction = _glBindProgramNv
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return glBindProgramNvAsFunction(target, id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteProgramsNv;

/// ```c
/// GLAPI void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs)
/// ```
void glDeleteProgramsNv(int n, Pointer<Uint32> programs) {
  final glDeleteProgramsNvAsFunction = _glDeleteProgramsNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> programs)>();
  return glDeleteProgramsNvAsFunction(n, programs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glExecuteProgramNv;

/// ```c
/// GLAPI void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params)
/// ```
void glExecuteProgramNv(int target, int id, Pointer<Float> params) {
  final glExecuteProgramNvAsFunction = _glExecuteProgramNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 id, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int target, int id, Pointer<Float> params)>();
  return glExecuteProgramNvAsFunction(target, id, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenProgramsNv;

/// ```c
/// GLAPI void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs)
/// ```
void glGenProgramsNv(int n, Pointer<Uint32> programs) {
  final glGenProgramsNvAsFunction = _glGenProgramsNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> programs)>();
  return glGenProgramsNvAsFunction(n, programs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramParameterdvNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetProgramParameterdvNv(
  int target,
  int index,
  int pname,
  Pointer<Double> params,
) {
  final glGetProgramParameterdvNvAsFunction = _glGetProgramParameterdvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 pname,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int pname, Pointer<Double> params)
      >();
  return glGetProgramParameterdvNvAsFunction(target, index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetProgramParameterfvNv(
  int target,
  int index,
  int pname,
  Pointer<Float> params,
) {
  final glGetProgramParameterfvNvAsFunction = _glGetProgramParameterfvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int pname, Pointer<Float> params)
      >();
  return glGetProgramParameterfvNvAsFunction(target, index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramivNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint *params)
/// ```
void glGetProgramivNv(int id, int pname, Pointer<Int32> params) {
  final glGetProgramivNvAsFunction = _glGetProgramivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Int32> params)>();
  return glGetProgramivNvAsFunction(id, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetProgramStringNv;

/// ```c
/// GLAPI void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program)
/// ```
void glGetProgramStringNv(int id, int pname, Pointer<Uint8> program) {
  final glGetProgramStringNvAsFunction = _glGetProgramStringNv
      .cast<
        NativeFunction<
          Void Function(Uint32 id, Uint32 pname, Pointer<Uint8> program)
        >
      >()
      .asFunction<void Function(int id, int pname, Pointer<Uint8> program)>();
  return glGetProgramStringNvAsFunction(id, pname, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTrackMatrixivNv;

/// ```c
/// GLAPI void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params)
/// ```
void glGetTrackMatrixivNv(
  int target,
  int address,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTrackMatrixivNvAsFunction = _glGetTrackMatrixivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 address,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int address, int pname, Pointer<Int32> params)
      >();
  return glGetTrackMatrixivNvAsFunction(target, address, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribdvNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params)
/// ```
void glGetVertexAttribdvNv(int index, int pname, Pointer<Double> params) {
  final glGetVertexAttribdvNvAsFunction = _glGetVertexAttribdvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int index, int pname, Pointer<Double> params)
      >();
  return glGetVertexAttribdvNvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribfvNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params)
/// ```
void glGetVertexAttribfvNv(int index, int pname, Pointer<Float> params) {
  final glGetVertexAttribfvNvAsFunction = _glGetVertexAttribfvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Float> params)>();
  return glGetVertexAttribfvNvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribivNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params)
/// ```
void glGetVertexAttribivNv(int index, int pname, Pointer<Int32> params) {
  final glGetVertexAttribivNvAsFunction = _glGetVertexAttribivNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int index, int pname, Pointer<Int32> params)>();
  return glGetVertexAttribivNvAsFunction(index, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVertexAttribPointervNv;

/// ```c
/// GLAPI void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum pname, void **pointer)
/// ```
void glGetVertexAttribPointervNv(
  int index,
  int pname,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glGetVertexAttribPointervNvAsFunction = _glGetVertexAttribPointervNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 pname,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int pname,
          Pointer<Pointer<NativeType>> pointer,
        )
      >();
  return glGetVertexAttribPointervNvAsFunction(index, pname, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsProgramNv;

/// ```c
/// GLAPI GLboolean APIENTRY glIsProgramNV (GLuint id)
/// ```
int glIsProgramNv(int id) {
  final glIsProgramNvAsFunction = _glIsProgramNv
      .cast<NativeFunction<Int32 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return glIsProgramNvAsFunction(id);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadProgramNv;

/// ```c
/// GLAPI void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program)
/// ```
void glLoadProgramNv(int target, int id, int len, Pointer<Uint8> program) {
  final glLoadProgramNvAsFunction = _glLoadProgramNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 id,
            Uint32 len,
            Pointer<Uint8> program,
          )
        >
      >()
      .asFunction<
        void Function(int target, int id, int len, Pointer<Uint8> program)
      >();
  return glLoadProgramNvAsFunction(target, id, len, program);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameter4dNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glProgramParameter4dNv(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramParameter4dNvAsFunction = _glProgramParameter4dNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Double x,
            Double y,
            Double z,
            Double w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramParameter4dNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameter4dvNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v)
/// ```
void glProgramParameter4dvNv(int target, int index, Pointer<Double> v) {
  final glProgramParameter4dvNvAsFunction = _glProgramParameter4dvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Double> v)>();
  return glProgramParameter4dvNvAsFunction(target, index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameter4fNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glProgramParameter4fNv(
  int target,
  int index,
  double x,
  double y,
  double z,
  double w,
) {
  final glProgramParameter4fNvAsFunction = _glProgramParameter4fNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Float x,
            Float y,
            Float z,
            Float w,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int index,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glProgramParameter4fNvAsFunction(target, index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameter4fvNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v)
/// ```
void glProgramParameter4fvNv(int target, int index, Pointer<Float> v) {
  final glProgramParameter4fvNvAsFunction = _glProgramParameter4fvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 index, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int target, int index, Pointer<Float> v)>();
  return glProgramParameter4fvNvAsFunction(target, index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameters4dvNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index, GLsizei count, const GLdouble *v)
/// ```
void glProgramParameters4dvNv(
  int target,
  int index,
  int count,
  Pointer<Double> v,
) {
  final glProgramParameters4dvNvAsFunction = _glProgramParameters4dvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 count,
            Pointer<Double> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int count, Pointer<Double> v)
      >();
  return glProgramParameters4dvNvAsFunction(target, index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glProgramParameters4fvNv;

/// ```c
/// GLAPI void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index, GLsizei count, const GLfloat *v)
/// ```
void glProgramParameters4fvNv(
  int target,
  int index,
  int count,
  Pointer<Float> v,
) {
  final glProgramParameters4fvNvAsFunction = _glProgramParameters4fvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 index,
            Uint32 count,
            Pointer<Float> v,
          )
        >
      >()
      .asFunction<
        void Function(int target, int index, int count, Pointer<Float> v)
      >();
  return glProgramParameters4fvNvAsFunction(target, index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRequestResidentProgramsNv;

/// ```c
/// GLAPI void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint *programs)
/// ```
void glRequestResidentProgramsNv(int n, Pointer<Uint32> programs) {
  final glRequestResidentProgramsNvAsFunction = _glRequestResidentProgramsNv
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32> programs)>();
  return glRequestResidentProgramsNvAsFunction(n, programs);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTrackMatrixNv;

/// ```c
/// GLAPI void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform)
/// ```
void glTrackMatrixNv(int target, int address, int matrix, int transform) {
  final glTrackMatrixNvAsFunction = _glTrackMatrixNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 address,
            Uint32 matrix,
            Uint32 transform,
          )
        >
      >()
      .asFunction<
        void Function(int target, int address, int matrix, int transform)
      >();
  return glTrackMatrixNvAsFunction(target, address, matrix, transform);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribPointerNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer)
/// ```
void glVertexAttribPointerNv(
  int index,
  int fsize,
  int type,
  int stride,
  Pointer<NativeType> pointer,
) {
  final glVertexAttribPointerNvAsFunction = _glVertexAttribPointerNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Int32 fsize,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int fsize,
          int type,
          int stride,
          Pointer<NativeType> pointer,
        )
      >();
  return glVertexAttribPointerNvAsFunction(index, fsize, type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1dNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x)
/// ```
void glVertexAttrib1dNv(int index, double x) {
  final glVertexAttrib1dNvAsFunction = _glVertexAttrib1dNv
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1dNvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib1dvNv(int index, Pointer<Double> v) {
  final glVertexAttrib1dvNvAsFunction = _glVertexAttrib1dvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib1dvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1fNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1fNV (GLuint index, GLfloat x)
/// ```
void glVertexAttrib1fNv(int index, double x) {
  final glVertexAttrib1fNvAsFunction = _glVertexAttrib1fNv
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return glVertexAttrib1fNvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1fvNV (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib1fvNv(int index, Pointer<Float> v) {
  final glVertexAttrib1fvNvAsFunction = _glVertexAttrib1fvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib1fvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1sNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1sNV (GLuint index, GLshort x)
/// ```
void glVertexAttrib1sNv(int index, int x) {
  final glVertexAttrib1sNvAsFunction = _glVertexAttrib1sNv
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return glVertexAttrib1sNvAsFunction(index, x);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib1svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib1svNV (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib1svNv(int index, Pointer<Int16> v) {
  final glVertexAttrib1svNvAsFunction = _glVertexAttrib1svNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib1svNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2dNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y)
/// ```
void glVertexAttrib2dNv(int index, double x, double y) {
  final glVertexAttrib2dNvAsFunction = _glVertexAttrib2dNv
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2dNvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2dvNV (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib2dvNv(int index, Pointer<Double> v) {
  final glVertexAttrib2dvNvAsFunction = _glVertexAttrib2dvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib2dvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2fNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y)
/// ```
void glVertexAttrib2fNv(int index, double x, double y) {
  final glVertexAttrib2fNvAsFunction = _glVertexAttrib2fNv
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return glVertexAttrib2fNvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2fvNV (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib2fvNv(int index, Pointer<Float> v) {
  final glVertexAttrib2fvNvAsFunction = _glVertexAttrib2fvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib2fvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2sNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y)
/// ```
void glVertexAttrib2sNv(int index, int x, int y) {
  final glVertexAttrib2sNvAsFunction = _glVertexAttrib2sNv
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return glVertexAttrib2sNvAsFunction(index, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib2svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib2svNV (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib2svNv(int index, Pointer<Int16> v) {
  final glVertexAttrib2svNvAsFunction = _glVertexAttrib2svNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib2svNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3dNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
void glVertexAttrib3dNv(int index, double x, double y, double z) {
  final glVertexAttrib3dNvAsFunction = _glVertexAttrib3dNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3dNvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3dvNV (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib3dvNv(int index, Pointer<Double> v) {
  final glVertexAttrib3dvNvAsFunction = _glVertexAttrib3dvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib3dvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3fNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glVertexAttrib3fNv(int index, double x, double y, double z) {
  final glVertexAttrib3fNvAsFunction = _glVertexAttrib3fNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return glVertexAttrib3fNvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3fvNV (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib3fvNv(int index, Pointer<Float> v) {
  final glVertexAttrib3fvNvAsFunction = _glVertexAttrib3fvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib3fvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3sNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
void glVertexAttrib3sNv(int index, int x, int y, int z) {
  final glVertexAttrib3sNvAsFunction = _glVertexAttrib3sNv
      .cast<
        NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>
      >()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return glVertexAttrib3sNvAsFunction(index, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib3svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib3svNV (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib3svNv(int index, Pointer<Int16> v) {
  final glVertexAttrib3svNvAsFunction = _glVertexAttrib3svNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib3svNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4dNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
void glVertexAttrib4dNv(int index, double x, double y, double z, double w) {
  final glVertexAttrib4dNvAsFunction = _glVertexAttrib4dNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Double x, Double y, Double z, Double w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4dNvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4dvNV (GLuint index, const GLdouble *v)
/// ```
void glVertexAttrib4dvNv(int index, Pointer<Double> v) {
  final glVertexAttrib4dvNvAsFunction = _glVertexAttrib4dvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double> v)>>()
      .asFunction<void Function(int index, Pointer<Double> v)>();
  return glVertexAttrib4dvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4fNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glVertexAttrib4fNv(int index, double x, double y, double z, double w) {
  final glVertexAttrib4fNvAsFunction = _glVertexAttrib4fNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Float x, Float y, Float z, Float w)
        >
      >()
      .asFunction<
        void Function(int index, double x, double y, double z, double w)
      >();
  return glVertexAttrib4fNvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4fvNV (GLuint index, const GLfloat *v)
/// ```
void glVertexAttrib4fvNv(int index, Pointer<Float> v) {
  final glVertexAttrib4fvNvAsFunction = _glVertexAttrib4fvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float> v)>>()
      .asFunction<void Function(int index, Pointer<Float> v)>();
  return glVertexAttrib4fvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4sNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
void glVertexAttrib4sNv(int index, int x, int y, int z, int w) {
  final glVertexAttrib4sNvAsFunction = _glVertexAttrib4sNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4sNvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4svNV (GLuint index, const GLshort *v)
/// ```
void glVertexAttrib4svNv(int index, Pointer<Int16> v) {
  final glVertexAttrib4svNvAsFunction = _glVertexAttrib4svNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16> v)>>()
      .asFunction<void Function(int index, Pointer<Int16> v)>();
  return glVertexAttrib4svNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4ubNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
void glVertexAttrib4ubNv(int index, int x, int y, int z, int w) {
  final glVertexAttrib4ubNvAsFunction = _glVertexAttrib4ubNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)
        >
      >()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return glVertexAttrib4ubNvAsFunction(index, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttrib4ubvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttrib4ubvNV (GLuint index, const GLubyte *v)
/// ```
void glVertexAttrib4ubvNv(int index, Pointer<Uint8> v) {
  final glVertexAttrib4ubvNvAsFunction = _glVertexAttrib4ubvNv
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8> v)>>()
      .asFunction<void Function(int index, Pointer<Uint8> v)>();
  return glVertexAttrib4ubvNvAsFunction(index, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs1dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble *v)
/// ```
void glVertexAttribs1dvNv(int index, int count, Pointer<Double> v) {
  final glVertexAttribs1dvNvAsFunction = _glVertexAttribs1dvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Double> v)>();
  return glVertexAttribs1dvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs1fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat *v)
/// ```
void glVertexAttribs1fvNv(int index, int count, Pointer<Float> v) {
  final glVertexAttribs1fvNvAsFunction = _glVertexAttribs1fvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Float> v)>();
  return glVertexAttribs1fvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs1svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort *v)
/// ```
void glVertexAttribs1svNv(int index, int count, Pointer<Int16> v) {
  final glVertexAttribs1svNvAsFunction = _glVertexAttribs1svNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Int16> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Int16> v)>();
  return glVertexAttribs1svNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs2dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble *v)
/// ```
void glVertexAttribs2dvNv(int index, int count, Pointer<Double> v) {
  final glVertexAttribs2dvNvAsFunction = _glVertexAttribs2dvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Double> v)>();
  return glVertexAttribs2dvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs2fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat *v)
/// ```
void glVertexAttribs2fvNv(int index, int count, Pointer<Float> v) {
  final glVertexAttribs2fvNvAsFunction = _glVertexAttribs2fvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Float> v)>();
  return glVertexAttribs2fvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs2svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort *v)
/// ```
void glVertexAttribs2svNv(int index, int count, Pointer<Int16> v) {
  final glVertexAttribs2svNvAsFunction = _glVertexAttribs2svNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Int16> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Int16> v)>();
  return glVertexAttribs2svNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs3dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble *v)
/// ```
void glVertexAttribs3dvNv(int index, int count, Pointer<Double> v) {
  final glVertexAttribs3dvNvAsFunction = _glVertexAttribs3dvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Double> v)>();
  return glVertexAttribs3dvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs3fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat *v)
/// ```
void glVertexAttribs3fvNv(int index, int count, Pointer<Float> v) {
  final glVertexAttribs3fvNvAsFunction = _glVertexAttribs3fvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Float> v)>();
  return glVertexAttribs3fvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs3svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort *v)
/// ```
void glVertexAttribs3svNv(int index, int count, Pointer<Int16> v) {
  final glVertexAttribs3svNvAsFunction = _glVertexAttribs3svNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Int16> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Int16> v)>();
  return glVertexAttribs3svNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs4dvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble *v)
/// ```
void glVertexAttribs4dvNv(int index, int count, Pointer<Double> v) {
  final glVertexAttribs4dvNvAsFunction = _glVertexAttribs4dvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Double> v)>();
  return glVertexAttribs4dvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs4fvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat *v)
/// ```
void glVertexAttribs4fvNv(int index, int count, Pointer<Float> v) {
  final glVertexAttribs4fvNvAsFunction = _glVertexAttribs4fvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Float> v)>();
  return glVertexAttribs4fvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs4svNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort *v)
/// ```
void glVertexAttribs4svNv(int index, int count, Pointer<Int16> v) {
  final glVertexAttribs4svNvAsFunction = _glVertexAttribs4svNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Int16> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Int16> v)>();
  return glVertexAttribs4svNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexAttribs4ubvNv;

/// ```c
/// GLAPI void APIENTRY glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte *v)
/// ```
void glVertexAttribs4ubvNv(int index, int count, Pointer<Uint8> v) {
  final glVertexAttribs4ubvNvAsFunction = _glVertexAttribs4ubvNv
      .cast<
        NativeFunction<
          Void Function(Uint32 index, Uint32 count, Pointer<Uint8> v)
        >
      >()
      .asFunction<void Function(int index, int count, Pointer<Uint8> v)>();
  return glVertexAttribs4ubvNvAsFunction(index, count, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBeginVideoCaptureNv;

/// ```c
/// GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot)
/// ```
void glBeginVideoCaptureNv(int videoCaptureSlot) {
  final glBeginVideoCaptureNvAsFunction = _glBeginVideoCaptureNv
      .cast<NativeFunction<Void Function(Uint32 videoCaptureSlot)>>()
      .asFunction<void Function(int videoCaptureSlot)>();
  return glBeginVideoCaptureNvAsFunction(videoCaptureSlot);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindVideoCaptureStreamBufferNv;

/// ```c
/// GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
/// ```
void glBindVideoCaptureStreamBufferNv(
  int videoCaptureSlot,
  int stream,
  int frameRegion,
  int offset,
) {
  final glBindVideoCaptureStreamBufferNvAsFunction =
      _glBindVideoCaptureStreamBufferNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 videoCaptureSlot,
                Uint32 stream,
                Uint32 frameRegion,
                Uint64 offset,
              )
            >
          >()
          .asFunction<
            void Function(
              int videoCaptureSlot,
              int stream,
              int frameRegion,
              int offset,
            )
          >();
  return glBindVideoCaptureStreamBufferNvAsFunction(
    videoCaptureSlot,
    stream,
    frameRegion,
    offset,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glBindVideoCaptureStreamTextureNv;

/// ```c
/// GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
/// ```
void glBindVideoCaptureStreamTextureNv(
  int videoCaptureSlot,
  int stream,
  int frameRegion,
  int target,
  int texture,
) {
  final glBindVideoCaptureStreamTextureNvAsFunction =
      _glBindVideoCaptureStreamTextureNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 videoCaptureSlot,
                Uint32 stream,
                Uint32 frameRegion,
                Uint32 target,
                Uint32 texture,
              )
            >
          >()
          .asFunction<
            void Function(
              int videoCaptureSlot,
              int stream,
              int frameRegion,
              int target,
              int texture,
            )
          >();
  return glBindVideoCaptureStreamTextureNvAsFunction(
    videoCaptureSlot,
    stream,
    frameRegion,
    target,
    texture,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndVideoCaptureNv;

/// ```c
/// GLAPI void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot)
/// ```
void glEndVideoCaptureNv(int videoCaptureSlot) {
  final glEndVideoCaptureNvAsFunction = _glEndVideoCaptureNv
      .cast<NativeFunction<Void Function(Uint32 videoCaptureSlot)>>()
      .asFunction<void Function(int videoCaptureSlot)>();
  return glEndVideoCaptureNvAsFunction(videoCaptureSlot);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoCaptureivNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint *params)
/// ```
void glGetVideoCaptureivNv(
  int videoCaptureSlot,
  int pname,
  Pointer<Int32> params,
) {
  final glGetVideoCaptureivNvAsFunction = _glGetVideoCaptureivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoCaptureSlot,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int videoCaptureSlot, int pname, Pointer<Int32> params)
      >();
  return glGetVideoCaptureivNvAsFunction(videoCaptureSlot, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoCaptureStreamivNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
/// ```
void glGetVideoCaptureStreamivNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Int32> params,
) {
  final glGetVideoCaptureStreamivNvAsFunction = _glGetVideoCaptureStreamivNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoCaptureSlot,
            Uint32 stream,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int videoCaptureSlot,
          int stream,
          int pname,
          Pointer<Int32> params,
        )
      >();
  return glGetVideoCaptureStreamivNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoCaptureStreamfvNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
/// ```
void glGetVideoCaptureStreamfvNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Float> params,
) {
  final glGetVideoCaptureStreamfvNvAsFunction = _glGetVideoCaptureStreamfvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoCaptureSlot,
            Uint32 stream,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int videoCaptureSlot,
          int stream,
          int pname,
          Pointer<Float> params,
        )
      >();
  return glGetVideoCaptureStreamfvNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetVideoCaptureStreamdvNv;

/// ```c
/// GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
/// ```
void glGetVideoCaptureStreamdvNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Double> params,
) {
  final glGetVideoCaptureStreamdvNvAsFunction = _glGetVideoCaptureStreamdvNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 videoCaptureSlot,
            Uint32 stream,
            Uint32 pname,
            Pointer<Double> params,
          )
        >
      >()
      .asFunction<
        void Function(
          int videoCaptureSlot,
          int stream,
          int pname,
          Pointer<Double> params,
        )
      >();
  return glGetVideoCaptureStreamdvNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVideoCaptureNv;

/// ```c
/// GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
/// ```
int glVideoCaptureNv(
  int videoCaptureSlot,
  Pointer<Uint32> sequenceNum,
  Pointer<Uint64> captureTime,
) {
  final glVideoCaptureNvAsFunction = _glVideoCaptureNv
      .cast<
        NativeFunction<
          Uint32 Function(
            Uint32 videoCaptureSlot,
            Pointer<Uint32> sequenceNum,
            Pointer<Uint64> captureTime,
          )
        >
      >()
      .asFunction<
        int Function(
          int videoCaptureSlot,
          Pointer<Uint32> sequenceNum,
          Pointer<Uint64> captureTime,
        )
      >();
  return glVideoCaptureNvAsFunction(videoCaptureSlot, sequenceNum, captureTime);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVideoCaptureStreamParameterivNv;

/// ```c
/// GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
/// ```
void glVideoCaptureStreamParameterivNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Int32> params,
) {
  final glVideoCaptureStreamParameterivNvAsFunction =
      _glVideoCaptureStreamParameterivNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 videoCaptureSlot,
                Uint32 stream,
                Uint32 pname,
                Pointer<Int32> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int videoCaptureSlot,
              int stream,
              int pname,
              Pointer<Int32> params,
            )
          >();
  return glVideoCaptureStreamParameterivNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVideoCaptureStreamParameterfvNv;

/// ```c
/// GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
/// ```
void glVideoCaptureStreamParameterfvNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Float> params,
) {
  final glVideoCaptureStreamParameterfvNvAsFunction =
      _glVideoCaptureStreamParameterfvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 videoCaptureSlot,
                Uint32 stream,
                Uint32 pname,
                Pointer<Float> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int videoCaptureSlot,
              int stream,
              int pname,
              Pointer<Float> params,
            )
          >();
  return glVideoCaptureStreamParameterfvNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glVideoCaptureStreamParameterdvNv;

/// ```c
/// GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
/// ```
void glVideoCaptureStreamParameterdvNv(
  int videoCaptureSlot,
  int stream,
  int pname,
  Pointer<Double> params,
) {
  final glVideoCaptureStreamParameterdvNvAsFunction =
      _glVideoCaptureStreamParameterdvNv
          .cast<
            NativeFunction<
              Void Function(
                Uint32 videoCaptureSlot,
                Uint32 stream,
                Uint32 pname,
                Pointer<Double> params,
              )
            >
          >()
          .asFunction<
            void Function(
              int videoCaptureSlot,
              int stream,
              int pname,
              Pointer<Double> params,
            )
          >();
  return glVideoCaptureStreamParameterdvNvAsFunction(
    videoCaptureSlot,
    stream,
    pname,
    params,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewportSwizzleNv;

/// ```c
/// GLAPI void APIENTRY glViewportSwizzleNV (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
/// ```
void glViewportSwizzleNv(
  int index,
  int swizzlex,
  int swizzley,
  int swizzlez,
  int swizzlew,
) {
  final glViewportSwizzleNvAsFunction = _glViewportSwizzleNv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 index,
            Uint32 swizzlex,
            Uint32 swizzley,
            Uint32 swizzlez,
            Uint32 swizzlew,
          )
        >
      >()
      .asFunction<
        void Function(
          int index,
          int swizzlex,
          int swizzley,
          int swizzlez,
          int swizzlew,
        )
      >();
  return glViewportSwizzleNvAsFunction(
    index,
    swizzlex,
    swizzley,
    swizzlez,
    swizzlew,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFramebufferTextureMultiviewOvr;

/// ```c
/// GLAPI void APIENTRY glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
/// ```
void glFramebufferTextureMultiviewOvr(
  int target,
  int attachment,
  int texture,
  int level,
  int baseViewIndex,
  int numViews,
) {
  final glFramebufferTextureMultiviewOvrAsFunction =
      _glFramebufferTextureMultiviewOvr
          .cast<
            NativeFunction<
              Void Function(
                Uint32 target,
                Uint32 attachment,
                Uint32 texture,
                Int32 level,
                Int32 baseViewIndex,
                Uint32 numViews,
              )
            >
          >()
          .asFunction<
            void Function(
              int target,
              int attachment,
              int texture,
              int level,
              int baseViewIndex,
              int numViews,
            )
          >();
  return glFramebufferTextureMultiviewOvrAsFunction(
    target,
    attachment,
    texture,
    level,
    baseViewIndex,
    numViews,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glHintPgi;

/// ```c
/// GLAPI void APIENTRY glHintPGI (GLenum target, GLint mode)
/// ```
void glHintPgi(int target, int mode) {
  final glHintPgiAsFunction = _glHintPgi
      .cast<NativeFunction<Void Function(Uint32 target, Int32 mode)>>()
      .asFunction<void Function(int target, int mode)>();
  return glHintPgiAsFunction(target, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDetailTexFuncSgis;

/// ```c
/// GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points)
/// ```
void glDetailTexFuncSgis(int target, int n, Pointer<Float> points) {
  final glDetailTexFuncSgisAsFunction = _glDetailTexFuncSgis
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 n, Pointer<Float> points)
        >
      >()
      .asFunction<void Function(int target, int n, Pointer<Float> points)>();
  return glDetailTexFuncSgisAsFunction(target, n, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDetailTexFuncSgis;

/// ```c
/// GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat *points)
/// ```
void glGetDetailTexFuncSgis(int target, Pointer<Float> points) {
  final glGetDetailTexFuncSgisAsFunction = _glGetDetailTexFuncSgis
      .cast<
        NativeFunction<Void Function(Uint32 target, Pointer<Float> points)>
      >()
      .asFunction<void Function(int target, Pointer<Float> points)>();
  return glGetDetailTexFuncSgisAsFunction(target, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogFuncSgis;

/// ```c
/// GLAPI void APIENTRY glFogFuncSGIS (GLsizei n, const GLfloat *points)
/// ```
void glFogFuncSgis(int n, Pointer<Float> points) {
  final glFogFuncSgisAsFunction = _glFogFuncSgis
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Float> points)>>()
      .asFunction<void Function(int n, Pointer<Float> points)>();
  return glFogFuncSgisAsFunction(n, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFogFuncSgis;

/// ```c
/// GLAPI void APIENTRY glGetFogFuncSGIS (GLfloat *points)
/// ```
void glGetFogFuncSgis(Pointer<Float> points) {
  final glGetFogFuncSgisAsFunction = _glGetFogFuncSgis
      .cast<NativeFunction<Void Function(Pointer<Float> points)>>()
      .asFunction<void Function(Pointer<Float> points)>();
  return glGetFogFuncSgisAsFunction(points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleMaskSgis;

/// ```c
/// GLAPI void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert)
/// ```
void glSampleMaskSgis(double value, int invert) {
  final glSampleMaskSgisAsFunction = _glSampleMaskSgis
      .cast<NativeFunction<Void Function(Float value, Int32 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return glSampleMaskSgisAsFunction(value, invert);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSamplePatternSgis;

/// ```c
/// GLAPI void APIENTRY glSamplePatternSGIS (GLenum pattern)
/// ```
void glSamplePatternSgis(int pattern) {
  final glSamplePatternSgisAsFunction = _glSamplePatternSgis
      .cast<NativeFunction<Void Function(Uint32 pattern)>>()
      .asFunction<void Function(int pattern)>();
  return glSamplePatternSgisAsFunction(pattern);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTexGenParameteriSgis;

/// ```c
/// GLAPI void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint param)
/// ```
void glPixelTexGenParameteriSgis(int pname, int param) {
  final glPixelTexGenParameteriSgisAsFunction = _glPixelTexGenParameteriSgis
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPixelTexGenParameteriSgisAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTexGenParameterivSgis;

/// ```c
/// GLAPI void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params)
/// ```
void glPixelTexGenParameterivSgis(int pname, Pointer<Int32> params) {
  final glPixelTexGenParameterivSgisAsFunction = _glPixelTexGenParameterivSgis
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glPixelTexGenParameterivSgisAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTexGenParameterfSgis;

/// ```c
/// GLAPI void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param)
/// ```
void glPixelTexGenParameterfSgis(int pname, double param) {
  final glPixelTexGenParameterfSgisAsFunction = _glPixelTexGenParameterfSgis
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPixelTexGenParameterfSgisAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTexGenParameterfvSgis;

/// ```c
/// GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params)
/// ```
void glPixelTexGenParameterfvSgis(int pname, Pointer<Float> params) {
  final glPixelTexGenParameterfvSgisAsFunction = _glPixelTexGenParameterfvSgis
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glPixelTexGenParameterfvSgisAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelTexGenParameterivSgis;

/// ```c
/// GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params)
/// ```
void glGetPixelTexGenParameterivSgis(int pname, Pointer<Int32> params) {
  final glGetPixelTexGenParameterivSgisAsFunction =
      _glGetPixelTexGenParameterivSgis
          .cast<
            NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
          >()
          .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glGetPixelTexGenParameterivSgisAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelTexGenParameterfvSgis;

/// ```c
/// GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params)
/// ```
void glGetPixelTexGenParameterfvSgis(int pname, Pointer<Float> params) {
  final glGetPixelTexGenParameterfvSgisAsFunction =
      _glGetPixelTexGenParameterfvSgis
          .cast<
            NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
          >()
          .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glGetPixelTexGenParameterfvSgisAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfSgis;

/// ```c
/// GLAPI void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param)
/// ```
void glPointParameterfSgis(int pname, double param) {
  final glPointParameterfSgisAsFunction = _glPointParameterfSgis
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPointParameterfSgisAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointParameterfvSgis;

/// ```c
/// GLAPI void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat *params)
/// ```
void glPointParameterfvSgis(int pname, Pointer<Float> params) {
  final glPointParameterfvSgisAsFunction = _glPointParameterfvSgis
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glPointParameterfvSgisAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSharpenTexFuncSgis;

/// ```c
/// GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points)
/// ```
void glSharpenTexFuncSgis(int target, int n, Pointer<Float> points) {
  final glSharpenTexFuncSgisAsFunction = _glSharpenTexFuncSgis
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 n, Pointer<Float> points)
        >
      >()
      .asFunction<void Function(int target, int n, Pointer<Float> points)>();
  return glSharpenTexFuncSgisAsFunction(target, n, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSharpenTexFuncSgis;

/// ```c
/// GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points)
/// ```
void glGetSharpenTexFuncSgis(int target, Pointer<Float> points) {
  final glGetSharpenTexFuncSgisAsFunction = _glGetSharpenTexFuncSgis
      .cast<
        NativeFunction<Void Function(Uint32 target, Pointer<Float> points)>
      >()
      .asFunction<void Function(int target, Pointer<Float> points)>();
  return glGetSharpenTexFuncSgisAsFunction(target, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage4Dsgis;

/// ```c
/// GLAPI void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexImage4Dsgis(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int size4d,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexImage4DsgisAsFunction = _glTexImage4Dsgis
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 size4d,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int size4d,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexImage4DsgisAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    size4d,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage4Dsgis;

/// ```c
/// GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels)
/// ```
void glTexSubImage4Dsgis(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int woffset,
  int width,
  int height,
  int depth,
  int size4d,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage4DsgisAsFunction = _glTexSubImage4Dsgis
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 woffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 size4d,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int woffset,
          int width,
          int height,
          int depth,
          int size4d,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage4DsgisAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    woffset,
    width,
    height,
    depth,
    size4d,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTextureColorMaskSgis;

/// ```c
/// GLAPI void APIENTRY glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
/// ```
void glTextureColorMaskSgis(int red, int green, int blue, int alpha) {
  final glTextureColorMaskSgisAsFunction = _glTextureColorMaskSgis
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glTextureColorMaskSgisAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexFilterFuncSgis;

/// ```c
/// GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights)
/// ```
void glGetTexFilterFuncSgis(int target, int filter, Pointer<Float> weights) {
  final glGetTexFilterFuncSgisAsFunction = _glGetTexFilterFuncSgis
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 filter, Pointer<Float> weights)
        >
      >()
      .asFunction<
        void Function(int target, int filter, Pointer<Float> weights)
      >();
  return glGetTexFilterFuncSgisAsFunction(target, filter, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexFilterFuncSgis;

/// ```c
/// GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
/// ```
void glTexFilterFuncSgis(
  int target,
  int filter,
  int n,
  Pointer<Float> weights,
) {
  final glTexFilterFuncSgisAsFunction = _glTexFilterFuncSgis
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 filter,
            Uint32 n,
            Pointer<Float> weights,
          )
        >
      >()
      .asFunction<
        void Function(int target, int filter, int n, Pointer<Float> weights)
      >();
  return glTexFilterFuncSgisAsFunction(target, filter, n, weights);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAsyncMarkerSgix;

/// ```c
/// GLAPI void APIENTRY glAsyncMarkerSGIX (GLuint marker)
/// ```
void glAsyncMarkerSgix(int marker) {
  final glAsyncMarkerSgixAsFunction = _glAsyncMarkerSgix
      .cast<NativeFunction<Void Function(Uint32 marker)>>()
      .asFunction<void Function(int marker)>();
  return glAsyncMarkerSgixAsFunction(marker);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinishAsyncSgix;

/// ```c
/// GLAPI GLint APIENTRY glFinishAsyncSGIX (GLuint *markerp)
/// ```
int glFinishAsyncSgix(Pointer<Uint32> markerp) {
  final glFinishAsyncSgixAsFunction = _glFinishAsyncSgix
      .cast<NativeFunction<Int32 Function(Pointer<Uint32> markerp)>>()
      .asFunction<int Function(Pointer<Uint32> markerp)>();
  return glFinishAsyncSgixAsFunction(markerp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPollAsyncSgix;

/// ```c
/// GLAPI GLint APIENTRY glPollAsyncSGIX (GLuint *markerp)
/// ```
int glPollAsyncSgix(Pointer<Uint32> markerp) {
  final glPollAsyncSgixAsFunction = _glPollAsyncSgix
      .cast<NativeFunction<Int32 Function(Pointer<Uint32> markerp)>>()
      .asFunction<int Function(Pointer<Uint32> markerp)>();
  return glPollAsyncSgixAsFunction(markerp);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenAsyncMarkersSgix;

/// ```c
/// GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei range)
/// ```
int glGenAsyncMarkersSgix(int range) {
  final glGenAsyncMarkersSgixAsFunction = _glGenAsyncMarkersSgix
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return glGenAsyncMarkersSgixAsFunction(range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteAsyncMarkersSgix;

/// ```c
/// GLAPI void APIENTRY glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range)
/// ```
void glDeleteAsyncMarkersSgix(int marker, int range) {
  final glDeleteAsyncMarkersSgixAsFunction = _glDeleteAsyncMarkersSgix
      .cast<NativeFunction<Void Function(Uint32 marker, Uint32 range)>>()
      .asFunction<void Function(int marker, int range)>();
  return glDeleteAsyncMarkersSgixAsFunction(marker, range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsAsyncMarkerSgix;

/// ```c
/// GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint marker)
/// ```
int glIsAsyncMarkerSgix(int marker) {
  final glIsAsyncMarkerSgixAsFunction = _glIsAsyncMarkerSgix
      .cast<NativeFunction<Int32 Function(Uint32 marker)>>()
      .asFunction<int Function(int marker)>();
  return glIsAsyncMarkerSgixAsFunction(marker);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlushRasterSgix;

/// ```c
/// GLAPI void APIENTRY glFlushRasterSGIX (void)
/// ```
void glFlushRasterSgix() {
  final glFlushRasterSgixAsFunction = _glFlushRasterSgix
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFlushRasterSgixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentColorMaterialSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode)
/// ```
void glFragmentColorMaterialSgix(int face, int mode) {
  final glFragmentColorMaterialSgixAsFunction = _glFragmentColorMaterialSgix
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return glFragmentColorMaterialSgixAsFunction(face, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightfSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param)
/// ```
void glFragmentLightfSgix(int light, int pname, double param) {
  final glFragmentLightfSgixAsFunction = _glFragmentLightfSgix
      .cast<
        NativeFunction<Void Function(Uint32 light, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int light, int pname, double param)>();
  return glFragmentLightfSgixAsFunction(light, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightfvSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params)
/// ```
void glFragmentLightfvSgix(int light, int pname, Pointer<Float> params) {
  final glFragmentLightfvSgixAsFunction = _glFragmentLightfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Float> params)>();
  return glFragmentLightfvSgixAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightiSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param)
/// ```
void glFragmentLightiSgix(int light, int pname, int param) {
  final glFragmentLightiSgixAsFunction = _glFragmentLightiSgix
      .cast<
        NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int light, int pname, int param)>();
  return glFragmentLightiSgixAsFunction(light, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightivSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params)
/// ```
void glFragmentLightivSgix(int light, int pname, Pointer<Int32> params) {
  final glFragmentLightivSgixAsFunction = _glFragmentLightivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glFragmentLightivSgixAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightModelfSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat param)
/// ```
void glFragmentLightModelfSgix(int pname, double param) {
  final glFragmentLightModelfSgixAsFunction = _glFragmentLightModelfSgix
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glFragmentLightModelfSgixAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightModelfvSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params)
/// ```
void glFragmentLightModelfvSgix(int pname, Pointer<Float> params) {
  final glFragmentLightModelfvSgixAsFunction = _glFragmentLightModelfvSgix
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glFragmentLightModelfvSgixAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightModeliSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param)
/// ```
void glFragmentLightModeliSgix(int pname, int param) {
  final glFragmentLightModeliSgixAsFunction = _glFragmentLightModeliSgix
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glFragmentLightModeliSgixAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentLightModelivSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint *params)
/// ```
void glFragmentLightModelivSgix(int pname, Pointer<Int32> params) {
  final glFragmentLightModelivSgixAsFunction = _glFragmentLightModelivSgix
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glFragmentLightModelivSgixAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentMaterialfSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param)
/// ```
void glFragmentMaterialfSgix(int face, int pname, double param) {
  final glFragmentMaterialfSgixAsFunction = _glFragmentMaterialfSgix
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int face, int pname, double param)>();
  return glFragmentMaterialfSgixAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentMaterialfvSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params)
/// ```
void glFragmentMaterialfvSgix(int face, int pname, Pointer<Float> params) {
  final glFragmentMaterialfvSgixAsFunction = _glFragmentMaterialfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Float> params)>();
  return glFragmentMaterialfvSgixAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentMaterialiSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param)
/// ```
void glFragmentMaterialiSgix(int face, int pname, int param) {
  final glFragmentMaterialiSgixAsFunction = _glFragmentMaterialiSgix
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int face, int pname, int param)>();
  return glFragmentMaterialiSgixAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFragmentMaterialivSgix;

/// ```c
/// GLAPI void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params)
/// ```
void glFragmentMaterialivSgix(int face, int pname, Pointer<Int32> params) {
  final glFragmentMaterialivSgixAsFunction = _glFragmentMaterialivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Int32> params)>();
  return glFragmentMaterialivSgixAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragmentLightfvSgix;

/// ```c
/// GLAPI void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params)
/// ```
void glGetFragmentLightfvSgix(int light, int pname, Pointer<Float> params) {
  final glGetFragmentLightfvSgixAsFunction = _glGetFragmentLightfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Float> params)>();
  return glGetFragmentLightfvSgixAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragmentLightivSgix;

/// ```c
/// GLAPI void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params)
/// ```
void glGetFragmentLightivSgix(int light, int pname, Pointer<Int32> params) {
  final glGetFragmentLightivSgixAsFunction = _glGetFragmentLightivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glGetFragmentLightivSgixAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragmentMaterialfvSgix;

/// ```c
/// GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params)
/// ```
void glGetFragmentMaterialfvSgix(int face, int pname, Pointer<Float> params) {
  final glGetFragmentMaterialfvSgixAsFunction = _glGetFragmentMaterialfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Float> params)>();
  return glGetFragmentMaterialfvSgixAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFragmentMaterialivSgix;

/// ```c
/// GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params)
/// ```
void glGetFragmentMaterialivSgix(int face, int pname, Pointer<Int32> params) {
  final glGetFragmentMaterialivSgixAsFunction = _glGetFragmentMaterialivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Int32> params)>();
  return glGetFragmentMaterialivSgixAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightEnviSgix;

/// ```c
/// GLAPI void APIENTRY glLightEnviSGIX (GLenum pname, GLint param)
/// ```
void glLightEnviSgix(int pname, int param) {
  final glLightEnviSgixAsFunction = _glLightEnviSgix
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glLightEnviSgixAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrameZoomSgix;

/// ```c
/// GLAPI void APIENTRY glFrameZoomSGIX (GLint factor)
/// ```
void glFrameZoomSgix(int factor) {
  final glFrameZoomSgixAsFunction = _glFrameZoomSgix
      .cast<NativeFunction<Void Function(Int32 factor)>>()
      .asFunction<void Function(int factor)>();
  return glFrameZoomSgixAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIglooInterfaceSgix;

/// ```c
/// GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum pname, const void *params)
/// ```
void glIglooInterfaceSgix(int pname, Pointer<NativeType> params) {
  final glIglooInterfaceSgixAsFunction = _glIglooInterfaceSgix
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<NativeType> params)>
      >()
      .asFunction<void Function(int pname, Pointer<NativeType> params)>();
  return glIglooInterfaceSgixAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetInstrumentsSgix;

/// ```c
/// GLAPI GLint APIENTRY glGetInstrumentsSGIX (void)
/// ```
int glGetInstrumentsSgix() {
  final glGetInstrumentsSgixAsFunction = _glGetInstrumentsSgix
      .cast<NativeFunction<Int32 Function()>>()
      .asFunction<int Function()>();
  return glGetInstrumentsSgixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInstrumentsBufferSgix;

/// ```c
/// GLAPI void APIENTRY glInstrumentsBufferSGIX (GLsizei size, GLint *buffer)
/// ```
void glInstrumentsBufferSgix(int size, Pointer<Int32> buffer) {
  final glInstrumentsBufferSgixAsFunction = _glInstrumentsBufferSgix
      .cast<NativeFunction<Void Function(Uint32 size, Pointer<Int32> buffer)>>()
      .asFunction<void Function(int size, Pointer<Int32> buffer)>();
  return glInstrumentsBufferSgixAsFunction(size, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPollInstrumentsSgix;

/// ```c
/// GLAPI GLint APIENTRY glPollInstrumentsSGIX (GLint *marker_p)
/// ```
int glPollInstrumentsSgix(Pointer<Int32> markerP) {
  final glPollInstrumentsSgixAsFunction = _glPollInstrumentsSgix
      .cast<NativeFunction<Int32 Function(Pointer<Int32> markerP)>>()
      .asFunction<int Function(Pointer<Int32> markerP)>();
  return glPollInstrumentsSgixAsFunction(markerP);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReadInstrumentsSgix;

/// ```c
/// GLAPI void APIENTRY glReadInstrumentsSGIX (GLint marker)
/// ```
void glReadInstrumentsSgix(int marker) {
  final glReadInstrumentsSgixAsFunction = _glReadInstrumentsSgix
      .cast<NativeFunction<Void Function(Int32 marker)>>()
      .asFunction<void Function(int marker)>();
  return glReadInstrumentsSgixAsFunction(marker);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStartInstrumentsSgix;

/// ```c
/// GLAPI void APIENTRY glStartInstrumentsSGIX (void)
/// ```
void glStartInstrumentsSgix() {
  final glStartInstrumentsSgixAsFunction = _glStartInstrumentsSgix
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glStartInstrumentsSgixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStopInstrumentsSgix;

/// ```c
/// GLAPI void APIENTRY glStopInstrumentsSGIX (GLint marker)
/// ```
void glStopInstrumentsSgix(int marker) {
  final glStopInstrumentsSgixAsFunction = _glStopInstrumentsSgix
      .cast<NativeFunction<Void Function(Int32 marker)>>()
      .asFunction<void Function(int marker)>();
  return glStopInstrumentsSgixAsFunction(marker);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetListParameterfvSgix;

/// ```c
/// GLAPI void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params)
/// ```
void glGetListParameterfvSgix(int list, int pname, Pointer<Float> params) {
  final glGetListParameterfvSgixAsFunction = _glGetListParameterfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 list, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int list, int pname, Pointer<Float> params)>();
  return glGetListParameterfvSgixAsFunction(list, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetListParameterivSgix;

/// ```c
/// GLAPI void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params)
/// ```
void glGetListParameterivSgix(int list, int pname, Pointer<Int32> params) {
  final glGetListParameterivSgixAsFunction = _glGetListParameterivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 list, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int list, int pname, Pointer<Int32> params)>();
  return glGetListParameterivSgixAsFunction(list, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListParameterfSgix;

/// ```c
/// GLAPI void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param)
/// ```
void glListParameterfSgix(int list, int pname, double param) {
  final glListParameterfSgixAsFunction = _glListParameterfSgix
      .cast<
        NativeFunction<Void Function(Uint32 list, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int list, int pname, double param)>();
  return glListParameterfSgixAsFunction(list, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListParameterfvSgix;

/// ```c
/// GLAPI void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params)
/// ```
void glListParameterfvSgix(int list, int pname, Pointer<Float> params) {
  final glListParameterfvSgixAsFunction = _glListParameterfvSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 list, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int list, int pname, Pointer<Float> params)>();
  return glListParameterfvSgixAsFunction(list, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListParameteriSgix;

/// ```c
/// GLAPI void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint param)
/// ```
void glListParameteriSgix(int list, int pname, int param) {
  final glListParameteriSgixAsFunction = _glListParameteriSgix
      .cast<
        NativeFunction<Void Function(Uint32 list, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int list, int pname, int param)>();
  return glListParameteriSgixAsFunction(list, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListParameterivSgix;

/// ```c
/// GLAPI void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params)
/// ```
void glListParameterivSgix(int list, int pname, Pointer<Int32> params) {
  final glListParameterivSgixAsFunction = _glListParameterivSgix
      .cast<
        NativeFunction<
          Void Function(Uint32 list, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int list, int pname, Pointer<Int32> params)>();
  return glListParameterivSgixAsFunction(list, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTexGenSgix;

/// ```c
/// GLAPI void APIENTRY glPixelTexGenSGIX (GLenum mode)
/// ```
void glPixelTexGenSgix(int mode) {
  final glPixelTexGenSgixAsFunction = _glPixelTexGenSgix
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glPixelTexGenSgixAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeformationMap3dSgix;

/// ```c
/// GLAPI void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
/// ```
void glDeformationMap3dSgix(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  double w1,
  double w2,
  int wstride,
  int worder,
  Pointer<Double> points,
) {
  final glDeformationMap3dSgixAsFunction = _glDeformationMap3dSgix
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Double u1,
            Double u2,
            Int32 ustride,
            Int32 uorder,
            Double v1,
            Double v2,
            Int32 vstride,
            Int32 vorder,
            Double w1,
            Double w2,
            Int32 wstride,
            Int32 worder,
            Pointer<Double> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          double w1,
          double w2,
          int wstride,
          int worder,
          Pointer<Double> points,
        )
      >();
  return glDeformationMap3dSgixAsFunction(
    target,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    w1,
    w2,
    wstride,
    worder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeformationMap3fSgix;

/// ```c
/// GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
/// ```
void glDeformationMap3fSgix(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  double w1,
  double w2,
  int wstride,
  int worder,
  Pointer<Float> points,
) {
  final glDeformationMap3fSgixAsFunction = _glDeformationMap3fSgix
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Float u1,
            Float u2,
            Int32 ustride,
            Int32 uorder,
            Float v1,
            Float v2,
            Int32 vstride,
            Int32 vorder,
            Float w1,
            Float w2,
            Int32 wstride,
            Int32 worder,
            Pointer<Float> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          double w1,
          double w2,
          int wstride,
          int worder,
          Pointer<Float> points,
        )
      >();
  return glDeformationMap3fSgixAsFunction(
    target,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    w1,
    w2,
    wstride,
    worder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeformSgix;

/// ```c
/// GLAPI void APIENTRY glDeformSGIX (GLbitfield mask)
/// ```
void glDeformSgix(int mask) {
  final glDeformSgixAsFunction = _glDeformSgix
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glDeformSgixAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadIdentityDeformationMapSgix;

/// ```c
/// GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask)
/// ```
void glLoadIdentityDeformationMapSgix(int mask) {
  final glLoadIdentityDeformationMapSgixAsFunction =
      _glLoadIdentityDeformationMapSgix
          .cast<NativeFunction<Void Function(Uint32 mask)>>()
          .asFunction<void Function(int mask)>();
  return glLoadIdentityDeformationMapSgixAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReferencePlaneSgix;

/// ```c
/// GLAPI void APIENTRY glReferencePlaneSGIX (const GLdouble *equation)
/// ```
void glReferencePlaneSgix(Pointer<Double> equation) {
  final glReferencePlaneSgixAsFunction = _glReferencePlaneSgix
      .cast<NativeFunction<Void Function(Pointer<Double> equation)>>()
      .asFunction<void Function(Pointer<Double> equation)>();
  return glReferencePlaneSgixAsFunction(equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpriteParameterfSgix;

/// ```c
/// GLAPI void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param)
/// ```
void glSpriteParameterfSgix(int pname, double param) {
  final glSpriteParameterfSgixAsFunction = _glSpriteParameterfSgix
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glSpriteParameterfSgixAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpriteParameterfvSgix;

/// ```c
/// GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params)
/// ```
void glSpriteParameterfvSgix(int pname, Pointer<Float> params) {
  final glSpriteParameterfvSgixAsFunction = _glSpriteParameterfvSgix
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glSpriteParameterfvSgixAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpriteParameteriSgix;

/// ```c
/// GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param)
/// ```
void glSpriteParameteriSgix(int pname, int param) {
  final glSpriteParameteriSgixAsFunction = _glSpriteParameteriSgix
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glSpriteParameteriSgixAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSpriteParameterivSgix;

/// ```c
/// GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint *params)
/// ```
void glSpriteParameterivSgix(int pname, Pointer<Int32> params) {
  final glSpriteParameterivSgixAsFunction = _glSpriteParameterivSgix
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glSpriteParameterivSgixAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTagSampleBufferSgix;

/// ```c
/// GLAPI void APIENTRY glTagSampleBufferSGIX (void)
/// ```
void glTagSampleBufferSgix() {
  final glTagSampleBufferSgixAsFunction = _glTagSampleBufferSgix
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glTagSampleBufferSgixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableSgi;

/// ```c
/// GLAPI void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)
/// ```
void glColorTableSgi(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  Pointer<NativeType> table,
) {
  final glColorTableSgiAsFunction = _glColorTableSgi
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int format,
          int type,
          Pointer<NativeType> table,
        )
      >();
  return glColorTableSgiAsFunction(
    target,
    internalformat,
    width,
    format,
    type,
    table,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableParameterfvSgi;

/// ```c
/// GLAPI void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params)
/// ```
void glColorTableParameterfvSgi(int target, int pname, Pointer<Float> params) {
  final glColorTableParameterfvSgiAsFunction = _glColorTableParameterfvSgi
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glColorTableParameterfvSgiAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableParameterivSgi;

/// ```c
/// GLAPI void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params)
/// ```
void glColorTableParameterivSgi(int target, int pname, Pointer<Int32> params) {
  final glColorTableParameterivSgiAsFunction = _glColorTableParameterivSgi
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glColorTableParameterivSgiAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyColorTableSgi;

/// ```c
/// GLAPI void APIENTRY glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
void glCopyColorTableSgi(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
) {
  final glCopyColorTableSgiAsFunction = _glCopyColorTableSgi
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int x, int y, int width)
      >();
  return glCopyColorTableSgiAsFunction(target, internalformat, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableSgi;

/// ```c
/// GLAPI void APIENTRY glGetColorTableSGI (GLenum target, GLenum format, GLenum type, void *table)
/// ```
void glGetColorTableSgi(
  int target,
  int format,
  int type,
  Pointer<NativeType> table,
) {
  final glGetColorTableSgiAsFunction = _glGetColorTableSgi
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> table,
        )
      >();
  return glGetColorTableSgiAsFunction(target, format, type, table);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameterfvSgi;

/// ```c
/// GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params)
/// ```
void glGetColorTableParameterfvSgi(
  int target,
  int pname,
  Pointer<Float> params,
) {
  final glGetColorTableParameterfvSgiAsFunction = _glGetColorTableParameterfvSgi
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetColorTableParameterfvSgiAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameterivSgi;

/// ```c
/// GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params)
/// ```
void glGetColorTableParameterivSgi(
  int target,
  int pname,
  Pointer<Int32> params,
) {
  final glGetColorTableParameterivSgiAsFunction = _glGetColorTableParameterivSgi
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetColorTableParameterivSgiAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinishTextureSunx;

/// ```c
/// GLAPI void APIENTRY glFinishTextureSUNX (void)
/// ```
void glFinishTextureSunx() {
  final glFinishTextureSunxAsFunction = _glFinishTextureSunx
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFinishTextureSunxAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactorbSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactorbSUN (GLbyte factor)
/// ```
void glGlobalAlphaFactorbSun(int factor) {
  final glGlobalAlphaFactorbSunAsFunction = _glGlobalAlphaFactorbSun
      .cast<NativeFunction<Void Function(Int8 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactorbSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactorsSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactorsSUN (GLshort factor)
/// ```
void glGlobalAlphaFactorsSun(int factor) {
  final glGlobalAlphaFactorsSunAsFunction = _glGlobalAlphaFactorsSun
      .cast<NativeFunction<Void Function(Int16 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactorsSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactoriSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactoriSUN (GLint factor)
/// ```
void glGlobalAlphaFactoriSun(int factor) {
  final glGlobalAlphaFactoriSunAsFunction = _glGlobalAlphaFactoriSun
      .cast<NativeFunction<Void Function(Int32 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactoriSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactorfSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactorfSUN (GLfloat factor)
/// ```
void glGlobalAlphaFactorfSun(double factor) {
  final glGlobalAlphaFactorfSunAsFunction = _glGlobalAlphaFactorfSun
      .cast<NativeFunction<Void Function(Float factor)>>()
      .asFunction<void Function(double factor)>();
  return glGlobalAlphaFactorfSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactordSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactordSUN (GLdouble factor)
/// ```
void glGlobalAlphaFactordSun(double factor) {
  final glGlobalAlphaFactordSunAsFunction = _glGlobalAlphaFactordSun
      .cast<NativeFunction<Void Function(Double factor)>>()
      .asFunction<void Function(double factor)>();
  return glGlobalAlphaFactordSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactorubSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactorubSUN (GLubyte factor)
/// ```
void glGlobalAlphaFactorubSun(int factor) {
  final glGlobalAlphaFactorubSunAsFunction = _glGlobalAlphaFactorubSun
      .cast<NativeFunction<Void Function(Uint8 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactorubSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactorusSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactorusSUN (GLushort factor)
/// ```
void glGlobalAlphaFactorusSun(int factor) {
  final glGlobalAlphaFactorusSunAsFunction = _glGlobalAlphaFactorusSun
      .cast<NativeFunction<Void Function(Uint16 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactorusSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGlobalAlphaFactoruiSun;

/// ```c
/// GLAPI void APIENTRY glGlobalAlphaFactoruiSUN (GLuint factor)
/// ```
void glGlobalAlphaFactoruiSun(int factor) {
  final glGlobalAlphaFactoruiSunAsFunction = _glGlobalAlphaFactoruiSun
      .cast<NativeFunction<Void Function(Uint32 factor)>>()
      .asFunction<void Function(int factor)>();
  return glGlobalAlphaFactoruiSunAsFunction(factor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawMeshArraysSun;

/// ```c
/// GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width)
/// ```
void glDrawMeshArraysSun(int mode, int first, int count, int width) {
  final glDrawMeshArraysSunAsFunction = _glDrawMeshArraysSun
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 width)
        >
      >()
      .asFunction<void Function(int mode, int first, int count, int width)>();
  return glDrawMeshArraysSunAsFunction(mode, first, count, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeuiSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiSUN (GLuint code)
/// ```
void glReplacementCodeuiSun(int code) {
  final glReplacementCodeuiSunAsFunction = _glReplacementCodeuiSun
      .cast<NativeFunction<Void Function(Uint32 code)>>()
      .asFunction<void Function(int code)>();
  return glReplacementCodeuiSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeusSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeusSUN (GLushort code)
/// ```
void glReplacementCodeusSun(int code) {
  final glReplacementCodeusSunAsFunction = _glReplacementCodeusSun
      .cast<NativeFunction<Void Function(Uint16 code)>>()
      .asFunction<void Function(int code)>();
  return glReplacementCodeusSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeubSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeubSUN (GLubyte code)
/// ```
void glReplacementCodeubSun(int code) {
  final glReplacementCodeubSunAsFunction = _glReplacementCodeubSun
      .cast<NativeFunction<Void Function(Uint8 code)>>()
      .asFunction<void Function(int code)>();
  return glReplacementCodeubSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeuivSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuivSUN (const GLuint *code)
/// ```
void glReplacementCodeuivSun(Pointer<Uint32> code) {
  final glReplacementCodeuivSunAsFunction = _glReplacementCodeuivSun
      .cast<NativeFunction<Void Function(Pointer<Uint32> code)>>()
      .asFunction<void Function(Pointer<Uint32> code)>();
  return glReplacementCodeuivSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeusvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *code)
/// ```
void glReplacementCodeusvSun(Pointer<Uint16> code) {
  final glReplacementCodeusvSunAsFunction = _glReplacementCodeusvSun
      .cast<NativeFunction<Void Function(Pointer<Uint16> code)>>()
      .asFunction<void Function(Pointer<Uint16> code)>();
  return glReplacementCodeusvSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeubvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *code)
/// ```
void glReplacementCodeubvSun(Pointer<Uint8> code) {
  final glReplacementCodeubvSunAsFunction = _glReplacementCodeubvSun
      .cast<NativeFunction<Void Function(Pointer<Uint8> code)>>()
      .asFunction<void Function(Pointer<Uint8> code)>();
  return glReplacementCodeubvSunAsFunction(code);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodePointerSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei stride, const void **pointer)
/// ```
void glReplacementCodePointerSun(
  int type,
  int stride,
  Pointer<Pointer<NativeType>> pointer,
) {
  final glReplacementCodePointerSunAsFunction = _glReplacementCodePointerSun
      .cast<
        NativeFunction<
          Void Function(
            Uint32 type,
            Uint32 stride,
            Pointer<Pointer<NativeType>> pointer,
          )
        >
      >()
      .asFunction<
        void Function(
          int type,
          int stride,
          Pointer<Pointer<NativeType>> pointer,
        )
      >();
  return glReplacementCodePointerSunAsFunction(type, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ubVertex2fSun;

/// ```c
/// GLAPI void APIENTRY glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
/// ```
void glColor4ubVertex2fSun(int r, int g, int b, int a, double x, double y) {
  final glColor4ubVertex2fSunAsFunction = _glColor4ubVertex2fSun
      .cast<
        NativeFunction<
          Void Function(Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y)
        >
      >()
      .asFunction<
        void Function(int r, int g, int b, int a, double x, double y)
      >();
  return glColor4ubVertex2fSunAsFunction(r, g, b, a, x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ubVertex2fvSun;

/// ```c
/// GLAPI void APIENTRY glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat *v)
/// ```
void glColor4ubVertex2fvSun(Pointer<Uint8> c, Pointer<Float> v) {
  final glColor4ubVertex2fvSunAsFunction = _glColor4ubVertex2fvSun
      .cast<NativeFunction<Void Function(Pointer<Uint8> c, Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Uint8> c, Pointer<Float> v)>();
  return glColor4ubVertex2fvSunAsFunction(c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ubVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glColor4ubVertex3fSun(
  int r,
  int g,
  int b,
  int a,
  double x,
  double y,
  double z,
) {
  final glColor4ubVertex3fSunAsFunction = _glColor4ubVertex3fSun
      .cast<
        NativeFunction<
          Void Function(
            Uint8 r,
            Uint8 g,
            Uint8 b,
            Uint8 a,
            Float x,
            Float y,
            Float z,
          )
        >
      >()
      .asFunction<
        void Function(int r, int g, int b, int a, double x, double y, double z)
      >();
  return glColor4ubVertex3fSunAsFunction(r, g, b, a, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ubVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *c, const GLfloat *v)
/// ```
void glColor4ubVertex3fvSun(Pointer<Uint8> c, Pointer<Float> v) {
  final glColor4ubVertex3fvSunAsFunction = _glColor4ubVertex3fvSun
      .cast<NativeFunction<Void Function(Pointer<Uint8> c, Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Uint8> c, Pointer<Float> v)>();
  return glColor4ubVertex3fvSunAsFunction(c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glColor3fVertex3fSun(
  double r,
  double g,
  double b,
  double x,
  double y,
  double z,
) {
  final glColor3fVertex3fSunAsFunction = _glColor3fVertex3fSun
      .cast<
        NativeFunction<
          Void Function(Float r, Float g, Float b, Float x, Float y, Float z)
        >
      >()
      .asFunction<
        void Function(
          double r,
          double g,
          double b,
          double x,
          double y,
          double z,
        )
      >();
  return glColor3fVertex3fSunAsFunction(r, g, b, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat *v)
/// ```
void glColor3fVertex3fvSun(Pointer<Float> c, Pointer<Float> v) {
  final glColor3fVertex3fvSunAsFunction = _glColor3fVertex3fvSun
      .cast<NativeFunction<Void Function(Pointer<Float> c, Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> c, Pointer<Float> v)>();
  return glColor3fVertex3fvSunAsFunction(c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glNormal3fVertex3fSun(
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glNormal3fVertex3fSunAsFunction = _glNormal3fVertex3fSun
      .cast<
        NativeFunction<
          Void Function(Float nx, Float ny, Float nz, Float x, Float y, Float z)
        >
      >()
      .asFunction<
        void Function(
          double nx,
          double ny,
          double nz,
          double x,
          double y,
          double z,
        )
      >();
  return glNormal3fVertex3fSunAsFunction(nx, ny, nz, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat *v)
/// ```
void glNormal3fVertex3fvSun(Pointer<Float> n, Pointer<Float> v) {
  final glNormal3fVertex3fvSunAsFunction = _glNormal3fVertex3fvSun
      .cast<NativeFunction<Void Function(Pointer<Float> n, Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> n, Pointer<Float> v)>();
  return glNormal3fVertex3fvSunAsFunction(n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glColor4fNormal3fVertex3fSun(
  double r,
  double g,
  double b,
  double a,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glColor4fNormal3fVertex3fSunAsFunction = _glColor4fNormal3fVertex3fSun
      .cast<
        NativeFunction<
          Void Function(
            Float r,
            Float g,
            Float b,
            Float a,
            Float nx,
            Float ny,
            Float nz,
            Float x,
            Float y,
            Float z,
          )
        >
      >()
      .asFunction<
        void Function(
          double r,
          double g,
          double b,
          double a,
          double nx,
          double ny,
          double nz,
          double x,
          double y,
          double z,
        )
      >();
  return glColor4fNormal3fVertex3fSunAsFunction(
    r,
    g,
    b,
    a,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
void glColor4fNormal3fVertex3fvSun(
  Pointer<Float> c,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glColor4fNormal3fVertex3fvSunAsFunction = _glColor4fNormal3fVertex3fvSun
      .cast<
        NativeFunction<
          Void Function(Pointer<Float> c, Pointer<Float> n, Pointer<Float> v)
        >
      >()
      .asFunction<
        void Function(Pointer<Float> c, Pointer<Float> n, Pointer<Float> v)
      >();
  return glColor4fNormal3fVertex3fvSunAsFunction(c, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glTexCoord2fVertex3fSun(double s, double t, double x, double y, double z) {
  final glTexCoord2fVertex3fSunAsFunction = _glTexCoord2fVertex3fSun
      .cast<
        NativeFunction<
          Void Function(Float s, Float t, Float x, Float y, Float z)
        >
      >()
      .asFunction<
        void Function(double s, double t, double x, double y, double z)
      >();
  return glTexCoord2fVertex3fSunAsFunction(s, t, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fVertex3fvSUN (const GLfloat *tc, const GLfloat *v)
/// ```
void glTexCoord2fVertex3fvSun(Pointer<Float> tc, Pointer<Float> v) {
  final glTexCoord2fVertex3fvSunAsFunction = _glTexCoord2fVertex3fvSun
      .cast<
        NativeFunction<Void Function(Pointer<Float> tc, Pointer<Float> v)>
      >()
      .asFunction<void Function(Pointer<Float> tc, Pointer<Float> v)>();
  return glTexCoord2fVertex3fvSunAsFunction(tc, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4fVertex4fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glTexCoord4fVertex4fSun(
  double s,
  double t,
  double p,
  double q,
  double x,
  double y,
  double z,
  double w,
) {
  final glTexCoord4fVertex4fSunAsFunction = _glTexCoord4fVertex4fSun
      .cast<
        NativeFunction<
          Void Function(
            Float s,
            Float t,
            Float p,
            Float q,
            Float x,
            Float y,
            Float z,
            Float w,
          )
        >
      >()
      .asFunction<
        void Function(
          double s,
          double t,
          double p,
          double q,
          double x,
          double y,
          double z,
          double w,
        )
      >();
  return glTexCoord4fVertex4fSunAsFunction(s, t, p, q, x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4fVertex4fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord4fVertex4fvSUN (const GLfloat *tc, const GLfloat *v)
/// ```
void glTexCoord4fVertex4fvSun(Pointer<Float> tc, Pointer<Float> v) {
  final glTexCoord4fVertex4fvSunAsFunction = _glTexCoord4fVertex4fvSun
      .cast<
        NativeFunction<Void Function(Pointer<Float> tc, Pointer<Float> v)>
      >()
      .asFunction<void Function(Pointer<Float> tc, Pointer<Float> v)>();
  return glTexCoord4fVertex4fvSunAsFunction(tc, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fColor4ubVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glTexCoord2fColor4ubVertex3fSun(
  double s,
  double t,
  int r,
  int g,
  int b,
  int a,
  double x,
  double y,
  double z,
) {
  final glTexCoord2fColor4ubVertex3fSunAsFunction =
      _glTexCoord2fColor4ubVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Float s,
                Float t,
                Uint8 r,
                Uint8 g,
                Uint8 b,
                Uint8 a,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              double s,
              double t,
              int r,
              int g,
              int b,
              int a,
              double x,
              double y,
              double z,
            )
          >();
  return glTexCoord2fColor4ubVertex3fSunAsFunction(s, t, r, g, b, a, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fColor4ubVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc, const GLubyte *c, const GLfloat *v)
/// ```
void glTexCoord2fColor4ubVertex3fvSun(
  Pointer<Float> tc,
  Pointer<Uint8> c,
  Pointer<Float> v,
) {
  final glTexCoord2fColor4ubVertex3fvSunAsFunction =
      _glTexCoord2fColor4ubVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Float> tc,
                Pointer<Uint8> c,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(Pointer<Float> tc, Pointer<Uint8> c, Pointer<Float> v)
          >();
  return glTexCoord2fColor4ubVertex3fvSunAsFunction(tc, c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fColor3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glTexCoord2fColor3fVertex3fSun(
  double s,
  double t,
  double r,
  double g,
  double b,
  double x,
  double y,
  double z,
) {
  final glTexCoord2fColor3fVertex3fSunAsFunction =
      _glTexCoord2fColor3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Float s,
                Float t,
                Float r,
                Float g,
                Float b,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              double s,
              double t,
              double r,
              double g,
              double b,
              double x,
              double y,
              double z,
            )
          >();
  return glTexCoord2fColor3fVertex3fSunAsFunction(s, t, r, g, b, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fColor3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *v)
/// ```
void glTexCoord2fColor3fVertex3fvSun(
  Pointer<Float> tc,
  Pointer<Float> c,
  Pointer<Float> v,
) {
  final glTexCoord2fColor3fVertex3fvSunAsFunction =
      _glTexCoord2fColor3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Float> tc,
                Pointer<Float> c,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> v)
          >();
  return glTexCoord2fColor3fVertex3fvSunAsFunction(tc, c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glTexCoord2fNormal3fVertex3fSun(
  double s,
  double t,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glTexCoord2fNormal3fVertex3fSunAsFunction =
      _glTexCoord2fNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Float s,
                Float t,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              double s,
              double t,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glTexCoord2fNormal3fVertex3fSunAsFunction(s, t, nx, ny, nz, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *n, const GLfloat *v)
/// ```
void glTexCoord2fNormal3fVertex3fvSun(
  Pointer<Float> tc,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glTexCoord2fNormal3fVertex3fvSunAsFunction =
      _glTexCoord2fNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Float> tc,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(Pointer<Float> tc, Pointer<Float> n, Pointer<Float> v)
          >();
  return glTexCoord2fNormal3fVertex3fvSunAsFunction(tc, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexCoord2fColor4fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glTexCoord2fColor4fNormal3fVertex3fSun(
  double s,
  double t,
  double r,
  double g,
  double b,
  double a,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glTexCoord2fColor4fNormal3fVertex3fSunAsFunction =
      _glTexCoord2fColor4fNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Float s,
                Float t,
                Float r,
                Float g,
                Float b,
                Float a,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              double s,
              double t,
              double r,
              double g,
              double b,
              double a,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glTexCoord2fColor4fNormal3fVertex3fSunAsFunction(
    s,
    t,
    r,
    g,
    b,
    a,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexCoord2fColor4fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
void glTexCoord2fColor4fNormal3fVertex3fvSun(
  Pointer<Float> tc,
  Pointer<Float> c,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glTexCoord2fColor4fNormal3fVertex3fvSunAsFunction =
      _glTexCoord2fColor4fNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Float> tc,
                Pointer<Float> c,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Float> tc,
              Pointer<Float> c,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glTexCoord2fColor4fNormal3fVertex3fvSunAsFunction(tc, c, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexCoord4fColor4fNormal3fVertex4fSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
void glTexCoord4fColor4fNormal3fVertex4fSun(
  double s,
  double t,
  double p,
  double q,
  double r,
  double g,
  double b,
  double a,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
  double w,
) {
  final glTexCoord4fColor4fNormal3fVertex4fSunAsFunction =
      _glTexCoord4fColor4fNormal3fVertex4fSun
          .cast<
            NativeFunction<
              Void Function(
                Float s,
                Float t,
                Float p,
                Float q,
                Float r,
                Float g,
                Float b,
                Float a,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
                Float w,
              )
            >
          >()
          .asFunction<
            void Function(
              double s,
              double t,
              double p,
              double q,
              double r,
              double g,
              double b,
              double a,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
              double w,
            )
          >();
  return glTexCoord4fColor4fNormal3fVertex4fSunAsFunction(
    s,
    t,
    p,
    q,
    r,
    g,
    b,
    a,
    nx,
    ny,
    nz,
    x,
    y,
    z,
    w,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glTexCoord4fColor4fNormal3fVertex4fvSun;

/// ```c
/// GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
void glTexCoord4fColor4fNormal3fVertex4fvSun(
  Pointer<Float> tc,
  Pointer<Float> c,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glTexCoord4fColor4fNormal3fVertex4fvSunAsFunction =
      _glTexCoord4fColor4fNormal3fVertex4fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Float> tc,
                Pointer<Float> c,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Float> tc,
              Pointer<Float> c,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glTexCoord4fColor4fNormal3fVertex4fvSunAsFunction(tc, c, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeuiVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiVertex3fSun(int rc, double x, double y, double z) {
  final glReplacementCodeuiVertex3fSunAsFunction =
      _glReplacementCodeuiVertex3fSun
          .cast<
            NativeFunction<Void Function(Uint32 rc, Float x, Float y, Float z)>
          >()
          .asFunction<void Function(int rc, double x, double y, double z)>();
  return glReplacementCodeuiVertex3fSunAsFunction(rc, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReplacementCodeuiVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN (const GLuint *rc, const GLfloat *v)
/// ```
void glReplacementCodeuiVertex3fvSun(Pointer<Uint32> rc, Pointer<Float> v) {
  final glReplacementCodeuiVertex3fvSunAsFunction =
      _glReplacementCodeuiVertex3fvSun
          .cast<
            NativeFunction<Void Function(Pointer<Uint32> rc, Pointer<Float> v)>
          >()
          .asFunction<void Function(Pointer<Uint32> rc, Pointer<Float> v)>();
  return glReplacementCodeuiVertex3fvSunAsFunction(rc, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor4ubVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiColor4ubVertex3fSun(
  int rc,
  int r,
  int g,
  int b,
  int a,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiColor4ubVertex3fSunAsFunction =
      _glReplacementCodeuiColor4ubVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Uint8 r,
                Uint8 g,
                Uint8 b,
                Uint8 a,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              int r,
              int g,
              int b,
              int a,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiColor4ubVertex3fSunAsFunction(
    rc,
    r,
    g,
    b,
    a,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor4ubVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint *rc, const GLubyte *c, const GLfloat *v)
/// ```
void glReplacementCodeuiColor4ubVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Uint8> c,
  Pointer<Float> v,
) {
  final glReplacementCodeuiColor4ubVertex3fvSunAsFunction =
      _glReplacementCodeuiColor4ubVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Uint8> c,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Uint8> c,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiColor4ubVertex3fvSunAsFunction(rc, c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiColor3fVertex3fSun(
  int rc,
  double r,
  double g,
  double b,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiColor3fVertex3fSunAsFunction =
      _glReplacementCodeuiColor3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float r,
                Float g,
                Float b,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double r,
              double g,
              double b,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiColor3fVertex3fSunAsFunction(rc, r, g, b, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *v)
/// ```
void glReplacementCodeuiColor3fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> c,
  Pointer<Float> v,
) {
  final glReplacementCodeuiColor3fVertex3fvSunAsFunction =
      _glReplacementCodeuiColor3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> c,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> c,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiColor3fVertex3fvSunAsFunction(rc, c, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiNormal3fVertex3fSun(
  int rc,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiNormal3fVertex3fSunAsFunction =
      _glReplacementCodeuiNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiNormal3fVertex3fSunAsFunction(
    rc,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *n, const GLfloat *v)
/// ```
void glReplacementCodeuiNormal3fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glReplacementCodeuiNormal3fVertex3fvSunAsFunction =
      _glReplacementCodeuiNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiNormal3fVertex3fvSunAsFunction(rc, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor4fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiColor4fNormal3fVertex3fSun(
  int rc,
  double r,
  double g,
  double b,
  double a,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiColor4fNormal3fVertex3fSunAsFunction =
      _glReplacementCodeuiColor4fNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float r,
                Float g,
                Float b,
                Float a,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double r,
              double g,
              double b,
              double a,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiColor4fNormal3fVertex3fSunAsFunction(
    rc,
    r,
    g,
    b,
    a,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiColor4fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
void glReplacementCodeuiColor4fNormal3fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> c,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glReplacementCodeuiColor4fNormal3fVertex3fvSunAsFunction =
      _glReplacementCodeuiColor4fNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> c,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> c,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiColor4fNormal3fVertex3fvSunAsFunction(rc, c, n, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiTexCoord2fVertex3fSun(
  int rc,
  double s,
  double t,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiTexCoord2fVertex3fSunAsFunction =
      _glReplacementCodeuiTexCoord2fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float s,
                Float t,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double s,
              double t,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiTexCoord2fVertex3fSunAsFunction(rc, s, t, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *v)
/// ```
void glReplacementCodeuiTexCoord2fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> tc,
  Pointer<Float> v,
) {
  final glReplacementCodeuiTexCoord2fVertex3fvSunAsFunction =
      _glReplacementCodeuiTexCoord2fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> tc,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> tc,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiTexCoord2fVertex3fvSunAsFunction(rc, tc, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiTexCoord2fNormal3fVertex3fSun(
  int rc,
  double s,
  double t,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiTexCoord2fNormal3fVertex3fSunAsFunction =
      _glReplacementCodeuiTexCoord2fNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float s,
                Float t,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double s,
              double t,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiTexCoord2fNormal3fVertex3fSunAsFunction(
    rc,
    s,
    t,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
/// ```
void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> tc,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glReplacementCodeuiTexCoord2fNormal3fVertex3fvSunAsFunction =
      _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> tc,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> tc,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiTexCoord2fNormal3fVertex3fvSunAsFunction(
    rc,
    tc,
    n,
    v,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSun(
  int rc,
  double s,
  double t,
  double r,
  double g,
  double b,
  double a,
  double nx,
  double ny,
  double nz,
  double x,
  double y,
  double z,
) {
  final glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSunAsFunction =
      _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSun
          .cast<
            NativeFunction<
              Void Function(
                Uint32 rc,
                Float s,
                Float t,
                Float r,
                Float g,
                Float b,
                Float a,
                Float nx,
                Float ny,
                Float nz,
                Float x,
                Float y,
                Float z,
              )
            >
          >()
          .asFunction<
            void Function(
              int rc,
              double s,
              double t,
              double r,
              double g,
              double b,
              double a,
              double nx,
              double ny,
              double nz,
              double x,
              double y,
              double z,
            )
          >();
  return glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSunAsFunction(
    rc,
    s,
    t,
    r,
    g,
    b,
    a,
    nx,
    ny,
    nz,
    x,
    y,
    z,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>>
_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSun;

/// ```c
/// GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSun(
  Pointer<Uint32> rc,
  Pointer<Float> tc,
  Pointer<Float> c,
  Pointer<Float> n,
  Pointer<Float> v,
) {
  final glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSunAsFunction =
      _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSun
          .cast<
            NativeFunction<
              Void Function(
                Pointer<Uint32> rc,
                Pointer<Float> tc,
                Pointer<Float> c,
                Pointer<Float> n,
                Pointer<Float> v,
              )
            >
          >()
          .asFunction<
            void Function(
              Pointer<Uint32> rc,
              Pointer<Float> tc,
              Pointer<Float> c,
              Pointer<Float> n,
              Pointer<Float> v,
            )
          >();
  return glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSunAsFunction(
    rc,
    tc,
    c,
    n,
    v,
  );
}

void _sdlOpenglGlextLoader() {
  _glBlendFuncSeparate = sdlGlGetProcAddressEx('glBlendFuncSeparate');
  _glMultiDrawArrays = sdlGlGetProcAddressEx('glMultiDrawArrays');
  _glMultiDrawElements = sdlGlGetProcAddressEx('glMultiDrawElements');
  _glPointParameterf = sdlGlGetProcAddressEx('glPointParameterf');
  _glPointParameterfv = sdlGlGetProcAddressEx('glPointParameterfv');
  _glPointParameteri = sdlGlGetProcAddressEx('glPointParameteri');
  _glPointParameteriv = sdlGlGetProcAddressEx('glPointParameteriv');
  _glFogCoordf = sdlGlGetProcAddressEx('glFogCoordf');
  _glFogCoordfv = sdlGlGetProcAddressEx('glFogCoordfv');
  _glFogCoordd = sdlGlGetProcAddressEx('glFogCoordd');
  _glFogCoorddv = sdlGlGetProcAddressEx('glFogCoorddv');
  _glFogCoordPointer = sdlGlGetProcAddressEx('glFogCoordPointer');
  _glSecondaryColor3b = sdlGlGetProcAddressEx('glSecondaryColor3b');
  _glSecondaryColor3bv = sdlGlGetProcAddressEx('glSecondaryColor3bv');
  _glSecondaryColor3d = sdlGlGetProcAddressEx('glSecondaryColor3d');
  _glSecondaryColor3dv = sdlGlGetProcAddressEx('glSecondaryColor3dv');
  _glSecondaryColor3f = sdlGlGetProcAddressEx('glSecondaryColor3f');
  _glSecondaryColor3fv = sdlGlGetProcAddressEx('glSecondaryColor3fv');
  _glSecondaryColor3i = sdlGlGetProcAddressEx('glSecondaryColor3i');
  _glSecondaryColor3iv = sdlGlGetProcAddressEx('glSecondaryColor3iv');
  _glSecondaryColor3s = sdlGlGetProcAddressEx('glSecondaryColor3s');
  _glSecondaryColor3sv = sdlGlGetProcAddressEx('glSecondaryColor3sv');
  _glSecondaryColor3ub = sdlGlGetProcAddressEx('glSecondaryColor3ub');
  _glSecondaryColor3ubv = sdlGlGetProcAddressEx('glSecondaryColor3ubv');
  _glSecondaryColor3ui = sdlGlGetProcAddressEx('glSecondaryColor3ui');
  _glSecondaryColor3uiv = sdlGlGetProcAddressEx('glSecondaryColor3uiv');
  _glSecondaryColor3us = sdlGlGetProcAddressEx('glSecondaryColor3us');
  _glSecondaryColor3usv = sdlGlGetProcAddressEx('glSecondaryColor3usv');
  _glSecondaryColorPointer = sdlGlGetProcAddressEx('glSecondaryColorPointer');
  _glWindowPos2d = sdlGlGetProcAddressEx('glWindowPos2d');
  _glWindowPos2dv = sdlGlGetProcAddressEx('glWindowPos2dv');
  _glWindowPos2f = sdlGlGetProcAddressEx('glWindowPos2f');
  _glWindowPos2fv = sdlGlGetProcAddressEx('glWindowPos2fv');
  _glWindowPos2i = sdlGlGetProcAddressEx('glWindowPos2i');
  _glWindowPos2iv = sdlGlGetProcAddressEx('glWindowPos2iv');
  _glWindowPos2s = sdlGlGetProcAddressEx('glWindowPos2s');
  _glWindowPos2sv = sdlGlGetProcAddressEx('glWindowPos2sv');
  _glWindowPos3d = sdlGlGetProcAddressEx('glWindowPos3d');
  _glWindowPos3dv = sdlGlGetProcAddressEx('glWindowPos3dv');
  _glWindowPos3f = sdlGlGetProcAddressEx('glWindowPos3f');
  _glWindowPos3fv = sdlGlGetProcAddressEx('glWindowPos3fv');
  _glWindowPos3i = sdlGlGetProcAddressEx('glWindowPos3i');
  _glWindowPos3iv = sdlGlGetProcAddressEx('glWindowPos3iv');
  _glWindowPos3s = sdlGlGetProcAddressEx('glWindowPos3s');
  _glWindowPos3sv = sdlGlGetProcAddressEx('glWindowPos3sv');
  _glGenQueries = sdlGlGetProcAddressEx('glGenQueries');
  _glDeleteQueries = sdlGlGetProcAddressEx('glDeleteQueries');
  _glIsQuery = sdlGlGetProcAddressEx('glIsQuery');
  _glBeginQuery = sdlGlGetProcAddressEx('glBeginQuery');
  _glEndQuery = sdlGlGetProcAddressEx('glEndQuery');
  _glGetQueryiv = sdlGlGetProcAddressEx('glGetQueryiv');
  _glGetQueryObjectiv = sdlGlGetProcAddressEx('glGetQueryObjectiv');
  _glGetQueryObjectuiv = sdlGlGetProcAddressEx('glGetQueryObjectuiv');
  _glBindBuffer = sdlGlGetProcAddressEx('glBindBuffer');
  _glDeleteBuffers = sdlGlGetProcAddressEx('glDeleteBuffers');
  _glGenBuffers = sdlGlGetProcAddressEx('glGenBuffers');
  _glIsBuffer = sdlGlGetProcAddressEx('glIsBuffer');
  _glBufferData = sdlGlGetProcAddressEx('glBufferData');
  _glBufferSubData = sdlGlGetProcAddressEx('glBufferSubData');
  _glGetBufferSubData = sdlGlGetProcAddressEx('glGetBufferSubData');
  _glMapBuffer = sdlGlGetProcAddressEx('glMapBuffer');
  _glUnmapBuffer = sdlGlGetProcAddressEx('glUnmapBuffer');
  _glGetBufferParameteriv = sdlGlGetProcAddressEx('glGetBufferParameteriv');
  _glGetBufferPointerv = sdlGlGetProcAddressEx('glGetBufferPointerv');
  _glBlendEquationSeparate = sdlGlGetProcAddressEx('glBlendEquationSeparate');
  _glDrawBuffers = sdlGlGetProcAddressEx('glDrawBuffers');
  _glStencilOpSeparate = sdlGlGetProcAddressEx('glStencilOpSeparate');
  _glStencilFuncSeparate = sdlGlGetProcAddressEx('glStencilFuncSeparate');
  _glStencilMaskSeparate = sdlGlGetProcAddressEx('glStencilMaskSeparate');
  _glAttachShader = sdlGlGetProcAddressEx('glAttachShader');
  _glBindAttribLocation = sdlGlGetProcAddressEx('glBindAttribLocation');
  _glCompileShader = sdlGlGetProcAddressEx('glCompileShader');
  _glCreateProgram = sdlGlGetProcAddressEx('glCreateProgram');
  _glCreateShader = sdlGlGetProcAddressEx('glCreateShader');
  _glDeleteProgram = sdlGlGetProcAddressEx('glDeleteProgram');
  _glDeleteShader = sdlGlGetProcAddressEx('glDeleteShader');
  _glDetachShader = sdlGlGetProcAddressEx('glDetachShader');
  _glDisableVertexAttribArray = sdlGlGetProcAddressEx(
    'glDisableVertexAttribArray',
  );
  _glEnableVertexAttribArray = sdlGlGetProcAddressEx(
    'glEnableVertexAttribArray',
  );
  _glGetActiveAttrib = sdlGlGetProcAddressEx('glGetActiveAttrib');
  _glGetActiveUniform = sdlGlGetProcAddressEx('glGetActiveUniform');
  _glGetAttachedShaders = sdlGlGetProcAddressEx('glGetAttachedShaders');
  _glGetAttribLocation = sdlGlGetProcAddressEx('glGetAttribLocation');
  _glGetProgramiv = sdlGlGetProcAddressEx('glGetProgramiv');
  _glGetProgramInfoLog = sdlGlGetProcAddressEx('glGetProgramInfoLog');
  _glGetShaderiv = sdlGlGetProcAddressEx('glGetShaderiv');
  _glGetShaderInfoLog = sdlGlGetProcAddressEx('glGetShaderInfoLog');
  _glGetShaderSource = sdlGlGetProcAddressEx('glGetShaderSource');
  _glGetUniformLocation = sdlGlGetProcAddressEx('glGetUniformLocation');
  _glGetUniformfv = sdlGlGetProcAddressEx('glGetUniformfv');
  _glGetUniformiv = sdlGlGetProcAddressEx('glGetUniformiv');
  _glGetVertexAttribdv = sdlGlGetProcAddressEx('glGetVertexAttribdv');
  _glGetVertexAttribfv = sdlGlGetProcAddressEx('glGetVertexAttribfv');
  _glGetVertexAttribiv = sdlGlGetProcAddressEx('glGetVertexAttribiv');
  _glGetVertexAttribPointerv = sdlGlGetProcAddressEx(
    'glGetVertexAttribPointerv',
  );
  _glIsProgram = sdlGlGetProcAddressEx('glIsProgram');
  _glIsShader = sdlGlGetProcAddressEx('glIsShader');
  _glLinkProgram = sdlGlGetProcAddressEx('glLinkProgram');
  _glShaderSource = sdlGlGetProcAddressEx('glShaderSource');
  _glUseProgram = sdlGlGetProcAddressEx('glUseProgram');
  _glUniform1f = sdlGlGetProcAddressEx('glUniform1f');
  _glUniform2f = sdlGlGetProcAddressEx('glUniform2f');
  _glUniform3f = sdlGlGetProcAddressEx('glUniform3f');
  _glUniform4f = sdlGlGetProcAddressEx('glUniform4f');
  _glUniform1i = sdlGlGetProcAddressEx('glUniform1i');
  _glUniform2i = sdlGlGetProcAddressEx('glUniform2i');
  _glUniform3i = sdlGlGetProcAddressEx('glUniform3i');
  _glUniform4i = sdlGlGetProcAddressEx('glUniform4i');
  _glUniform1fv = sdlGlGetProcAddressEx('glUniform1fv');
  _glUniform2fv = sdlGlGetProcAddressEx('glUniform2fv');
  _glUniform3fv = sdlGlGetProcAddressEx('glUniform3fv');
  _glUniform4fv = sdlGlGetProcAddressEx('glUniform4fv');
  _glUniform1iv = sdlGlGetProcAddressEx('glUniform1iv');
  _glUniform2iv = sdlGlGetProcAddressEx('glUniform2iv');
  _glUniform3iv = sdlGlGetProcAddressEx('glUniform3iv');
  _glUniform4iv = sdlGlGetProcAddressEx('glUniform4iv');
  _glUniformMatrix2fv = sdlGlGetProcAddressEx('glUniformMatrix2fv');
  _glUniformMatrix3fv = sdlGlGetProcAddressEx('glUniformMatrix3fv');
  _glUniformMatrix4fv = sdlGlGetProcAddressEx('glUniformMatrix4fv');
  _glValidateProgram = sdlGlGetProcAddressEx('glValidateProgram');
  _glVertexAttrib1d = sdlGlGetProcAddressEx('glVertexAttrib1d');
  _glVertexAttrib1dv = sdlGlGetProcAddressEx('glVertexAttrib1dv');
  _glVertexAttrib1f = sdlGlGetProcAddressEx('glVertexAttrib1f');
  _glVertexAttrib1fv = sdlGlGetProcAddressEx('glVertexAttrib1fv');
  _glVertexAttrib1s = sdlGlGetProcAddressEx('glVertexAttrib1s');
  _glVertexAttrib1sv = sdlGlGetProcAddressEx('glVertexAttrib1sv');
  _glVertexAttrib2d = sdlGlGetProcAddressEx('glVertexAttrib2d');
  _glVertexAttrib2dv = sdlGlGetProcAddressEx('glVertexAttrib2dv');
  _glVertexAttrib2f = sdlGlGetProcAddressEx('glVertexAttrib2f');
  _glVertexAttrib2fv = sdlGlGetProcAddressEx('glVertexAttrib2fv');
  _glVertexAttrib2s = sdlGlGetProcAddressEx('glVertexAttrib2s');
  _glVertexAttrib2sv = sdlGlGetProcAddressEx('glVertexAttrib2sv');
  _glVertexAttrib3d = sdlGlGetProcAddressEx('glVertexAttrib3d');
  _glVertexAttrib3dv = sdlGlGetProcAddressEx('glVertexAttrib3dv');
  _glVertexAttrib3f = sdlGlGetProcAddressEx('glVertexAttrib3f');
  _glVertexAttrib3fv = sdlGlGetProcAddressEx('glVertexAttrib3fv');
  _glVertexAttrib3s = sdlGlGetProcAddressEx('glVertexAttrib3s');
  _glVertexAttrib3sv = sdlGlGetProcAddressEx('glVertexAttrib3sv');
  _glVertexAttrib4Nbv = sdlGlGetProcAddressEx('glVertexAttrib4Nbv');
  _glVertexAttrib4Niv = sdlGlGetProcAddressEx('glVertexAttrib4Niv');
  _glVertexAttrib4Nsv = sdlGlGetProcAddressEx('glVertexAttrib4Nsv');
  _glVertexAttrib4Nub = sdlGlGetProcAddressEx('glVertexAttrib4Nub');
  _glVertexAttrib4Nubv = sdlGlGetProcAddressEx('glVertexAttrib4Nubv');
  _glVertexAttrib4Nuiv = sdlGlGetProcAddressEx('glVertexAttrib4Nuiv');
  _glVertexAttrib4Nusv = sdlGlGetProcAddressEx('glVertexAttrib4Nusv');
  _glVertexAttrib4bv = sdlGlGetProcAddressEx('glVertexAttrib4bv');
  _glVertexAttrib4d = sdlGlGetProcAddressEx('glVertexAttrib4d');
  _glVertexAttrib4dv = sdlGlGetProcAddressEx('glVertexAttrib4dv');
  _glVertexAttrib4f = sdlGlGetProcAddressEx('glVertexAttrib4f');
  _glVertexAttrib4fv = sdlGlGetProcAddressEx('glVertexAttrib4fv');
  _glVertexAttrib4iv = sdlGlGetProcAddressEx('glVertexAttrib4iv');
  _glVertexAttrib4s = sdlGlGetProcAddressEx('glVertexAttrib4s');
  _glVertexAttrib4sv = sdlGlGetProcAddressEx('glVertexAttrib4sv');
  _glVertexAttrib4ubv = sdlGlGetProcAddressEx('glVertexAttrib4ubv');
  _glVertexAttrib4uiv = sdlGlGetProcAddressEx('glVertexAttrib4uiv');
  _glVertexAttrib4usv = sdlGlGetProcAddressEx('glVertexAttrib4usv');
  _glVertexAttribPointer = sdlGlGetProcAddressEx('glVertexAttribPointer');
  _glUniformMatrix2x3fv = sdlGlGetProcAddressEx('glUniformMatrix2x3fv');
  _glUniformMatrix3x2fv = sdlGlGetProcAddressEx('glUniformMatrix3x2fv');
  _glUniformMatrix2x4fv = sdlGlGetProcAddressEx('glUniformMatrix2x4fv');
  _glUniformMatrix4x2fv = sdlGlGetProcAddressEx('glUniformMatrix4x2fv');
  _glUniformMatrix3x4fv = sdlGlGetProcAddressEx('glUniformMatrix3x4fv');
  _glUniformMatrix4x3fv = sdlGlGetProcAddressEx('glUniformMatrix4x3fv');
  _glColorMaski = sdlGlGetProcAddressEx('glColorMaski');
  _glGetBooleaniV = sdlGlGetProcAddressEx('glGetBooleaniV');
  _glGetIntegeriV = sdlGlGetProcAddressEx('glGetIntegeriV');
  _glEnablei = sdlGlGetProcAddressEx('glEnablei');
  _glDisablei = sdlGlGetProcAddressEx('glDisablei');
  _glIsEnabledi = sdlGlGetProcAddressEx('glIsEnabledi');
  _glBeginTransformFeedback = sdlGlGetProcAddressEx('glBeginTransformFeedback');
  _glEndTransformFeedback = sdlGlGetProcAddressEx('glEndTransformFeedback');
  _glBindBufferRange = sdlGlGetProcAddressEx('glBindBufferRange');
  _glBindBufferBase = sdlGlGetProcAddressEx('glBindBufferBase');
  _glTransformFeedbackVaryings = sdlGlGetProcAddressEx(
    'glTransformFeedbackVaryings',
  );
  _glGetTransformFeedbackVarying = sdlGlGetProcAddressEx(
    'glGetTransformFeedbackVarying',
  );
  _glClampColor = sdlGlGetProcAddressEx('glClampColor');
  _glBeginConditionalRender = sdlGlGetProcAddressEx('glBeginConditionalRender');
  _glEndConditionalRender = sdlGlGetProcAddressEx('glEndConditionalRender');
  _glVertexAttribIPointer = sdlGlGetProcAddressEx('glVertexAttribIPointer');
  _glGetVertexAttribIiv = sdlGlGetProcAddressEx('glGetVertexAttribIiv');
  _glGetVertexAttribIuiv = sdlGlGetProcAddressEx('glGetVertexAttribIuiv');
  _glVertexAttribI1i = sdlGlGetProcAddressEx('glVertexAttribI1i');
  _glVertexAttribI2i = sdlGlGetProcAddressEx('glVertexAttribI2i');
  _glVertexAttribI3i = sdlGlGetProcAddressEx('glVertexAttribI3i');
  _glVertexAttribI4i = sdlGlGetProcAddressEx('glVertexAttribI4i');
  _glVertexAttribI1ui = sdlGlGetProcAddressEx('glVertexAttribI1ui');
  _glVertexAttribI2ui = sdlGlGetProcAddressEx('glVertexAttribI2ui');
  _glVertexAttribI3ui = sdlGlGetProcAddressEx('glVertexAttribI3ui');
  _glVertexAttribI4ui = sdlGlGetProcAddressEx('glVertexAttribI4ui');
  _glVertexAttribI1iv = sdlGlGetProcAddressEx('glVertexAttribI1iv');
  _glVertexAttribI2iv = sdlGlGetProcAddressEx('glVertexAttribI2iv');
  _glVertexAttribI3iv = sdlGlGetProcAddressEx('glVertexAttribI3iv');
  _glVertexAttribI4iv = sdlGlGetProcAddressEx('glVertexAttribI4iv');
  _glVertexAttribI1uiv = sdlGlGetProcAddressEx('glVertexAttribI1uiv');
  _glVertexAttribI2uiv = sdlGlGetProcAddressEx('glVertexAttribI2uiv');
  _glVertexAttribI3uiv = sdlGlGetProcAddressEx('glVertexAttribI3uiv');
  _glVertexAttribI4uiv = sdlGlGetProcAddressEx('glVertexAttribI4uiv');
  _glVertexAttribI4bv = sdlGlGetProcAddressEx('glVertexAttribI4bv');
  _glVertexAttribI4sv = sdlGlGetProcAddressEx('glVertexAttribI4sv');
  _glVertexAttribI4ubv = sdlGlGetProcAddressEx('glVertexAttribI4ubv');
  _glVertexAttribI4usv = sdlGlGetProcAddressEx('glVertexAttribI4usv');
  _glGetUniformuiv = sdlGlGetProcAddressEx('glGetUniformuiv');
  _glBindFragDataLocation = sdlGlGetProcAddressEx('glBindFragDataLocation');
  _glGetFragDataLocation = sdlGlGetProcAddressEx('glGetFragDataLocation');
  _glUniform1ui = sdlGlGetProcAddressEx('glUniform1ui');
  _glUniform2ui = sdlGlGetProcAddressEx('glUniform2ui');
  _glUniform3ui = sdlGlGetProcAddressEx('glUniform3ui');
  _glUniform4ui = sdlGlGetProcAddressEx('glUniform4ui');
  _glUniform1uiv = sdlGlGetProcAddressEx('glUniform1uiv');
  _glUniform2uiv = sdlGlGetProcAddressEx('glUniform2uiv');
  _glUniform3uiv = sdlGlGetProcAddressEx('glUniform3uiv');
  _glUniform4uiv = sdlGlGetProcAddressEx('glUniform4uiv');
  _glTexParameterIiv = sdlGlGetProcAddressEx('glTexParameterIiv');
  _glTexParameterIuiv = sdlGlGetProcAddressEx('glTexParameterIuiv');
  _glGetTexParameterIiv = sdlGlGetProcAddressEx('glGetTexParameterIiv');
  _glGetTexParameterIuiv = sdlGlGetProcAddressEx('glGetTexParameterIuiv');
  _glClearBufferiv = sdlGlGetProcAddressEx('glClearBufferiv');
  _glClearBufferuiv = sdlGlGetProcAddressEx('glClearBufferuiv');
  _glClearBufferfv = sdlGlGetProcAddressEx('glClearBufferfv');
  _glClearBufferfi = sdlGlGetProcAddressEx('glClearBufferfi');
  _glGetStringi = sdlGlGetProcAddressEx('glGetStringi');
  _glIsRenderbuffer = sdlGlGetProcAddressEx('glIsRenderbuffer');
  _glBindRenderbuffer = sdlGlGetProcAddressEx('glBindRenderbuffer');
  _glDeleteRenderbuffers = sdlGlGetProcAddressEx('glDeleteRenderbuffers');
  _glGenRenderbuffers = sdlGlGetProcAddressEx('glGenRenderbuffers');
  _glRenderbufferStorage = sdlGlGetProcAddressEx('glRenderbufferStorage');
  _glGetRenderbufferParameteriv = sdlGlGetProcAddressEx(
    'glGetRenderbufferParameteriv',
  );
  _glIsFramebuffer = sdlGlGetProcAddressEx('glIsFramebuffer');
  _glBindFramebuffer = sdlGlGetProcAddressEx('glBindFramebuffer');
  _glDeleteFramebuffers = sdlGlGetProcAddressEx('glDeleteFramebuffers');
  _glGenFramebuffers = sdlGlGetProcAddressEx('glGenFramebuffers');
  _glCheckFramebufferStatus = sdlGlGetProcAddressEx('glCheckFramebufferStatus');
  _glFramebufferTexture1D = sdlGlGetProcAddressEx('glFramebufferTexture1D');
  _glFramebufferTexture2D = sdlGlGetProcAddressEx('glFramebufferTexture2D');
  _glFramebufferTexture3D = sdlGlGetProcAddressEx('glFramebufferTexture3D');
  _glFramebufferRenderbuffer = sdlGlGetProcAddressEx(
    'glFramebufferRenderbuffer',
  );
  _glGetFramebufferAttachmentParameteriv = sdlGlGetProcAddressEx(
    'glGetFramebufferAttachmentParameteriv',
  );
  _glGenerateMipmap = sdlGlGetProcAddressEx('glGenerateMipmap');
  _glBlitFramebuffer = sdlGlGetProcAddressEx('glBlitFramebuffer');
  _glRenderbufferStorageMultisample = sdlGlGetProcAddressEx(
    'glRenderbufferStorageMultisample',
  );
  _glFramebufferTextureLayer = sdlGlGetProcAddressEx(
    'glFramebufferTextureLayer',
  );
  _glMapBufferRange = sdlGlGetProcAddressEx('glMapBufferRange');
  _glFlushMappedBufferRange = sdlGlGetProcAddressEx('glFlushMappedBufferRange');
  _glBindVertexArray = sdlGlGetProcAddressEx('glBindVertexArray');
  _glDeleteVertexArrays = sdlGlGetProcAddressEx('glDeleteVertexArrays');
  _glGenVertexArrays = sdlGlGetProcAddressEx('glGenVertexArrays');
  _glIsVertexArray = sdlGlGetProcAddressEx('glIsVertexArray');
  _glDrawArraysInstanced = sdlGlGetProcAddressEx('glDrawArraysInstanced');
  _glDrawElementsInstanced = sdlGlGetProcAddressEx('glDrawElementsInstanced');
  _glTexBuffer = sdlGlGetProcAddressEx('glTexBuffer');
  _glPrimitiveRestartIndex = sdlGlGetProcAddressEx('glPrimitiveRestartIndex');
  _glCopyBufferSubData = sdlGlGetProcAddressEx('glCopyBufferSubData');
  _glGetUniformIndices = sdlGlGetProcAddressEx('glGetUniformIndices');
  _glGetActiveUniformsiv = sdlGlGetProcAddressEx('glGetActiveUniformsiv');
  _glGetActiveUniformName = sdlGlGetProcAddressEx('glGetActiveUniformName');
  _glGetUniformBlockIndex = sdlGlGetProcAddressEx('glGetUniformBlockIndex');
  _glGetActiveUniformBlockiv = sdlGlGetProcAddressEx(
    'glGetActiveUniformBlockiv',
  );
  _glGetActiveUniformBlockName = sdlGlGetProcAddressEx(
    'glGetActiveUniformBlockName',
  );
  _glUniformBlockBinding = sdlGlGetProcAddressEx('glUniformBlockBinding');
  _glDrawElementsBaseVertex = sdlGlGetProcAddressEx('glDrawElementsBaseVertex');
  _glDrawRangeElementsBaseVertex = sdlGlGetProcAddressEx(
    'glDrawRangeElementsBaseVertex',
  );
  _glDrawElementsInstancedBaseVertex = sdlGlGetProcAddressEx(
    'glDrawElementsInstancedBaseVertex',
  );
  _glMultiDrawElementsBaseVertex = sdlGlGetProcAddressEx(
    'glMultiDrawElementsBaseVertex',
  );
  _glProvokingVertex = sdlGlGetProcAddressEx('glProvokingVertex');
  _glFenceSync = sdlGlGetProcAddressEx('glFenceSync');
  _glIsSync = sdlGlGetProcAddressEx('glIsSync');
  _glDeleteSync = sdlGlGetProcAddressEx('glDeleteSync');
  _glClientWaitSync = sdlGlGetProcAddressEx('glClientWaitSync');
  _glWaitSync = sdlGlGetProcAddressEx('glWaitSync');
  _glGetInteger64v = sdlGlGetProcAddressEx('glGetInteger64v');
  _glGetSynciv = sdlGlGetProcAddressEx('glGetSynciv');
  _glGetInteger64iV = sdlGlGetProcAddressEx('glGetInteger64iV');
  _glGetBufferParameteri64v = sdlGlGetProcAddressEx('glGetBufferParameteri64v');
  _glFramebufferTexture = sdlGlGetProcAddressEx('glFramebufferTexture');
  _glTexImage2DMultisample = sdlGlGetProcAddressEx('glTexImage2DMultisample');
  _glTexImage3DMultisample = sdlGlGetProcAddressEx('glTexImage3DMultisample');
  _glGetMultisamplefv = sdlGlGetProcAddressEx('glGetMultisamplefv');
  _glSampleMaski = sdlGlGetProcAddressEx('glSampleMaski');
  _glBindFragDataLocationIndexed = sdlGlGetProcAddressEx(
    'glBindFragDataLocationIndexed',
  );
  _glGetFragDataIndex = sdlGlGetProcAddressEx('glGetFragDataIndex');
  _glGenSamplers = sdlGlGetProcAddressEx('glGenSamplers');
  _glDeleteSamplers = sdlGlGetProcAddressEx('glDeleteSamplers');
  _glIsSampler = sdlGlGetProcAddressEx('glIsSampler');
  _glBindSampler = sdlGlGetProcAddressEx('glBindSampler');
  _glSamplerParameteri = sdlGlGetProcAddressEx('glSamplerParameteri');
  _glSamplerParameteriv = sdlGlGetProcAddressEx('glSamplerParameteriv');
  _glSamplerParameterf = sdlGlGetProcAddressEx('glSamplerParameterf');
  _glSamplerParameterfv = sdlGlGetProcAddressEx('glSamplerParameterfv');
  _glSamplerParameterIiv = sdlGlGetProcAddressEx('glSamplerParameterIiv');
  _glSamplerParameterIuiv = sdlGlGetProcAddressEx('glSamplerParameterIuiv');
  _glGetSamplerParameteriv = sdlGlGetProcAddressEx('glGetSamplerParameteriv');
  _glGetSamplerParameterIiv = sdlGlGetProcAddressEx('glGetSamplerParameterIiv');
  _glGetSamplerParameterfv = sdlGlGetProcAddressEx('glGetSamplerParameterfv');
  _glGetSamplerParameterIuiv = sdlGlGetProcAddressEx(
    'glGetSamplerParameterIuiv',
  );
  _glQueryCounter = sdlGlGetProcAddressEx('glQueryCounter');
  _glGetQueryObjecti64v = sdlGlGetProcAddressEx('glGetQueryObjecti64v');
  _glGetQueryObjectui64v = sdlGlGetProcAddressEx('glGetQueryObjectui64v');
  _glVertexAttribDivisor = sdlGlGetProcAddressEx('glVertexAttribDivisor');
  _glVertexAttribP1ui = sdlGlGetProcAddressEx('glVertexAttribP1ui');
  _glVertexAttribP1uiv = sdlGlGetProcAddressEx('glVertexAttribP1uiv');
  _glVertexAttribP2ui = sdlGlGetProcAddressEx('glVertexAttribP2ui');
  _glVertexAttribP2uiv = sdlGlGetProcAddressEx('glVertexAttribP2uiv');
  _glVertexAttribP3ui = sdlGlGetProcAddressEx('glVertexAttribP3ui');
  _glVertexAttribP3uiv = sdlGlGetProcAddressEx('glVertexAttribP3uiv');
  _glVertexAttribP4ui = sdlGlGetProcAddressEx('glVertexAttribP4ui');
  _glVertexAttribP4uiv = sdlGlGetProcAddressEx('glVertexAttribP4uiv');
  _glVertexP2ui = sdlGlGetProcAddressEx('glVertexP2ui');
  _glVertexP2uiv = sdlGlGetProcAddressEx('glVertexP2uiv');
  _glVertexP3ui = sdlGlGetProcAddressEx('glVertexP3ui');
  _glVertexP3uiv = sdlGlGetProcAddressEx('glVertexP3uiv');
  _glVertexP4ui = sdlGlGetProcAddressEx('glVertexP4ui');
  _glVertexP4uiv = sdlGlGetProcAddressEx('glVertexP4uiv');
  _glTexCoordP1ui = sdlGlGetProcAddressEx('glTexCoordP1ui');
  _glTexCoordP1uiv = sdlGlGetProcAddressEx('glTexCoordP1uiv');
  _glTexCoordP2ui = sdlGlGetProcAddressEx('glTexCoordP2ui');
  _glTexCoordP2uiv = sdlGlGetProcAddressEx('glTexCoordP2uiv');
  _glTexCoordP3ui = sdlGlGetProcAddressEx('glTexCoordP3ui');
  _glTexCoordP3uiv = sdlGlGetProcAddressEx('glTexCoordP3uiv');
  _glTexCoordP4ui = sdlGlGetProcAddressEx('glTexCoordP4ui');
  _glTexCoordP4uiv = sdlGlGetProcAddressEx('glTexCoordP4uiv');
  _glMultiTexCoordP1ui = sdlGlGetProcAddressEx('glMultiTexCoordP1ui');
  _glMultiTexCoordP1uiv = sdlGlGetProcAddressEx('glMultiTexCoordP1uiv');
  _glMultiTexCoordP2ui = sdlGlGetProcAddressEx('glMultiTexCoordP2ui');
  _glMultiTexCoordP2uiv = sdlGlGetProcAddressEx('glMultiTexCoordP2uiv');
  _glMultiTexCoordP3ui = sdlGlGetProcAddressEx('glMultiTexCoordP3ui');
  _glMultiTexCoordP3uiv = sdlGlGetProcAddressEx('glMultiTexCoordP3uiv');
  _glMultiTexCoordP4ui = sdlGlGetProcAddressEx('glMultiTexCoordP4ui');
  _glMultiTexCoordP4uiv = sdlGlGetProcAddressEx('glMultiTexCoordP4uiv');
  _glNormalP3ui = sdlGlGetProcAddressEx('glNormalP3ui');
  _glNormalP3uiv = sdlGlGetProcAddressEx('glNormalP3uiv');
  _glColorP3ui = sdlGlGetProcAddressEx('glColorP3ui');
  _glColorP3uiv = sdlGlGetProcAddressEx('glColorP3uiv');
  _glColorP4ui = sdlGlGetProcAddressEx('glColorP4ui');
  _glColorP4uiv = sdlGlGetProcAddressEx('glColorP4uiv');
  _glSecondaryColorP3ui = sdlGlGetProcAddressEx('glSecondaryColorP3ui');
  _glSecondaryColorP3uiv = sdlGlGetProcAddressEx('glSecondaryColorP3uiv');
  _glMinSampleShading = sdlGlGetProcAddressEx('glMinSampleShading');
  _glBlendEquationi = sdlGlGetProcAddressEx('glBlendEquationi');
  _glBlendEquationSeparatei = sdlGlGetProcAddressEx('glBlendEquationSeparatei');
  _glBlendFunci = sdlGlGetProcAddressEx('glBlendFunci');
  _glBlendFuncSeparatei = sdlGlGetProcAddressEx('glBlendFuncSeparatei');
  _glDrawArraysIndirect = sdlGlGetProcAddressEx('glDrawArraysIndirect');
  _glDrawElementsIndirect = sdlGlGetProcAddressEx('glDrawElementsIndirect');
  _glUniform1d = sdlGlGetProcAddressEx('glUniform1d');
  _glUniform2d = sdlGlGetProcAddressEx('glUniform2d');
  _glUniform3d = sdlGlGetProcAddressEx('glUniform3d');
  _glUniform4d = sdlGlGetProcAddressEx('glUniform4d');
  _glUniform1dv = sdlGlGetProcAddressEx('glUniform1dv');
  _glUniform2dv = sdlGlGetProcAddressEx('glUniform2dv');
  _glUniform3dv = sdlGlGetProcAddressEx('glUniform3dv');
  _glUniform4dv = sdlGlGetProcAddressEx('glUniform4dv');
  _glUniformMatrix2dv = sdlGlGetProcAddressEx('glUniformMatrix2dv');
  _glUniformMatrix3dv = sdlGlGetProcAddressEx('glUniformMatrix3dv');
  _glUniformMatrix4dv = sdlGlGetProcAddressEx('glUniformMatrix4dv');
  _glUniformMatrix2x3dv = sdlGlGetProcAddressEx('glUniformMatrix2x3dv');
  _glUniformMatrix2x4dv = sdlGlGetProcAddressEx('glUniformMatrix2x4dv');
  _glUniformMatrix3x2dv = sdlGlGetProcAddressEx('glUniformMatrix3x2dv');
  _glUniformMatrix3x4dv = sdlGlGetProcAddressEx('glUniformMatrix3x4dv');
  _glUniformMatrix4x2dv = sdlGlGetProcAddressEx('glUniformMatrix4x2dv');
  _glUniformMatrix4x3dv = sdlGlGetProcAddressEx('glUniformMatrix4x3dv');
  _glGetUniformdv = sdlGlGetProcAddressEx('glGetUniformdv');
  _glGetSubroutineUniformLocation = sdlGlGetProcAddressEx(
    'glGetSubroutineUniformLocation',
  );
  _glGetSubroutineIndex = sdlGlGetProcAddressEx('glGetSubroutineIndex');
  _glGetActiveSubroutineUniformiv = sdlGlGetProcAddressEx(
    'glGetActiveSubroutineUniformiv',
  );
  _glGetActiveSubroutineUniformName = sdlGlGetProcAddressEx(
    'glGetActiveSubroutineUniformName',
  );
  _glGetActiveSubroutineName = sdlGlGetProcAddressEx(
    'glGetActiveSubroutineName',
  );
  _glUniformSubroutinesuiv = sdlGlGetProcAddressEx('glUniformSubroutinesuiv');
  _glGetUniformSubroutineuiv = sdlGlGetProcAddressEx(
    'glGetUniformSubroutineuiv',
  );
  _glGetProgramStageiv = sdlGlGetProcAddressEx('glGetProgramStageiv');
  _glPatchParameteri = sdlGlGetProcAddressEx('glPatchParameteri');
  _glPatchParameterfv = sdlGlGetProcAddressEx('glPatchParameterfv');
  _glBindTransformFeedback = sdlGlGetProcAddressEx('glBindTransformFeedback');
  _glDeleteTransformFeedbacks = sdlGlGetProcAddressEx(
    'glDeleteTransformFeedbacks',
  );
  _glGenTransformFeedbacks = sdlGlGetProcAddressEx('glGenTransformFeedbacks');
  _glIsTransformFeedback = sdlGlGetProcAddressEx('glIsTransformFeedback');
  _glPauseTransformFeedback = sdlGlGetProcAddressEx('glPauseTransformFeedback');
  _glResumeTransformFeedback = sdlGlGetProcAddressEx(
    'glResumeTransformFeedback',
  );
  _glDrawTransformFeedback = sdlGlGetProcAddressEx('glDrawTransformFeedback');
  _glDrawTransformFeedbackStream = sdlGlGetProcAddressEx(
    'glDrawTransformFeedbackStream',
  );
  _glBeginQueryIndexed = sdlGlGetProcAddressEx('glBeginQueryIndexed');
  _glEndQueryIndexed = sdlGlGetProcAddressEx('glEndQueryIndexed');
  _glGetQueryIndexediv = sdlGlGetProcAddressEx('glGetQueryIndexediv');
  _glReleaseShaderCompiler = sdlGlGetProcAddressEx('glReleaseShaderCompiler');
  _glShaderBinary = sdlGlGetProcAddressEx('glShaderBinary');
  _glGetShaderPrecisionFormat = sdlGlGetProcAddressEx(
    'glGetShaderPrecisionFormat',
  );
  _glDepthRangef = sdlGlGetProcAddressEx('glDepthRangef');
  _glClearDepthf = sdlGlGetProcAddressEx('glClearDepthf');
  _glGetProgramBinary = sdlGlGetProcAddressEx('glGetProgramBinary');
  _glProgramBinary = sdlGlGetProcAddressEx('glProgramBinary');
  _glProgramParameteri = sdlGlGetProcAddressEx('glProgramParameteri');
  _glUseProgramStages = sdlGlGetProcAddressEx('glUseProgramStages');
  _glActiveShaderProgram = sdlGlGetProcAddressEx('glActiveShaderProgram');
  _glCreateShaderProgramv = sdlGlGetProcAddressEx('glCreateShaderProgramv');
  _glBindProgramPipeline = sdlGlGetProcAddressEx('glBindProgramPipeline');
  _glDeleteProgramPipelines = sdlGlGetProcAddressEx('glDeleteProgramPipelines');
  _glGenProgramPipelines = sdlGlGetProcAddressEx('glGenProgramPipelines');
  _glIsProgramPipeline = sdlGlGetProcAddressEx('glIsProgramPipeline');
  _glGetProgramPipelineiv = sdlGlGetProcAddressEx('glGetProgramPipelineiv');
  _glProgramUniform1i = sdlGlGetProcAddressEx('glProgramUniform1i');
  _glProgramUniform1iv = sdlGlGetProcAddressEx('glProgramUniform1iv');
  _glProgramUniform1f = sdlGlGetProcAddressEx('glProgramUniform1f');
  _glProgramUniform1fv = sdlGlGetProcAddressEx('glProgramUniform1fv');
  _glProgramUniform1d = sdlGlGetProcAddressEx('glProgramUniform1d');
  _glProgramUniform1dv = sdlGlGetProcAddressEx('glProgramUniform1dv');
  _glProgramUniform1ui = sdlGlGetProcAddressEx('glProgramUniform1ui');
  _glProgramUniform1uiv = sdlGlGetProcAddressEx('glProgramUniform1uiv');
  _glProgramUniform2i = sdlGlGetProcAddressEx('glProgramUniform2i');
  _glProgramUniform2iv = sdlGlGetProcAddressEx('glProgramUniform2iv');
  _glProgramUniform2f = sdlGlGetProcAddressEx('glProgramUniform2f');
  _glProgramUniform2fv = sdlGlGetProcAddressEx('glProgramUniform2fv');
  _glProgramUniform2d = sdlGlGetProcAddressEx('glProgramUniform2d');
  _glProgramUniform2dv = sdlGlGetProcAddressEx('glProgramUniform2dv');
  _glProgramUniform2ui = sdlGlGetProcAddressEx('glProgramUniform2ui');
  _glProgramUniform2uiv = sdlGlGetProcAddressEx('glProgramUniform2uiv');
  _glProgramUniform3i = sdlGlGetProcAddressEx('glProgramUniform3i');
  _glProgramUniform3iv = sdlGlGetProcAddressEx('glProgramUniform3iv');
  _glProgramUniform3f = sdlGlGetProcAddressEx('glProgramUniform3f');
  _glProgramUniform3fv = sdlGlGetProcAddressEx('glProgramUniform3fv');
  _glProgramUniform3d = sdlGlGetProcAddressEx('glProgramUniform3d');
  _glProgramUniform3dv = sdlGlGetProcAddressEx('glProgramUniform3dv');
  _glProgramUniform3ui = sdlGlGetProcAddressEx('glProgramUniform3ui');
  _glProgramUniform3uiv = sdlGlGetProcAddressEx('glProgramUniform3uiv');
  _glProgramUniform4i = sdlGlGetProcAddressEx('glProgramUniform4i');
  _glProgramUniform4iv = sdlGlGetProcAddressEx('glProgramUniform4iv');
  _glProgramUniform4f = sdlGlGetProcAddressEx('glProgramUniform4f');
  _glProgramUniform4fv = sdlGlGetProcAddressEx('glProgramUniform4fv');
  _glProgramUniform4d = sdlGlGetProcAddressEx('glProgramUniform4d');
  _glProgramUniform4dv = sdlGlGetProcAddressEx('glProgramUniform4dv');
  _glProgramUniform4ui = sdlGlGetProcAddressEx('glProgramUniform4ui');
  _glProgramUniform4uiv = sdlGlGetProcAddressEx('glProgramUniform4uiv');
  _glProgramUniformMatrix2fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2fv',
  );
  _glProgramUniformMatrix3fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3fv',
  );
  _glProgramUniformMatrix4fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4fv',
  );
  _glProgramUniformMatrix2dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2dv',
  );
  _glProgramUniformMatrix3dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3dv',
  );
  _glProgramUniformMatrix4dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4dv',
  );
  _glProgramUniformMatrix2x3fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x3fv',
  );
  _glProgramUniformMatrix3x2fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x2fv',
  );
  _glProgramUniformMatrix2x4fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x4fv',
  );
  _glProgramUniformMatrix4x2fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x2fv',
  );
  _glProgramUniformMatrix3x4fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x4fv',
  );
  _glProgramUniformMatrix4x3fv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x3fv',
  );
  _glProgramUniformMatrix2x3dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x3dv',
  );
  _glProgramUniformMatrix3x2dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x2dv',
  );
  _glProgramUniformMatrix2x4dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x4dv',
  );
  _glProgramUniformMatrix4x2dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x2dv',
  );
  _glProgramUniformMatrix3x4dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x4dv',
  );
  _glProgramUniformMatrix4x3dv = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x3dv',
  );
  _glValidateProgramPipeline = sdlGlGetProcAddressEx(
    'glValidateProgramPipeline',
  );
  _glGetProgramPipelineInfoLog = sdlGlGetProcAddressEx(
    'glGetProgramPipelineInfoLog',
  );
  _glVertexAttribL1d = sdlGlGetProcAddressEx('glVertexAttribL1d');
  _glVertexAttribL2d = sdlGlGetProcAddressEx('glVertexAttribL2d');
  _glVertexAttribL3d = sdlGlGetProcAddressEx('glVertexAttribL3d');
  _glVertexAttribL4d = sdlGlGetProcAddressEx('glVertexAttribL4d');
  _glVertexAttribL1dv = sdlGlGetProcAddressEx('glVertexAttribL1dv');
  _glVertexAttribL2dv = sdlGlGetProcAddressEx('glVertexAttribL2dv');
  _glVertexAttribL3dv = sdlGlGetProcAddressEx('glVertexAttribL3dv');
  _glVertexAttribL4dv = sdlGlGetProcAddressEx('glVertexAttribL4dv');
  _glVertexAttribLPointer = sdlGlGetProcAddressEx('glVertexAttribLPointer');
  _glGetVertexAttribLdv = sdlGlGetProcAddressEx('glGetVertexAttribLdv');
  _glViewportArrayv = sdlGlGetProcAddressEx('glViewportArrayv');
  _glViewportIndexedf = sdlGlGetProcAddressEx('glViewportIndexedf');
  _glViewportIndexedfv = sdlGlGetProcAddressEx('glViewportIndexedfv');
  _glScissorArrayv = sdlGlGetProcAddressEx('glScissorArrayv');
  _glScissorIndexed = sdlGlGetProcAddressEx('glScissorIndexed');
  _glScissorIndexedv = sdlGlGetProcAddressEx('glScissorIndexedv');
  _glDepthRangeArrayv = sdlGlGetProcAddressEx('glDepthRangeArrayv');
  _glDepthRangeIndexed = sdlGlGetProcAddressEx('glDepthRangeIndexed');
  _glGetFloatiV = sdlGlGetProcAddressEx('glGetFloatiV');
  _glGetDoubleiV = sdlGlGetProcAddressEx('glGetDoubleiV');
  _glDrawArraysInstancedBaseInstance = sdlGlGetProcAddressEx(
    'glDrawArraysInstancedBaseInstance',
  );
  _glDrawElementsInstancedBaseInstance = sdlGlGetProcAddressEx(
    'glDrawElementsInstancedBaseInstance',
  );
  _glDrawElementsInstancedBaseVertexBaseInstance = sdlGlGetProcAddressEx(
    'glDrawElementsInstancedBaseVertexBaseInstance',
  );
  _glGetInternalformativ = sdlGlGetProcAddressEx('glGetInternalformativ');
  _glGetActiveAtomicCounterBufferiv = sdlGlGetProcAddressEx(
    'glGetActiveAtomicCounterBufferiv',
  );
  _glBindImageTexture = sdlGlGetProcAddressEx('glBindImageTexture');
  _glMemoryBarrier = sdlGlGetProcAddressEx('glMemoryBarrier');
  _glTexStorage1D = sdlGlGetProcAddressEx('glTexStorage1D');
  _glTexStorage2D = sdlGlGetProcAddressEx('glTexStorage2D');
  _glTexStorage3D = sdlGlGetProcAddressEx('glTexStorage3D');
  _glDrawTransformFeedbackInstanced = sdlGlGetProcAddressEx(
    'glDrawTransformFeedbackInstanced',
  );
  _glDrawTransformFeedbackStreamInstanced = sdlGlGetProcAddressEx(
    'glDrawTransformFeedbackStreamInstanced',
  );
  _glClearBufferData = sdlGlGetProcAddressEx('glClearBufferData');
  _glClearBufferSubData = sdlGlGetProcAddressEx('glClearBufferSubData');
  _glDispatchCompute = sdlGlGetProcAddressEx('glDispatchCompute');
  _glDispatchComputeIndirect = sdlGlGetProcAddressEx(
    'glDispatchComputeIndirect',
  );
  _glCopyImageSubData = sdlGlGetProcAddressEx('glCopyImageSubData');
  _glFramebufferParameteri = sdlGlGetProcAddressEx('glFramebufferParameteri');
  _glGetFramebufferParameteriv = sdlGlGetProcAddressEx(
    'glGetFramebufferParameteriv',
  );
  _glGetInternalformati64v = sdlGlGetProcAddressEx('glGetInternalformati64v');
  _glInvalidateTexSubImage = sdlGlGetProcAddressEx('glInvalidateTexSubImage');
  _glInvalidateTexImage = sdlGlGetProcAddressEx('glInvalidateTexImage');
  _glInvalidateBufferSubData = sdlGlGetProcAddressEx(
    'glInvalidateBufferSubData',
  );
  _glInvalidateBufferData = sdlGlGetProcAddressEx('glInvalidateBufferData');
  _glInvalidateFramebuffer = sdlGlGetProcAddressEx('glInvalidateFramebuffer');
  _glInvalidateSubFramebuffer = sdlGlGetProcAddressEx(
    'glInvalidateSubFramebuffer',
  );
  _glMultiDrawArraysIndirect = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirect',
  );
  _glMultiDrawElementsIndirect = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirect',
  );
  _glGetProgramInterfaceiv = sdlGlGetProcAddressEx('glGetProgramInterfaceiv');
  _glGetProgramResourceIndex = sdlGlGetProcAddressEx(
    'glGetProgramResourceIndex',
  );
  _glGetProgramResourceName = sdlGlGetProcAddressEx('glGetProgramResourceName');
  _glGetProgramResourceiv = sdlGlGetProcAddressEx('glGetProgramResourceiv');
  _glGetProgramResourceLocation = sdlGlGetProcAddressEx(
    'glGetProgramResourceLocation',
  );
  _glGetProgramResourceLocationIndex = sdlGlGetProcAddressEx(
    'glGetProgramResourceLocationIndex',
  );
  _glShaderStorageBlockBinding = sdlGlGetProcAddressEx(
    'glShaderStorageBlockBinding',
  );
  _glTexBufferRange = sdlGlGetProcAddressEx('glTexBufferRange');
  _glTexStorage2DMultisample = sdlGlGetProcAddressEx(
    'glTexStorage2DMultisample',
  );
  _glTexStorage3DMultisample = sdlGlGetProcAddressEx(
    'glTexStorage3DMultisample',
  );
  _glTextureView = sdlGlGetProcAddressEx('glTextureView');
  _glBindVertexBuffer = sdlGlGetProcAddressEx('glBindVertexBuffer');
  _glVertexAttribFormat = sdlGlGetProcAddressEx('glVertexAttribFormat');
  _glVertexAttribIFormat = sdlGlGetProcAddressEx('glVertexAttribIFormat');
  _glVertexAttribLFormat = sdlGlGetProcAddressEx('glVertexAttribLFormat');
  _glVertexAttribBinding = sdlGlGetProcAddressEx('glVertexAttribBinding');
  _glVertexBindingDivisor = sdlGlGetProcAddressEx('glVertexBindingDivisor');
  _glDebugMessageControl = sdlGlGetProcAddressEx('glDebugMessageControl');
  _glDebugMessageInsert = sdlGlGetProcAddressEx('glDebugMessageInsert');
  _glDebugMessageCallback = sdlGlGetProcAddressEx('glDebugMessageCallback');
  _glGetDebugMessageLog = sdlGlGetProcAddressEx('glGetDebugMessageLog');
  _glPushDebugGroup = sdlGlGetProcAddressEx('glPushDebugGroup');
  _glPopDebugGroup = sdlGlGetProcAddressEx('glPopDebugGroup');
  _glObjectLabel = sdlGlGetProcAddressEx('glObjectLabel');
  _glGetObjectLabel = sdlGlGetProcAddressEx('glGetObjectLabel');
  _glObjectPtrLabel = sdlGlGetProcAddressEx('glObjectPtrLabel');
  _glGetObjectPtrLabel = sdlGlGetProcAddressEx('glGetObjectPtrLabel');
  _glBufferStorage = sdlGlGetProcAddressEx('glBufferStorage');
  _glClearTexImage = sdlGlGetProcAddressEx('glClearTexImage');
  _glClearTexSubImage = sdlGlGetProcAddressEx('glClearTexSubImage');
  _glBindBuffersBase = sdlGlGetProcAddressEx('glBindBuffersBase');
  _glBindBuffersRange = sdlGlGetProcAddressEx('glBindBuffersRange');
  _glBindTextures = sdlGlGetProcAddressEx('glBindTextures');
  _glBindSamplers = sdlGlGetProcAddressEx('glBindSamplers');
  _glBindImageTextures = sdlGlGetProcAddressEx('glBindImageTextures');
  _glBindVertexBuffers = sdlGlGetProcAddressEx('glBindVertexBuffers');
  _glClipControl = sdlGlGetProcAddressEx('glClipControl');
  _glCreateTransformFeedbacks = sdlGlGetProcAddressEx(
    'glCreateTransformFeedbacks',
  );
  _glTransformFeedbackBufferBase = sdlGlGetProcAddressEx(
    'glTransformFeedbackBufferBase',
  );
  _glTransformFeedbackBufferRange = sdlGlGetProcAddressEx(
    'glTransformFeedbackBufferRange',
  );
  _glGetTransformFeedbackiv = sdlGlGetProcAddressEx('glGetTransformFeedbackiv');
  _glGetTransformFeedbackiV = sdlGlGetProcAddressEx('glGetTransformFeedbackiV');
  _glGetTransformFeedbacki64V = sdlGlGetProcAddressEx(
    'glGetTransformFeedbacki64V',
  );
  _glCreateBuffers = sdlGlGetProcAddressEx('glCreateBuffers');
  _glNamedBufferStorage = sdlGlGetProcAddressEx('glNamedBufferStorage');
  _glNamedBufferData = sdlGlGetProcAddressEx('glNamedBufferData');
  _glNamedBufferSubData = sdlGlGetProcAddressEx('glNamedBufferSubData');
  _glCopyNamedBufferSubData = sdlGlGetProcAddressEx('glCopyNamedBufferSubData');
  _glClearNamedBufferData = sdlGlGetProcAddressEx('glClearNamedBufferData');
  _glClearNamedBufferSubData = sdlGlGetProcAddressEx(
    'glClearNamedBufferSubData',
  );
  _glMapNamedBuffer = sdlGlGetProcAddressEx('glMapNamedBuffer');
  _glMapNamedBufferRange = sdlGlGetProcAddressEx('glMapNamedBufferRange');
  _glUnmapNamedBuffer = sdlGlGetProcAddressEx('glUnmapNamedBuffer');
  _glFlushMappedNamedBufferRange = sdlGlGetProcAddressEx(
    'glFlushMappedNamedBufferRange',
  );
  _glGetNamedBufferParameteriv = sdlGlGetProcAddressEx(
    'glGetNamedBufferParameteriv',
  );
  _glGetNamedBufferParameteri64v = sdlGlGetProcAddressEx(
    'glGetNamedBufferParameteri64v',
  );
  _glGetNamedBufferPointerv = sdlGlGetProcAddressEx('glGetNamedBufferPointerv');
  _glGetNamedBufferSubData = sdlGlGetProcAddressEx('glGetNamedBufferSubData');
  _glCreateFramebuffers = sdlGlGetProcAddressEx('glCreateFramebuffers');
  _glNamedFramebufferRenderbuffer = sdlGlGetProcAddressEx(
    'glNamedFramebufferRenderbuffer',
  );
  _glNamedFramebufferParameteri = sdlGlGetProcAddressEx(
    'glNamedFramebufferParameteri',
  );
  _glNamedFramebufferTexture = sdlGlGetProcAddressEx(
    'glNamedFramebufferTexture',
  );
  _glNamedFramebufferTextureLayer = sdlGlGetProcAddressEx(
    'glNamedFramebufferTextureLayer',
  );
  _glNamedFramebufferDrawBuffer = sdlGlGetProcAddressEx(
    'glNamedFramebufferDrawBuffer',
  );
  _glNamedFramebufferDrawBuffers = sdlGlGetProcAddressEx(
    'glNamedFramebufferDrawBuffers',
  );
  _glNamedFramebufferReadBuffer = sdlGlGetProcAddressEx(
    'glNamedFramebufferReadBuffer',
  );
  _glInvalidateNamedFramebufferData = sdlGlGetProcAddressEx(
    'glInvalidateNamedFramebufferData',
  );
  _glInvalidateNamedFramebufferSubData = sdlGlGetProcAddressEx(
    'glInvalidateNamedFramebufferSubData',
  );
  _glClearNamedFramebufferiv = sdlGlGetProcAddressEx(
    'glClearNamedFramebufferiv',
  );
  _glClearNamedFramebufferuiv = sdlGlGetProcAddressEx(
    'glClearNamedFramebufferuiv',
  );
  _glClearNamedFramebufferfv = sdlGlGetProcAddressEx(
    'glClearNamedFramebufferfv',
  );
  _glClearNamedFramebufferfi = sdlGlGetProcAddressEx(
    'glClearNamedFramebufferfi',
  );
  _glBlitNamedFramebuffer = sdlGlGetProcAddressEx('glBlitNamedFramebuffer');
  _glCheckNamedFramebufferStatus = sdlGlGetProcAddressEx(
    'glCheckNamedFramebufferStatus',
  );
  _glGetNamedFramebufferParameteriv = sdlGlGetProcAddressEx(
    'glGetNamedFramebufferParameteriv',
  );
  _glGetNamedFramebufferAttachmentParameteriv = sdlGlGetProcAddressEx(
    'glGetNamedFramebufferAttachmentParameteriv',
  );
  _glCreateRenderbuffers = sdlGlGetProcAddressEx('glCreateRenderbuffers');
  _glNamedRenderbufferStorage = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorage',
  );
  _glNamedRenderbufferStorageMultisample = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorageMultisample',
  );
  _glGetNamedRenderbufferParameteriv = sdlGlGetProcAddressEx(
    'glGetNamedRenderbufferParameteriv',
  );
  _glCreateTextures = sdlGlGetProcAddressEx('glCreateTextures');
  _glTextureBuffer = sdlGlGetProcAddressEx('glTextureBuffer');
  _glTextureBufferRange = sdlGlGetProcAddressEx('glTextureBufferRange');
  _glTextureStorage1D = sdlGlGetProcAddressEx('glTextureStorage1D');
  _glTextureStorage2D = sdlGlGetProcAddressEx('glTextureStorage2D');
  _glTextureStorage3D = sdlGlGetProcAddressEx('glTextureStorage3D');
  _glTextureStorage2DMultisample = sdlGlGetProcAddressEx(
    'glTextureStorage2DMultisample',
  );
  _glTextureStorage3DMultisample = sdlGlGetProcAddressEx(
    'glTextureStorage3DMultisample',
  );
  _glTextureSubImage1D = sdlGlGetProcAddressEx('glTextureSubImage1D');
  _glTextureSubImage2D = sdlGlGetProcAddressEx('glTextureSubImage2D');
  _glTextureSubImage3D = sdlGlGetProcAddressEx('glTextureSubImage3D');
  _glCompressedTextureSubImage1D = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage1D',
  );
  _glCompressedTextureSubImage2D = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage2D',
  );
  _glCompressedTextureSubImage3D = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage3D',
  );
  _glCopyTextureSubImage1D = sdlGlGetProcAddressEx('glCopyTextureSubImage1D');
  _glCopyTextureSubImage2D = sdlGlGetProcAddressEx('glCopyTextureSubImage2D');
  _glCopyTextureSubImage3D = sdlGlGetProcAddressEx('glCopyTextureSubImage3D');
  _glTextureParameterf = sdlGlGetProcAddressEx('glTextureParameterf');
  _glTextureParameterfv = sdlGlGetProcAddressEx('glTextureParameterfv');
  _glTextureParameteri = sdlGlGetProcAddressEx('glTextureParameteri');
  _glTextureParameterIiv = sdlGlGetProcAddressEx('glTextureParameterIiv');
  _glTextureParameterIuiv = sdlGlGetProcAddressEx('glTextureParameterIuiv');
  _glTextureParameteriv = sdlGlGetProcAddressEx('glTextureParameteriv');
  _glGenerateTextureMipmap = sdlGlGetProcAddressEx('glGenerateTextureMipmap');
  _glBindTextureUnit = sdlGlGetProcAddressEx('glBindTextureUnit');
  _glGetTextureImage = sdlGlGetProcAddressEx('glGetTextureImage');
  _glGetCompressedTextureImage = sdlGlGetProcAddressEx(
    'glGetCompressedTextureImage',
  );
  _glGetTextureLevelParameterfv = sdlGlGetProcAddressEx(
    'glGetTextureLevelParameterfv',
  );
  _glGetTextureLevelParameteriv = sdlGlGetProcAddressEx(
    'glGetTextureLevelParameteriv',
  );
  _glGetTextureParameterfv = sdlGlGetProcAddressEx('glGetTextureParameterfv');
  _glGetTextureParameterIiv = sdlGlGetProcAddressEx('glGetTextureParameterIiv');
  _glGetTextureParameterIuiv = sdlGlGetProcAddressEx(
    'glGetTextureParameterIuiv',
  );
  _glGetTextureParameteriv = sdlGlGetProcAddressEx('glGetTextureParameteriv');
  _glCreateVertexArrays = sdlGlGetProcAddressEx('glCreateVertexArrays');
  _glDisableVertexArrayAttrib = sdlGlGetProcAddressEx(
    'glDisableVertexArrayAttrib',
  );
  _glEnableVertexArrayAttrib = sdlGlGetProcAddressEx(
    'glEnableVertexArrayAttrib',
  );
  _glVertexArrayElementBuffer = sdlGlGetProcAddressEx(
    'glVertexArrayElementBuffer',
  );
  _glVertexArrayVertexBuffer = sdlGlGetProcAddressEx(
    'glVertexArrayVertexBuffer',
  );
  _glVertexArrayVertexBuffers = sdlGlGetProcAddressEx(
    'glVertexArrayVertexBuffers',
  );
  _glVertexArrayAttribBinding = sdlGlGetProcAddressEx(
    'glVertexArrayAttribBinding',
  );
  _glVertexArrayAttribFormat = sdlGlGetProcAddressEx(
    'glVertexArrayAttribFormat',
  );
  _glVertexArrayAttribIFormat = sdlGlGetProcAddressEx(
    'glVertexArrayAttribIFormat',
  );
  _glVertexArrayAttribLFormat = sdlGlGetProcAddressEx(
    'glVertexArrayAttribLFormat',
  );
  _glVertexArrayBindingDivisor = sdlGlGetProcAddressEx(
    'glVertexArrayBindingDivisor',
  );
  _glGetVertexArrayiv = sdlGlGetProcAddressEx('glGetVertexArrayiv');
  _glGetVertexArrayIndexediv = sdlGlGetProcAddressEx(
    'glGetVertexArrayIndexediv',
  );
  _glGetVertexArrayIndexed64iv = sdlGlGetProcAddressEx(
    'glGetVertexArrayIndexed64iv',
  );
  _glCreateSamplers = sdlGlGetProcAddressEx('glCreateSamplers');
  _glCreateProgramPipelines = sdlGlGetProcAddressEx('glCreateProgramPipelines');
  _glCreateQueries = sdlGlGetProcAddressEx('glCreateQueries');
  _glGetQueryBufferObjecti64v = sdlGlGetProcAddressEx(
    'glGetQueryBufferObjecti64v',
  );
  _glGetQueryBufferObjectiv = sdlGlGetProcAddressEx('glGetQueryBufferObjectiv');
  _glGetQueryBufferObjectui64v = sdlGlGetProcAddressEx(
    'glGetQueryBufferObjectui64v',
  );
  _glGetQueryBufferObjectuiv = sdlGlGetProcAddressEx(
    'glGetQueryBufferObjectuiv',
  );
  _glMemoryBarrierByRegion = sdlGlGetProcAddressEx('glMemoryBarrierByRegion');
  _glGetTextureSubImage = sdlGlGetProcAddressEx('glGetTextureSubImage');
  _glGetCompressedTextureSubImage = sdlGlGetProcAddressEx(
    'glGetCompressedTextureSubImage',
  );
  _glGetGraphicsResetStatus = sdlGlGetProcAddressEx('glGetGraphicsResetStatus');
  _glGetnCompressedTexImage = sdlGlGetProcAddressEx('glGetnCompressedTexImage');
  _glGetnTexImage = sdlGlGetProcAddressEx('glGetnTexImage');
  _glGetnUniformdv = sdlGlGetProcAddressEx('glGetnUniformdv');
  _glGetnUniformfv = sdlGlGetProcAddressEx('glGetnUniformfv');
  _glGetnUniformiv = sdlGlGetProcAddressEx('glGetnUniformiv');
  _glGetnUniformuiv = sdlGlGetProcAddressEx('glGetnUniformuiv');
  _glReadnPixels = sdlGlGetProcAddressEx('glReadnPixels');
  _glGetnMapdv = sdlGlGetProcAddressEx('glGetnMapdv');
  _glGetnMapfv = sdlGlGetProcAddressEx('glGetnMapfv');
  _glGetnMapiv = sdlGlGetProcAddressEx('glGetnMapiv');
  _glGetnPixelMapfv = sdlGlGetProcAddressEx('glGetnPixelMapfv');
  _glGetnPixelMapuiv = sdlGlGetProcAddressEx('glGetnPixelMapuiv');
  _glGetnPixelMapusv = sdlGlGetProcAddressEx('glGetnPixelMapusv');
  _glGetnPolygonStipple = sdlGlGetProcAddressEx('glGetnPolygonStipple');
  _glGetnColorTable = sdlGlGetProcAddressEx('glGetnColorTable');
  _glGetnConvolutionFilter = sdlGlGetProcAddressEx('glGetnConvolutionFilter');
  _glGetnSeparableFilter = sdlGlGetProcAddressEx('glGetnSeparableFilter');
  _glGetnHistogram = sdlGlGetProcAddressEx('glGetnHistogram');
  _glGetnMinmax = sdlGlGetProcAddressEx('glGetnMinmax');
  _glTextureBarrier = sdlGlGetProcAddressEx('glTextureBarrier');
  _glSpecializeShader = sdlGlGetProcAddressEx('glSpecializeShader');
  _glMultiDrawArraysIndirectCount = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirectCount',
  );
  _glMultiDrawElementsIndirectCount = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirectCount',
  );
  _glPolygonOffsetClamp = sdlGlGetProcAddressEx('glPolygonOffsetClamp');
  _glPrimitiveBoundingBoxArb = sdlGlGetProcAddressEx(
    'glPrimitiveBoundingBoxArb',
  );
  _glGetTextureHandleArb = sdlGlGetProcAddressEx('glGetTextureHandleArb');
  _glGetTextureSamplerHandleArb = sdlGlGetProcAddressEx(
    'glGetTextureSamplerHandleArb',
  );
  _glMakeTextureHandleResidentArb = sdlGlGetProcAddressEx(
    'glMakeTextureHandleResidentArb',
  );
  _glMakeTextureHandleNonResidentArb = sdlGlGetProcAddressEx(
    'glMakeTextureHandleNonResidentArb',
  );
  _glGetImageHandleArb = sdlGlGetProcAddressEx('glGetImageHandleArb');
  _glMakeImageHandleResidentArb = sdlGlGetProcAddressEx(
    'glMakeImageHandleResidentArb',
  );
  _glMakeImageHandleNonResidentArb = sdlGlGetProcAddressEx(
    'glMakeImageHandleNonResidentArb',
  );
  _glUniformHandleui64Arb = sdlGlGetProcAddressEx('glUniformHandleui64Arb');
  _glUniformHandleui64vArb = sdlGlGetProcAddressEx('glUniformHandleui64vArb');
  _glProgramUniformHandleui64Arb = sdlGlGetProcAddressEx(
    'glProgramUniformHandleui64Arb',
  );
  _glProgramUniformHandleui64vArb = sdlGlGetProcAddressEx(
    'glProgramUniformHandleui64vArb',
  );
  _glIsTextureHandleResidentArb = sdlGlGetProcAddressEx(
    'glIsTextureHandleResidentArb',
  );
  _glIsImageHandleResidentArb = sdlGlGetProcAddressEx(
    'glIsImageHandleResidentArb',
  );
  _glVertexAttribL1ui64Arb = sdlGlGetProcAddressEx('glVertexAttribL1ui64Arb');
  _glVertexAttribL1ui64vArb = sdlGlGetProcAddressEx('glVertexAttribL1ui64vArb');
  _glGetVertexAttribLui64vArb = sdlGlGetProcAddressEx(
    'glGetVertexAttribLui64vArb',
  );
  _glCreateSyncFromCLeventArb = sdlGlGetProcAddressEx(
    'glCreateSyncFromCLeventArb',
  );
  _glClampColorArb = sdlGlGetProcAddressEx('glClampColorArb');
  _glDispatchComputeGroupSizeArb = sdlGlGetProcAddressEx(
    'glDispatchComputeGroupSizeArb',
  );
  _glDebugMessageControlArb = sdlGlGetProcAddressEx('glDebugMessageControlArb');
  _glDebugMessageInsertArb = sdlGlGetProcAddressEx('glDebugMessageInsertArb');
  _glDebugMessageCallbackArb = sdlGlGetProcAddressEx(
    'glDebugMessageCallbackArb',
  );
  _glGetDebugMessageLogArb = sdlGlGetProcAddressEx('glGetDebugMessageLogArb');
  _glDrawBuffersArb = sdlGlGetProcAddressEx('glDrawBuffersArb');
  _glBlendEquationiArb = sdlGlGetProcAddressEx('glBlendEquationiArb');
  _glBlendEquationSeparateiArb = sdlGlGetProcAddressEx(
    'glBlendEquationSeparateiArb',
  );
  _glBlendFunciArb = sdlGlGetProcAddressEx('glBlendFunciArb');
  _glBlendFuncSeparateiArb = sdlGlGetProcAddressEx('glBlendFuncSeparateiArb');
  _glDrawArraysInstancedArb = sdlGlGetProcAddressEx('glDrawArraysInstancedArb');
  _glDrawElementsInstancedArb = sdlGlGetProcAddressEx(
    'glDrawElementsInstancedArb',
  );
  _glProgramStringArb = sdlGlGetProcAddressEx('glProgramStringArb');
  _glBindProgramArb = sdlGlGetProcAddressEx('glBindProgramArb');
  _glDeleteProgramsArb = sdlGlGetProcAddressEx('glDeleteProgramsArb');
  _glGenProgramsArb = sdlGlGetProcAddressEx('glGenProgramsArb');
  _glProgramEnvParameter4dArb = sdlGlGetProcAddressEx(
    'glProgramEnvParameter4dArb',
  );
  _glProgramEnvParameter4dvArb = sdlGlGetProcAddressEx(
    'glProgramEnvParameter4dvArb',
  );
  _glProgramEnvParameter4fArb = sdlGlGetProcAddressEx(
    'glProgramEnvParameter4fArb',
  );
  _glProgramEnvParameter4fvArb = sdlGlGetProcAddressEx(
    'glProgramEnvParameter4fvArb',
  );
  _glProgramLocalParameter4dArb = sdlGlGetProcAddressEx(
    'glProgramLocalParameter4dArb',
  );
  _glProgramLocalParameter4dvArb = sdlGlGetProcAddressEx(
    'glProgramLocalParameter4dvArb',
  );
  _glProgramLocalParameter4fArb = sdlGlGetProcAddressEx(
    'glProgramLocalParameter4fArb',
  );
  _glProgramLocalParameter4fvArb = sdlGlGetProcAddressEx(
    'glProgramLocalParameter4fvArb',
  );
  _glGetProgramEnvParameterdvArb = sdlGlGetProcAddressEx(
    'glGetProgramEnvParameterdvArb',
  );
  _glGetProgramEnvParameterfvArb = sdlGlGetProcAddressEx(
    'glGetProgramEnvParameterfvArb',
  );
  _glGetProgramLocalParameterdvArb = sdlGlGetProcAddressEx(
    'glGetProgramLocalParameterdvArb',
  );
  _glGetProgramLocalParameterfvArb = sdlGlGetProcAddressEx(
    'glGetProgramLocalParameterfvArb',
  );
  _glGetProgramivArb = sdlGlGetProcAddressEx('glGetProgramivArb');
  _glGetProgramStringArb = sdlGlGetProcAddressEx('glGetProgramStringArb');
  _glIsProgramArb = sdlGlGetProcAddressEx('glIsProgramArb');
  _glProgramParameteriArb = sdlGlGetProcAddressEx('glProgramParameteriArb');
  _glFramebufferTextureArb = sdlGlGetProcAddressEx('glFramebufferTextureArb');
  _glFramebufferTextureLayerArb = sdlGlGetProcAddressEx(
    'glFramebufferTextureLayerArb',
  );
  _glFramebufferTextureFaceArb = sdlGlGetProcAddressEx(
    'glFramebufferTextureFaceArb',
  );
  _glSpecializeShaderArb = sdlGlGetProcAddressEx('glSpecializeShaderArb');
  _glUniform1i64Arb = sdlGlGetProcAddressEx('glUniform1i64Arb');
  _glUniform2i64Arb = sdlGlGetProcAddressEx('glUniform2i64Arb');
  _glUniform3i64Arb = sdlGlGetProcAddressEx('glUniform3i64Arb');
  _glUniform4i64Arb = sdlGlGetProcAddressEx('glUniform4i64Arb');
  _glUniform1i64vArb = sdlGlGetProcAddressEx('glUniform1i64vArb');
  _glUniform2i64vArb = sdlGlGetProcAddressEx('glUniform2i64vArb');
  _glUniform3i64vArb = sdlGlGetProcAddressEx('glUniform3i64vArb');
  _glUniform4i64vArb = sdlGlGetProcAddressEx('glUniform4i64vArb');
  _glUniform1ui64Arb = sdlGlGetProcAddressEx('glUniform1ui64Arb');
  _glUniform2ui64Arb = sdlGlGetProcAddressEx('glUniform2ui64Arb');
  _glUniform3ui64Arb = sdlGlGetProcAddressEx('glUniform3ui64Arb');
  _glUniform4ui64Arb = sdlGlGetProcAddressEx('glUniform4ui64Arb');
  _glUniform1ui64vArb = sdlGlGetProcAddressEx('glUniform1ui64vArb');
  _glUniform2ui64vArb = sdlGlGetProcAddressEx('glUniform2ui64vArb');
  _glUniform3ui64vArb = sdlGlGetProcAddressEx('glUniform3ui64vArb');
  _glUniform4ui64vArb = sdlGlGetProcAddressEx('glUniform4ui64vArb');
  _glGetUniformi64vArb = sdlGlGetProcAddressEx('glGetUniformi64vArb');
  _glGetUniformui64vArb = sdlGlGetProcAddressEx('glGetUniformui64vArb');
  _glGetnUniformi64vArb = sdlGlGetProcAddressEx('glGetnUniformi64vArb');
  _glGetnUniformui64vArb = sdlGlGetProcAddressEx('glGetnUniformui64vArb');
  _glProgramUniform1i64Arb = sdlGlGetProcAddressEx('glProgramUniform1i64Arb');
  _glProgramUniform2i64Arb = sdlGlGetProcAddressEx('glProgramUniform2i64Arb');
  _glProgramUniform3i64Arb = sdlGlGetProcAddressEx('glProgramUniform3i64Arb');
  _glProgramUniform4i64Arb = sdlGlGetProcAddressEx('glProgramUniform4i64Arb');
  _glProgramUniform1i64vArb = sdlGlGetProcAddressEx('glProgramUniform1i64vArb');
  _glProgramUniform2i64vArb = sdlGlGetProcAddressEx('glProgramUniform2i64vArb');
  _glProgramUniform3i64vArb = sdlGlGetProcAddressEx('glProgramUniform3i64vArb');
  _glProgramUniform4i64vArb = sdlGlGetProcAddressEx('glProgramUniform4i64vArb');
  _glProgramUniform1ui64Arb = sdlGlGetProcAddressEx('glProgramUniform1ui64Arb');
  _glProgramUniform2ui64Arb = sdlGlGetProcAddressEx('glProgramUniform2ui64Arb');
  _glProgramUniform3ui64Arb = sdlGlGetProcAddressEx('glProgramUniform3ui64Arb');
  _glProgramUniform4ui64Arb = sdlGlGetProcAddressEx('glProgramUniform4ui64Arb');
  _glProgramUniform1ui64vArb = sdlGlGetProcAddressEx(
    'glProgramUniform1ui64vArb',
  );
  _glProgramUniform2ui64vArb = sdlGlGetProcAddressEx(
    'glProgramUniform2ui64vArb',
  );
  _glProgramUniform3ui64vArb = sdlGlGetProcAddressEx(
    'glProgramUniform3ui64vArb',
  );
  _glProgramUniform4ui64vArb = sdlGlGetProcAddressEx(
    'glProgramUniform4ui64vArb',
  );
  _glMultiDrawArraysIndirectCountArb = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirectCountArb',
  );
  _glMultiDrawElementsIndirectCountArb = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirectCountArb',
  );
  _glVertexAttribDivisorArb = sdlGlGetProcAddressEx('glVertexAttribDivisorArb');
  _glCurrentPaletteMatrixArb = sdlGlGetProcAddressEx(
    'glCurrentPaletteMatrixArb',
  );
  _glMatrixIndexubvArb = sdlGlGetProcAddressEx('glMatrixIndexubvArb');
  _glMatrixIndexusvArb = sdlGlGetProcAddressEx('glMatrixIndexusvArb');
  _glMatrixIndexuivArb = sdlGlGetProcAddressEx('glMatrixIndexuivArb');
  _glMatrixIndexPointerArb = sdlGlGetProcAddressEx('glMatrixIndexPointerArb');
  _glSampleCoverageArb = sdlGlGetProcAddressEx('glSampleCoverageArb');
  _glGenQueriesArb = sdlGlGetProcAddressEx('glGenQueriesArb');
  _glDeleteQueriesArb = sdlGlGetProcAddressEx('glDeleteQueriesArb');
  _glIsQueryArb = sdlGlGetProcAddressEx('glIsQueryArb');
  _glBeginQueryArb = sdlGlGetProcAddressEx('glBeginQueryArb');
  _glEndQueryArb = sdlGlGetProcAddressEx('glEndQueryArb');
  _glGetQueryivArb = sdlGlGetProcAddressEx('glGetQueryivArb');
  _glGetQueryObjectivArb = sdlGlGetProcAddressEx('glGetQueryObjectivArb');
  _glGetQueryObjectuivArb = sdlGlGetProcAddressEx('glGetQueryObjectuivArb');
  _glMaxShaderCompilerThreadsArb = sdlGlGetProcAddressEx(
    'glMaxShaderCompilerThreadsArb',
  );
  _glPointParameterfArb = sdlGlGetProcAddressEx('glPointParameterfArb');
  _glPointParameterfvArb = sdlGlGetProcAddressEx('glPointParameterfvArb');
  _glGetGraphicsResetStatusArb = sdlGlGetProcAddressEx(
    'glGetGraphicsResetStatusArb',
  );
  _glGetnTexImageArb = sdlGlGetProcAddressEx('glGetnTexImageArb');
  _glReadnPixelsArb = sdlGlGetProcAddressEx('glReadnPixelsArb');
  _glGetnCompressedTexImageArb = sdlGlGetProcAddressEx(
    'glGetnCompressedTexImageArb',
  );
  _glGetnUniformfvArb = sdlGlGetProcAddressEx('glGetnUniformfvArb');
  _glGetnUniformivArb = sdlGlGetProcAddressEx('glGetnUniformivArb');
  _glGetnUniformuivArb = sdlGlGetProcAddressEx('glGetnUniformuivArb');
  _glGetnUniformdvArb = sdlGlGetProcAddressEx('glGetnUniformdvArb');
  _glGetnMapdvArb = sdlGlGetProcAddressEx('glGetnMapdvArb');
  _glGetnMapfvArb = sdlGlGetProcAddressEx('glGetnMapfvArb');
  _glGetnMapivArb = sdlGlGetProcAddressEx('glGetnMapivArb');
  _glGetnPixelMapfvArb = sdlGlGetProcAddressEx('glGetnPixelMapfvArb');
  _glGetnPixelMapuivArb = sdlGlGetProcAddressEx('glGetnPixelMapuivArb');
  _glGetnPixelMapusvArb = sdlGlGetProcAddressEx('glGetnPixelMapusvArb');
  _glGetnPolygonStippleArb = sdlGlGetProcAddressEx('glGetnPolygonStippleArb');
  _glGetnColorTableArb = sdlGlGetProcAddressEx('glGetnColorTableArb');
  _glGetnConvolutionFilterArb = sdlGlGetProcAddressEx(
    'glGetnConvolutionFilterArb',
  );
  _glGetnSeparableFilterArb = sdlGlGetProcAddressEx('glGetnSeparableFilterArb');
  _glGetnHistogramArb = sdlGlGetProcAddressEx('glGetnHistogramArb');
  _glGetnMinmaxArb = sdlGlGetProcAddressEx('glGetnMinmaxArb');
  _glFramebufferSampleLocationsfvArb = sdlGlGetProcAddressEx(
    'glFramebufferSampleLocationsfvArb',
  );
  _glNamedFramebufferSampleLocationsfvArb = sdlGlGetProcAddressEx(
    'glNamedFramebufferSampleLocationsfvArb',
  );
  _glEvaluateDepthValuesArb = sdlGlGetProcAddressEx('glEvaluateDepthValuesArb');
  _glMinSampleShadingArb = sdlGlGetProcAddressEx('glMinSampleShadingArb');
  _glDeleteObjectArb = sdlGlGetProcAddressEx('glDeleteObjectArb');
  _glGetHandleArb = sdlGlGetProcAddressEx('glGetHandleArb');
  _glDetachObjectArb = sdlGlGetProcAddressEx('glDetachObjectArb');
  _glCreateShaderObjectArb = sdlGlGetProcAddressEx('glCreateShaderObjectArb');
  _glShaderSourceArb = sdlGlGetProcAddressEx('glShaderSourceArb');
  _glCompileShaderArb = sdlGlGetProcAddressEx('glCompileShaderArb');
  _glCreateProgramObjectArb = sdlGlGetProcAddressEx('glCreateProgramObjectArb');
  _glAttachObjectArb = sdlGlGetProcAddressEx('glAttachObjectArb');
  _glLinkProgramArb = sdlGlGetProcAddressEx('glLinkProgramArb');
  _glUseProgramObjectArb = sdlGlGetProcAddressEx('glUseProgramObjectArb');
  _glValidateProgramArb = sdlGlGetProcAddressEx('glValidateProgramArb');
  _glUniform1fArb = sdlGlGetProcAddressEx('glUniform1fArb');
  _glUniform2fArb = sdlGlGetProcAddressEx('glUniform2fArb');
  _glUniform3fArb = sdlGlGetProcAddressEx('glUniform3fArb');
  _glUniform4fArb = sdlGlGetProcAddressEx('glUniform4fArb');
  _glUniform1iArb = sdlGlGetProcAddressEx('glUniform1iArb');
  _glUniform2iArb = sdlGlGetProcAddressEx('glUniform2iArb');
  _glUniform3iArb = sdlGlGetProcAddressEx('glUniform3iArb');
  _glUniform4iArb = sdlGlGetProcAddressEx('glUniform4iArb');
  _glUniform1fvArb = sdlGlGetProcAddressEx('glUniform1fvArb');
  _glUniform2fvArb = sdlGlGetProcAddressEx('glUniform2fvArb');
  _glUniform3fvArb = sdlGlGetProcAddressEx('glUniform3fvArb');
  _glUniform4fvArb = sdlGlGetProcAddressEx('glUniform4fvArb');
  _glUniform1ivArb = sdlGlGetProcAddressEx('glUniform1ivArb');
  _glUniform2ivArb = sdlGlGetProcAddressEx('glUniform2ivArb');
  _glUniform3ivArb = sdlGlGetProcAddressEx('glUniform3ivArb');
  _glUniform4ivArb = sdlGlGetProcAddressEx('glUniform4ivArb');
  _glUniformMatrix2fvArb = sdlGlGetProcAddressEx('glUniformMatrix2fvArb');
  _glUniformMatrix3fvArb = sdlGlGetProcAddressEx('glUniformMatrix3fvArb');
  _glUniformMatrix4fvArb = sdlGlGetProcAddressEx('glUniformMatrix4fvArb');
  _glGetObjectParameterfvArb = sdlGlGetProcAddressEx(
    'glGetObjectParameterfvArb',
  );
  _glGetObjectParameterivArb = sdlGlGetProcAddressEx(
    'glGetObjectParameterivArb',
  );
  _glGetInfoLogArb = sdlGlGetProcAddressEx('glGetInfoLogArb');
  _glGetAttachedObjectsArb = sdlGlGetProcAddressEx('glGetAttachedObjectsArb');
  _glGetUniformLocationArb = sdlGlGetProcAddressEx('glGetUniformLocationArb');
  _glGetActiveUniformArb = sdlGlGetProcAddressEx('glGetActiveUniformArb');
  _glGetUniformfvArb = sdlGlGetProcAddressEx('glGetUniformfvArb');
  _glGetUniformivArb = sdlGlGetProcAddressEx('glGetUniformivArb');
  _glGetShaderSourceArb = sdlGlGetProcAddressEx('glGetShaderSourceArb');
  _glNamedStringArb = sdlGlGetProcAddressEx('glNamedStringArb');
  _glDeleteNamedStringArb = sdlGlGetProcAddressEx('glDeleteNamedStringArb');
  _glCompileShaderIncludeArb = sdlGlGetProcAddressEx(
    'glCompileShaderIncludeArb',
  );
  _glIsNamedStringArb = sdlGlGetProcAddressEx('glIsNamedStringArb');
  _glGetNamedStringArb = sdlGlGetProcAddressEx('glGetNamedStringArb');
  _glGetNamedStringivArb = sdlGlGetProcAddressEx('glGetNamedStringivArb');
  _glBufferPageCommitmentArb = sdlGlGetProcAddressEx(
    'glBufferPageCommitmentArb',
  );
  _glNamedBufferPageCommitmentExt = sdlGlGetProcAddressEx(
    'glNamedBufferPageCommitmentExt',
  );
  _glNamedBufferPageCommitmentArb = sdlGlGetProcAddressEx(
    'glNamedBufferPageCommitmentArb',
  );
  _glTexPageCommitmentArb = sdlGlGetProcAddressEx('glTexPageCommitmentArb');
  _glTexBufferArb = sdlGlGetProcAddressEx('glTexBufferArb');
  _glCompressedTexImage3Darb = sdlGlGetProcAddressEx(
    'glCompressedTexImage3Darb',
  );
  _glCompressedTexImage2Darb = sdlGlGetProcAddressEx(
    'glCompressedTexImage2Darb',
  );
  _glCompressedTexImage1Darb = sdlGlGetProcAddressEx(
    'glCompressedTexImage1Darb',
  );
  _glCompressedTexSubImage3Darb = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage3Darb',
  );
  _glCompressedTexSubImage2Darb = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage2Darb',
  );
  _glCompressedTexSubImage1Darb = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage1Darb',
  );
  _glGetCompressedTexImageArb = sdlGlGetProcAddressEx(
    'glGetCompressedTexImageArb',
  );
  _glLoadTransposeMatrixfArb = sdlGlGetProcAddressEx(
    'glLoadTransposeMatrixfArb',
  );
  _glLoadTransposeMatrixdArb = sdlGlGetProcAddressEx(
    'glLoadTransposeMatrixdArb',
  );
  _glMultTransposeMatrixfArb = sdlGlGetProcAddressEx(
    'glMultTransposeMatrixfArb',
  );
  _glMultTransposeMatrixdArb = sdlGlGetProcAddressEx(
    'glMultTransposeMatrixdArb',
  );
  _glWeightbvArb = sdlGlGetProcAddressEx('glWeightbvArb');
  _glWeightsvArb = sdlGlGetProcAddressEx('glWeightsvArb');
  _glWeightivArb = sdlGlGetProcAddressEx('glWeightivArb');
  _glWeightfvArb = sdlGlGetProcAddressEx('glWeightfvArb');
  _glWeightdvArb = sdlGlGetProcAddressEx('glWeightdvArb');
  _glWeightubvArb = sdlGlGetProcAddressEx('glWeightubvArb');
  _glWeightusvArb = sdlGlGetProcAddressEx('glWeightusvArb');
  _glWeightuivArb = sdlGlGetProcAddressEx('glWeightuivArb');
  _glWeightPointerArb = sdlGlGetProcAddressEx('glWeightPointerArb');
  _glVertexBlendArb = sdlGlGetProcAddressEx('glVertexBlendArb');
  _glBindBufferArb = sdlGlGetProcAddressEx('glBindBufferArb');
  _glDeleteBuffersArb = sdlGlGetProcAddressEx('glDeleteBuffersArb');
  _glGenBuffersArb = sdlGlGetProcAddressEx('glGenBuffersArb');
  _glIsBufferArb = sdlGlGetProcAddressEx('glIsBufferArb');
  _glBufferDataArb = sdlGlGetProcAddressEx('glBufferDataArb');
  _glBufferSubDataArb = sdlGlGetProcAddressEx('glBufferSubDataArb');
  _glGetBufferSubDataArb = sdlGlGetProcAddressEx('glGetBufferSubDataArb');
  _glMapBufferArb = sdlGlGetProcAddressEx('glMapBufferArb');
  _glUnmapBufferArb = sdlGlGetProcAddressEx('glUnmapBufferArb');
  _glGetBufferParameterivArb = sdlGlGetProcAddressEx(
    'glGetBufferParameterivArb',
  );
  _glGetBufferPointervArb = sdlGlGetProcAddressEx('glGetBufferPointervArb');
  _glVertexAttrib1dArb = sdlGlGetProcAddressEx('glVertexAttrib1dArb');
  _glVertexAttrib1dvArb = sdlGlGetProcAddressEx('glVertexAttrib1dvArb');
  _glVertexAttrib1fArb = sdlGlGetProcAddressEx('glVertexAttrib1fArb');
  _glVertexAttrib1fvArb = sdlGlGetProcAddressEx('glVertexAttrib1fvArb');
  _glVertexAttrib1sArb = sdlGlGetProcAddressEx('glVertexAttrib1sArb');
  _glVertexAttrib1svArb = sdlGlGetProcAddressEx('glVertexAttrib1svArb');
  _glVertexAttrib2dArb = sdlGlGetProcAddressEx('glVertexAttrib2dArb');
  _glVertexAttrib2dvArb = sdlGlGetProcAddressEx('glVertexAttrib2dvArb');
  _glVertexAttrib2fArb = sdlGlGetProcAddressEx('glVertexAttrib2fArb');
  _glVertexAttrib2fvArb = sdlGlGetProcAddressEx('glVertexAttrib2fvArb');
  _glVertexAttrib2sArb = sdlGlGetProcAddressEx('glVertexAttrib2sArb');
  _glVertexAttrib2svArb = sdlGlGetProcAddressEx('glVertexAttrib2svArb');
  _glVertexAttrib3dArb = sdlGlGetProcAddressEx('glVertexAttrib3dArb');
  _glVertexAttrib3dvArb = sdlGlGetProcAddressEx('glVertexAttrib3dvArb');
  _glVertexAttrib3fArb = sdlGlGetProcAddressEx('glVertexAttrib3fArb');
  _glVertexAttrib3fvArb = sdlGlGetProcAddressEx('glVertexAttrib3fvArb');
  _glVertexAttrib3sArb = sdlGlGetProcAddressEx('glVertexAttrib3sArb');
  _glVertexAttrib3svArb = sdlGlGetProcAddressEx('glVertexAttrib3svArb');
  _glVertexAttrib4NbvArb = sdlGlGetProcAddressEx('glVertexAttrib4NbvArb');
  _glVertexAttrib4NivArb = sdlGlGetProcAddressEx('glVertexAttrib4NivArb');
  _glVertexAttrib4NsvArb = sdlGlGetProcAddressEx('glVertexAttrib4NsvArb');
  _glVertexAttrib4NubArb = sdlGlGetProcAddressEx('glVertexAttrib4NubArb');
  _glVertexAttrib4NubvArb = sdlGlGetProcAddressEx('glVertexAttrib4NubvArb');
  _glVertexAttrib4NuivArb = sdlGlGetProcAddressEx('glVertexAttrib4NuivArb');
  _glVertexAttrib4NusvArb = sdlGlGetProcAddressEx('glVertexAttrib4NusvArb');
  _glVertexAttrib4bvArb = sdlGlGetProcAddressEx('glVertexAttrib4bvArb');
  _glVertexAttrib4dArb = sdlGlGetProcAddressEx('glVertexAttrib4dArb');
  _glVertexAttrib4dvArb = sdlGlGetProcAddressEx('glVertexAttrib4dvArb');
  _glVertexAttrib4fArb = sdlGlGetProcAddressEx('glVertexAttrib4fArb');
  _glVertexAttrib4fvArb = sdlGlGetProcAddressEx('glVertexAttrib4fvArb');
  _glVertexAttrib4ivArb = sdlGlGetProcAddressEx('glVertexAttrib4ivArb');
  _glVertexAttrib4sArb = sdlGlGetProcAddressEx('glVertexAttrib4sArb');
  _glVertexAttrib4svArb = sdlGlGetProcAddressEx('glVertexAttrib4svArb');
  _glVertexAttrib4ubvArb = sdlGlGetProcAddressEx('glVertexAttrib4ubvArb');
  _glVertexAttrib4uivArb = sdlGlGetProcAddressEx('glVertexAttrib4uivArb');
  _glVertexAttrib4usvArb = sdlGlGetProcAddressEx('glVertexAttrib4usvArb');
  _glVertexAttribPointerArb = sdlGlGetProcAddressEx('glVertexAttribPointerArb');
  _glEnableVertexAttribArrayArb = sdlGlGetProcAddressEx(
    'glEnableVertexAttribArrayArb',
  );
  _glDisableVertexAttribArrayArb = sdlGlGetProcAddressEx(
    'glDisableVertexAttribArrayArb',
  );
  _glGetVertexAttribdvArb = sdlGlGetProcAddressEx('glGetVertexAttribdvArb');
  _glGetVertexAttribfvArb = sdlGlGetProcAddressEx('glGetVertexAttribfvArb');
  _glGetVertexAttribivArb = sdlGlGetProcAddressEx('glGetVertexAttribivArb');
  _glGetVertexAttribPointervArb = sdlGlGetProcAddressEx(
    'glGetVertexAttribPointervArb',
  );
  _glBindAttribLocationArb = sdlGlGetProcAddressEx('glBindAttribLocationArb');
  _glGetActiveAttribArb = sdlGlGetProcAddressEx('glGetActiveAttribArb');
  _glGetAttribLocationArb = sdlGlGetProcAddressEx('glGetAttribLocationArb');
  _glDepthRangeArraydvNv = sdlGlGetProcAddressEx('glDepthRangeArraydvNv');
  _glDepthRangeIndexeddNv = sdlGlGetProcAddressEx('glDepthRangeIndexeddNv');
  _glWindowPos2dArb = sdlGlGetProcAddressEx('glWindowPos2dArb');
  _glWindowPos2dvArb = sdlGlGetProcAddressEx('glWindowPos2dvArb');
  _glWindowPos2fArb = sdlGlGetProcAddressEx('glWindowPos2fArb');
  _glWindowPos2fvArb = sdlGlGetProcAddressEx('glWindowPos2fvArb');
  _glWindowPos2iArb = sdlGlGetProcAddressEx('glWindowPos2iArb');
  _glWindowPos2ivArb = sdlGlGetProcAddressEx('glWindowPos2ivArb');
  _glWindowPos2sArb = sdlGlGetProcAddressEx('glWindowPos2sArb');
  _glWindowPos2svArb = sdlGlGetProcAddressEx('glWindowPos2svArb');
  _glWindowPos3dArb = sdlGlGetProcAddressEx('glWindowPos3dArb');
  _glWindowPos3dvArb = sdlGlGetProcAddressEx('glWindowPos3dvArb');
  _glWindowPos3fArb = sdlGlGetProcAddressEx('glWindowPos3fArb');
  _glWindowPos3fvArb = sdlGlGetProcAddressEx('glWindowPos3fvArb');
  _glWindowPos3iArb = sdlGlGetProcAddressEx('glWindowPos3iArb');
  _glWindowPos3ivArb = sdlGlGetProcAddressEx('glWindowPos3ivArb');
  _glWindowPos3sArb = sdlGlGetProcAddressEx('glWindowPos3sArb');
  _glWindowPos3svArb = sdlGlGetProcAddressEx('glWindowPos3svArb');
  _glBlendBarrierKhr = sdlGlGetProcAddressEx('glBlendBarrierKhr');
  _glMaxShaderCompilerThreadsKhr = sdlGlGetProcAddressEx(
    'glMaxShaderCompilerThreadsKhr',
  );
  _glMultiTexCoord1bOes = sdlGlGetProcAddressEx('glMultiTexCoord1bOes');
  _glMultiTexCoord1bvOes = sdlGlGetProcAddressEx('glMultiTexCoord1bvOes');
  _glMultiTexCoord2bOes = sdlGlGetProcAddressEx('glMultiTexCoord2bOes');
  _glMultiTexCoord2bvOes = sdlGlGetProcAddressEx('glMultiTexCoord2bvOes');
  _glMultiTexCoord3bOes = sdlGlGetProcAddressEx('glMultiTexCoord3bOes');
  _glMultiTexCoord3bvOes = sdlGlGetProcAddressEx('glMultiTexCoord3bvOes');
  _glMultiTexCoord4bOes = sdlGlGetProcAddressEx('glMultiTexCoord4bOes');
  _glMultiTexCoord4bvOes = sdlGlGetProcAddressEx('glMultiTexCoord4bvOes');
  _glTexCoord1bOes = sdlGlGetProcAddressEx('glTexCoord1bOes');
  _glTexCoord1bvOes = sdlGlGetProcAddressEx('glTexCoord1bvOes');
  _glTexCoord2bOes = sdlGlGetProcAddressEx('glTexCoord2bOes');
  _glTexCoord2bvOes = sdlGlGetProcAddressEx('glTexCoord2bvOes');
  _glTexCoord3bOes = sdlGlGetProcAddressEx('glTexCoord3bOes');
  _glTexCoord3bvOes = sdlGlGetProcAddressEx('glTexCoord3bvOes');
  _glTexCoord4bOes = sdlGlGetProcAddressEx('glTexCoord4bOes');
  _glTexCoord4bvOes = sdlGlGetProcAddressEx('glTexCoord4bvOes');
  _glVertex2bOes = sdlGlGetProcAddressEx('glVertex2bOes');
  _glVertex2bvOes = sdlGlGetProcAddressEx('glVertex2bvOes');
  _glVertex3bOes = sdlGlGetProcAddressEx('glVertex3bOes');
  _glVertex3bvOes = sdlGlGetProcAddressEx('glVertex3bvOes');
  _glVertex4bOes = sdlGlGetProcAddressEx('glVertex4bOes');
  _glVertex4bvOes = sdlGlGetProcAddressEx('glVertex4bvOes');
  _glAlphaFuncxOes = sdlGlGetProcAddressEx('glAlphaFuncxOes');
  _glClearColorxOes = sdlGlGetProcAddressEx('glClearColorxOes');
  _glClearDepthxOes = sdlGlGetProcAddressEx('glClearDepthxOes');
  _glClipPlanexOes = sdlGlGetProcAddressEx('glClipPlanexOes');
  _glColor4xOes = sdlGlGetProcAddressEx('glColor4xOes');
  _glDepthRangexOes = sdlGlGetProcAddressEx('glDepthRangexOes');
  _glFogxOes = sdlGlGetProcAddressEx('glFogxOes');
  _glFogxvOes = sdlGlGetProcAddressEx('glFogxvOes');
  _glFrustumxOes = sdlGlGetProcAddressEx('glFrustumxOes');
  _glGetClipPlanexOes = sdlGlGetProcAddressEx('glGetClipPlanexOes');
  _glGetFixedvOes = sdlGlGetProcAddressEx('glGetFixedvOes');
  _glGetTexEnvxvOes = sdlGlGetProcAddressEx('glGetTexEnvxvOes');
  _glGetTexParameterxvOes = sdlGlGetProcAddressEx('glGetTexParameterxvOes');
  _glLightModelxOes = sdlGlGetProcAddressEx('glLightModelxOes');
  _glLightModelxvOes = sdlGlGetProcAddressEx('glLightModelxvOes');
  _glLightxOes = sdlGlGetProcAddressEx('glLightxOes');
  _glLightxvOes = sdlGlGetProcAddressEx('glLightxvOes');
  _glLineWidthxOes = sdlGlGetProcAddressEx('glLineWidthxOes');
  _glLoadMatrixxOes = sdlGlGetProcAddressEx('glLoadMatrixxOes');
  _glMaterialxOes = sdlGlGetProcAddressEx('glMaterialxOes');
  _glMaterialxvOes = sdlGlGetProcAddressEx('glMaterialxvOes');
  _glMultMatrixxOes = sdlGlGetProcAddressEx('glMultMatrixxOes');
  _glMultiTexCoord4xOes = sdlGlGetProcAddressEx('glMultiTexCoord4xOes');
  _glNormal3xOes = sdlGlGetProcAddressEx('glNormal3xOes');
  _glOrthoxOes = sdlGlGetProcAddressEx('glOrthoxOes');
  _glPointParameterxvOes = sdlGlGetProcAddressEx('glPointParameterxvOes');
  _glPointSizexOes = sdlGlGetProcAddressEx('glPointSizexOes');
  _glPolygonOffsetxOes = sdlGlGetProcAddressEx('glPolygonOffsetxOes');
  _glRotatexOes = sdlGlGetProcAddressEx('glRotatexOes');
  _glScalexOes = sdlGlGetProcAddressEx('glScalexOes');
  _glTexEnvxOes = sdlGlGetProcAddressEx('glTexEnvxOes');
  _glTexEnvxvOes = sdlGlGetProcAddressEx('glTexEnvxvOes');
  _glTexParameterxOes = sdlGlGetProcAddressEx('glTexParameterxOes');
  _glTexParameterxvOes = sdlGlGetProcAddressEx('glTexParameterxvOes');
  _glTranslatexOes = sdlGlGetProcAddressEx('glTranslatexOes');
  _glAccumxOes = sdlGlGetProcAddressEx('glAccumxOes');
  _glBitmapxOes = sdlGlGetProcAddressEx('glBitmapxOes');
  _glBlendColorxOes = sdlGlGetProcAddressEx('glBlendColorxOes');
  _glClearAccumxOes = sdlGlGetProcAddressEx('glClearAccumxOes');
  _glColor3xOes = sdlGlGetProcAddressEx('glColor3xOes');
  _glColor3xvOes = sdlGlGetProcAddressEx('glColor3xvOes');
  _glColor4xvOes = sdlGlGetProcAddressEx('glColor4xvOes');
  _glConvolutionParameterxOes = sdlGlGetProcAddressEx(
    'glConvolutionParameterxOes',
  );
  _glConvolutionParameterxvOes = sdlGlGetProcAddressEx(
    'glConvolutionParameterxvOes',
  );
  _glEvalCoord1xOes = sdlGlGetProcAddressEx('glEvalCoord1xOes');
  _glEvalCoord1xvOes = sdlGlGetProcAddressEx('glEvalCoord1xvOes');
  _glEvalCoord2xOes = sdlGlGetProcAddressEx('glEvalCoord2xOes');
  _glEvalCoord2xvOes = sdlGlGetProcAddressEx('glEvalCoord2xvOes');
  _glFeedbackBufferxOes = sdlGlGetProcAddressEx('glFeedbackBufferxOes');
  _glGetConvolutionParameterxvOes = sdlGlGetProcAddressEx(
    'glGetConvolutionParameterxvOes',
  );
  _glGetHistogramParameterxvOes = sdlGlGetProcAddressEx(
    'glGetHistogramParameterxvOes',
  );
  _glGetLightxOes = sdlGlGetProcAddressEx('glGetLightxOes');
  _glGetMapxvOes = sdlGlGetProcAddressEx('glGetMapxvOes');
  _glGetMaterialxOes = sdlGlGetProcAddressEx('glGetMaterialxOes');
  _glGetPixelMapxv = sdlGlGetProcAddressEx('glGetPixelMapxv');
  _glGetTexGenxvOes = sdlGlGetProcAddressEx('glGetTexGenxvOes');
  _glGetTexLevelParameterxvOes = sdlGlGetProcAddressEx(
    'glGetTexLevelParameterxvOes',
  );
  _glIndexxOes = sdlGlGetProcAddressEx('glIndexxOes');
  _glIndexxvOes = sdlGlGetProcAddressEx('glIndexxvOes');
  _glLoadTransposeMatrixxOes = sdlGlGetProcAddressEx(
    'glLoadTransposeMatrixxOes',
  );
  _glMap1xOes = sdlGlGetProcAddressEx('glMap1xOes');
  _glMap2xOes = sdlGlGetProcAddressEx('glMap2xOes');
  _glMapGrid1xOes = sdlGlGetProcAddressEx('glMapGrid1xOes');
  _glMapGrid2xOes = sdlGlGetProcAddressEx('glMapGrid2xOes');
  _glMultTransposeMatrixxOes = sdlGlGetProcAddressEx(
    'glMultTransposeMatrixxOes',
  );
  _glMultiTexCoord1xOes = sdlGlGetProcAddressEx('glMultiTexCoord1xOes');
  _glMultiTexCoord1xvOes = sdlGlGetProcAddressEx('glMultiTexCoord1xvOes');
  _glMultiTexCoord2xOes = sdlGlGetProcAddressEx('glMultiTexCoord2xOes');
  _glMultiTexCoord2xvOes = sdlGlGetProcAddressEx('glMultiTexCoord2xvOes');
  _glMultiTexCoord3xOes = sdlGlGetProcAddressEx('glMultiTexCoord3xOes');
  _glMultiTexCoord3xvOes = sdlGlGetProcAddressEx('glMultiTexCoord3xvOes');
  _glMultiTexCoord4xvOes = sdlGlGetProcAddressEx('glMultiTexCoord4xvOes');
  _glNormal3xvOes = sdlGlGetProcAddressEx('glNormal3xvOes');
  _glPassThroughxOes = sdlGlGetProcAddressEx('glPassThroughxOes');
  _glPixelMapx = sdlGlGetProcAddressEx('glPixelMapx');
  _glPixelStorex = sdlGlGetProcAddressEx('glPixelStorex');
  _glPixelTransferxOes = sdlGlGetProcAddressEx('glPixelTransferxOes');
  _glPixelZoomxOes = sdlGlGetProcAddressEx('glPixelZoomxOes');
  _glPrioritizeTexturesxOes = sdlGlGetProcAddressEx('glPrioritizeTexturesxOes');
  _glRasterPos2xOes = sdlGlGetProcAddressEx('glRasterPos2xOes');
  _glRasterPos2xvOes = sdlGlGetProcAddressEx('glRasterPos2xvOes');
  _glRasterPos3xOes = sdlGlGetProcAddressEx('glRasterPos3xOes');
  _glRasterPos3xvOes = sdlGlGetProcAddressEx('glRasterPos3xvOes');
  _glRasterPos4xOes = sdlGlGetProcAddressEx('glRasterPos4xOes');
  _glRasterPos4xvOes = sdlGlGetProcAddressEx('glRasterPos4xvOes');
  _glRectxOes = sdlGlGetProcAddressEx('glRectxOes');
  _glRectxvOes = sdlGlGetProcAddressEx('glRectxvOes');
  _glTexCoord1xOes = sdlGlGetProcAddressEx('glTexCoord1xOes');
  _glTexCoord1xvOes = sdlGlGetProcAddressEx('glTexCoord1xvOes');
  _glTexCoord2xOes = sdlGlGetProcAddressEx('glTexCoord2xOes');
  _glTexCoord2xvOes = sdlGlGetProcAddressEx('glTexCoord2xvOes');
  _glTexCoord3xOes = sdlGlGetProcAddressEx('glTexCoord3xOes');
  _glTexCoord3xvOes = sdlGlGetProcAddressEx('glTexCoord3xvOes');
  _glTexCoord4xOes = sdlGlGetProcAddressEx('glTexCoord4xOes');
  _glTexCoord4xvOes = sdlGlGetProcAddressEx('glTexCoord4xvOes');
  _glTexGenxOes = sdlGlGetProcAddressEx('glTexGenxOes');
  _glTexGenxvOes = sdlGlGetProcAddressEx('glTexGenxvOes');
  _glVertex2xOes = sdlGlGetProcAddressEx('glVertex2xOes');
  _glVertex2xvOes = sdlGlGetProcAddressEx('glVertex2xvOes');
  _glVertex3xOes = sdlGlGetProcAddressEx('glVertex3xOes');
  _glVertex3xvOes = sdlGlGetProcAddressEx('glVertex3xvOes');
  _glVertex4xOes = sdlGlGetProcAddressEx('glVertex4xOes');
  _glVertex4xvOes = sdlGlGetProcAddressEx('glVertex4xvOes');
  _glQueryMatrixxOes = sdlGlGetProcAddressEx('glQueryMatrixxOes');
  _glClearDepthfOes = sdlGlGetProcAddressEx('glClearDepthfOes');
  _glClipPlanefOes = sdlGlGetProcAddressEx('glClipPlanefOes');
  _glDepthRangefOes = sdlGlGetProcAddressEx('glDepthRangefOes');
  _glFrustumfOes = sdlGlGetProcAddressEx('glFrustumfOes');
  _glGetClipPlanefOes = sdlGlGetProcAddressEx('glGetClipPlanefOes');
  _glOrthofOes = sdlGlGetProcAddressEx('glOrthofOes');
  _glTbufferMask3Dfx = sdlGlGetProcAddressEx('glTbufferMask3Dfx');
  _glDebugMessageEnableAmd = sdlGlGetProcAddressEx('glDebugMessageEnableAmd');
  _glDebugMessageInsertAmd = sdlGlGetProcAddressEx('glDebugMessageInsertAmd');
  _glDebugMessageCallbackAmd = sdlGlGetProcAddressEx(
    'glDebugMessageCallbackAmd',
  );
  _glGetDebugMessageLogAmd = sdlGlGetProcAddressEx('glGetDebugMessageLogAmd');
  _glBlendFuncIndexedAmd = sdlGlGetProcAddressEx('glBlendFuncIndexedAmd');
  _glBlendFuncSeparateIndexedAmd = sdlGlGetProcAddressEx(
    'glBlendFuncSeparateIndexedAmd',
  );
  _glBlendEquationIndexedAmd = sdlGlGetProcAddressEx(
    'glBlendEquationIndexedAmd',
  );
  _glBlendEquationSeparateIndexedAmd = sdlGlGetProcAddressEx(
    'glBlendEquationSeparateIndexedAmd',
  );
  _glRenderbufferStorageMultisampleAdvancedAmd = sdlGlGetProcAddressEx(
    'glRenderbufferStorageMultisampleAdvancedAmd',
  );
  _glNamedRenderbufferStorageMultisampleAdvancedAmd = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorageMultisampleAdvancedAmd',
  );
  _glFramebufferSamplePositionsfvAmd = sdlGlGetProcAddressEx(
    'glFramebufferSamplePositionsfvAmd',
  );
  _glNamedFramebufferSamplePositionsfvAmd = sdlGlGetProcAddressEx(
    'glNamedFramebufferSamplePositionsfvAmd',
  );
  _glGetFramebufferParameterfvAmd = sdlGlGetProcAddressEx(
    'glGetFramebufferParameterfvAmd',
  );
  _glGetNamedFramebufferParameterfvAmd = sdlGlGetProcAddressEx(
    'glGetNamedFramebufferParameterfvAmd',
  );
  _glUniform1i64Nv = sdlGlGetProcAddressEx('glUniform1i64Nv');
  _glUniform2i64Nv = sdlGlGetProcAddressEx('glUniform2i64Nv');
  _glUniform3i64Nv = sdlGlGetProcAddressEx('glUniform3i64Nv');
  _glUniform4i64Nv = sdlGlGetProcAddressEx('glUniform4i64Nv');
  _glUniform1i64vNv = sdlGlGetProcAddressEx('glUniform1i64vNv');
  _glUniform2i64vNv = sdlGlGetProcAddressEx('glUniform2i64vNv');
  _glUniform3i64vNv = sdlGlGetProcAddressEx('glUniform3i64vNv');
  _glUniform4i64vNv = sdlGlGetProcAddressEx('glUniform4i64vNv');
  _glUniform1ui64Nv = sdlGlGetProcAddressEx('glUniform1ui64Nv');
  _glUniform2ui64Nv = sdlGlGetProcAddressEx('glUniform2ui64Nv');
  _glUniform3ui64Nv = sdlGlGetProcAddressEx('glUniform3ui64Nv');
  _glUniform4ui64Nv = sdlGlGetProcAddressEx('glUniform4ui64Nv');
  _glUniform1ui64vNv = sdlGlGetProcAddressEx('glUniform1ui64vNv');
  _glUniform2ui64vNv = sdlGlGetProcAddressEx('glUniform2ui64vNv');
  _glUniform3ui64vNv = sdlGlGetProcAddressEx('glUniform3ui64vNv');
  _glUniform4ui64vNv = sdlGlGetProcAddressEx('glUniform4ui64vNv');
  _glGetUniformi64vNv = sdlGlGetProcAddressEx('glGetUniformi64vNv');
  _glGetUniformui64vNv = sdlGlGetProcAddressEx('glGetUniformui64vNv');
  _glProgramUniform1i64Nv = sdlGlGetProcAddressEx('glProgramUniform1i64Nv');
  _glProgramUniform2i64Nv = sdlGlGetProcAddressEx('glProgramUniform2i64Nv');
  _glProgramUniform3i64Nv = sdlGlGetProcAddressEx('glProgramUniform3i64Nv');
  _glProgramUniform4i64Nv = sdlGlGetProcAddressEx('glProgramUniform4i64Nv');
  _glProgramUniform1i64vNv = sdlGlGetProcAddressEx('glProgramUniform1i64vNv');
  _glProgramUniform2i64vNv = sdlGlGetProcAddressEx('glProgramUniform2i64vNv');
  _glProgramUniform3i64vNv = sdlGlGetProcAddressEx('glProgramUniform3i64vNv');
  _glProgramUniform4i64vNv = sdlGlGetProcAddressEx('glProgramUniform4i64vNv');
  _glProgramUniform1ui64Nv = sdlGlGetProcAddressEx('glProgramUniform1ui64Nv');
  _glProgramUniform2ui64Nv = sdlGlGetProcAddressEx('glProgramUniform2ui64Nv');
  _glProgramUniform3ui64Nv = sdlGlGetProcAddressEx('glProgramUniform3ui64Nv');
  _glProgramUniform4ui64Nv = sdlGlGetProcAddressEx('glProgramUniform4ui64Nv');
  _glProgramUniform1ui64vNv = sdlGlGetProcAddressEx('glProgramUniform1ui64vNv');
  _glProgramUniform2ui64vNv = sdlGlGetProcAddressEx('glProgramUniform2ui64vNv');
  _glProgramUniform3ui64vNv = sdlGlGetProcAddressEx('glProgramUniform3ui64vNv');
  _glProgramUniform4ui64vNv = sdlGlGetProcAddressEx('glProgramUniform4ui64vNv');
  _glVertexAttribParameteriAmd = sdlGlGetProcAddressEx(
    'glVertexAttribParameteriAmd',
  );
  _glMultiDrawArraysIndirectAmd = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirectAmd',
  );
  _glMultiDrawElementsIndirectAmd = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirectAmd',
  );
  _glGenNamesAmd = sdlGlGetProcAddressEx('glGenNamesAmd');
  _glDeleteNamesAmd = sdlGlGetProcAddressEx('glDeleteNamesAmd');
  _glIsNameAmd = sdlGlGetProcAddressEx('glIsNameAmd');
  _glQueryObjectParameteruiAmd = sdlGlGetProcAddressEx(
    'glQueryObjectParameteruiAmd',
  );
  _glGetPerfMonitorGroupsAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorGroupsAmd',
  );
  _glGetPerfMonitorCountersAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorCountersAmd',
  );
  _glGetPerfMonitorGroupStringAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorGroupStringAmd',
  );
  _glGetPerfMonitorCounterStringAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorCounterStringAmd',
  );
  _glGetPerfMonitorCounterInfoAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorCounterInfoAmd',
  );
  _glGenPerfMonitorsAmd = sdlGlGetProcAddressEx('glGenPerfMonitorsAmd');
  _glDeletePerfMonitorsAmd = sdlGlGetProcAddressEx('glDeletePerfMonitorsAmd');
  _glSelectPerfMonitorCountersAmd = sdlGlGetProcAddressEx(
    'glSelectPerfMonitorCountersAmd',
  );
  _glBeginPerfMonitorAmd = sdlGlGetProcAddressEx('glBeginPerfMonitorAmd');
  _glEndPerfMonitorAmd = sdlGlGetProcAddressEx('glEndPerfMonitorAmd');
  _glGetPerfMonitorCounterDataAmd = sdlGlGetProcAddressEx(
    'glGetPerfMonitorCounterDataAmd',
  );
  _glSetMultisamplefvAmd = sdlGlGetProcAddressEx('glSetMultisamplefvAmd');
  _glTexStorageSparseAmd = sdlGlGetProcAddressEx('glTexStorageSparseAmd');
  _glTextureStorageSparseAmd = sdlGlGetProcAddressEx(
    'glTextureStorageSparseAmd',
  );
  _glStencilOpValueAmd = sdlGlGetProcAddressEx('glStencilOpValueAmd');
  _glTessellationFactorAmd = sdlGlGetProcAddressEx('glTessellationFactorAmd');
  _glTessellationModeAmd = sdlGlGetProcAddressEx('glTessellationModeAmd');
  _glElementPointerApple = sdlGlGetProcAddressEx('glElementPointerApple');
  _glDrawElementArrayApple = sdlGlGetProcAddressEx('glDrawElementArrayApple');
  _glDrawRangeElementArrayApple = sdlGlGetProcAddressEx(
    'glDrawRangeElementArrayApple',
  );
  _glMultiDrawElementArrayApple = sdlGlGetProcAddressEx(
    'glMultiDrawElementArrayApple',
  );
  _glMultiDrawRangeElementArrayApple = sdlGlGetProcAddressEx(
    'glMultiDrawRangeElementArrayApple',
  );
  _glGenFencesApple = sdlGlGetProcAddressEx('glGenFencesApple');
  _glDeleteFencesApple = sdlGlGetProcAddressEx('glDeleteFencesApple');
  _glSetFenceApple = sdlGlGetProcAddressEx('glSetFenceApple');
  _glIsFenceApple = sdlGlGetProcAddressEx('glIsFenceApple');
  _glTestFenceApple = sdlGlGetProcAddressEx('glTestFenceApple');
  _glFinishFenceApple = sdlGlGetProcAddressEx('glFinishFenceApple');
  _glTestObjectApple = sdlGlGetProcAddressEx('glTestObjectApple');
  _glFinishObjectApple = sdlGlGetProcAddressEx('glFinishObjectApple');
  _glBufferParameteriApple = sdlGlGetProcAddressEx('glBufferParameteriApple');
  _glFlushMappedBufferRangeApple = sdlGlGetProcAddressEx(
    'glFlushMappedBufferRangeApple',
  );
  _glObjectPurgeableApple = sdlGlGetProcAddressEx('glObjectPurgeableApple');
  _glObjectUnpurgeableApple = sdlGlGetProcAddressEx('glObjectUnpurgeableApple');
  _glGetObjectParameterivApple = sdlGlGetProcAddressEx(
    'glGetObjectParameterivApple',
  );
  _glTextureRangeApple = sdlGlGetProcAddressEx('glTextureRangeApple');
  _glGetTexParameterPointervApple = sdlGlGetProcAddressEx(
    'glGetTexParameterPointervApple',
  );
  _glBindVertexArrayApple = sdlGlGetProcAddressEx('glBindVertexArrayApple');
  _glDeleteVertexArraysApple = sdlGlGetProcAddressEx(
    'glDeleteVertexArraysApple',
  );
  _glGenVertexArraysApple = sdlGlGetProcAddressEx('glGenVertexArraysApple');
  _glIsVertexArrayApple = sdlGlGetProcAddressEx('glIsVertexArrayApple');
  _glVertexArrayRangeApple = sdlGlGetProcAddressEx('glVertexArrayRangeApple');
  _glFlushVertexArrayRangeApple = sdlGlGetProcAddressEx(
    'glFlushVertexArrayRangeApple',
  );
  _glVertexArrayParameteriApple = sdlGlGetProcAddressEx(
    'glVertexArrayParameteriApple',
  );
  _glEnableVertexAttribApple = sdlGlGetProcAddressEx(
    'glEnableVertexAttribApple',
  );
  _glDisableVertexAttribApple = sdlGlGetProcAddressEx(
    'glDisableVertexAttribApple',
  );
  _glIsVertexAttribEnabledApple = sdlGlGetProcAddressEx(
    'glIsVertexAttribEnabledApple',
  );
  _glMapVertexAttrib1dApple = sdlGlGetProcAddressEx('glMapVertexAttrib1dApple');
  _glMapVertexAttrib1fApple = sdlGlGetProcAddressEx('glMapVertexAttrib1fApple');
  _glMapVertexAttrib2dApple = sdlGlGetProcAddressEx('glMapVertexAttrib2dApple');
  _glMapVertexAttrib2fApple = sdlGlGetProcAddressEx('glMapVertexAttrib2fApple');
  _glDrawBuffersAti = sdlGlGetProcAddressEx('glDrawBuffersAti');
  _glElementPointerAti = sdlGlGetProcAddressEx('glElementPointerAti');
  _glDrawElementArrayAti = sdlGlGetProcAddressEx('glDrawElementArrayAti');
  _glDrawRangeElementArrayAti = sdlGlGetProcAddressEx(
    'glDrawRangeElementArrayAti',
  );
  _glTexBumpParameterivAti = sdlGlGetProcAddressEx('glTexBumpParameterivAti');
  _glTexBumpParameterfvAti = sdlGlGetProcAddressEx('glTexBumpParameterfvAti');
  _glGetTexBumpParameterivAti = sdlGlGetProcAddressEx(
    'glGetTexBumpParameterivAti',
  );
  _glGetTexBumpParameterfvAti = sdlGlGetProcAddressEx(
    'glGetTexBumpParameterfvAti',
  );
  _glGenFragmentShadersAti = sdlGlGetProcAddressEx('glGenFragmentShadersAti');
  _glBindFragmentShaderAti = sdlGlGetProcAddressEx('glBindFragmentShaderAti');
  _glDeleteFragmentShaderAti = sdlGlGetProcAddressEx(
    'glDeleteFragmentShaderAti',
  );
  _glBeginFragmentShaderAti = sdlGlGetProcAddressEx('glBeginFragmentShaderAti');
  _glEndFragmentShaderAti = sdlGlGetProcAddressEx('glEndFragmentShaderAti');
  _glPassTexCoordAti = sdlGlGetProcAddressEx('glPassTexCoordAti');
  _glSampleMapAti = sdlGlGetProcAddressEx('glSampleMapAti');
  _glColorFragmentOp1Ati = sdlGlGetProcAddressEx('glColorFragmentOp1Ati');
  _glColorFragmentOp2Ati = sdlGlGetProcAddressEx('glColorFragmentOp2Ati');
  _glColorFragmentOp3Ati = sdlGlGetProcAddressEx('glColorFragmentOp3Ati');
  _glAlphaFragmentOp1Ati = sdlGlGetProcAddressEx('glAlphaFragmentOp1Ati');
  _glAlphaFragmentOp2Ati = sdlGlGetProcAddressEx('glAlphaFragmentOp2Ati');
  _glAlphaFragmentOp3Ati = sdlGlGetProcAddressEx('glAlphaFragmentOp3Ati');
  _glSetFragmentShaderConstantAti = sdlGlGetProcAddressEx(
    'glSetFragmentShaderConstantAti',
  );
  _glMapObjectBufferAti = sdlGlGetProcAddressEx('glMapObjectBufferAti');
  _glUnmapObjectBufferAti = sdlGlGetProcAddressEx('glUnmapObjectBufferAti');
  _glPnTrianglesiAti = sdlGlGetProcAddressEx('glPnTrianglesiAti');
  _glPnTrianglesfAti = sdlGlGetProcAddressEx('glPnTrianglesfAti');
  _glStencilOpSeparateAti = sdlGlGetProcAddressEx('glStencilOpSeparateAti');
  _glStencilFuncSeparateAti = sdlGlGetProcAddressEx('glStencilFuncSeparateAti');
  _glNewObjectBufferAti = sdlGlGetProcAddressEx('glNewObjectBufferAti');
  _glIsObjectBufferAti = sdlGlGetProcAddressEx('glIsObjectBufferAti');
  _glUpdateObjectBufferAti = sdlGlGetProcAddressEx('glUpdateObjectBufferAti');
  _glGetObjectBufferfvAti = sdlGlGetProcAddressEx('glGetObjectBufferfvAti');
  _glGetObjectBufferivAti = sdlGlGetProcAddressEx('glGetObjectBufferivAti');
  _glFreeObjectBufferAti = sdlGlGetProcAddressEx('glFreeObjectBufferAti');
  _glArrayObjectAti = sdlGlGetProcAddressEx('glArrayObjectAti');
  _glGetArrayObjectfvAti = sdlGlGetProcAddressEx('glGetArrayObjectfvAti');
  _glGetArrayObjectivAti = sdlGlGetProcAddressEx('glGetArrayObjectivAti');
  _glVariantArrayObjectAti = sdlGlGetProcAddressEx('glVariantArrayObjectAti');
  _glGetVariantArrayObjectfvAti = sdlGlGetProcAddressEx(
    'glGetVariantArrayObjectfvAti',
  );
  _glGetVariantArrayObjectivAti = sdlGlGetProcAddressEx(
    'glGetVariantArrayObjectivAti',
  );
  _glVertexAttribArrayObjectAti = sdlGlGetProcAddressEx(
    'glVertexAttribArrayObjectAti',
  );
  _glGetVertexAttribArrayObjectfvAti = sdlGlGetProcAddressEx(
    'glGetVertexAttribArrayObjectfvAti',
  );
  _glGetVertexAttribArrayObjectivAti = sdlGlGetProcAddressEx(
    'glGetVertexAttribArrayObjectivAti',
  );
  _glVertexStream1sAti = sdlGlGetProcAddressEx('glVertexStream1sAti');
  _glVertexStream1svAti = sdlGlGetProcAddressEx('glVertexStream1svAti');
  _glVertexStream1iAti = sdlGlGetProcAddressEx('glVertexStream1iAti');
  _glVertexStream1ivAti = sdlGlGetProcAddressEx('glVertexStream1ivAti');
  _glVertexStream1fAti = sdlGlGetProcAddressEx('glVertexStream1fAti');
  _glVertexStream1fvAti = sdlGlGetProcAddressEx('glVertexStream1fvAti');
  _glVertexStream1dAti = sdlGlGetProcAddressEx('glVertexStream1dAti');
  _glVertexStream1dvAti = sdlGlGetProcAddressEx('glVertexStream1dvAti');
  _glVertexStream2sAti = sdlGlGetProcAddressEx('glVertexStream2sAti');
  _glVertexStream2svAti = sdlGlGetProcAddressEx('glVertexStream2svAti');
  _glVertexStream2iAti = sdlGlGetProcAddressEx('glVertexStream2iAti');
  _glVertexStream2ivAti = sdlGlGetProcAddressEx('glVertexStream2ivAti');
  _glVertexStream2fAti = sdlGlGetProcAddressEx('glVertexStream2fAti');
  _glVertexStream2fvAti = sdlGlGetProcAddressEx('glVertexStream2fvAti');
  _glVertexStream2dAti = sdlGlGetProcAddressEx('glVertexStream2dAti');
  _glVertexStream2dvAti = sdlGlGetProcAddressEx('glVertexStream2dvAti');
  _glVertexStream3sAti = sdlGlGetProcAddressEx('glVertexStream3sAti');
  _glVertexStream3svAti = sdlGlGetProcAddressEx('glVertexStream3svAti');
  _glVertexStream3iAti = sdlGlGetProcAddressEx('glVertexStream3iAti');
  _glVertexStream3ivAti = sdlGlGetProcAddressEx('glVertexStream3ivAti');
  _glVertexStream3fAti = sdlGlGetProcAddressEx('glVertexStream3fAti');
  _glVertexStream3fvAti = sdlGlGetProcAddressEx('glVertexStream3fvAti');
  _glVertexStream3dAti = sdlGlGetProcAddressEx('glVertexStream3dAti');
  _glVertexStream3dvAti = sdlGlGetProcAddressEx('glVertexStream3dvAti');
  _glVertexStream4sAti = sdlGlGetProcAddressEx('glVertexStream4sAti');
  _glVertexStream4svAti = sdlGlGetProcAddressEx('glVertexStream4svAti');
  _glVertexStream4iAti = sdlGlGetProcAddressEx('glVertexStream4iAti');
  _glVertexStream4ivAti = sdlGlGetProcAddressEx('glVertexStream4ivAti');
  _glVertexStream4fAti = sdlGlGetProcAddressEx('glVertexStream4fAti');
  _glVertexStream4fvAti = sdlGlGetProcAddressEx('glVertexStream4fvAti');
  _glVertexStream4dAti = sdlGlGetProcAddressEx('glVertexStream4dAti');
  _glVertexStream4dvAti = sdlGlGetProcAddressEx('glVertexStream4dvAti');
  _glNormalStream3bAti = sdlGlGetProcAddressEx('glNormalStream3bAti');
  _glNormalStream3bvAti = sdlGlGetProcAddressEx('glNormalStream3bvAti');
  _glNormalStream3sAti = sdlGlGetProcAddressEx('glNormalStream3sAti');
  _glNormalStream3svAti = sdlGlGetProcAddressEx('glNormalStream3svAti');
  _glNormalStream3iAti = sdlGlGetProcAddressEx('glNormalStream3iAti');
  _glNormalStream3ivAti = sdlGlGetProcAddressEx('glNormalStream3ivAti');
  _glNormalStream3fAti = sdlGlGetProcAddressEx('glNormalStream3fAti');
  _glNormalStream3fvAti = sdlGlGetProcAddressEx('glNormalStream3fvAti');
  _glNormalStream3dAti = sdlGlGetProcAddressEx('glNormalStream3dAti');
  _glNormalStream3dvAti = sdlGlGetProcAddressEx('glNormalStream3dvAti');
  _glClientActiveVertexStreamAti = sdlGlGetProcAddressEx(
    'glClientActiveVertexStreamAti',
  );
  _glVertexBlendEnviAti = sdlGlGetProcAddressEx('glVertexBlendEnviAti');
  _glVertexBlendEnvfAti = sdlGlGetProcAddressEx('glVertexBlendEnvfAti');
  _glEglImageTargetTexStorageExt = sdlGlGetProcAddressEx(
    'glEglImageTargetTexStorageExt',
  );
  _glEglImageTargetTextureStorageExt = sdlGlGetProcAddressEx(
    'glEglImageTargetTextureStorageExt',
  );
  _glUniformBufferExt = sdlGlGetProcAddressEx('glUniformBufferExt');
  _glGetUniformBufferSizeExt = sdlGlGetProcAddressEx(
    'glGetUniformBufferSizeExt',
  );
  _glGetUniformOffsetExt = sdlGlGetProcAddressEx('glGetUniformOffsetExt');
  _glBlendColorExt = sdlGlGetProcAddressEx('glBlendColorExt');
  _glBlendEquationSeparateExt = sdlGlGetProcAddressEx(
    'glBlendEquationSeparateExt',
  );
  _glBlendFuncSeparateExt = sdlGlGetProcAddressEx('glBlendFuncSeparateExt');
  _glBlendEquationExt = sdlGlGetProcAddressEx('glBlendEquationExt');
  _glColorSubTableExt = sdlGlGetProcAddressEx('glColorSubTableExt');
  _glCopyColorSubTableExt = sdlGlGetProcAddressEx('glCopyColorSubTableExt');
  _glLockArraysExt = sdlGlGetProcAddressEx('glLockArraysExt');
  _glUnlockArraysExt = sdlGlGetProcAddressEx('glUnlockArraysExt');
  _glConvolutionFilter1Dext = sdlGlGetProcAddressEx('glConvolutionFilter1Dext');
  _glConvolutionFilter2Dext = sdlGlGetProcAddressEx('glConvolutionFilter2Dext');
  _glConvolutionParameterfExt = sdlGlGetProcAddressEx(
    'glConvolutionParameterfExt',
  );
  _glConvolutionParameterfvExt = sdlGlGetProcAddressEx(
    'glConvolutionParameterfvExt',
  );
  _glConvolutionParameteriExt = sdlGlGetProcAddressEx(
    'glConvolutionParameteriExt',
  );
  _glConvolutionParameterivExt = sdlGlGetProcAddressEx(
    'glConvolutionParameterivExt',
  );
  _glCopyConvolutionFilter1Dext = sdlGlGetProcAddressEx(
    'glCopyConvolutionFilter1Dext',
  );
  _glCopyConvolutionFilter2Dext = sdlGlGetProcAddressEx(
    'glCopyConvolutionFilter2Dext',
  );
  _glGetConvolutionFilterExt = sdlGlGetProcAddressEx(
    'glGetConvolutionFilterExt',
  );
  _glGetConvolutionParameterfvExt = sdlGlGetProcAddressEx(
    'glGetConvolutionParameterfvExt',
  );
  _glGetConvolutionParameterivExt = sdlGlGetProcAddressEx(
    'glGetConvolutionParameterivExt',
  );
  _glGetSeparableFilterExt = sdlGlGetProcAddressEx('glGetSeparableFilterExt');
  _glSeparableFilter2Dext = sdlGlGetProcAddressEx('glSeparableFilter2Dext');
  _glTangent3bExt = sdlGlGetProcAddressEx('glTangent3bExt');
  _glTangent3bvExt = sdlGlGetProcAddressEx('glTangent3bvExt');
  _glTangent3dExt = sdlGlGetProcAddressEx('glTangent3dExt');
  _glTangent3dvExt = sdlGlGetProcAddressEx('glTangent3dvExt');
  _glTangent3fExt = sdlGlGetProcAddressEx('glTangent3fExt');
  _glTangent3fvExt = sdlGlGetProcAddressEx('glTangent3fvExt');
  _glTangent3iExt = sdlGlGetProcAddressEx('glTangent3iExt');
  _glTangent3ivExt = sdlGlGetProcAddressEx('glTangent3ivExt');
  _glTangent3sExt = sdlGlGetProcAddressEx('glTangent3sExt');
  _glTangent3svExt = sdlGlGetProcAddressEx('glTangent3svExt');
  _glBinormal3bExt = sdlGlGetProcAddressEx('glBinormal3bExt');
  _glBinormal3bvExt = sdlGlGetProcAddressEx('glBinormal3bvExt');
  _glBinormal3dExt = sdlGlGetProcAddressEx('glBinormal3dExt');
  _glBinormal3dvExt = sdlGlGetProcAddressEx('glBinormal3dvExt');
  _glBinormal3fExt = sdlGlGetProcAddressEx('glBinormal3fExt');
  _glBinormal3fvExt = sdlGlGetProcAddressEx('glBinormal3fvExt');
  _glBinormal3iExt = sdlGlGetProcAddressEx('glBinormal3iExt');
  _glBinormal3ivExt = sdlGlGetProcAddressEx('glBinormal3ivExt');
  _glBinormal3sExt = sdlGlGetProcAddressEx('glBinormal3sExt');
  _glBinormal3svExt = sdlGlGetProcAddressEx('glBinormal3svExt');
  _glTangentPointerExt = sdlGlGetProcAddressEx('glTangentPointerExt');
  _glBinormalPointerExt = sdlGlGetProcAddressEx('glBinormalPointerExt');
  _glCopyTexImage1Dext = sdlGlGetProcAddressEx('glCopyTexImage1Dext');
  _glCopyTexImage2Dext = sdlGlGetProcAddressEx('glCopyTexImage2Dext');
  _glCopyTexSubImage1Dext = sdlGlGetProcAddressEx('glCopyTexSubImage1Dext');
  _glCopyTexSubImage2Dext = sdlGlGetProcAddressEx('glCopyTexSubImage2Dext');
  _glCopyTexSubImage3Dext = sdlGlGetProcAddressEx('glCopyTexSubImage3Dext');
  _glCullParameterdvExt = sdlGlGetProcAddressEx('glCullParameterdvExt');
  _glCullParameterfvExt = sdlGlGetProcAddressEx('glCullParameterfvExt');
  _glLabelObjectExt = sdlGlGetProcAddressEx('glLabelObjectExt');
  _glGetObjectLabelExt = sdlGlGetProcAddressEx('glGetObjectLabelExt');
  _glInsertEventMarkerExt = sdlGlGetProcAddressEx('glInsertEventMarkerExt');
  _glPushGroupMarkerExt = sdlGlGetProcAddressEx('glPushGroupMarkerExt');
  _glPopGroupMarkerExt = sdlGlGetProcAddressEx('glPopGroupMarkerExt');
  _glDepthBoundsExt = sdlGlGetProcAddressEx('glDepthBoundsExt');
  _glMatrixLoadfExt = sdlGlGetProcAddressEx('glMatrixLoadfExt');
  _glMatrixLoaddExt = sdlGlGetProcAddressEx('glMatrixLoaddExt');
  _glMatrixMultfExt = sdlGlGetProcAddressEx('glMatrixMultfExt');
  _glMatrixMultdExt = sdlGlGetProcAddressEx('glMatrixMultdExt');
  _glMatrixLoadIdentityExt = sdlGlGetProcAddressEx('glMatrixLoadIdentityExt');
  _glMatrixRotatefExt = sdlGlGetProcAddressEx('glMatrixRotatefExt');
  _glMatrixRotatedExt = sdlGlGetProcAddressEx('glMatrixRotatedExt');
  _glMatrixScalefExt = sdlGlGetProcAddressEx('glMatrixScalefExt');
  _glMatrixScaledExt = sdlGlGetProcAddressEx('glMatrixScaledExt');
  _glMatrixTranslatefExt = sdlGlGetProcAddressEx('glMatrixTranslatefExt');
  _glMatrixTranslatedExt = sdlGlGetProcAddressEx('glMatrixTranslatedExt');
  _glMatrixFrustumExt = sdlGlGetProcAddressEx('glMatrixFrustumExt');
  _glMatrixOrthoExt = sdlGlGetProcAddressEx('glMatrixOrthoExt');
  _glMatrixPopExt = sdlGlGetProcAddressEx('glMatrixPopExt');
  _glMatrixPushExt = sdlGlGetProcAddressEx('glMatrixPushExt');
  _glClientAttribDefaultExt = sdlGlGetProcAddressEx('glClientAttribDefaultExt');
  _glPushClientAttribDefaultExt = sdlGlGetProcAddressEx(
    'glPushClientAttribDefaultExt',
  );
  _glTextureParameterfExt = sdlGlGetProcAddressEx('glTextureParameterfExt');
  _glTextureParameterfvExt = sdlGlGetProcAddressEx('glTextureParameterfvExt');
  _glTextureParameteriExt = sdlGlGetProcAddressEx('glTextureParameteriExt');
  _glTextureParameterivExt = sdlGlGetProcAddressEx('glTextureParameterivExt');
  _glTextureImage1Dext = sdlGlGetProcAddressEx('glTextureImage1Dext');
  _glTextureImage2Dext = sdlGlGetProcAddressEx('glTextureImage2Dext');
  _glTextureSubImage1Dext = sdlGlGetProcAddressEx('glTextureSubImage1Dext');
  _glTextureSubImage2Dext = sdlGlGetProcAddressEx('glTextureSubImage2Dext');
  _glCopyTextureImage1Dext = sdlGlGetProcAddressEx('glCopyTextureImage1Dext');
  _glCopyTextureImage2Dext = sdlGlGetProcAddressEx('glCopyTextureImage2Dext');
  _glCopyTextureSubImage1Dext = sdlGlGetProcAddressEx(
    'glCopyTextureSubImage1Dext',
  );
  _glCopyTextureSubImage2Dext = sdlGlGetProcAddressEx(
    'glCopyTextureSubImage2Dext',
  );
  _glGetTextureImageExt = sdlGlGetProcAddressEx('glGetTextureImageExt');
  _glGetTextureParameterfvExt = sdlGlGetProcAddressEx(
    'glGetTextureParameterfvExt',
  );
  _glGetTextureParameterivExt = sdlGlGetProcAddressEx(
    'glGetTextureParameterivExt',
  );
  _glGetTextureLevelParameterfvExt = sdlGlGetProcAddressEx(
    'glGetTextureLevelParameterfvExt',
  );
  _glGetTextureLevelParameterivExt = sdlGlGetProcAddressEx(
    'glGetTextureLevelParameterivExt',
  );
  _glTextureImage3Dext = sdlGlGetProcAddressEx('glTextureImage3Dext');
  _glTextureSubImage3Dext = sdlGlGetProcAddressEx('glTextureSubImage3Dext');
  _glCopyTextureSubImage3Dext = sdlGlGetProcAddressEx(
    'glCopyTextureSubImage3Dext',
  );
  _glBindMultiTextureExt = sdlGlGetProcAddressEx('glBindMultiTextureExt');
  _glMultiTexCoordPointerExt = sdlGlGetProcAddressEx(
    'glMultiTexCoordPointerExt',
  );
  _glMultiTexEnvfExt = sdlGlGetProcAddressEx('glMultiTexEnvfExt');
  _glMultiTexEnvfvExt = sdlGlGetProcAddressEx('glMultiTexEnvfvExt');
  _glMultiTexEnviExt = sdlGlGetProcAddressEx('glMultiTexEnviExt');
  _glMultiTexEnvivExt = sdlGlGetProcAddressEx('glMultiTexEnvivExt');
  _glMultiTexGendExt = sdlGlGetProcAddressEx('glMultiTexGendExt');
  _glMultiTexGendvExt = sdlGlGetProcAddressEx('glMultiTexGendvExt');
  _glMultiTexGenfExt = sdlGlGetProcAddressEx('glMultiTexGenfExt');
  _glMultiTexGenfvExt = sdlGlGetProcAddressEx('glMultiTexGenfvExt');
  _glMultiTexGeniExt = sdlGlGetProcAddressEx('glMultiTexGeniExt');
  _glMultiTexGenivExt = sdlGlGetProcAddressEx('glMultiTexGenivExt');
  _glGetMultiTexEnvfvExt = sdlGlGetProcAddressEx('glGetMultiTexEnvfvExt');
  _glGetMultiTexEnvivExt = sdlGlGetProcAddressEx('glGetMultiTexEnvivExt');
  _glGetMultiTexGendvExt = sdlGlGetProcAddressEx('glGetMultiTexGendvExt');
  _glGetMultiTexGenfvExt = sdlGlGetProcAddressEx('glGetMultiTexGenfvExt');
  _glGetMultiTexGenivExt = sdlGlGetProcAddressEx('glGetMultiTexGenivExt');
  _glMultiTexParameteriExt = sdlGlGetProcAddressEx('glMultiTexParameteriExt');
  _glMultiTexParameterivExt = sdlGlGetProcAddressEx('glMultiTexParameterivExt');
  _glMultiTexParameterfExt = sdlGlGetProcAddressEx('glMultiTexParameterfExt');
  _glMultiTexParameterfvExt = sdlGlGetProcAddressEx('glMultiTexParameterfvExt');
  _glMultiTexImage1Dext = sdlGlGetProcAddressEx('glMultiTexImage1Dext');
  _glMultiTexImage2Dext = sdlGlGetProcAddressEx('glMultiTexImage2Dext');
  _glMultiTexSubImage1Dext = sdlGlGetProcAddressEx('glMultiTexSubImage1Dext');
  _glMultiTexSubImage2Dext = sdlGlGetProcAddressEx('glMultiTexSubImage2Dext');
  _glCopyMultiTexImage1Dext = sdlGlGetProcAddressEx('glCopyMultiTexImage1Dext');
  _glCopyMultiTexImage2Dext = sdlGlGetProcAddressEx('glCopyMultiTexImage2Dext');
  _glCopyMultiTexSubImage1Dext = sdlGlGetProcAddressEx(
    'glCopyMultiTexSubImage1Dext',
  );
  _glCopyMultiTexSubImage2Dext = sdlGlGetProcAddressEx(
    'glCopyMultiTexSubImage2Dext',
  );
  _glGetMultiTexImageExt = sdlGlGetProcAddressEx('glGetMultiTexImageExt');
  _glGetMultiTexParameterfvExt = sdlGlGetProcAddressEx(
    'glGetMultiTexParameterfvExt',
  );
  _glGetMultiTexParameterivExt = sdlGlGetProcAddressEx(
    'glGetMultiTexParameterivExt',
  );
  _glGetMultiTexLevelParameterfvExt = sdlGlGetProcAddressEx(
    'glGetMultiTexLevelParameterfvExt',
  );
  _glGetMultiTexLevelParameterivExt = sdlGlGetProcAddressEx(
    'glGetMultiTexLevelParameterivExt',
  );
  _glMultiTexImage3Dext = sdlGlGetProcAddressEx('glMultiTexImage3Dext');
  _glMultiTexSubImage3Dext = sdlGlGetProcAddressEx('glMultiTexSubImage3Dext');
  _glCopyMultiTexSubImage3Dext = sdlGlGetProcAddressEx(
    'glCopyMultiTexSubImage3Dext',
  );
  _glEnableClientStateIndexedExt = sdlGlGetProcAddressEx(
    'glEnableClientStateIndexedExt',
  );
  _glDisableClientStateIndexedExt = sdlGlGetProcAddressEx(
    'glDisableClientStateIndexedExt',
  );
  _glGetFloatIndexedvExt = sdlGlGetProcAddressEx('glGetFloatIndexedvExt');
  _glGetDoubleIndexedvExt = sdlGlGetProcAddressEx('glGetDoubleIndexedvExt');
  _glGetPointerIndexedvExt = sdlGlGetProcAddressEx('glGetPointerIndexedvExt');
  _glEnableIndexedExt = sdlGlGetProcAddressEx('glEnableIndexedExt');
  _glDisableIndexedExt = sdlGlGetProcAddressEx('glDisableIndexedExt');
  _glIsEnabledIndexedExt = sdlGlGetProcAddressEx('glIsEnabledIndexedExt');
  _glGetIntegerIndexedvExt = sdlGlGetProcAddressEx('glGetIntegerIndexedvExt');
  _glGetBooleanIndexedvExt = sdlGlGetProcAddressEx('glGetBooleanIndexedvExt');
  _glCompressedTextureImage3Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureImage3Dext',
  );
  _glCompressedTextureImage2Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureImage2Dext',
  );
  _glCompressedTextureImage1Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureImage1Dext',
  );
  _glCompressedTextureSubImage3Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage3Dext',
  );
  _glCompressedTextureSubImage2Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage2Dext',
  );
  _glCompressedTextureSubImage1Dext = sdlGlGetProcAddressEx(
    'glCompressedTextureSubImage1Dext',
  );
  _glGetCompressedTextureImageExt = sdlGlGetProcAddressEx(
    'glGetCompressedTextureImageExt',
  );
  _glCompressedMultiTexImage3Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexImage3Dext',
  );
  _glCompressedMultiTexImage2Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexImage2Dext',
  );
  _glCompressedMultiTexImage1Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexImage1Dext',
  );
  _glCompressedMultiTexSubImage3Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexSubImage3Dext',
  );
  _glCompressedMultiTexSubImage2Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexSubImage2Dext',
  );
  _glCompressedMultiTexSubImage1Dext = sdlGlGetProcAddressEx(
    'glCompressedMultiTexSubImage1Dext',
  );
  _glGetCompressedMultiTexImageExt = sdlGlGetProcAddressEx(
    'glGetCompressedMultiTexImageExt',
  );
  _glMatrixLoadTransposefExt = sdlGlGetProcAddressEx(
    'glMatrixLoadTransposefExt',
  );
  _glMatrixLoadTransposedExt = sdlGlGetProcAddressEx(
    'glMatrixLoadTransposedExt',
  );
  _glMatrixMultTransposefExt = sdlGlGetProcAddressEx(
    'glMatrixMultTransposefExt',
  );
  _glMatrixMultTransposedExt = sdlGlGetProcAddressEx(
    'glMatrixMultTransposedExt',
  );
  _glNamedBufferDataExt = sdlGlGetProcAddressEx('glNamedBufferDataExt');
  _glNamedBufferSubDataExt = sdlGlGetProcAddressEx('glNamedBufferSubDataExt');
  _glMapNamedBufferExt = sdlGlGetProcAddressEx('glMapNamedBufferExt');
  _glUnmapNamedBufferExt = sdlGlGetProcAddressEx('glUnmapNamedBufferExt');
  _glGetNamedBufferParameterivExt = sdlGlGetProcAddressEx(
    'glGetNamedBufferParameterivExt',
  );
  _glGetNamedBufferPointervExt = sdlGlGetProcAddressEx(
    'glGetNamedBufferPointervExt',
  );
  _glGetNamedBufferSubDataExt = sdlGlGetProcAddressEx(
    'glGetNamedBufferSubDataExt',
  );
  _glProgramUniform1fExt = sdlGlGetProcAddressEx('glProgramUniform1fExt');
  _glProgramUniform2fExt = sdlGlGetProcAddressEx('glProgramUniform2fExt');
  _glProgramUniform3fExt = sdlGlGetProcAddressEx('glProgramUniform3fExt');
  _glProgramUniform4fExt = sdlGlGetProcAddressEx('glProgramUniform4fExt');
  _glProgramUniform1iExt = sdlGlGetProcAddressEx('glProgramUniform1iExt');
  _glProgramUniform2iExt = sdlGlGetProcAddressEx('glProgramUniform2iExt');
  _glProgramUniform3iExt = sdlGlGetProcAddressEx('glProgramUniform3iExt');
  _glProgramUniform4iExt = sdlGlGetProcAddressEx('glProgramUniform4iExt');
  _glProgramUniform1fvExt = sdlGlGetProcAddressEx('glProgramUniform1fvExt');
  _glProgramUniform2fvExt = sdlGlGetProcAddressEx('glProgramUniform2fvExt');
  _glProgramUniform3fvExt = sdlGlGetProcAddressEx('glProgramUniform3fvExt');
  _glProgramUniform4fvExt = sdlGlGetProcAddressEx('glProgramUniform4fvExt');
  _glProgramUniform1ivExt = sdlGlGetProcAddressEx('glProgramUniform1ivExt');
  _glProgramUniform2ivExt = sdlGlGetProcAddressEx('glProgramUniform2ivExt');
  _glProgramUniform3ivExt = sdlGlGetProcAddressEx('glProgramUniform3ivExt');
  _glProgramUniform4ivExt = sdlGlGetProcAddressEx('glProgramUniform4ivExt');
  _glProgramUniformMatrix2fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2fvExt',
  );
  _glProgramUniformMatrix3fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3fvExt',
  );
  _glProgramUniformMatrix4fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4fvExt',
  );
  _glProgramUniformMatrix2x3fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x3fvExt',
  );
  _glProgramUniformMatrix3x2fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x2fvExt',
  );
  _glProgramUniformMatrix2x4fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x4fvExt',
  );
  _glProgramUniformMatrix4x2fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x2fvExt',
  );
  _glProgramUniformMatrix3x4fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x4fvExt',
  );
  _glProgramUniformMatrix4x3fvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x3fvExt',
  );
  _glTextureBufferExt = sdlGlGetProcAddressEx('glTextureBufferExt');
  _glMultiTexBufferExt = sdlGlGetProcAddressEx('glMultiTexBufferExt');
  _glTextureParameterIivExt = sdlGlGetProcAddressEx('glTextureParameterIivExt');
  _glTextureParameterIuivExt = sdlGlGetProcAddressEx(
    'glTextureParameterIuivExt',
  );
  _glGetTextureParameterIivExt = sdlGlGetProcAddressEx(
    'glGetTextureParameterIivExt',
  );
  _glGetTextureParameterIuivExt = sdlGlGetProcAddressEx(
    'glGetTextureParameterIuivExt',
  );
  _glMultiTexParameterIivExt = sdlGlGetProcAddressEx(
    'glMultiTexParameterIivExt',
  );
  _glMultiTexParameterIuivExt = sdlGlGetProcAddressEx(
    'glMultiTexParameterIuivExt',
  );
  _glGetMultiTexParameterIivExt = sdlGlGetProcAddressEx(
    'glGetMultiTexParameterIivExt',
  );
  _glGetMultiTexParameterIuivExt = sdlGlGetProcAddressEx(
    'glGetMultiTexParameterIuivExt',
  );
  _glProgramUniform1uiExt = sdlGlGetProcAddressEx('glProgramUniform1uiExt');
  _glProgramUniform2uiExt = sdlGlGetProcAddressEx('glProgramUniform2uiExt');
  _glProgramUniform3uiExt = sdlGlGetProcAddressEx('glProgramUniform3uiExt');
  _glProgramUniform4uiExt = sdlGlGetProcAddressEx('glProgramUniform4uiExt');
  _glProgramUniform1uivExt = sdlGlGetProcAddressEx('glProgramUniform1uivExt');
  _glProgramUniform2uivExt = sdlGlGetProcAddressEx('glProgramUniform2uivExt');
  _glProgramUniform3uivExt = sdlGlGetProcAddressEx('glProgramUniform3uivExt');
  _glProgramUniform4uivExt = sdlGlGetProcAddressEx('glProgramUniform4uivExt');
  _glNamedProgramLocalParameters4fvExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameters4fvExt',
  );
  _glNamedProgramLocalParameterI4iExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameterI4iExt',
  );
  _glNamedProgramLocalParameterI4ivExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameterI4ivExt',
  );
  _glNamedProgramLocalParametersI4ivExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParametersI4ivExt',
  );
  _glNamedProgramLocalParameterI4uiExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameterI4uiExt',
  );
  _glNamedProgramLocalParameterI4uivExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameterI4uivExt',
  );
  _glNamedProgramLocalParametersI4uivExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParametersI4uivExt',
  );
  _glGetNamedProgramLocalParameterIivExt = sdlGlGetProcAddressEx(
    'glGetNamedProgramLocalParameterIivExt',
  );
  _glGetNamedProgramLocalParameterIuivExt = sdlGlGetProcAddressEx(
    'glGetNamedProgramLocalParameterIuivExt',
  );
  _glEnableClientStateiExt = sdlGlGetProcAddressEx('glEnableClientStateiExt');
  _glDisableClientStateiExt = sdlGlGetProcAddressEx('glDisableClientStateiExt');
  _glGetFloatiVExt = sdlGlGetProcAddressEx('glGetFloatiVExt');
  _glGetDoubleiVExt = sdlGlGetProcAddressEx('glGetDoubleiVExt');
  _glGetPointeriVExt = sdlGlGetProcAddressEx('glGetPointeriVExt');
  _glNamedProgramStringExt = sdlGlGetProcAddressEx('glNamedProgramStringExt');
  _glNamedProgramLocalParameter4dExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameter4dExt',
  );
  _glNamedProgramLocalParameter4dvExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameter4dvExt',
  );
  _glNamedProgramLocalParameter4fExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameter4fExt',
  );
  _glNamedProgramLocalParameter4fvExt = sdlGlGetProcAddressEx(
    'glNamedProgramLocalParameter4fvExt',
  );
  _glGetNamedProgramLocalParameterdvExt = sdlGlGetProcAddressEx(
    'glGetNamedProgramLocalParameterdvExt',
  );
  _glGetNamedProgramLocalParameterfvExt = sdlGlGetProcAddressEx(
    'glGetNamedProgramLocalParameterfvExt',
  );
  _glGetNamedProgramivExt = sdlGlGetProcAddressEx('glGetNamedProgramivExt');
  _glGetNamedProgramStringExt = sdlGlGetProcAddressEx(
    'glGetNamedProgramStringExt',
  );
  _glNamedRenderbufferStorageExt = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorageExt',
  );
  _glGetNamedRenderbufferParameterivExt = sdlGlGetProcAddressEx(
    'glGetNamedRenderbufferParameterivExt',
  );
  _glNamedRenderbufferStorageMultisampleExt = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorageMultisampleExt',
  );
  _glNamedRenderbufferStorageMultisampleCoverageExt = sdlGlGetProcAddressEx(
    'glNamedRenderbufferStorageMultisampleCoverageExt',
  );
  _glCheckNamedFramebufferStatusExt = sdlGlGetProcAddressEx(
    'glCheckNamedFramebufferStatusExt',
  );
  _glNamedFramebufferTexture1Dext = sdlGlGetProcAddressEx(
    'glNamedFramebufferTexture1Dext',
  );
  _glNamedFramebufferTexture2Dext = sdlGlGetProcAddressEx(
    'glNamedFramebufferTexture2Dext',
  );
  _glNamedFramebufferTexture3Dext = sdlGlGetProcAddressEx(
    'glNamedFramebufferTexture3Dext',
  );
  _glNamedFramebufferRenderbufferExt = sdlGlGetProcAddressEx(
    'glNamedFramebufferRenderbufferExt',
  );
  _glGetNamedFramebufferAttachmentParameterivExt = sdlGlGetProcAddressEx(
    'glGetNamedFramebufferAttachmentParameterivExt',
  );
  _glGenerateTextureMipmapExt = sdlGlGetProcAddressEx(
    'glGenerateTextureMipmapExt',
  );
  _glGenerateMultiTexMipmapExt = sdlGlGetProcAddressEx(
    'glGenerateMultiTexMipmapExt',
  );
  _glFramebufferDrawBufferExt = sdlGlGetProcAddressEx(
    'glFramebufferDrawBufferExt',
  );
  _glFramebufferDrawBuffersExt = sdlGlGetProcAddressEx(
    'glFramebufferDrawBuffersExt',
  );
  _glFramebufferReadBufferExt = sdlGlGetProcAddressEx(
    'glFramebufferReadBufferExt',
  );
  _glGetFramebufferParameterivExt = sdlGlGetProcAddressEx(
    'glGetFramebufferParameterivExt',
  );
  _glNamedCopyBufferSubDataExt = sdlGlGetProcAddressEx(
    'glNamedCopyBufferSubDataExt',
  );
  _glNamedFramebufferTextureExt = sdlGlGetProcAddressEx(
    'glNamedFramebufferTextureExt',
  );
  _glNamedFramebufferTextureLayerExt = sdlGlGetProcAddressEx(
    'glNamedFramebufferTextureLayerExt',
  );
  _glNamedFramebufferTextureFaceExt = sdlGlGetProcAddressEx(
    'glNamedFramebufferTextureFaceExt',
  );
  _glTextureRenderbufferExt = sdlGlGetProcAddressEx('glTextureRenderbufferExt');
  _glMultiTexRenderbufferExt = sdlGlGetProcAddressEx(
    'glMultiTexRenderbufferExt',
  );
  _glVertexArrayVertexOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexOffsetExt',
  );
  _glVertexArrayColorOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayColorOffsetExt',
  );
  _glVertexArrayEdgeFlagOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayEdgeFlagOffsetExt',
  );
  _glVertexArrayIndexOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayIndexOffsetExt',
  );
  _glVertexArrayNormalOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayNormalOffsetExt',
  );
  _glVertexArrayTexCoordOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayTexCoordOffsetExt',
  );
  _glVertexArrayMultiTexCoordOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayMultiTexCoordOffsetExt',
  );
  _glVertexArrayFogCoordOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayFogCoordOffsetExt',
  );
  _glVertexArraySecondaryColorOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArraySecondaryColorOffsetExt',
  );
  _glVertexArrayVertexAttribOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribOffsetExt',
  );
  _glVertexArrayVertexAttribIOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribIOffsetExt',
  );
  _glEnableVertexArrayExt = sdlGlGetProcAddressEx('glEnableVertexArrayExt');
  _glDisableVertexArrayExt = sdlGlGetProcAddressEx('glDisableVertexArrayExt');
  _glEnableVertexArrayAttribExt = sdlGlGetProcAddressEx(
    'glEnableVertexArrayAttribExt',
  );
  _glDisableVertexArrayAttribExt = sdlGlGetProcAddressEx(
    'glDisableVertexArrayAttribExt',
  );
  _glGetVertexArrayIntegervExt = sdlGlGetProcAddressEx(
    'glGetVertexArrayIntegervExt',
  );
  _glGetVertexArrayPointervExt = sdlGlGetProcAddressEx(
    'glGetVertexArrayPointervExt',
  );
  _glGetVertexArrayIntegeriVExt = sdlGlGetProcAddressEx(
    'glGetVertexArrayIntegeriVExt',
  );
  _glGetVertexArrayPointeriVExt = sdlGlGetProcAddressEx(
    'glGetVertexArrayPointeriVExt',
  );
  _glMapNamedBufferRangeExt = sdlGlGetProcAddressEx('glMapNamedBufferRangeExt');
  _glFlushMappedNamedBufferRangeExt = sdlGlGetProcAddressEx(
    'glFlushMappedNamedBufferRangeExt',
  );
  _glNamedBufferStorageExt = sdlGlGetProcAddressEx('glNamedBufferStorageExt');
  _glClearNamedBufferDataExt = sdlGlGetProcAddressEx(
    'glClearNamedBufferDataExt',
  );
  _glClearNamedBufferSubDataExt = sdlGlGetProcAddressEx(
    'glClearNamedBufferSubDataExt',
  );
  _glNamedFramebufferParameteriExt = sdlGlGetProcAddressEx(
    'glNamedFramebufferParameteriExt',
  );
  _glGetNamedFramebufferParameterivExt = sdlGlGetProcAddressEx(
    'glGetNamedFramebufferParameterivExt',
  );
  _glProgramUniform1dExt = sdlGlGetProcAddressEx('glProgramUniform1dExt');
  _glProgramUniform2dExt = sdlGlGetProcAddressEx('glProgramUniform2dExt');
  _glProgramUniform3dExt = sdlGlGetProcAddressEx('glProgramUniform3dExt');
  _glProgramUniform4dExt = sdlGlGetProcAddressEx('glProgramUniform4dExt');
  _glProgramUniform1dvExt = sdlGlGetProcAddressEx('glProgramUniform1dvExt');
  _glProgramUniform2dvExt = sdlGlGetProcAddressEx('glProgramUniform2dvExt');
  _glProgramUniform3dvExt = sdlGlGetProcAddressEx('glProgramUniform3dvExt');
  _glProgramUniform4dvExt = sdlGlGetProcAddressEx('glProgramUniform4dvExt');
  _glProgramUniformMatrix2dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2dvExt',
  );
  _glProgramUniformMatrix3dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3dvExt',
  );
  _glProgramUniformMatrix4dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4dvExt',
  );
  _glProgramUniformMatrix2x3dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x3dvExt',
  );
  _glProgramUniformMatrix2x4dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix2x4dvExt',
  );
  _glProgramUniformMatrix3x2dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x2dvExt',
  );
  _glProgramUniformMatrix3x4dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix3x4dvExt',
  );
  _glProgramUniformMatrix4x2dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x2dvExt',
  );
  _glProgramUniformMatrix4x3dvExt = sdlGlGetProcAddressEx(
    'glProgramUniformMatrix4x3dvExt',
  );
  _glTextureBufferRangeExt = sdlGlGetProcAddressEx('glTextureBufferRangeExt');
  _glTextureStorage1Dext = sdlGlGetProcAddressEx('glTextureStorage1Dext');
  _glTextureStorage2Dext = sdlGlGetProcAddressEx('glTextureStorage2Dext');
  _glTextureStorage3Dext = sdlGlGetProcAddressEx('glTextureStorage3Dext');
  _glTextureStorage2DMultisampleExt = sdlGlGetProcAddressEx(
    'glTextureStorage2DMultisampleExt',
  );
  _glTextureStorage3DMultisampleExt = sdlGlGetProcAddressEx(
    'glTextureStorage3DMultisampleExt',
  );
  _glVertexArrayBindVertexBufferExt = sdlGlGetProcAddressEx(
    'glVertexArrayBindVertexBufferExt',
  );
  _glVertexArrayVertexAttribFormatExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribFormatExt',
  );
  _glVertexArrayVertexAttribIFormatExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribIFormatExt',
  );
  _glVertexArrayVertexAttribLFormatExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribLFormatExt',
  );
  _glVertexArrayVertexAttribBindingExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribBindingExt',
  );
  _glVertexArrayVertexBindingDivisorExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexBindingDivisorExt',
  );
  _glVertexArrayVertexAttribLOffsetExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribLOffsetExt',
  );
  _glTexturePageCommitmentExt = sdlGlGetProcAddressEx(
    'glTexturePageCommitmentExt',
  );
  _glVertexArrayVertexAttribDivisorExt = sdlGlGetProcAddressEx(
    'glVertexArrayVertexAttribDivisorExt',
  );
  _glColorMaskIndexedExt = sdlGlGetProcAddressEx('glColorMaskIndexedExt');
  _glDrawArraysInstancedExt = sdlGlGetProcAddressEx('glDrawArraysInstancedExt');
  _glDrawElementsInstancedExt = sdlGlGetProcAddressEx(
    'glDrawElementsInstancedExt',
  );
  _glDrawRangeElementsExt = sdlGlGetProcAddressEx('glDrawRangeElementsExt');
  _glBufferStorageExternalExt = sdlGlGetProcAddressEx(
    'glBufferStorageExternalExt',
  );
  _glNamedBufferStorageExternalExt = sdlGlGetProcAddressEx(
    'glNamedBufferStorageExternalExt',
  );
  _glFogCoordfExt = sdlGlGetProcAddressEx('glFogCoordfExt');
  _glFogCoordfvExt = sdlGlGetProcAddressEx('glFogCoordfvExt');
  _glFogCoorddExt = sdlGlGetProcAddressEx('glFogCoorddExt');
  _glFogCoorddvExt = sdlGlGetProcAddressEx('glFogCoorddvExt');
  _glFogCoordPointerExt = sdlGlGetProcAddressEx('glFogCoordPointerExt');
  _glBlitFramebufferExt = sdlGlGetProcAddressEx('glBlitFramebufferExt');
  _glRenderbufferStorageMultisampleExt = sdlGlGetProcAddressEx(
    'glRenderbufferStorageMultisampleExt',
  );
  _glIsRenderbufferExt = sdlGlGetProcAddressEx('glIsRenderbufferExt');
  _glBindRenderbufferExt = sdlGlGetProcAddressEx('glBindRenderbufferExt');
  _glDeleteRenderbuffersExt = sdlGlGetProcAddressEx('glDeleteRenderbuffersExt');
  _glGenRenderbuffersExt = sdlGlGetProcAddressEx('glGenRenderbuffersExt');
  _glRenderbufferStorageExt = sdlGlGetProcAddressEx('glRenderbufferStorageExt');
  _glGetRenderbufferParameterivExt = sdlGlGetProcAddressEx(
    'glGetRenderbufferParameterivExt',
  );
  _glIsFramebufferExt = sdlGlGetProcAddressEx('glIsFramebufferExt');
  _glBindFramebufferExt = sdlGlGetProcAddressEx('glBindFramebufferExt');
  _glDeleteFramebuffersExt = sdlGlGetProcAddressEx('glDeleteFramebuffersExt');
  _glGenFramebuffersExt = sdlGlGetProcAddressEx('glGenFramebuffersExt');
  _glCheckFramebufferStatusExt = sdlGlGetProcAddressEx(
    'glCheckFramebufferStatusExt',
  );
  _glFramebufferTexture1Dext = sdlGlGetProcAddressEx(
    'glFramebufferTexture1Dext',
  );
  _glFramebufferTexture2Dext = sdlGlGetProcAddressEx(
    'glFramebufferTexture2Dext',
  );
  _glFramebufferTexture3Dext = sdlGlGetProcAddressEx(
    'glFramebufferTexture3Dext',
  );
  _glFramebufferRenderbufferExt = sdlGlGetProcAddressEx(
    'glFramebufferRenderbufferExt',
  );
  _glGetFramebufferAttachmentParameterivExt = sdlGlGetProcAddressEx(
    'glGetFramebufferAttachmentParameterivExt',
  );
  _glGenerateMipmapExt = sdlGlGetProcAddressEx('glGenerateMipmapExt');
  _glProgramParameteriExt = sdlGlGetProcAddressEx('glProgramParameteriExt');
  _glProgramEnvParameters4fvExt = sdlGlGetProcAddressEx(
    'glProgramEnvParameters4fvExt',
  );
  _glProgramLocalParameters4fvExt = sdlGlGetProcAddressEx(
    'glProgramLocalParameters4fvExt',
  );
  _glGetUniformuivExt = sdlGlGetProcAddressEx('glGetUniformuivExt');
  _glBindFragDataLocationExt = sdlGlGetProcAddressEx(
    'glBindFragDataLocationExt',
  );
  _glGetFragDataLocationExt = sdlGlGetProcAddressEx('glGetFragDataLocationExt');
  _glUniform1uiExt = sdlGlGetProcAddressEx('glUniform1uiExt');
  _glUniform2uiExt = sdlGlGetProcAddressEx('glUniform2uiExt');
  _glUniform3uiExt = sdlGlGetProcAddressEx('glUniform3uiExt');
  _glUniform4uiExt = sdlGlGetProcAddressEx('glUniform4uiExt');
  _glUniform1uivExt = sdlGlGetProcAddressEx('glUniform1uivExt');
  _glUniform2uivExt = sdlGlGetProcAddressEx('glUniform2uivExt');
  _glUniform3uivExt = sdlGlGetProcAddressEx('glUniform3uivExt');
  _glUniform4uivExt = sdlGlGetProcAddressEx('glUniform4uivExt');
  _glVertexAttribI1iExt = sdlGlGetProcAddressEx('glVertexAttribI1iExt');
  _glVertexAttribI2iExt = sdlGlGetProcAddressEx('glVertexAttribI2iExt');
  _glVertexAttribI3iExt = sdlGlGetProcAddressEx('glVertexAttribI3iExt');
  _glVertexAttribI4iExt = sdlGlGetProcAddressEx('glVertexAttribI4iExt');
  _glVertexAttribI1uiExt = sdlGlGetProcAddressEx('glVertexAttribI1uiExt');
  _glVertexAttribI2uiExt = sdlGlGetProcAddressEx('glVertexAttribI2uiExt');
  _glVertexAttribI3uiExt = sdlGlGetProcAddressEx('glVertexAttribI3uiExt');
  _glVertexAttribI4uiExt = sdlGlGetProcAddressEx('glVertexAttribI4uiExt');
  _glVertexAttribI1ivExt = sdlGlGetProcAddressEx('glVertexAttribI1ivExt');
  _glVertexAttribI2ivExt = sdlGlGetProcAddressEx('glVertexAttribI2ivExt');
  _glVertexAttribI3ivExt = sdlGlGetProcAddressEx('glVertexAttribI3ivExt');
  _glVertexAttribI4ivExt = sdlGlGetProcAddressEx('glVertexAttribI4ivExt');
  _glVertexAttribI1uivExt = sdlGlGetProcAddressEx('glVertexAttribI1uivExt');
  _glVertexAttribI2uivExt = sdlGlGetProcAddressEx('glVertexAttribI2uivExt');
  _glVertexAttribI3uivExt = sdlGlGetProcAddressEx('glVertexAttribI3uivExt');
  _glVertexAttribI4uivExt = sdlGlGetProcAddressEx('glVertexAttribI4uivExt');
  _glVertexAttribI4bvExt = sdlGlGetProcAddressEx('glVertexAttribI4bvExt');
  _glVertexAttribI4svExt = sdlGlGetProcAddressEx('glVertexAttribI4svExt');
  _glVertexAttribI4ubvExt = sdlGlGetProcAddressEx('glVertexAttribI4ubvExt');
  _glVertexAttribI4usvExt = sdlGlGetProcAddressEx('glVertexAttribI4usvExt');
  _glVertexAttribIPointerExt = sdlGlGetProcAddressEx(
    'glVertexAttribIPointerExt',
  );
  _glGetVertexAttribIivExt = sdlGlGetProcAddressEx('glGetVertexAttribIivExt');
  _glGetVertexAttribIuivExt = sdlGlGetProcAddressEx('glGetVertexAttribIuivExt');
  _glGetHistogramExt = sdlGlGetProcAddressEx('glGetHistogramExt');
  _glGetHistogramParameterfvExt = sdlGlGetProcAddressEx(
    'glGetHistogramParameterfvExt',
  );
  _glGetHistogramParameterivExt = sdlGlGetProcAddressEx(
    'glGetHistogramParameterivExt',
  );
  _glGetMinmaxExt = sdlGlGetProcAddressEx('glGetMinmaxExt');
  _glGetMinmaxParameterfvExt = sdlGlGetProcAddressEx(
    'glGetMinmaxParameterfvExt',
  );
  _glGetMinmaxParameterivExt = sdlGlGetProcAddressEx(
    'glGetMinmaxParameterivExt',
  );
  _glHistogramExt = sdlGlGetProcAddressEx('glHistogramExt');
  _glMinmaxExt = sdlGlGetProcAddressEx('glMinmaxExt');
  _glResetHistogramExt = sdlGlGetProcAddressEx('glResetHistogramExt');
  _glResetMinmaxExt = sdlGlGetProcAddressEx('glResetMinmaxExt');
  _glIndexFuncExt = sdlGlGetProcAddressEx('glIndexFuncExt');
  _glIndexMaterialExt = sdlGlGetProcAddressEx('glIndexMaterialExt');
  _glApplyTextureExt = sdlGlGetProcAddressEx('glApplyTextureExt');
  _glTextureLightExt = sdlGlGetProcAddressEx('glTextureLightExt');
  _glTextureMaterialExt = sdlGlGetProcAddressEx('glTextureMaterialExt');
  _glGetUnsignedBytevExt = sdlGlGetProcAddressEx('glGetUnsignedBytevExt');
  _glGetUnsignedByteiVExt = sdlGlGetProcAddressEx('glGetUnsignedByteiVExt');
  _glDeleteMemoryObjectsExt = sdlGlGetProcAddressEx('glDeleteMemoryObjectsExt');
  _glIsMemoryObjectExt = sdlGlGetProcAddressEx('glIsMemoryObjectExt');
  _glCreateMemoryObjectsExt = sdlGlGetProcAddressEx('glCreateMemoryObjectsExt');
  _glMemoryObjectParameterivExt = sdlGlGetProcAddressEx(
    'glMemoryObjectParameterivExt',
  );
  _glGetMemoryObjectParameterivExt = sdlGlGetProcAddressEx(
    'glGetMemoryObjectParameterivExt',
  );
  _glTexStorageMem2Dext = sdlGlGetProcAddressEx('glTexStorageMem2Dext');
  _glTexStorageMem2DMultisampleExt = sdlGlGetProcAddressEx(
    'glTexStorageMem2DMultisampleExt',
  );
  _glTexStorageMem3Dext = sdlGlGetProcAddressEx('glTexStorageMem3Dext');
  _glTexStorageMem3DMultisampleExt = sdlGlGetProcAddressEx(
    'glTexStorageMem3DMultisampleExt',
  );
  _glBufferStorageMemExt = sdlGlGetProcAddressEx('glBufferStorageMemExt');
  _glTextureStorageMem2Dext = sdlGlGetProcAddressEx('glTextureStorageMem2Dext');
  _glTextureStorageMem2DMultisampleExt = sdlGlGetProcAddressEx(
    'glTextureStorageMem2DMultisampleExt',
  );
  _glTextureStorageMem3Dext = sdlGlGetProcAddressEx('glTextureStorageMem3Dext');
  _glTextureStorageMem3DMultisampleExt = sdlGlGetProcAddressEx(
    'glTextureStorageMem3DMultisampleExt',
  );
  _glNamedBufferStorageMemExt = sdlGlGetProcAddressEx(
    'glNamedBufferStorageMemExt',
  );
  _glTexStorageMem1Dext = sdlGlGetProcAddressEx('glTexStorageMem1Dext');
  _glTextureStorageMem1Dext = sdlGlGetProcAddressEx('glTextureStorageMem1Dext');
  _glImportMemoryFdExt = sdlGlGetProcAddressEx('glImportMemoryFdExt');
  _glImportMemoryWin32HandleExt = sdlGlGetProcAddressEx(
    'glImportMemoryWin32HandleExt',
  );
  _glImportMemoryWin32NameExt = sdlGlGetProcAddressEx(
    'glImportMemoryWin32NameExt',
  );
  _glMultiDrawArraysExt = sdlGlGetProcAddressEx('glMultiDrawArraysExt');
  _glMultiDrawElementsExt = sdlGlGetProcAddressEx('glMultiDrawElementsExt');
  _glSampleMaskExt = sdlGlGetProcAddressEx('glSampleMaskExt');
  _glSamplePatternExt = sdlGlGetProcAddressEx('glSamplePatternExt');
  _glColorTableExt = sdlGlGetProcAddressEx('glColorTableExt');
  _glGetColorTableExt = sdlGlGetProcAddressEx('glGetColorTableExt');
  _glGetColorTableParameterivExt = sdlGlGetProcAddressEx(
    'glGetColorTableParameterivExt',
  );
  _glGetColorTableParameterfvExt = sdlGlGetProcAddressEx(
    'glGetColorTableParameterfvExt',
  );
  _glPixelTransformParameteriExt = sdlGlGetProcAddressEx(
    'glPixelTransformParameteriExt',
  );
  _glPixelTransformParameterfExt = sdlGlGetProcAddressEx(
    'glPixelTransformParameterfExt',
  );
  _glPixelTransformParameterivExt = sdlGlGetProcAddressEx(
    'glPixelTransformParameterivExt',
  );
  _glPixelTransformParameterfvExt = sdlGlGetProcAddressEx(
    'glPixelTransformParameterfvExt',
  );
  _glGetPixelTransformParameterivExt = sdlGlGetProcAddressEx(
    'glGetPixelTransformParameterivExt',
  );
  _glGetPixelTransformParameterfvExt = sdlGlGetProcAddressEx(
    'glGetPixelTransformParameterfvExt',
  );
  _glPointParameterfExt = sdlGlGetProcAddressEx('glPointParameterfExt');
  _glPointParameterfvExt = sdlGlGetProcAddressEx('glPointParameterfvExt');
  _glPolygonOffsetExt = sdlGlGetProcAddressEx('glPolygonOffsetExt');
  _glPolygonOffsetClampExt = sdlGlGetProcAddressEx('glPolygonOffsetClampExt');
  _glProvokingVertexExt = sdlGlGetProcAddressEx('glProvokingVertexExt');
  _glRasterSamplesExt = sdlGlGetProcAddressEx('glRasterSamplesExt');
  _glSecondaryColor3bExt = sdlGlGetProcAddressEx('glSecondaryColor3bExt');
  _glSecondaryColor3bvExt = sdlGlGetProcAddressEx('glSecondaryColor3bvExt');
  _glSecondaryColor3dExt = sdlGlGetProcAddressEx('glSecondaryColor3dExt');
  _glSecondaryColor3dvExt = sdlGlGetProcAddressEx('glSecondaryColor3dvExt');
  _glSecondaryColor3fExt = sdlGlGetProcAddressEx('glSecondaryColor3fExt');
  _glSecondaryColor3fvExt = sdlGlGetProcAddressEx('glSecondaryColor3fvExt');
  _glSecondaryColor3iExt = sdlGlGetProcAddressEx('glSecondaryColor3iExt');
  _glSecondaryColor3ivExt = sdlGlGetProcAddressEx('glSecondaryColor3ivExt');
  _glSecondaryColor3sExt = sdlGlGetProcAddressEx('glSecondaryColor3sExt');
  _glSecondaryColor3svExt = sdlGlGetProcAddressEx('glSecondaryColor3svExt');
  _glSecondaryColor3ubExt = sdlGlGetProcAddressEx('glSecondaryColor3ubExt');
  _glSecondaryColor3ubvExt = sdlGlGetProcAddressEx('glSecondaryColor3ubvExt');
  _glSecondaryColor3uiExt = sdlGlGetProcAddressEx('glSecondaryColor3uiExt');
  _glSecondaryColor3uivExt = sdlGlGetProcAddressEx('glSecondaryColor3uivExt');
  _glSecondaryColor3usExt = sdlGlGetProcAddressEx('glSecondaryColor3usExt');
  _glSecondaryColor3usvExt = sdlGlGetProcAddressEx('glSecondaryColor3usvExt');
  _glSecondaryColorPointerExt = sdlGlGetProcAddressEx(
    'glSecondaryColorPointerExt',
  );
  _glGenSemaphoresExt = sdlGlGetProcAddressEx('glGenSemaphoresExt');
  _glDeleteSemaphoresExt = sdlGlGetProcAddressEx('glDeleteSemaphoresExt');
  _glIsSemaphoreExt = sdlGlGetProcAddressEx('glIsSemaphoreExt');
  _glSemaphoreParameterui64vExt = sdlGlGetProcAddressEx(
    'glSemaphoreParameterui64vExt',
  );
  _glGetSemaphoreParameterui64vExt = sdlGlGetProcAddressEx(
    'glGetSemaphoreParameterui64vExt',
  );
  _glWaitSemaphoreExt = sdlGlGetProcAddressEx('glWaitSemaphoreExt');
  _glSignalSemaphoreExt = sdlGlGetProcAddressEx('glSignalSemaphoreExt');
  _glImportSemaphoreFdExt = sdlGlGetProcAddressEx('glImportSemaphoreFdExt');
  _glImportSemaphoreWin32HandleExt = sdlGlGetProcAddressEx(
    'glImportSemaphoreWin32HandleExt',
  );
  _glImportSemaphoreWin32NameExt = sdlGlGetProcAddressEx(
    'glImportSemaphoreWin32NameExt',
  );
  _glUseShaderProgramExt = sdlGlGetProcAddressEx('glUseShaderProgramExt');
  _glActiveProgramExt = sdlGlGetProcAddressEx('glActiveProgramExt');
  _glCreateShaderProgramExt = sdlGlGetProcAddressEx('glCreateShaderProgramExt');
  _glFramebufferFetchBarrierExt = sdlGlGetProcAddressEx(
    'glFramebufferFetchBarrierExt',
  );
  _glBindImageTextureExt = sdlGlGetProcAddressEx('glBindImageTextureExt');
  _glMemoryBarrierExt = sdlGlGetProcAddressEx('glMemoryBarrierExt');
  _glStencilClearTagExt = sdlGlGetProcAddressEx('glStencilClearTagExt');
  _glActiveStencilFaceExt = sdlGlGetProcAddressEx('glActiveStencilFaceExt');
  _glTexSubImage1Dext = sdlGlGetProcAddressEx('glTexSubImage1Dext');
  _glTexSubImage2Dext = sdlGlGetProcAddressEx('glTexSubImage2Dext');
  _glTexImage3Dext = sdlGlGetProcAddressEx('glTexImage3Dext');
  _glTexSubImage3Dext = sdlGlGetProcAddressEx('glTexSubImage3Dext');
  _glFramebufferTextureLayerExt = sdlGlGetProcAddressEx(
    'glFramebufferTextureLayerExt',
  );
  _glTexBufferExt = sdlGlGetProcAddressEx('glTexBufferExt');
  _glTexParameterIivExt = sdlGlGetProcAddressEx('glTexParameterIivExt');
  _glTexParameterIuivExt = sdlGlGetProcAddressEx('glTexParameterIuivExt');
  _glGetTexParameterIivExt = sdlGlGetProcAddressEx('glGetTexParameterIivExt');
  _glGetTexParameterIuivExt = sdlGlGetProcAddressEx('glGetTexParameterIuivExt');
  _glClearColorIiExt = sdlGlGetProcAddressEx('glClearColorIiExt');
  _glClearColorIuiExt = sdlGlGetProcAddressEx('glClearColorIuiExt');
  _glAreTexturesResidentExt = sdlGlGetProcAddressEx('glAreTexturesResidentExt');
  _glBindTextureExt = sdlGlGetProcAddressEx('glBindTextureExt');
  _glDeleteTexturesExt = sdlGlGetProcAddressEx('glDeleteTexturesExt');
  _glGenTexturesExt = sdlGlGetProcAddressEx('glGenTexturesExt');
  _glIsTextureExt = sdlGlGetProcAddressEx('glIsTextureExt');
  _glPrioritizeTexturesExt = sdlGlGetProcAddressEx('glPrioritizeTexturesExt');
  _glTextureNormalExt = sdlGlGetProcAddressEx('glTextureNormalExt');
  _glTexStorage1Dext = sdlGlGetProcAddressEx('glTexStorage1Dext');
  _glTexStorage2Dext = sdlGlGetProcAddressEx('glTexStorage2Dext');
  _glTexStorage3Dext = sdlGlGetProcAddressEx('glTexStorage3Dext');
  _glGetQueryObjecti64vExt = sdlGlGetProcAddressEx('glGetQueryObjecti64vExt');
  _glGetQueryObjectui64vExt = sdlGlGetProcAddressEx('glGetQueryObjectui64vExt');
  _glBeginTransformFeedbackExt = sdlGlGetProcAddressEx(
    'glBeginTransformFeedbackExt',
  );
  _glEndTransformFeedbackExt = sdlGlGetProcAddressEx(
    'glEndTransformFeedbackExt',
  );
  _glBindBufferRangeExt = sdlGlGetProcAddressEx('glBindBufferRangeExt');
  _glBindBufferOffsetExt = sdlGlGetProcAddressEx('glBindBufferOffsetExt');
  _glBindBufferBaseExt = sdlGlGetProcAddressEx('glBindBufferBaseExt');
  _glTransformFeedbackVaryingsExt = sdlGlGetProcAddressEx(
    'glTransformFeedbackVaryingsExt',
  );
  _glGetTransformFeedbackVaryingExt = sdlGlGetProcAddressEx(
    'glGetTransformFeedbackVaryingExt',
  );
  _glArrayElementExt = sdlGlGetProcAddressEx('glArrayElementExt');
  _glColorPointerExt = sdlGlGetProcAddressEx('glColorPointerExt');
  _glDrawArraysExt = sdlGlGetProcAddressEx('glDrawArraysExt');
  _glEdgeFlagPointerExt = sdlGlGetProcAddressEx('glEdgeFlagPointerExt');
  _glGetPointervExt = sdlGlGetProcAddressEx('glGetPointervExt');
  _glIndexPointerExt = sdlGlGetProcAddressEx('glIndexPointerExt');
  _glNormalPointerExt = sdlGlGetProcAddressEx('glNormalPointerExt');
  _glTexCoordPointerExt = sdlGlGetProcAddressEx('glTexCoordPointerExt');
  _glVertexPointerExt = sdlGlGetProcAddressEx('glVertexPointerExt');
  _glVertexAttribL1dExt = sdlGlGetProcAddressEx('glVertexAttribL1dExt');
  _glVertexAttribL2dExt = sdlGlGetProcAddressEx('glVertexAttribL2dExt');
  _glVertexAttribL3dExt = sdlGlGetProcAddressEx('glVertexAttribL3dExt');
  _glVertexAttribL4dExt = sdlGlGetProcAddressEx('glVertexAttribL4dExt');
  _glVertexAttribL1dvExt = sdlGlGetProcAddressEx('glVertexAttribL1dvExt');
  _glVertexAttribL2dvExt = sdlGlGetProcAddressEx('glVertexAttribL2dvExt');
  _glVertexAttribL3dvExt = sdlGlGetProcAddressEx('glVertexAttribL3dvExt');
  _glVertexAttribL4dvExt = sdlGlGetProcAddressEx('glVertexAttribL4dvExt');
  _glVertexAttribLPointerExt = sdlGlGetProcAddressEx(
    'glVertexAttribLPointerExt',
  );
  _glGetVertexAttribLdvExt = sdlGlGetProcAddressEx('glGetVertexAttribLdvExt');
  _glBeginVertexShaderExt = sdlGlGetProcAddressEx('glBeginVertexShaderExt');
  _glEndVertexShaderExt = sdlGlGetProcAddressEx('glEndVertexShaderExt');
  _glBindVertexShaderExt = sdlGlGetProcAddressEx('glBindVertexShaderExt');
  _glGenVertexShadersExt = sdlGlGetProcAddressEx('glGenVertexShadersExt');
  _glDeleteVertexShaderExt = sdlGlGetProcAddressEx('glDeleteVertexShaderExt');
  _glShaderOp1Ext = sdlGlGetProcAddressEx('glShaderOp1Ext');
  _glShaderOp2Ext = sdlGlGetProcAddressEx('glShaderOp2Ext');
  _glShaderOp3Ext = sdlGlGetProcAddressEx('glShaderOp3Ext');
  _glSwizzleExt = sdlGlGetProcAddressEx('glSwizzleExt');
  _glWriteMaskExt = sdlGlGetProcAddressEx('glWriteMaskExt');
  _glInsertComponentExt = sdlGlGetProcAddressEx('glInsertComponentExt');
  _glExtractComponentExt = sdlGlGetProcAddressEx('glExtractComponentExt');
  _glGenSymbolsExt = sdlGlGetProcAddressEx('glGenSymbolsExt');
  _glSetInvariantExt = sdlGlGetProcAddressEx('glSetInvariantExt');
  _glSetLocalConstantExt = sdlGlGetProcAddressEx('glSetLocalConstantExt');
  _glVariantbvExt = sdlGlGetProcAddressEx('glVariantbvExt');
  _glVariantsvExt = sdlGlGetProcAddressEx('glVariantsvExt');
  _glVariantivExt = sdlGlGetProcAddressEx('glVariantivExt');
  _glVariantfvExt = sdlGlGetProcAddressEx('glVariantfvExt');
  _glVariantdvExt = sdlGlGetProcAddressEx('glVariantdvExt');
  _glVariantubvExt = sdlGlGetProcAddressEx('glVariantubvExt');
  _glVariantusvExt = sdlGlGetProcAddressEx('glVariantusvExt');
  _glVariantuivExt = sdlGlGetProcAddressEx('glVariantuivExt');
  _glVariantPointerExt = sdlGlGetProcAddressEx('glVariantPointerExt');
  _glEnableVariantClientStateExt = sdlGlGetProcAddressEx(
    'glEnableVariantClientStateExt',
  );
  _glDisableVariantClientStateExt = sdlGlGetProcAddressEx(
    'glDisableVariantClientStateExt',
  );
  _glBindLightParameterExt = sdlGlGetProcAddressEx('glBindLightParameterExt');
  _glBindMaterialParameterExt = sdlGlGetProcAddressEx(
    'glBindMaterialParameterExt',
  );
  _glBindTexGenParameterExt = sdlGlGetProcAddressEx('glBindTexGenParameterExt');
  _glBindTextureUnitParameterExt = sdlGlGetProcAddressEx(
    'glBindTextureUnitParameterExt',
  );
  _glBindParameterExt = sdlGlGetProcAddressEx('glBindParameterExt');
  _glIsVariantEnabledExt = sdlGlGetProcAddressEx('glIsVariantEnabledExt');
  _glGetVariantBooleanvExt = sdlGlGetProcAddressEx('glGetVariantBooleanvExt');
  _glGetVariantIntegervExt = sdlGlGetProcAddressEx('glGetVariantIntegervExt');
  _glGetVariantFloatvExt = sdlGlGetProcAddressEx('glGetVariantFloatvExt');
  _glGetVariantPointervExt = sdlGlGetProcAddressEx('glGetVariantPointervExt');
  _glGetInvariantBooleanvExt = sdlGlGetProcAddressEx(
    'glGetInvariantBooleanvExt',
  );
  _glGetInvariantIntegervExt = sdlGlGetProcAddressEx(
    'glGetInvariantIntegervExt',
  );
  _glGetInvariantFloatvExt = sdlGlGetProcAddressEx('glGetInvariantFloatvExt');
  _glGetLocalConstantBooleanvExt = sdlGlGetProcAddressEx(
    'glGetLocalConstantBooleanvExt',
  );
  _glGetLocalConstantIntegervExt = sdlGlGetProcAddressEx(
    'glGetLocalConstantIntegervExt',
  );
  _glGetLocalConstantFloatvExt = sdlGlGetProcAddressEx(
    'glGetLocalConstantFloatvExt',
  );
  _glVertexWeightfExt = sdlGlGetProcAddressEx('glVertexWeightfExt');
  _glVertexWeightfvExt = sdlGlGetProcAddressEx('glVertexWeightfvExt');
  _glVertexWeightPointerExt = sdlGlGetProcAddressEx('glVertexWeightPointerExt');
  _glAcquireKeyedMutexWin32Ext = sdlGlGetProcAddressEx(
    'glAcquireKeyedMutexWin32Ext',
  );
  _glReleaseKeyedMutexWin32Ext = sdlGlGetProcAddressEx(
    'glReleaseKeyedMutexWin32Ext',
  );
  _glWindowRectanglesExt = sdlGlGetProcAddressEx('glWindowRectanglesExt');
  _glImportSyncExt = sdlGlGetProcAddressEx('glImportSyncExt');
  _glFrameTerminatorGremedy = sdlGlGetProcAddressEx('glFrameTerminatorGremedy');
  _glStringMarkerGremedy = sdlGlGetProcAddressEx('glStringMarkerGremedy');
  _glImageTransformParameteriHp = sdlGlGetProcAddressEx(
    'glImageTransformParameteriHp',
  );
  _glImageTransformParameterfHp = sdlGlGetProcAddressEx(
    'glImageTransformParameterfHp',
  );
  _glImageTransformParameterivHp = sdlGlGetProcAddressEx(
    'glImageTransformParameterivHp',
  );
  _glImageTransformParameterfvHp = sdlGlGetProcAddressEx(
    'glImageTransformParameterfvHp',
  );
  _glGetImageTransformParameterivHp = sdlGlGetProcAddressEx(
    'glGetImageTransformParameterivHp',
  );
  _glGetImageTransformParameterfvHp = sdlGlGetProcAddressEx(
    'glGetImageTransformParameterfvHp',
  );
  _glMultiModeDrawArraysIbm = sdlGlGetProcAddressEx('glMultiModeDrawArraysIbm');
  _glMultiModeDrawElementsIbm = sdlGlGetProcAddressEx(
    'glMultiModeDrawElementsIbm',
  );
  _glFlushStaticDataIbm = sdlGlGetProcAddressEx('glFlushStaticDataIbm');
  _glColorPointerListIbm = sdlGlGetProcAddressEx('glColorPointerListIbm');
  _glSecondaryColorPointerListIbm = sdlGlGetProcAddressEx(
    'glSecondaryColorPointerListIbm',
  );
  _glEdgeFlagPointerListIbm = sdlGlGetProcAddressEx('glEdgeFlagPointerListIbm');
  _glFogCoordPointerListIbm = sdlGlGetProcAddressEx('glFogCoordPointerListIbm');
  _glIndexPointerListIbm = sdlGlGetProcAddressEx('glIndexPointerListIbm');
  _glNormalPointerListIbm = sdlGlGetProcAddressEx('glNormalPointerListIbm');
  _glTexCoordPointerListIbm = sdlGlGetProcAddressEx('glTexCoordPointerListIbm');
  _glVertexPointerListIbm = sdlGlGetProcAddressEx('glVertexPointerListIbm');
  _glBlendFuncSeparateIngr = sdlGlGetProcAddressEx('glBlendFuncSeparateIngr');
  _glApplyFramebufferAttachmentCmaaintel = sdlGlGetProcAddressEx(
    'glApplyFramebufferAttachmentCmaaintel',
  );
  _glSyncTextureIntel = sdlGlGetProcAddressEx('glSyncTextureIntel');
  _glUnmapTexture2Dintel = sdlGlGetProcAddressEx('glUnmapTexture2Dintel');
  _glMapTexture2Dintel = sdlGlGetProcAddressEx('glMapTexture2Dintel');
  _glVertexPointervIntel = sdlGlGetProcAddressEx('glVertexPointervIntel');
  _glNormalPointervIntel = sdlGlGetProcAddressEx('glNormalPointervIntel');
  _glColorPointervIntel = sdlGlGetProcAddressEx('glColorPointervIntel');
  _glTexCoordPointervIntel = sdlGlGetProcAddressEx('glTexCoordPointervIntel');
  _glBeginPerfQueryIntel = sdlGlGetProcAddressEx('glBeginPerfQueryIntel');
  _glCreatePerfQueryIntel = sdlGlGetProcAddressEx('glCreatePerfQueryIntel');
  _glDeletePerfQueryIntel = sdlGlGetProcAddressEx('glDeletePerfQueryIntel');
  _glEndPerfQueryIntel = sdlGlGetProcAddressEx('glEndPerfQueryIntel');
  _glGetFirstPerfQueryIdIntel = sdlGlGetProcAddressEx(
    'glGetFirstPerfQueryIdIntel',
  );
  _glGetNextPerfQueryIdIntel = sdlGlGetProcAddressEx(
    'glGetNextPerfQueryIdIntel',
  );
  _glGetPerfCounterInfoIntel = sdlGlGetProcAddressEx(
    'glGetPerfCounterInfoIntel',
  );
  _glGetPerfQueryDataIntel = sdlGlGetProcAddressEx('glGetPerfQueryDataIntel');
  _glGetPerfQueryIdByNameIntel = sdlGlGetProcAddressEx(
    'glGetPerfQueryIdByNameIntel',
  );
  _glGetPerfQueryInfoIntel = sdlGlGetProcAddressEx('glGetPerfQueryInfoIntel');
  _glFramebufferParameteriMesa = sdlGlGetProcAddressEx(
    'glFramebufferParameteriMesa',
  );
  _glGetFramebufferParameterivMesa = sdlGlGetProcAddressEx(
    'glGetFramebufferParameterivMesa',
  );
  _glResizeBuffersMesa = sdlGlGetProcAddressEx('glResizeBuffersMesa');
  _glWindowPos2dMesa = sdlGlGetProcAddressEx('glWindowPos2dMesa');
  _glWindowPos2dvMesa = sdlGlGetProcAddressEx('glWindowPos2dvMesa');
  _glWindowPos2fMesa = sdlGlGetProcAddressEx('glWindowPos2fMesa');
  _glWindowPos2fvMesa = sdlGlGetProcAddressEx('glWindowPos2fvMesa');
  _glWindowPos2iMesa = sdlGlGetProcAddressEx('glWindowPos2iMesa');
  _glWindowPos2ivMesa = sdlGlGetProcAddressEx('glWindowPos2ivMesa');
  _glWindowPos2sMesa = sdlGlGetProcAddressEx('glWindowPos2sMesa');
  _glWindowPos2svMesa = sdlGlGetProcAddressEx('glWindowPos2svMesa');
  _glWindowPos3dMesa = sdlGlGetProcAddressEx('glWindowPos3dMesa');
  _glWindowPos3dvMesa = sdlGlGetProcAddressEx('glWindowPos3dvMesa');
  _glWindowPos3fMesa = sdlGlGetProcAddressEx('glWindowPos3fMesa');
  _glWindowPos3fvMesa = sdlGlGetProcAddressEx('glWindowPos3fvMesa');
  _glWindowPos3iMesa = sdlGlGetProcAddressEx('glWindowPos3iMesa');
  _glWindowPos3ivMesa = sdlGlGetProcAddressEx('glWindowPos3ivMesa');
  _glWindowPos3sMesa = sdlGlGetProcAddressEx('glWindowPos3sMesa');
  _glWindowPos3svMesa = sdlGlGetProcAddressEx('glWindowPos3svMesa');
  _glWindowPos4dMesa = sdlGlGetProcAddressEx('glWindowPos4dMesa');
  _glWindowPos4dvMesa = sdlGlGetProcAddressEx('glWindowPos4dvMesa');
  _glWindowPos4fMesa = sdlGlGetProcAddressEx('glWindowPos4fMesa');
  _glWindowPos4fvMesa = sdlGlGetProcAddressEx('glWindowPos4fvMesa');
  _glWindowPos4iMesa = sdlGlGetProcAddressEx('glWindowPos4iMesa');
  _glWindowPos4ivMesa = sdlGlGetProcAddressEx('glWindowPos4ivMesa');
  _glWindowPos4sMesa = sdlGlGetProcAddressEx('glWindowPos4sMesa');
  _glWindowPos4svMesa = sdlGlGetProcAddressEx('glWindowPos4svMesa');
  _glBeginConditionalRenderNvx = sdlGlGetProcAddressEx(
    'glBeginConditionalRenderNvx',
  );
  _glEndConditionalRenderNvx = sdlGlGetProcAddressEx(
    'glEndConditionalRenderNvx',
  );
  _glUploadGpuMaskNvx = sdlGlGetProcAddressEx('glUploadGpuMaskNvx');
  _glMulticastViewportArrayvNvx = sdlGlGetProcAddressEx(
    'glMulticastViewportArrayvNvx',
  );
  _glMulticastViewportPositionWScaleNvx = sdlGlGetProcAddressEx(
    'glMulticastViewportPositionWScaleNvx',
  );
  _glMulticastScissorArrayvNvx = sdlGlGetProcAddressEx(
    'glMulticastScissorArrayvNvx',
  );
  _glAsyncCopyBufferSubDataNvx = sdlGlGetProcAddressEx(
    'glAsyncCopyBufferSubDataNvx',
  );
  _glAsyncCopyImageSubDataNvx = sdlGlGetProcAddressEx(
    'glAsyncCopyImageSubDataNvx',
  );
  _glLgpuNamedBufferSubDataNvx = sdlGlGetProcAddressEx(
    'glLgpuNamedBufferSubDataNvx',
  );
  _glLgpuCopyImageSubDataNvx = sdlGlGetProcAddressEx(
    'glLgpuCopyImageSubDataNvx',
  );
  _glLgpuInterlockNvx = sdlGlGetProcAddressEx('glLgpuInterlockNvx');
  _glCreateProgressFenceNvx = sdlGlGetProcAddressEx('glCreateProgressFenceNvx');
  _glSignalSemaphoreui64Nvx = sdlGlGetProcAddressEx('glSignalSemaphoreui64Nvx');
  _glWaitSemaphoreui64Nvx = sdlGlGetProcAddressEx('glWaitSemaphoreui64Nvx');
  _glClientWaitSemaphoreui64Nvx = sdlGlGetProcAddressEx(
    'glClientWaitSemaphoreui64Nvx',
  );
  _glAlphaToCoverageDitherControlNv = sdlGlGetProcAddressEx(
    'glAlphaToCoverageDitherControlNv',
  );
  _glMultiDrawArraysIndirectBindlessNv = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirectBindlessNv',
  );
  _glMultiDrawElementsIndirectBindlessNv = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirectBindlessNv',
  );
  _glMultiDrawArraysIndirectBindlessCountNv = sdlGlGetProcAddressEx(
    'glMultiDrawArraysIndirectBindlessCountNv',
  );
  _glMultiDrawElementsIndirectBindlessCountNv = sdlGlGetProcAddressEx(
    'glMultiDrawElementsIndirectBindlessCountNv',
  );
  _glGetTextureHandleNv = sdlGlGetProcAddressEx('glGetTextureHandleNv');
  _glGetTextureSamplerHandleNv = sdlGlGetProcAddressEx(
    'glGetTextureSamplerHandleNv',
  );
  _glMakeTextureHandleResidentNv = sdlGlGetProcAddressEx(
    'glMakeTextureHandleResidentNv',
  );
  _glMakeTextureHandleNonResidentNv = sdlGlGetProcAddressEx(
    'glMakeTextureHandleNonResidentNv',
  );
  _glGetImageHandleNv = sdlGlGetProcAddressEx('glGetImageHandleNv');
  _glMakeImageHandleResidentNv = sdlGlGetProcAddressEx(
    'glMakeImageHandleResidentNv',
  );
  _glMakeImageHandleNonResidentNv = sdlGlGetProcAddressEx(
    'glMakeImageHandleNonResidentNv',
  );
  _glUniformHandleui64Nv = sdlGlGetProcAddressEx('glUniformHandleui64Nv');
  _glUniformHandleui64vNv = sdlGlGetProcAddressEx('glUniformHandleui64vNv');
  _glProgramUniformHandleui64Nv = sdlGlGetProcAddressEx(
    'glProgramUniformHandleui64Nv',
  );
  _glProgramUniformHandleui64vNv = sdlGlGetProcAddressEx(
    'glProgramUniformHandleui64vNv',
  );
  _glIsTextureHandleResidentNv = sdlGlGetProcAddressEx(
    'glIsTextureHandleResidentNv',
  );
  _glIsImageHandleResidentNv = sdlGlGetProcAddressEx(
    'glIsImageHandleResidentNv',
  );
  _glBlendParameteriNv = sdlGlGetProcAddressEx('glBlendParameteriNv');
  _glBlendBarrierNv = sdlGlGetProcAddressEx('glBlendBarrierNv');
  _glViewportPositionWScaleNv = sdlGlGetProcAddressEx(
    'glViewportPositionWScaleNv',
  );
  _glCreateStatesNv = sdlGlGetProcAddressEx('glCreateStatesNv');
  _glDeleteStatesNv = sdlGlGetProcAddressEx('glDeleteStatesNv');
  _glIsStateNv = sdlGlGetProcAddressEx('glIsStateNv');
  _glStateCaptureNv = sdlGlGetProcAddressEx('glStateCaptureNv');
  _glGetCommandHeaderNv = sdlGlGetProcAddressEx('glGetCommandHeaderNv');
  _glGetStageIndexNv = sdlGlGetProcAddressEx('glGetStageIndexNv');
  _glDrawCommandsNv = sdlGlGetProcAddressEx('glDrawCommandsNv');
  _glDrawCommandsAddressNv = sdlGlGetProcAddressEx('glDrawCommandsAddressNv');
  _glDrawCommandsStatesNv = sdlGlGetProcAddressEx('glDrawCommandsStatesNv');
  _glDrawCommandsStatesAddressNv = sdlGlGetProcAddressEx(
    'glDrawCommandsStatesAddressNv',
  );
  _glCreateCommandListsNv = sdlGlGetProcAddressEx('glCreateCommandListsNv');
  _glDeleteCommandListsNv = sdlGlGetProcAddressEx('glDeleteCommandListsNv');
  _glIsCommandListNv = sdlGlGetProcAddressEx('glIsCommandListNv');
  _glListDrawCommandsStatesClientNv = sdlGlGetProcAddressEx(
    'glListDrawCommandsStatesClientNv',
  );
  _glCommandListSegmentsNv = sdlGlGetProcAddressEx('glCommandListSegmentsNv');
  _glCompileCommandListNv = sdlGlGetProcAddressEx('glCompileCommandListNv');
  _glCallCommandListNv = sdlGlGetProcAddressEx('glCallCommandListNv');
  _glBeginConditionalRenderNv = sdlGlGetProcAddressEx(
    'glBeginConditionalRenderNv',
  );
  _glEndConditionalRenderNv = sdlGlGetProcAddressEx('glEndConditionalRenderNv');
  _glSubpixelPrecisionBiasNv = sdlGlGetProcAddressEx(
    'glSubpixelPrecisionBiasNv',
  );
  _glConservativeRasterParameterfNv = sdlGlGetProcAddressEx(
    'glConservativeRasterParameterfNv',
  );
  _glConservativeRasterParameteriNv = sdlGlGetProcAddressEx(
    'glConservativeRasterParameteriNv',
  );
  _glCopyImageSubDataNv = sdlGlGetProcAddressEx('glCopyImageSubDataNv');
  _glDepthRangedNv = sdlGlGetProcAddressEx('glDepthRangedNv');
  _glClearDepthdNv = sdlGlGetProcAddressEx('glClearDepthdNv');
  _glDepthBoundsdNv = sdlGlGetProcAddressEx('glDepthBoundsdNv');
  _glDrawTextureNv = sdlGlGetProcAddressEx('glDrawTextureNv');
  _glDrawVkImageNv = sdlGlGetProcAddressEx('glDrawVkImageNv');
  _glGetVkProcAddrNv = sdlGlGetProcAddressEx('glGetVkProcAddrNv');
  _glWaitVkSemaphoreNv = sdlGlGetProcAddressEx('glWaitVkSemaphoreNv');
  _glSignalVkSemaphoreNv = sdlGlGetProcAddressEx('glSignalVkSemaphoreNv');
  _glSignalVkFenceNv = sdlGlGetProcAddressEx('glSignalVkFenceNv');
  _glMapControlPointsNv = sdlGlGetProcAddressEx('glMapControlPointsNv');
  _glMapParameterivNv = sdlGlGetProcAddressEx('glMapParameterivNv');
  _glMapParameterfvNv = sdlGlGetProcAddressEx('glMapParameterfvNv');
  _glGetMapControlPointsNv = sdlGlGetProcAddressEx('glGetMapControlPointsNv');
  _glGetMapParameterivNv = sdlGlGetProcAddressEx('glGetMapParameterivNv');
  _glGetMapParameterfvNv = sdlGlGetProcAddressEx('glGetMapParameterfvNv');
  _glGetMapAttribParameterivNv = sdlGlGetProcAddressEx(
    'glGetMapAttribParameterivNv',
  );
  _glGetMapAttribParameterfvNv = sdlGlGetProcAddressEx(
    'glGetMapAttribParameterfvNv',
  );
  _glEvalMapsNv = sdlGlGetProcAddressEx('glEvalMapsNv');
  _glGetMultisamplefvNv = sdlGlGetProcAddressEx('glGetMultisamplefvNv');
  _glSampleMaskIndexedNv = sdlGlGetProcAddressEx('glSampleMaskIndexedNv');
  _glTexRenderbufferNv = sdlGlGetProcAddressEx('glTexRenderbufferNv');
  _glDeleteFencesNv = sdlGlGetProcAddressEx('glDeleteFencesNv');
  _glGenFencesNv = sdlGlGetProcAddressEx('glGenFencesNv');
  _glIsFenceNv = sdlGlGetProcAddressEx('glIsFenceNv');
  _glTestFenceNv = sdlGlGetProcAddressEx('glTestFenceNv');
  _glGetFenceivNv = sdlGlGetProcAddressEx('glGetFenceivNv');
  _glFinishFenceNv = sdlGlGetProcAddressEx('glFinishFenceNv');
  _glSetFenceNv = sdlGlGetProcAddressEx('glSetFenceNv');
  _glFragmentCoverageColorNv = sdlGlGetProcAddressEx(
    'glFragmentCoverageColorNv',
  );
  _glProgramNamedParameter4fNv = sdlGlGetProcAddressEx(
    'glProgramNamedParameter4fNv',
  );
  _glProgramNamedParameter4fvNv = sdlGlGetProcAddressEx(
    'glProgramNamedParameter4fvNv',
  );
  _glProgramNamedParameter4dNv = sdlGlGetProcAddressEx(
    'glProgramNamedParameter4dNv',
  );
  _glProgramNamedParameter4dvNv = sdlGlGetProcAddressEx(
    'glProgramNamedParameter4dvNv',
  );
  _glGetProgramNamedParameterfvNv = sdlGlGetProcAddressEx(
    'glGetProgramNamedParameterfvNv',
  );
  _glGetProgramNamedParameterdvNv = sdlGlGetProcAddressEx(
    'glGetProgramNamedParameterdvNv',
  );
  _glCoverageModulationTableNv = sdlGlGetProcAddressEx(
    'glCoverageModulationTableNv',
  );
  _glGetCoverageModulationTableNv = sdlGlGetProcAddressEx(
    'glGetCoverageModulationTableNv',
  );
  _glCoverageModulationNv = sdlGlGetProcAddressEx('glCoverageModulationNv');
  _glRenderbufferStorageMultisampleCoverageNv = sdlGlGetProcAddressEx(
    'glRenderbufferStorageMultisampleCoverageNv',
  );
  _glProgramVertexLimitNv = sdlGlGetProcAddressEx('glProgramVertexLimitNv');
  _glFramebufferTextureExt = sdlGlGetProcAddressEx('glFramebufferTextureExt');
  _glFramebufferTextureFaceExt = sdlGlGetProcAddressEx(
    'glFramebufferTextureFaceExt',
  );
  _glRenderGpuMaskNv = sdlGlGetProcAddressEx('glRenderGpuMaskNv');
  _glMulticastBufferSubDataNv = sdlGlGetProcAddressEx(
    'glMulticastBufferSubDataNv',
  );
  _glMulticastCopyBufferSubDataNv = sdlGlGetProcAddressEx(
    'glMulticastCopyBufferSubDataNv',
  );
  _glMulticastCopyImageSubDataNv = sdlGlGetProcAddressEx(
    'glMulticastCopyImageSubDataNv',
  );
  _glMulticastBlitFramebufferNv = sdlGlGetProcAddressEx(
    'glMulticastBlitFramebufferNv',
  );
  _glMulticastFramebufferSampleLocationsfvNv = sdlGlGetProcAddressEx(
    'glMulticastFramebufferSampleLocationsfvNv',
  );
  _glMulticastBarrierNv = sdlGlGetProcAddressEx('glMulticastBarrierNv');
  _glMulticastWaitSyncNv = sdlGlGetProcAddressEx('glMulticastWaitSyncNv');
  _glMulticastGetQueryObjectivNv = sdlGlGetProcAddressEx(
    'glMulticastGetQueryObjectivNv',
  );
  _glMulticastGetQueryObjectuivNv = sdlGlGetProcAddressEx(
    'glMulticastGetQueryObjectuivNv',
  );
  _glMulticastGetQueryObjecti64vNv = sdlGlGetProcAddressEx(
    'glMulticastGetQueryObjecti64vNv',
  );
  _glMulticastGetQueryObjectui64vNv = sdlGlGetProcAddressEx(
    'glMulticastGetQueryObjectui64vNv',
  );
  _glProgramLocalParameterI4iNv = sdlGlGetProcAddressEx(
    'glProgramLocalParameterI4iNv',
  );
  _glProgramLocalParameterI4ivNv = sdlGlGetProcAddressEx(
    'glProgramLocalParameterI4ivNv',
  );
  _glProgramLocalParametersI4ivNv = sdlGlGetProcAddressEx(
    'glProgramLocalParametersI4ivNv',
  );
  _glProgramLocalParameterI4uiNv = sdlGlGetProcAddressEx(
    'glProgramLocalParameterI4uiNv',
  );
  _glProgramLocalParameterI4uivNv = sdlGlGetProcAddressEx(
    'glProgramLocalParameterI4uivNv',
  );
  _glProgramLocalParametersI4uivNv = sdlGlGetProcAddressEx(
    'glProgramLocalParametersI4uivNv',
  );
  _glProgramEnvParameterI4iNv = sdlGlGetProcAddressEx(
    'glProgramEnvParameterI4iNv',
  );
  _glProgramEnvParameterI4ivNv = sdlGlGetProcAddressEx(
    'glProgramEnvParameterI4ivNv',
  );
  _glProgramEnvParametersI4ivNv = sdlGlGetProcAddressEx(
    'glProgramEnvParametersI4ivNv',
  );
  _glProgramEnvParameterI4uiNv = sdlGlGetProcAddressEx(
    'glProgramEnvParameterI4uiNv',
  );
  _glProgramEnvParameterI4uivNv = sdlGlGetProcAddressEx(
    'glProgramEnvParameterI4uivNv',
  );
  _glProgramEnvParametersI4uivNv = sdlGlGetProcAddressEx(
    'glProgramEnvParametersI4uivNv',
  );
  _glGetProgramLocalParameterIivNv = sdlGlGetProcAddressEx(
    'glGetProgramLocalParameterIivNv',
  );
  _glGetProgramLocalParameterIuivNv = sdlGlGetProcAddressEx(
    'glGetProgramLocalParameterIuivNv',
  );
  _glGetProgramEnvParameterIivNv = sdlGlGetProcAddressEx(
    'glGetProgramEnvParameterIivNv',
  );
  _glGetProgramEnvParameterIuivNv = sdlGlGetProcAddressEx(
    'glGetProgramEnvParameterIuivNv',
  );
  _glProgramSubroutineParametersuivNv = sdlGlGetProcAddressEx(
    'glProgramSubroutineParametersuivNv',
  );
  _glGetProgramSubroutineParameteruivNv = sdlGlGetProcAddressEx(
    'glGetProgramSubroutineParameteruivNv',
  );
  _glVertex2hNv = sdlGlGetProcAddressEx('glVertex2hNv');
  _glVertex2hvNv = sdlGlGetProcAddressEx('glVertex2hvNv');
  _glVertex3hNv = sdlGlGetProcAddressEx('glVertex3hNv');
  _glVertex3hvNv = sdlGlGetProcAddressEx('glVertex3hvNv');
  _glVertex4hNv = sdlGlGetProcAddressEx('glVertex4hNv');
  _glVertex4hvNv = sdlGlGetProcAddressEx('glVertex4hvNv');
  _glNormal3hNv = sdlGlGetProcAddressEx('glNormal3hNv');
  _glNormal3hvNv = sdlGlGetProcAddressEx('glNormal3hvNv');
  _glColor3hNv = sdlGlGetProcAddressEx('glColor3hNv');
  _glColor3hvNv = sdlGlGetProcAddressEx('glColor3hvNv');
  _glColor4hNv = sdlGlGetProcAddressEx('glColor4hNv');
  _glColor4hvNv = sdlGlGetProcAddressEx('glColor4hvNv');
  _glTexCoord1hNv = sdlGlGetProcAddressEx('glTexCoord1hNv');
  _glTexCoord1hvNv = sdlGlGetProcAddressEx('glTexCoord1hvNv');
  _glTexCoord2hNv = sdlGlGetProcAddressEx('glTexCoord2hNv');
  _glTexCoord2hvNv = sdlGlGetProcAddressEx('glTexCoord2hvNv');
  _glTexCoord3hNv = sdlGlGetProcAddressEx('glTexCoord3hNv');
  _glTexCoord3hvNv = sdlGlGetProcAddressEx('glTexCoord3hvNv');
  _glTexCoord4hNv = sdlGlGetProcAddressEx('glTexCoord4hNv');
  _glTexCoord4hvNv = sdlGlGetProcAddressEx('glTexCoord4hvNv');
  _glMultiTexCoord1hNv = sdlGlGetProcAddressEx('glMultiTexCoord1hNv');
  _glMultiTexCoord1hvNv = sdlGlGetProcAddressEx('glMultiTexCoord1hvNv');
  _glMultiTexCoord2hNv = sdlGlGetProcAddressEx('glMultiTexCoord2hNv');
  _glMultiTexCoord2hvNv = sdlGlGetProcAddressEx('glMultiTexCoord2hvNv');
  _glMultiTexCoord3hNv = sdlGlGetProcAddressEx('glMultiTexCoord3hNv');
  _glMultiTexCoord3hvNv = sdlGlGetProcAddressEx('glMultiTexCoord3hvNv');
  _glMultiTexCoord4hNv = sdlGlGetProcAddressEx('glMultiTexCoord4hNv');
  _glMultiTexCoord4hvNv = sdlGlGetProcAddressEx('glMultiTexCoord4hvNv');
  _glFogCoordhNv = sdlGlGetProcAddressEx('glFogCoordhNv');
  _glFogCoordhvNv = sdlGlGetProcAddressEx('glFogCoordhvNv');
  _glSecondaryColor3hNv = sdlGlGetProcAddressEx('glSecondaryColor3hNv');
  _glSecondaryColor3hvNv = sdlGlGetProcAddressEx('glSecondaryColor3hvNv');
  _glVertexWeighthNv = sdlGlGetProcAddressEx('glVertexWeighthNv');
  _glVertexWeighthvNv = sdlGlGetProcAddressEx('glVertexWeighthvNv');
  _glVertexAttrib1hNv = sdlGlGetProcAddressEx('glVertexAttrib1hNv');
  _glVertexAttrib1hvNv = sdlGlGetProcAddressEx('glVertexAttrib1hvNv');
  _glVertexAttrib2hNv = sdlGlGetProcAddressEx('glVertexAttrib2hNv');
  _glVertexAttrib2hvNv = sdlGlGetProcAddressEx('glVertexAttrib2hvNv');
  _glVertexAttrib3hNv = sdlGlGetProcAddressEx('glVertexAttrib3hNv');
  _glVertexAttrib3hvNv = sdlGlGetProcAddressEx('glVertexAttrib3hvNv');
  _glVertexAttrib4hNv = sdlGlGetProcAddressEx('glVertexAttrib4hNv');
  _glVertexAttrib4hvNv = sdlGlGetProcAddressEx('glVertexAttrib4hvNv');
  _glVertexAttribs1hvNv = sdlGlGetProcAddressEx('glVertexAttribs1hvNv');
  _glVertexAttribs2hvNv = sdlGlGetProcAddressEx('glVertexAttribs2hvNv');
  _glVertexAttribs3hvNv = sdlGlGetProcAddressEx('glVertexAttribs3hvNv');
  _glVertexAttribs4hvNv = sdlGlGetProcAddressEx('glVertexAttribs4hvNv');
  _glGetInternalformatSampleivNv = sdlGlGetProcAddressEx(
    'glGetInternalformatSampleivNv',
  );
  _glGetMemoryObjectDetachedResourcesuivNv = sdlGlGetProcAddressEx(
    'glGetMemoryObjectDetachedResourcesuivNv',
  );
  _glResetMemoryObjectParameterNv = sdlGlGetProcAddressEx(
    'glResetMemoryObjectParameterNv',
  );
  _glTexAttachMemoryNv = sdlGlGetProcAddressEx('glTexAttachMemoryNv');
  _glBufferAttachMemoryNv = sdlGlGetProcAddressEx('glBufferAttachMemoryNv');
  _glTextureAttachMemoryNv = sdlGlGetProcAddressEx('glTextureAttachMemoryNv');
  _glNamedBufferAttachMemoryNv = sdlGlGetProcAddressEx(
    'glNamedBufferAttachMemoryNv',
  );
  _glBufferPageCommitmentMemNv = sdlGlGetProcAddressEx(
    'glBufferPageCommitmentMemNv',
  );
  _glTexPageCommitmentMemNv = sdlGlGetProcAddressEx('glTexPageCommitmentMemNv');
  _glNamedBufferPageCommitmentMemNv = sdlGlGetProcAddressEx(
    'glNamedBufferPageCommitmentMemNv',
  );
  _glTexturePageCommitmentMemNv = sdlGlGetProcAddressEx(
    'glTexturePageCommitmentMemNv',
  );
  _glDrawMeshTasksNv = sdlGlGetProcAddressEx('glDrawMeshTasksNv');
  _glDrawMeshTasksIndirectNv = sdlGlGetProcAddressEx(
    'glDrawMeshTasksIndirectNv',
  );
  _glMultiDrawMeshTasksIndirectNv = sdlGlGetProcAddressEx(
    'glMultiDrawMeshTasksIndirectNv',
  );
  _glMultiDrawMeshTasksIndirectCountNv = sdlGlGetProcAddressEx(
    'glMultiDrawMeshTasksIndirectCountNv',
  );
  _glGenOcclusionQueriesNv = sdlGlGetProcAddressEx('glGenOcclusionQueriesNv');
  _glDeleteOcclusionQueriesNv = sdlGlGetProcAddressEx(
    'glDeleteOcclusionQueriesNv',
  );
  _glIsOcclusionQueryNv = sdlGlGetProcAddressEx('glIsOcclusionQueryNv');
  _glBeginOcclusionQueryNv = sdlGlGetProcAddressEx('glBeginOcclusionQueryNv');
  _glEndOcclusionQueryNv = sdlGlGetProcAddressEx('glEndOcclusionQueryNv');
  _glGetOcclusionQueryivNv = sdlGlGetProcAddressEx('glGetOcclusionQueryivNv');
  _glGetOcclusionQueryuivNv = sdlGlGetProcAddressEx('glGetOcclusionQueryuivNv');
  _glProgramBufferParametersfvNv = sdlGlGetProcAddressEx(
    'glProgramBufferParametersfvNv',
  );
  _glProgramBufferParametersIivNv = sdlGlGetProcAddressEx(
    'glProgramBufferParametersIivNv',
  );
  _glProgramBufferParametersIuivNv = sdlGlGetProcAddressEx(
    'glProgramBufferParametersIuivNv',
  );
  _glGenPathsNv = sdlGlGetProcAddressEx('glGenPathsNv');
  _glDeletePathsNv = sdlGlGetProcAddressEx('glDeletePathsNv');
  _glIsPathNv = sdlGlGetProcAddressEx('glIsPathNv');
  _glPathCommandsNv = sdlGlGetProcAddressEx('glPathCommandsNv');
  _glPathCoordsNv = sdlGlGetProcAddressEx('glPathCoordsNv');
  _glPathSubCommandsNv = sdlGlGetProcAddressEx('glPathSubCommandsNv');
  _glPathSubCoordsNv = sdlGlGetProcAddressEx('glPathSubCoordsNv');
  _glPathStringNv = sdlGlGetProcAddressEx('glPathStringNv');
  _glPathGlyphsNv = sdlGlGetProcAddressEx('glPathGlyphsNv');
  _glPathGlyphRangeNv = sdlGlGetProcAddressEx('glPathGlyphRangeNv');
  _glWeightPathsNv = sdlGlGetProcAddressEx('glWeightPathsNv');
  _glCopyPathNv = sdlGlGetProcAddressEx('glCopyPathNv');
  _glInterpolatePathsNv = sdlGlGetProcAddressEx('glInterpolatePathsNv');
  _glTransformPathNv = sdlGlGetProcAddressEx('glTransformPathNv');
  _glPathParameterivNv = sdlGlGetProcAddressEx('glPathParameterivNv');
  _glPathParameteriNv = sdlGlGetProcAddressEx('glPathParameteriNv');
  _glPathParameterfvNv = sdlGlGetProcAddressEx('glPathParameterfvNv');
  _glPathParameterfNv = sdlGlGetProcAddressEx('glPathParameterfNv');
  _glPathDashArrayNv = sdlGlGetProcAddressEx('glPathDashArrayNv');
  _glPathStencilFuncNv = sdlGlGetProcAddressEx('glPathStencilFuncNv');
  _glPathStencilDepthOffsetNv = sdlGlGetProcAddressEx(
    'glPathStencilDepthOffsetNv',
  );
  _glStencilFillPathNv = sdlGlGetProcAddressEx('glStencilFillPathNv');
  _glStencilStrokePathNv = sdlGlGetProcAddressEx('glStencilStrokePathNv');
  _glStencilFillPathInstancedNv = sdlGlGetProcAddressEx(
    'glStencilFillPathInstancedNv',
  );
  _glStencilStrokePathInstancedNv = sdlGlGetProcAddressEx(
    'glStencilStrokePathInstancedNv',
  );
  _glPathCoverDepthFuncNv = sdlGlGetProcAddressEx('glPathCoverDepthFuncNv');
  _glCoverFillPathNv = sdlGlGetProcAddressEx('glCoverFillPathNv');
  _glCoverStrokePathNv = sdlGlGetProcAddressEx('glCoverStrokePathNv');
  _glCoverFillPathInstancedNv = sdlGlGetProcAddressEx(
    'glCoverFillPathInstancedNv',
  );
  _glCoverStrokePathInstancedNv = sdlGlGetProcAddressEx(
    'glCoverStrokePathInstancedNv',
  );
  _glGetPathParameterivNv = sdlGlGetProcAddressEx('glGetPathParameterivNv');
  _glGetPathParameterfvNv = sdlGlGetProcAddressEx('glGetPathParameterfvNv');
  _glGetPathCommandsNv = sdlGlGetProcAddressEx('glGetPathCommandsNv');
  _glGetPathCoordsNv = sdlGlGetProcAddressEx('glGetPathCoordsNv');
  _glGetPathDashArrayNv = sdlGlGetProcAddressEx('glGetPathDashArrayNv');
  _glGetPathMetricsNv = sdlGlGetProcAddressEx('glGetPathMetricsNv');
  _glGetPathMetricRangeNv = sdlGlGetProcAddressEx('glGetPathMetricRangeNv');
  _glGetPathSpacingNv = sdlGlGetProcAddressEx('glGetPathSpacingNv');
  _glIsPointInFillPathNv = sdlGlGetProcAddressEx('glIsPointInFillPathNv');
  _glIsPointInStrokePathNv = sdlGlGetProcAddressEx('glIsPointInStrokePathNv');
  _glGetPathLengthNv = sdlGlGetProcAddressEx('glGetPathLengthNv');
  _glPointAlongPathNv = sdlGlGetProcAddressEx('glPointAlongPathNv');
  _glMatrixLoad3x2fNv = sdlGlGetProcAddressEx('glMatrixLoad3x2fNv');
  _glMatrixLoad3x3fNv = sdlGlGetProcAddressEx('glMatrixLoad3x3fNv');
  _glMatrixLoadTranspose3x3fNv = sdlGlGetProcAddressEx(
    'glMatrixLoadTranspose3x3fNv',
  );
  _glMatrixMult3x2fNv = sdlGlGetProcAddressEx('glMatrixMult3x2fNv');
  _glMatrixMult3x3fNv = sdlGlGetProcAddressEx('glMatrixMult3x3fNv');
  _glMatrixMultTranspose3x3fNv = sdlGlGetProcAddressEx(
    'glMatrixMultTranspose3x3fNv',
  );
  _glStencilThenCoverFillPathNv = sdlGlGetProcAddressEx(
    'glStencilThenCoverFillPathNv',
  );
  _glStencilThenCoverStrokePathNv = sdlGlGetProcAddressEx(
    'glStencilThenCoverStrokePathNv',
  );
  _glStencilThenCoverFillPathInstancedNv = sdlGlGetProcAddressEx(
    'glStencilThenCoverFillPathInstancedNv',
  );
  _glStencilThenCoverStrokePathInstancedNv = sdlGlGetProcAddressEx(
    'glStencilThenCoverStrokePathInstancedNv',
  );
  _glPathGlyphIndexRangeNv = sdlGlGetProcAddressEx('glPathGlyphIndexRangeNv');
  _glPathGlyphIndexArrayNv = sdlGlGetProcAddressEx('glPathGlyphIndexArrayNv');
  _glPathMemoryGlyphIndexArrayNv = sdlGlGetProcAddressEx(
    'glPathMemoryGlyphIndexArrayNv',
  );
  _glProgramPathFragmentInputGenNv = sdlGlGetProcAddressEx(
    'glProgramPathFragmentInputGenNv',
  );
  _glGetProgramResourcefvNv = sdlGlGetProcAddressEx('glGetProgramResourcefvNv');
  _glPathColorGenNv = sdlGlGetProcAddressEx('glPathColorGenNv');
  _glPathTexGenNv = sdlGlGetProcAddressEx('glPathTexGenNv');
  _glPathFogGenNv = sdlGlGetProcAddressEx('glPathFogGenNv');
  _glGetPathColorGenivNv = sdlGlGetProcAddressEx('glGetPathColorGenivNv');
  _glGetPathColorGenfvNv = sdlGlGetProcAddressEx('glGetPathColorGenfvNv');
  _glGetPathTexGenivNv = sdlGlGetProcAddressEx('glGetPathTexGenivNv');
  _glGetPathTexGenfvNv = sdlGlGetProcAddressEx('glGetPathTexGenfvNv');
  _glPixelDataRangeNv = sdlGlGetProcAddressEx('glPixelDataRangeNv');
  _glFlushPixelDataRangeNv = sdlGlGetProcAddressEx('glFlushPixelDataRangeNv');
  _glPointParameteriNv = sdlGlGetProcAddressEx('glPointParameteriNv');
  _glPointParameterivNv = sdlGlGetProcAddressEx('glPointParameterivNv');
  _glPresentFrameKeyedNv = sdlGlGetProcAddressEx('glPresentFrameKeyedNv');
  _glPresentFrameDualFillNv = sdlGlGetProcAddressEx('glPresentFrameDualFillNv');
  _glGetVideoivNv = sdlGlGetProcAddressEx('glGetVideoivNv');
  _glGetVideouivNv = sdlGlGetProcAddressEx('glGetVideouivNv');
  _glGetVideoi64vNv = sdlGlGetProcAddressEx('glGetVideoi64vNv');
  _glGetVideoui64vNv = sdlGlGetProcAddressEx('glGetVideoui64vNv');
  _glPrimitiveRestartNv = sdlGlGetProcAddressEx('glPrimitiveRestartNv');
  _glPrimitiveRestartIndexNv = sdlGlGetProcAddressEx(
    'glPrimitiveRestartIndexNv',
  );
  _glQueryResourceNv = sdlGlGetProcAddressEx('glQueryResourceNv');
  _glGenQueryResourceTagNv = sdlGlGetProcAddressEx('glGenQueryResourceTagNv');
  _glDeleteQueryResourceTagNv = sdlGlGetProcAddressEx(
    'glDeleteQueryResourceTagNv',
  );
  _glQueryResourceTagNv = sdlGlGetProcAddressEx('glQueryResourceTagNv');
  _glCombinerParameterfvNv = sdlGlGetProcAddressEx('glCombinerParameterfvNv');
  _glCombinerParameterfNv = sdlGlGetProcAddressEx('glCombinerParameterfNv');
  _glCombinerParameterivNv = sdlGlGetProcAddressEx('glCombinerParameterivNv');
  _glCombinerParameteriNv = sdlGlGetProcAddressEx('glCombinerParameteriNv');
  _glCombinerInputNv = sdlGlGetProcAddressEx('glCombinerInputNv');
  _glCombinerOutputNv = sdlGlGetProcAddressEx('glCombinerOutputNv');
  _glFinalCombinerInputNv = sdlGlGetProcAddressEx('glFinalCombinerInputNv');
  _glGetCombinerInputParameterfvNv = sdlGlGetProcAddressEx(
    'glGetCombinerInputParameterfvNv',
  );
  _glGetCombinerInputParameterivNv = sdlGlGetProcAddressEx(
    'glGetCombinerInputParameterivNv',
  );
  _glGetCombinerOutputParameterfvNv = sdlGlGetProcAddressEx(
    'glGetCombinerOutputParameterfvNv',
  );
  _glGetCombinerOutputParameterivNv = sdlGlGetProcAddressEx(
    'glGetCombinerOutputParameterivNv',
  );
  _glGetFinalCombinerInputParameterfvNv = sdlGlGetProcAddressEx(
    'glGetFinalCombinerInputParameterfvNv',
  );
  _glGetFinalCombinerInputParameterivNv = sdlGlGetProcAddressEx(
    'glGetFinalCombinerInputParameterivNv',
  );
  _glCombinerStageParameterfvNv = sdlGlGetProcAddressEx(
    'glCombinerStageParameterfvNv',
  );
  _glGetCombinerStageParameterfvNv = sdlGlGetProcAddressEx(
    'glGetCombinerStageParameterfvNv',
  );
  _glFramebufferSampleLocationsfvNv = sdlGlGetProcAddressEx(
    'glFramebufferSampleLocationsfvNv',
  );
  _glNamedFramebufferSampleLocationsfvNv = sdlGlGetProcAddressEx(
    'glNamedFramebufferSampleLocationsfvNv',
  );
  _glResolveDepthValuesNv = sdlGlGetProcAddressEx('glResolveDepthValuesNv');
  _glScissorExclusiveNv = sdlGlGetProcAddressEx('glScissorExclusiveNv');
  _glScissorExclusiveArrayvNv = sdlGlGetProcAddressEx(
    'glScissorExclusiveArrayvNv',
  );
  _glMakeBufferResidentNv = sdlGlGetProcAddressEx('glMakeBufferResidentNv');
  _glMakeBufferNonResidentNv = sdlGlGetProcAddressEx(
    'glMakeBufferNonResidentNv',
  );
  _glIsBufferResidentNv = sdlGlGetProcAddressEx('glIsBufferResidentNv');
  _glMakeNamedBufferResidentNv = sdlGlGetProcAddressEx(
    'glMakeNamedBufferResidentNv',
  );
  _glMakeNamedBufferNonResidentNv = sdlGlGetProcAddressEx(
    'glMakeNamedBufferNonResidentNv',
  );
  _glIsNamedBufferResidentNv = sdlGlGetProcAddressEx(
    'glIsNamedBufferResidentNv',
  );
  _glGetBufferParameterui64vNv = sdlGlGetProcAddressEx(
    'glGetBufferParameterui64vNv',
  );
  _glGetNamedBufferParameterui64vNv = sdlGlGetProcAddressEx(
    'glGetNamedBufferParameterui64vNv',
  );
  _glGetIntegerui64vNv = sdlGlGetProcAddressEx('glGetIntegerui64vNv');
  _glUniformui64Nv = sdlGlGetProcAddressEx('glUniformui64Nv');
  _glUniformui64vNv = sdlGlGetProcAddressEx('glUniformui64vNv');
  _glProgramUniformui64Nv = sdlGlGetProcAddressEx('glProgramUniformui64Nv');
  _glProgramUniformui64vNv = sdlGlGetProcAddressEx('glProgramUniformui64vNv');
  _glBindShadingRateImageNv = sdlGlGetProcAddressEx('glBindShadingRateImageNv');
  _glGetShadingRateImagePaletteNv = sdlGlGetProcAddressEx(
    'glGetShadingRateImagePaletteNv',
  );
  _glGetShadingRateSampleLocationivNv = sdlGlGetProcAddressEx(
    'glGetShadingRateSampleLocationivNv',
  );
  _glShadingRateImageBarrierNv = sdlGlGetProcAddressEx(
    'glShadingRateImageBarrierNv',
  );
  _glShadingRateImagePaletteNv = sdlGlGetProcAddressEx(
    'glShadingRateImagePaletteNv',
  );
  _glShadingRateSampleOrderNv = sdlGlGetProcAddressEx(
    'glShadingRateSampleOrderNv',
  );
  _glShadingRateSampleOrderCustomNv = sdlGlGetProcAddressEx(
    'glShadingRateSampleOrderCustomNv',
  );
  _glTextureBarrierNv = sdlGlGetProcAddressEx('glTextureBarrierNv');
  _glTexImage2DMultisampleCoverageNv = sdlGlGetProcAddressEx(
    'glTexImage2DMultisampleCoverageNv',
  );
  _glTexImage3DMultisampleCoverageNv = sdlGlGetProcAddressEx(
    'glTexImage3DMultisampleCoverageNv',
  );
  _glTextureImage2DMultisampleNv = sdlGlGetProcAddressEx(
    'glTextureImage2DMultisampleNv',
  );
  _glTextureImage3DMultisampleNv = sdlGlGetProcAddressEx(
    'glTextureImage3DMultisampleNv',
  );
  _glTextureImage2DMultisampleCoverageNv = sdlGlGetProcAddressEx(
    'glTextureImage2DMultisampleCoverageNv',
  );
  _glTextureImage3DMultisampleCoverageNv = sdlGlGetProcAddressEx(
    'glTextureImage3DMultisampleCoverageNv',
  );
  _glCreateSemaphoresNv = sdlGlGetProcAddressEx('glCreateSemaphoresNv');
  _glSemaphoreParameterivNv = sdlGlGetProcAddressEx('glSemaphoreParameterivNv');
  _glGetSemaphoreParameterivNv = sdlGlGetProcAddressEx(
    'glGetSemaphoreParameterivNv',
  );
  _glBeginTransformFeedbackNv = sdlGlGetProcAddressEx(
    'glBeginTransformFeedbackNv',
  );
  _glEndTransformFeedbackNv = sdlGlGetProcAddressEx('glEndTransformFeedbackNv');
  _glTransformFeedbackAttribsNv = sdlGlGetProcAddressEx(
    'glTransformFeedbackAttribsNv',
  );
  _glBindBufferRangeNv = sdlGlGetProcAddressEx('glBindBufferRangeNv');
  _glBindBufferOffsetNv = sdlGlGetProcAddressEx('glBindBufferOffsetNv');
  _glBindBufferBaseNv = sdlGlGetProcAddressEx('glBindBufferBaseNv');
  _glTransformFeedbackVaryingsNv = sdlGlGetProcAddressEx(
    'glTransformFeedbackVaryingsNv',
  );
  _glActiveVaryingNv = sdlGlGetProcAddressEx('glActiveVaryingNv');
  _glGetVaryingLocationNv = sdlGlGetProcAddressEx('glGetVaryingLocationNv');
  _glGetActiveVaryingNv = sdlGlGetProcAddressEx('glGetActiveVaryingNv');
  _glGetTransformFeedbackVaryingNv = sdlGlGetProcAddressEx(
    'glGetTransformFeedbackVaryingNv',
  );
  _glTransformFeedbackStreamAttribsNv = sdlGlGetProcAddressEx(
    'glTransformFeedbackStreamAttribsNv',
  );
  _glBindTransformFeedbackNv = sdlGlGetProcAddressEx(
    'glBindTransformFeedbackNv',
  );
  _glDeleteTransformFeedbacksNv = sdlGlGetProcAddressEx(
    'glDeleteTransformFeedbacksNv',
  );
  _glGenTransformFeedbacksNv = sdlGlGetProcAddressEx(
    'glGenTransformFeedbacksNv',
  );
  _glIsTransformFeedbackNv = sdlGlGetProcAddressEx('glIsTransformFeedbackNv');
  _glPauseTransformFeedbackNv = sdlGlGetProcAddressEx(
    'glPauseTransformFeedbackNv',
  );
  _glResumeTransformFeedbackNv = sdlGlGetProcAddressEx(
    'glResumeTransformFeedbackNv',
  );
  _glDrawTransformFeedbackNv = sdlGlGetProcAddressEx(
    'glDrawTransformFeedbackNv',
  );
  _glVdpauInitNv = sdlGlGetProcAddressEx('glVdpauInitNv');
  _glVdpauFiniNv = sdlGlGetProcAddressEx('glVdpauFiniNv');
  _glVdpauRegisterVideoSurfaceNv = sdlGlGetProcAddressEx(
    'glVdpauRegisterVideoSurfaceNv',
  );
  _glVdpauRegisterOutputSurfaceNv = sdlGlGetProcAddressEx(
    'glVdpauRegisterOutputSurfaceNv',
  );
  _glVdpauIsSurfaceNv = sdlGlGetProcAddressEx('glVdpauIsSurfaceNv');
  _glVdpauUnregisterSurfaceNv = sdlGlGetProcAddressEx(
    'glVdpauUnregisterSurfaceNv',
  );
  _glVdpauGetSurfaceivNv = sdlGlGetProcAddressEx('glVdpauGetSurfaceivNv');
  _glVdpauSurfaceAccessNv = sdlGlGetProcAddressEx('glVdpauSurfaceAccessNv');
  _glVdpauMapSurfacesNv = sdlGlGetProcAddressEx('glVdpauMapSurfacesNv');
  _glVdpauUnmapSurfacesNv = sdlGlGetProcAddressEx('glVdpauUnmapSurfacesNv');
  _glVdpauRegisterVideoSurfaceWithPictureStructureNv = sdlGlGetProcAddressEx(
    'glVdpauRegisterVideoSurfaceWithPictureStructureNv',
  );
  _glFlushVertexArrayRangeNv = sdlGlGetProcAddressEx(
    'glFlushVertexArrayRangeNv',
  );
  _glVertexArrayRangeNv = sdlGlGetProcAddressEx('glVertexArrayRangeNv');
  _glVertexAttribL1i64Nv = sdlGlGetProcAddressEx('glVertexAttribL1i64Nv');
  _glVertexAttribL2i64Nv = sdlGlGetProcAddressEx('glVertexAttribL2i64Nv');
  _glVertexAttribL3i64Nv = sdlGlGetProcAddressEx('glVertexAttribL3i64Nv');
  _glVertexAttribL4i64Nv = sdlGlGetProcAddressEx('glVertexAttribL4i64Nv');
  _glVertexAttribL1i64vNv = sdlGlGetProcAddressEx('glVertexAttribL1i64vNv');
  _glVertexAttribL2i64vNv = sdlGlGetProcAddressEx('glVertexAttribL2i64vNv');
  _glVertexAttribL3i64vNv = sdlGlGetProcAddressEx('glVertexAttribL3i64vNv');
  _glVertexAttribL4i64vNv = sdlGlGetProcAddressEx('glVertexAttribL4i64vNv');
  _glVertexAttribL1ui64Nv = sdlGlGetProcAddressEx('glVertexAttribL1ui64Nv');
  _glVertexAttribL2ui64Nv = sdlGlGetProcAddressEx('glVertexAttribL2ui64Nv');
  _glVertexAttribL3ui64Nv = sdlGlGetProcAddressEx('glVertexAttribL3ui64Nv');
  _glVertexAttribL4ui64Nv = sdlGlGetProcAddressEx('glVertexAttribL4ui64Nv');
  _glVertexAttribL1ui64vNv = sdlGlGetProcAddressEx('glVertexAttribL1ui64vNv');
  _glVertexAttribL2ui64vNv = sdlGlGetProcAddressEx('glVertexAttribL2ui64vNv');
  _glVertexAttribL3ui64vNv = sdlGlGetProcAddressEx('glVertexAttribL3ui64vNv');
  _glVertexAttribL4ui64vNv = sdlGlGetProcAddressEx('glVertexAttribL4ui64vNv');
  _glGetVertexAttribLi64vNv = sdlGlGetProcAddressEx('glGetVertexAttribLi64vNv');
  _glGetVertexAttribLui64vNv = sdlGlGetProcAddressEx(
    'glGetVertexAttribLui64vNv',
  );
  _glVertexAttribLFormatNv = sdlGlGetProcAddressEx('glVertexAttribLFormatNv');
  _glBufferAddressRangeNv = sdlGlGetProcAddressEx('glBufferAddressRangeNv');
  _glVertexFormatNv = sdlGlGetProcAddressEx('glVertexFormatNv');
  _glNormalFormatNv = sdlGlGetProcAddressEx('glNormalFormatNv');
  _glColorFormatNv = sdlGlGetProcAddressEx('glColorFormatNv');
  _glIndexFormatNv = sdlGlGetProcAddressEx('glIndexFormatNv');
  _glTexCoordFormatNv = sdlGlGetProcAddressEx('glTexCoordFormatNv');
  _glEdgeFlagFormatNv = sdlGlGetProcAddressEx('glEdgeFlagFormatNv');
  _glSecondaryColorFormatNv = sdlGlGetProcAddressEx('glSecondaryColorFormatNv');
  _glFogCoordFormatNv = sdlGlGetProcAddressEx('glFogCoordFormatNv');
  _glVertexAttribFormatNv = sdlGlGetProcAddressEx('glVertexAttribFormatNv');
  _glVertexAttribIFormatNv = sdlGlGetProcAddressEx('glVertexAttribIFormatNv');
  _glGetIntegerui64iVNv = sdlGlGetProcAddressEx('glGetIntegerui64iVNv');
  _glAreProgramsResidentNv = sdlGlGetProcAddressEx('glAreProgramsResidentNv');
  _glBindProgramNv = sdlGlGetProcAddressEx('glBindProgramNv');
  _glDeleteProgramsNv = sdlGlGetProcAddressEx('glDeleteProgramsNv');
  _glExecuteProgramNv = sdlGlGetProcAddressEx('glExecuteProgramNv');
  _glGenProgramsNv = sdlGlGetProcAddressEx('glGenProgramsNv');
  _glGetProgramParameterdvNv = sdlGlGetProcAddressEx(
    'glGetProgramParameterdvNv',
  );
  _glGetProgramParameterfvNv = sdlGlGetProcAddressEx(
    'glGetProgramParameterfvNv',
  );
  _glGetProgramivNv = sdlGlGetProcAddressEx('glGetProgramivNv');
  _glGetProgramStringNv = sdlGlGetProcAddressEx('glGetProgramStringNv');
  _glGetTrackMatrixivNv = sdlGlGetProcAddressEx('glGetTrackMatrixivNv');
  _glGetVertexAttribdvNv = sdlGlGetProcAddressEx('glGetVertexAttribdvNv');
  _glGetVertexAttribfvNv = sdlGlGetProcAddressEx('glGetVertexAttribfvNv');
  _glGetVertexAttribivNv = sdlGlGetProcAddressEx('glGetVertexAttribivNv');
  _glGetVertexAttribPointervNv = sdlGlGetProcAddressEx(
    'glGetVertexAttribPointervNv',
  );
  _glIsProgramNv = sdlGlGetProcAddressEx('glIsProgramNv');
  _glLoadProgramNv = sdlGlGetProcAddressEx('glLoadProgramNv');
  _glProgramParameter4dNv = sdlGlGetProcAddressEx('glProgramParameter4dNv');
  _glProgramParameter4dvNv = sdlGlGetProcAddressEx('glProgramParameter4dvNv');
  _glProgramParameter4fNv = sdlGlGetProcAddressEx('glProgramParameter4fNv');
  _glProgramParameter4fvNv = sdlGlGetProcAddressEx('glProgramParameter4fvNv');
  _glProgramParameters4dvNv = sdlGlGetProcAddressEx('glProgramParameters4dvNv');
  _glProgramParameters4fvNv = sdlGlGetProcAddressEx('glProgramParameters4fvNv');
  _glRequestResidentProgramsNv = sdlGlGetProcAddressEx(
    'glRequestResidentProgramsNv',
  );
  _glTrackMatrixNv = sdlGlGetProcAddressEx('glTrackMatrixNv');
  _glVertexAttribPointerNv = sdlGlGetProcAddressEx('glVertexAttribPointerNv');
  _glVertexAttrib1dNv = sdlGlGetProcAddressEx('glVertexAttrib1dNv');
  _glVertexAttrib1dvNv = sdlGlGetProcAddressEx('glVertexAttrib1dvNv');
  _glVertexAttrib1fNv = sdlGlGetProcAddressEx('glVertexAttrib1fNv');
  _glVertexAttrib1fvNv = sdlGlGetProcAddressEx('glVertexAttrib1fvNv');
  _glVertexAttrib1sNv = sdlGlGetProcAddressEx('glVertexAttrib1sNv');
  _glVertexAttrib1svNv = sdlGlGetProcAddressEx('glVertexAttrib1svNv');
  _glVertexAttrib2dNv = sdlGlGetProcAddressEx('glVertexAttrib2dNv');
  _glVertexAttrib2dvNv = sdlGlGetProcAddressEx('glVertexAttrib2dvNv');
  _glVertexAttrib2fNv = sdlGlGetProcAddressEx('glVertexAttrib2fNv');
  _glVertexAttrib2fvNv = sdlGlGetProcAddressEx('glVertexAttrib2fvNv');
  _glVertexAttrib2sNv = sdlGlGetProcAddressEx('glVertexAttrib2sNv');
  _glVertexAttrib2svNv = sdlGlGetProcAddressEx('glVertexAttrib2svNv');
  _glVertexAttrib3dNv = sdlGlGetProcAddressEx('glVertexAttrib3dNv');
  _glVertexAttrib3dvNv = sdlGlGetProcAddressEx('glVertexAttrib3dvNv');
  _glVertexAttrib3fNv = sdlGlGetProcAddressEx('glVertexAttrib3fNv');
  _glVertexAttrib3fvNv = sdlGlGetProcAddressEx('glVertexAttrib3fvNv');
  _glVertexAttrib3sNv = sdlGlGetProcAddressEx('glVertexAttrib3sNv');
  _glVertexAttrib3svNv = sdlGlGetProcAddressEx('glVertexAttrib3svNv');
  _glVertexAttrib4dNv = sdlGlGetProcAddressEx('glVertexAttrib4dNv');
  _glVertexAttrib4dvNv = sdlGlGetProcAddressEx('glVertexAttrib4dvNv');
  _glVertexAttrib4fNv = sdlGlGetProcAddressEx('glVertexAttrib4fNv');
  _glVertexAttrib4fvNv = sdlGlGetProcAddressEx('glVertexAttrib4fvNv');
  _glVertexAttrib4sNv = sdlGlGetProcAddressEx('glVertexAttrib4sNv');
  _glVertexAttrib4svNv = sdlGlGetProcAddressEx('glVertexAttrib4svNv');
  _glVertexAttrib4ubNv = sdlGlGetProcAddressEx('glVertexAttrib4ubNv');
  _glVertexAttrib4ubvNv = sdlGlGetProcAddressEx('glVertexAttrib4ubvNv');
  _glVertexAttribs1dvNv = sdlGlGetProcAddressEx('glVertexAttribs1dvNv');
  _glVertexAttribs1fvNv = sdlGlGetProcAddressEx('glVertexAttribs1fvNv');
  _glVertexAttribs1svNv = sdlGlGetProcAddressEx('glVertexAttribs1svNv');
  _glVertexAttribs2dvNv = sdlGlGetProcAddressEx('glVertexAttribs2dvNv');
  _glVertexAttribs2fvNv = sdlGlGetProcAddressEx('glVertexAttribs2fvNv');
  _glVertexAttribs2svNv = sdlGlGetProcAddressEx('glVertexAttribs2svNv');
  _glVertexAttribs3dvNv = sdlGlGetProcAddressEx('glVertexAttribs3dvNv');
  _glVertexAttribs3fvNv = sdlGlGetProcAddressEx('glVertexAttribs3fvNv');
  _glVertexAttribs3svNv = sdlGlGetProcAddressEx('glVertexAttribs3svNv');
  _glVertexAttribs4dvNv = sdlGlGetProcAddressEx('glVertexAttribs4dvNv');
  _glVertexAttribs4fvNv = sdlGlGetProcAddressEx('glVertexAttribs4fvNv');
  _glVertexAttribs4svNv = sdlGlGetProcAddressEx('glVertexAttribs4svNv');
  _glVertexAttribs4ubvNv = sdlGlGetProcAddressEx('glVertexAttribs4ubvNv');
  _glBeginVideoCaptureNv = sdlGlGetProcAddressEx('glBeginVideoCaptureNv');
  _glBindVideoCaptureStreamBufferNv = sdlGlGetProcAddressEx(
    'glBindVideoCaptureStreamBufferNv',
  );
  _glBindVideoCaptureStreamTextureNv = sdlGlGetProcAddressEx(
    'glBindVideoCaptureStreamTextureNv',
  );
  _glEndVideoCaptureNv = sdlGlGetProcAddressEx('glEndVideoCaptureNv');
  _glGetVideoCaptureivNv = sdlGlGetProcAddressEx('glGetVideoCaptureivNv');
  _glGetVideoCaptureStreamivNv = sdlGlGetProcAddressEx(
    'glGetVideoCaptureStreamivNv',
  );
  _glGetVideoCaptureStreamfvNv = sdlGlGetProcAddressEx(
    'glGetVideoCaptureStreamfvNv',
  );
  _glGetVideoCaptureStreamdvNv = sdlGlGetProcAddressEx(
    'glGetVideoCaptureStreamdvNv',
  );
  _glVideoCaptureNv = sdlGlGetProcAddressEx('glVideoCaptureNv');
  _glVideoCaptureStreamParameterivNv = sdlGlGetProcAddressEx(
    'glVideoCaptureStreamParameterivNv',
  );
  _glVideoCaptureStreamParameterfvNv = sdlGlGetProcAddressEx(
    'glVideoCaptureStreamParameterfvNv',
  );
  _glVideoCaptureStreamParameterdvNv = sdlGlGetProcAddressEx(
    'glVideoCaptureStreamParameterdvNv',
  );
  _glViewportSwizzleNv = sdlGlGetProcAddressEx('glViewportSwizzleNv');
  _glFramebufferTextureMultiviewOvr = sdlGlGetProcAddressEx(
    'glFramebufferTextureMultiviewOvr',
  );
  _glHintPgi = sdlGlGetProcAddressEx('glHintPgi');
  _glDetailTexFuncSgis = sdlGlGetProcAddressEx('glDetailTexFuncSgis');
  _glGetDetailTexFuncSgis = sdlGlGetProcAddressEx('glGetDetailTexFuncSgis');
  _glFogFuncSgis = sdlGlGetProcAddressEx('glFogFuncSgis');
  _glGetFogFuncSgis = sdlGlGetProcAddressEx('glGetFogFuncSgis');
  _glSampleMaskSgis = sdlGlGetProcAddressEx('glSampleMaskSgis');
  _glSamplePatternSgis = sdlGlGetProcAddressEx('glSamplePatternSgis');
  _glPixelTexGenParameteriSgis = sdlGlGetProcAddressEx(
    'glPixelTexGenParameteriSgis',
  );
  _glPixelTexGenParameterivSgis = sdlGlGetProcAddressEx(
    'glPixelTexGenParameterivSgis',
  );
  _glPixelTexGenParameterfSgis = sdlGlGetProcAddressEx(
    'glPixelTexGenParameterfSgis',
  );
  _glPixelTexGenParameterfvSgis = sdlGlGetProcAddressEx(
    'glPixelTexGenParameterfvSgis',
  );
  _glGetPixelTexGenParameterivSgis = sdlGlGetProcAddressEx(
    'glGetPixelTexGenParameterivSgis',
  );
  _glGetPixelTexGenParameterfvSgis = sdlGlGetProcAddressEx(
    'glGetPixelTexGenParameterfvSgis',
  );
  _glPointParameterfSgis = sdlGlGetProcAddressEx('glPointParameterfSgis');
  _glPointParameterfvSgis = sdlGlGetProcAddressEx('glPointParameterfvSgis');
  _glSharpenTexFuncSgis = sdlGlGetProcAddressEx('glSharpenTexFuncSgis');
  _glGetSharpenTexFuncSgis = sdlGlGetProcAddressEx('glGetSharpenTexFuncSgis');
  _glTexImage4Dsgis = sdlGlGetProcAddressEx('glTexImage4Dsgis');
  _glTexSubImage4Dsgis = sdlGlGetProcAddressEx('glTexSubImage4Dsgis');
  _glTextureColorMaskSgis = sdlGlGetProcAddressEx('glTextureColorMaskSgis');
  _glGetTexFilterFuncSgis = sdlGlGetProcAddressEx('glGetTexFilterFuncSgis');
  _glTexFilterFuncSgis = sdlGlGetProcAddressEx('glTexFilterFuncSgis');
  _glAsyncMarkerSgix = sdlGlGetProcAddressEx('glAsyncMarkerSgix');
  _glFinishAsyncSgix = sdlGlGetProcAddressEx('glFinishAsyncSgix');
  _glPollAsyncSgix = sdlGlGetProcAddressEx('glPollAsyncSgix');
  _glGenAsyncMarkersSgix = sdlGlGetProcAddressEx('glGenAsyncMarkersSgix');
  _glDeleteAsyncMarkersSgix = sdlGlGetProcAddressEx('glDeleteAsyncMarkersSgix');
  _glIsAsyncMarkerSgix = sdlGlGetProcAddressEx('glIsAsyncMarkerSgix');
  _glFlushRasterSgix = sdlGlGetProcAddressEx('glFlushRasterSgix');
  _glFragmentColorMaterialSgix = sdlGlGetProcAddressEx(
    'glFragmentColorMaterialSgix',
  );
  _glFragmentLightfSgix = sdlGlGetProcAddressEx('glFragmentLightfSgix');
  _glFragmentLightfvSgix = sdlGlGetProcAddressEx('glFragmentLightfvSgix');
  _glFragmentLightiSgix = sdlGlGetProcAddressEx('glFragmentLightiSgix');
  _glFragmentLightivSgix = sdlGlGetProcAddressEx('glFragmentLightivSgix');
  _glFragmentLightModelfSgix = sdlGlGetProcAddressEx(
    'glFragmentLightModelfSgix',
  );
  _glFragmentLightModelfvSgix = sdlGlGetProcAddressEx(
    'glFragmentLightModelfvSgix',
  );
  _glFragmentLightModeliSgix = sdlGlGetProcAddressEx(
    'glFragmentLightModeliSgix',
  );
  _glFragmentLightModelivSgix = sdlGlGetProcAddressEx(
    'glFragmentLightModelivSgix',
  );
  _glFragmentMaterialfSgix = sdlGlGetProcAddressEx('glFragmentMaterialfSgix');
  _glFragmentMaterialfvSgix = sdlGlGetProcAddressEx('glFragmentMaterialfvSgix');
  _glFragmentMaterialiSgix = sdlGlGetProcAddressEx('glFragmentMaterialiSgix');
  _glFragmentMaterialivSgix = sdlGlGetProcAddressEx('glFragmentMaterialivSgix');
  _glGetFragmentLightfvSgix = sdlGlGetProcAddressEx('glGetFragmentLightfvSgix');
  _glGetFragmentLightivSgix = sdlGlGetProcAddressEx('glGetFragmentLightivSgix');
  _glGetFragmentMaterialfvSgix = sdlGlGetProcAddressEx(
    'glGetFragmentMaterialfvSgix',
  );
  _glGetFragmentMaterialivSgix = sdlGlGetProcAddressEx(
    'glGetFragmentMaterialivSgix',
  );
  _glLightEnviSgix = sdlGlGetProcAddressEx('glLightEnviSgix');
  _glFrameZoomSgix = sdlGlGetProcAddressEx('glFrameZoomSgix');
  _glIglooInterfaceSgix = sdlGlGetProcAddressEx('glIglooInterfaceSgix');
  _glGetInstrumentsSgix = sdlGlGetProcAddressEx('glGetInstrumentsSgix');
  _glInstrumentsBufferSgix = sdlGlGetProcAddressEx('glInstrumentsBufferSgix');
  _glPollInstrumentsSgix = sdlGlGetProcAddressEx('glPollInstrumentsSgix');
  _glReadInstrumentsSgix = sdlGlGetProcAddressEx('glReadInstrumentsSgix');
  _glStartInstrumentsSgix = sdlGlGetProcAddressEx('glStartInstrumentsSgix');
  _glStopInstrumentsSgix = sdlGlGetProcAddressEx('glStopInstrumentsSgix');
  _glGetListParameterfvSgix = sdlGlGetProcAddressEx('glGetListParameterfvSgix');
  _glGetListParameterivSgix = sdlGlGetProcAddressEx('glGetListParameterivSgix');
  _glListParameterfSgix = sdlGlGetProcAddressEx('glListParameterfSgix');
  _glListParameterfvSgix = sdlGlGetProcAddressEx('glListParameterfvSgix');
  _glListParameteriSgix = sdlGlGetProcAddressEx('glListParameteriSgix');
  _glListParameterivSgix = sdlGlGetProcAddressEx('glListParameterivSgix');
  _glPixelTexGenSgix = sdlGlGetProcAddressEx('glPixelTexGenSgix');
  _glDeformationMap3dSgix = sdlGlGetProcAddressEx('glDeformationMap3dSgix');
  _glDeformationMap3fSgix = sdlGlGetProcAddressEx('glDeformationMap3fSgix');
  _glDeformSgix = sdlGlGetProcAddressEx('glDeformSgix');
  _glLoadIdentityDeformationMapSgix = sdlGlGetProcAddressEx(
    'glLoadIdentityDeformationMapSgix',
  );
  _glReferencePlaneSgix = sdlGlGetProcAddressEx('glReferencePlaneSgix');
  _glSpriteParameterfSgix = sdlGlGetProcAddressEx('glSpriteParameterfSgix');
  _glSpriteParameterfvSgix = sdlGlGetProcAddressEx('glSpriteParameterfvSgix');
  _glSpriteParameteriSgix = sdlGlGetProcAddressEx('glSpriteParameteriSgix');
  _glSpriteParameterivSgix = sdlGlGetProcAddressEx('glSpriteParameterivSgix');
  _glTagSampleBufferSgix = sdlGlGetProcAddressEx('glTagSampleBufferSgix');
  _glColorTableSgi = sdlGlGetProcAddressEx('glColorTableSgi');
  _glColorTableParameterfvSgi = sdlGlGetProcAddressEx(
    'glColorTableParameterfvSgi',
  );
  _glColorTableParameterivSgi = sdlGlGetProcAddressEx(
    'glColorTableParameterivSgi',
  );
  _glCopyColorTableSgi = sdlGlGetProcAddressEx('glCopyColorTableSgi');
  _glGetColorTableSgi = sdlGlGetProcAddressEx('glGetColorTableSgi');
  _glGetColorTableParameterfvSgi = sdlGlGetProcAddressEx(
    'glGetColorTableParameterfvSgi',
  );
  _glGetColorTableParameterivSgi = sdlGlGetProcAddressEx(
    'glGetColorTableParameterivSgi',
  );
  _glFinishTextureSunx = sdlGlGetProcAddressEx('glFinishTextureSunx');
  _glGlobalAlphaFactorbSun = sdlGlGetProcAddressEx('glGlobalAlphaFactorbSun');
  _glGlobalAlphaFactorsSun = sdlGlGetProcAddressEx('glGlobalAlphaFactorsSun');
  _glGlobalAlphaFactoriSun = sdlGlGetProcAddressEx('glGlobalAlphaFactoriSun');
  _glGlobalAlphaFactorfSun = sdlGlGetProcAddressEx('glGlobalAlphaFactorfSun');
  _glGlobalAlphaFactordSun = sdlGlGetProcAddressEx('glGlobalAlphaFactordSun');
  _glGlobalAlphaFactorubSun = sdlGlGetProcAddressEx('glGlobalAlphaFactorubSun');
  _glGlobalAlphaFactorusSun = sdlGlGetProcAddressEx('glGlobalAlphaFactorusSun');
  _glGlobalAlphaFactoruiSun = sdlGlGetProcAddressEx('glGlobalAlphaFactoruiSun');
  _glDrawMeshArraysSun = sdlGlGetProcAddressEx('glDrawMeshArraysSun');
  _glReplacementCodeuiSun = sdlGlGetProcAddressEx('glReplacementCodeuiSun');
  _glReplacementCodeusSun = sdlGlGetProcAddressEx('glReplacementCodeusSun');
  _glReplacementCodeubSun = sdlGlGetProcAddressEx('glReplacementCodeubSun');
  _glReplacementCodeuivSun = sdlGlGetProcAddressEx('glReplacementCodeuivSun');
  _glReplacementCodeusvSun = sdlGlGetProcAddressEx('glReplacementCodeusvSun');
  _glReplacementCodeubvSun = sdlGlGetProcAddressEx('glReplacementCodeubvSun');
  _glReplacementCodePointerSun = sdlGlGetProcAddressEx(
    'glReplacementCodePointerSun',
  );
  _glColor4ubVertex2fSun = sdlGlGetProcAddressEx('glColor4ubVertex2fSun');
  _glColor4ubVertex2fvSun = sdlGlGetProcAddressEx('glColor4ubVertex2fvSun');
  _glColor4ubVertex3fSun = sdlGlGetProcAddressEx('glColor4ubVertex3fSun');
  _glColor4ubVertex3fvSun = sdlGlGetProcAddressEx('glColor4ubVertex3fvSun');
  _glColor3fVertex3fSun = sdlGlGetProcAddressEx('glColor3fVertex3fSun');
  _glColor3fVertex3fvSun = sdlGlGetProcAddressEx('glColor3fVertex3fvSun');
  _glNormal3fVertex3fSun = sdlGlGetProcAddressEx('glNormal3fVertex3fSun');
  _glNormal3fVertex3fvSun = sdlGlGetProcAddressEx('glNormal3fVertex3fvSun');
  _glColor4fNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glColor4fNormal3fVertex3fSun',
  );
  _glColor4fNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glColor4fNormal3fVertex3fvSun',
  );
  _glTexCoord2fVertex3fSun = sdlGlGetProcAddressEx('glTexCoord2fVertex3fSun');
  _glTexCoord2fVertex3fvSun = sdlGlGetProcAddressEx('glTexCoord2fVertex3fvSun');
  _glTexCoord4fVertex4fSun = sdlGlGetProcAddressEx('glTexCoord4fVertex4fSun');
  _glTexCoord4fVertex4fvSun = sdlGlGetProcAddressEx('glTexCoord4fVertex4fvSun');
  _glTexCoord2fColor4ubVertex3fSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor4ubVertex3fSun',
  );
  _glTexCoord2fColor4ubVertex3fvSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor4ubVertex3fvSun',
  );
  _glTexCoord2fColor3fVertex3fSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor3fVertex3fSun',
  );
  _glTexCoord2fColor3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor3fVertex3fvSun',
  );
  _glTexCoord2fNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glTexCoord2fNormal3fVertex3fSun',
  );
  _glTexCoord2fNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glTexCoord2fNormal3fVertex3fvSun',
  );
  _glTexCoord2fColor4fNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor4fNormal3fVertex3fSun',
  );
  _glTexCoord2fColor4fNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glTexCoord2fColor4fNormal3fVertex3fvSun',
  );
  _glTexCoord4fColor4fNormal3fVertex4fSun = sdlGlGetProcAddressEx(
    'glTexCoord4fColor4fNormal3fVertex4fSun',
  );
  _glTexCoord4fColor4fNormal3fVertex4fvSun = sdlGlGetProcAddressEx(
    'glTexCoord4fColor4fNormal3fVertex4fvSun',
  );
  _glReplacementCodeuiVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiVertex3fSun',
  );
  _glReplacementCodeuiVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiVertex3fvSun',
  );
  _glReplacementCodeuiColor4ubVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor4ubVertex3fSun',
  );
  _glReplacementCodeuiColor4ubVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor4ubVertex3fvSun',
  );
  _glReplacementCodeuiColor3fVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor3fVertex3fSun',
  );
  _glReplacementCodeuiColor3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor3fVertex3fvSun',
  );
  _glReplacementCodeuiNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiNormal3fVertex3fSun',
  );
  _glReplacementCodeuiNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiNormal3fVertex3fvSun',
  );
  _glReplacementCodeuiColor4fNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor4fNormal3fVertex3fSun',
  );
  _glReplacementCodeuiColor4fNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiColor4fNormal3fVertex3fvSun',
  );
  _glReplacementCodeuiTexCoord2fVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiTexCoord2fVertex3fSun',
  );
  _glReplacementCodeuiTexCoord2fVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiTexCoord2fVertex3fvSun',
  );
  _glReplacementCodeuiTexCoord2fNormal3fVertex3fSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiTexCoord2fNormal3fVertex3fSun',
  );
  _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSun = sdlGlGetProcAddressEx(
    'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSun',
  );
  _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSun =
      sdlGlGetProcAddressEx(
        'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSun',
      );
  _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSun =
      sdlGlGetProcAddressEx(
        'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSun',
      );
}
