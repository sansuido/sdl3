// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
part of '../sdl_opengl.dart';

// typedef void (APIENTRYP PFNGLCLEARINDEXPROC) ( GLfloat c )
typedef PFNGLCLEARINDEXPROCDart = void Function(double c);
typedef PFNGLCLEARINDEXPROC = Void Function(Float c);

// typedef void (APIENTRYP PFNGLCLEARCOLORPROC) ( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
typedef PFNGLCLEARCOLORPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLCLEARCOLORPROC =
    Void Function(Float red, Float green, Float blue, Float alpha);

// typedef void (APIENTRYP PFNGLCLEARPROC) ( GLbitfield mask )
typedef PFNGLCLEARPROCDart = void Function(int mask);
typedef PFNGLCLEARPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLINDEXMASKPROC) ( GLuint mask )
typedef PFNGLINDEXMASKPROCDart = void Function(int mask);
typedef PFNGLINDEXMASKPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLCOLORMASKPROC) ( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
typedef PFNGLCOLORMASKPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLORMASKPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLALPHAFUNCPROC) ( GLenum func, GLclampf ref )
typedef PFNGLALPHAFUNCPROCDart = void Function(int func, double ref);
typedef PFNGLALPHAFUNCPROC = Void Function(Uint32 func, Float ref);

// typedef void (APIENTRYP PFNGLBLENDFUNCPROC) ( GLenum sfactor, GLenum dfactor )
typedef PFNGLBLENDFUNCPROCDart = void Function(int sfactor, int dfactor);
typedef PFNGLBLENDFUNCPROC = Void Function(Uint32 sfactor, Uint32 dfactor);

// typedef void (APIENTRYP PFNGLLOGICOPPROC) ( GLenum opcode )
typedef PFNGLLOGICOPPROCDart = void Function(int opcode);
typedef PFNGLLOGICOPPROC = Void Function(Uint32 opcode);

// typedef void (APIENTRYP PFNGLCULLFACEPROC) ( GLenum mode )
typedef PFNGLCULLFACEPROCDart = void Function(int mode);
typedef PFNGLCULLFACEPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLFRONTFACEPROC) ( GLenum mode )
typedef PFNGLFRONTFACEPROCDart = void Function(int mode);
typedef PFNGLFRONTFACEPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLPOINTSIZEPROC) ( GLfloat size )
typedef PFNGLPOINTSIZEPROCDart = void Function(double size);
typedef PFNGLPOINTSIZEPROC = Void Function(Float size);

// typedef void (APIENTRYP PFNGLLINEWIDTHPROC) ( GLfloat width )
typedef PFNGLLINEWIDTHPROCDart = void Function(double width);
typedef PFNGLLINEWIDTHPROC = Void Function(Float width);

// typedef void (APIENTRYP PFNGLLINESTIPPLEPROC) ( GLint factor, GLushort pattern )
typedef PFNGLLINESTIPPLEPROCDart = void Function(int factor, int pattern);
typedef PFNGLLINESTIPPLEPROC = Void Function(Int32 factor, Uint16 pattern);

// typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) ( GLenum face, GLenum mode )
typedef PFNGLPOLYGONMODEPROCDart = void Function(int face, int mode);
typedef PFNGLPOLYGONMODEPROC = Void Function(Uint32 face, Uint32 mode);

// typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) ( GLfloat factor, GLfloat units )
typedef PFNGLPOLYGONOFFSETPROCDart = void Function(double factor, double units);
typedef PFNGLPOLYGONOFFSETPROC = Void Function(Float factor, Float units);

// typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC) ( const GLubyte *mask )
typedef PFNGLPOLYGONSTIPPLEPROCDart = void Function(Pointer<Uint8> mask);
typedef PFNGLPOLYGONSTIPPLEPROC = Void Function(Pointer<Uint8> mask);

// typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC) ( GLubyte *mask )
typedef PFNGLGETPOLYGONSTIPPLEPROCDart = void Function(Pointer<Uint8> mask);
typedef PFNGLGETPOLYGONSTIPPLEPROC = Void Function(Pointer<Uint8> mask);

// typedef void (APIENTRYP PFNGLEDGEFLAGPROC) ( GLboolean flag )
typedef PFNGLEDGEFLAGPROCDart = void Function(int flag);
typedef PFNGLEDGEFLAGPROC = Void Function(Int32 flag);

// typedef void (APIENTRYP PFNGLEDGEFLAGVPROC) ( const GLboolean *flag )
typedef PFNGLEDGEFLAGVPROCDart = void Function(Pointer<Int32> flag);
typedef PFNGLEDGEFLAGVPROC = Void Function(Pointer<Int32> flag);

// typedef void (APIENTRYP PFNGLSCISSORPROC) ( GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLSCISSORPROCDart =
    void Function(int x, int y, int width, int height);
typedef PFNGLSCISSORPROC =
    Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height);

// typedef void (APIENTRYP PFNGLCLIPPLANEPROC) ( GLenum plane, const GLdouble *equation )
typedef PFNGLCLIPPLANEPROCDart =
    void Function(int plane, Pointer<Double> equation);
typedef PFNGLCLIPPLANEPROC =
    Void Function(Uint32 plane, Pointer<Double> equation);

// typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC) ( GLenum plane, GLdouble *equation )
typedef PFNGLGETCLIPPLANEPROCDart =
    void Function(int plane, Pointer<Double> equation);
typedef PFNGLGETCLIPPLANEPROC =
    Void Function(Uint32 plane, Pointer<Double> equation);

// typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) ( GLenum mode )
typedef PFNGLDRAWBUFFERPROCDart = void Function(int mode);
typedef PFNGLDRAWBUFFERPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLREADBUFFERPROC) ( GLenum mode )
typedef PFNGLREADBUFFERPROCDart = void Function(int mode);
typedef PFNGLREADBUFFERPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLENABLEPROC) ( GLenum cap )
typedef PFNGLENABLEPROCDart = void Function(int cap);
typedef PFNGLENABLEPROC = Void Function(Uint32 cap);

// typedef void (APIENTRYP PFNGLDISABLEPROC) ( GLenum cap )
typedef PFNGLDISABLEPROCDart = void Function(int cap);
typedef PFNGLDISABLEPROC = Void Function(Uint32 cap);

// typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) ( GLenum cap )
typedef PFNGLISENABLEDPROCDart = int Function(int cap);
typedef PFNGLISENABLEDPROC = Int32 Function(Uint32 cap);

// typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC) ( GLenum cap )
typedef PFNGLENABLECLIENTSTATEPROCDart = void Function(int cap);
typedef PFNGLENABLECLIENTSTATEPROC = Void Function(Uint32 cap);

// typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC) ( GLenum cap )
typedef PFNGLDISABLECLIENTSTATEPROCDart = void Function(int cap);
typedef PFNGLDISABLECLIENTSTATEPROC = Void Function(Uint32 cap);

// typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) ( GLenum pname, GLboolean *params )
typedef PFNGLGETBOOLEANVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLGETBOOLEANVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) ( GLenum pname, GLdouble *params )
typedef PFNGLGETDOUBLEVPROCDart =
    void Function(int pname, Pointer<Double> params);
typedef PFNGLGETDOUBLEVPROC =
    Void Function(Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETFLOATVPROC) ( GLenum pname, GLfloat *params )
typedef PFNGLGETFLOATVPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLGETFLOATVPROC = Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETINTEGERVPROC) ( GLenum pname, GLint *params )
typedef PFNGLGETINTEGERVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLGETINTEGERVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPUSHATTRIBPROC) ( GLbitfield mask )
typedef PFNGLPUSHATTRIBPROCDart = void Function(int mask);
typedef PFNGLPUSHATTRIBPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLPOPATTRIBPROC) ( void )
typedef PFNGLPOPATTRIBPROCDart = void Function();
typedef PFNGLPOPATTRIBPROC = Void Function();

// typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC) ( GLbitfield mask )
typedef PFNGLPUSHCLIENTATTRIBPROCDart = void Function(int mask);
typedef PFNGLPUSHCLIENTATTRIBPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC) ( void )
typedef PFNGLPOPCLIENTATTRIBPROCDart = void Function();
typedef PFNGLPOPCLIENTATTRIBPROC = Void Function();

// typedef GLint (APIENTRYP PFNGLRENDERMODEPROC) ( GLenum mode )
typedef PFNGLRENDERMODEPROCDart = int Function(int mode);
typedef PFNGLRENDERMODEPROC = Int32 Function(Uint32 mode);

// typedef GLenum (APIENTRYP PFNGLGETERRORPROC) ( void )
typedef PFNGLGETERRORPROCDart = int Function();
typedef PFNGLGETERRORPROC = Uint32 Function();

// typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC) ( GLenum name )
typedef PFNGLGETSTRINGPROCDart = Pointer<Uint8> Function(int name);
typedef PFNGLGETSTRINGPROC = Pointer<Uint8> Function(Uint32 name);

// typedef void (APIENTRYP PFNGLFINISHPROC) ( void )
typedef PFNGLFINISHPROCDart = void Function();
typedef PFNGLFINISHPROC = Void Function();

// typedef void (APIENTRYP PFNGLFLUSHPROC) ( void )
typedef PFNGLFLUSHPROCDart = void Function();
typedef PFNGLFLUSHPROC = Void Function();

// typedef void (APIENTRYP PFNGLHINTPROC) ( GLenum target, GLenum mode )
typedef PFNGLHINTPROCDart = void Function(int target, int mode);
typedef PFNGLHINTPROC = Void Function(Uint32 target, Uint32 mode);

// typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) ( GLclampd depth )
typedef PFNGLCLEARDEPTHPROCDart = void Function(double depth);
typedef PFNGLCLEARDEPTHPROC = Void Function(Double depth);

// typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) ( GLenum func )
typedef PFNGLDEPTHFUNCPROCDart = void Function(int func);
typedef PFNGLDEPTHFUNCPROC = Void Function(Uint32 func);

// typedef void (APIENTRYP PFNGLDEPTHMASKPROC) ( GLboolean flag )
typedef PFNGLDEPTHMASKPROCDart = void Function(int flag);
typedef PFNGLDEPTHMASKPROC = Void Function(Int32 flag);

// typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) ( GLclampd near_val, GLclampd far_val )
typedef PFNGLDEPTHRANGEPROCDart = void Function(double nearVal, double farVal);
typedef PFNGLDEPTHRANGEPROC = Void Function(Double nearVal, Double farVal);

// typedef void (APIENTRYP PFNGLCLEARACCUMPROC) ( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
typedef PFNGLCLEARACCUMPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLCLEARACCUMPROC =
    Void Function(Float red, Float green, Float blue, Float alpha);

// typedef void (APIENTRYP PFNGLACCUMPROC) ( GLenum op, GLfloat value )
typedef PFNGLACCUMPROCDart = void Function(int op, double value);
typedef PFNGLACCUMPROC = Void Function(Uint32 op, Float value);

// typedef void (APIENTRYP PFNGLMATRIXMODEPROC) ( GLenum mode )
typedef PFNGLMATRIXMODEPROCDart = void Function(int mode);
typedef PFNGLMATRIXMODEPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLORTHOPROC) ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
typedef PFNGLORTHOPROCDart =
    void Function(
      double left,
      double right,
      double bottom,
      double top,
      double nearVal,
      double farVal,
    );
typedef PFNGLORTHOPROC =
    Void Function(
      Double left,
      Double right,
      Double bottom,
      Double top,
      Double nearVal,
      Double farVal,
    );

// typedef void (APIENTRYP PFNGLFRUSTUMPROC) ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
typedef PFNGLFRUSTUMPROCDart =
    void Function(
      double left,
      double right,
      double bottom,
      double top,
      double nearVal,
      double farVal,
    );
typedef PFNGLFRUSTUMPROC =
    Void Function(
      Double left,
      Double right,
      Double bottom,
      Double top,
      Double nearVal,
      Double farVal,
    );

// typedef void (APIENTRYP PFNGLVIEWPORTPROC) ( GLint x, GLint y, GLsizei width, GLsizei height )
typedef PFNGLVIEWPORTPROCDart =
    void Function(int x, int y, int width, int height);
typedef PFNGLVIEWPORTPROC =
    Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height);

// typedef void (APIENTRYP PFNGLPUSHMATRIXPROC) ( void )
typedef PFNGLPUSHMATRIXPROCDart = void Function();
typedef PFNGLPUSHMATRIXPROC = Void Function();

// typedef void (APIENTRYP PFNGLPOPMATRIXPROC) ( void )
typedef PFNGLPOPMATRIXPROCDart = void Function();
typedef PFNGLPOPMATRIXPROC = Void Function();

// typedef void (APIENTRYP PFNGLLOADIDENTITYPROC) ( void )
typedef PFNGLLOADIDENTITYPROCDart = void Function();
typedef PFNGLLOADIDENTITYPROC = Void Function();

// typedef void (APIENTRYP PFNGLLOADMATRIXDPROC) ( const GLdouble *m )
typedef PFNGLLOADMATRIXDPROCDart = void Function(Pointer<Double> m);
typedef PFNGLLOADMATRIXDPROC = Void Function(Pointer<Double> m);

// typedef void (APIENTRYP PFNGLLOADMATRIXFPROC) ( const GLfloat *m )
typedef PFNGLLOADMATRIXFPROCDart = void Function(Pointer<Float> m);
typedef PFNGLLOADMATRIXFPROC = Void Function(Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMULTMATRIXDPROC) ( const GLdouble *m )
typedef PFNGLMULTMATRIXDPROCDart = void Function(Pointer<Double> m);
typedef PFNGLMULTMATRIXDPROC = Void Function(Pointer<Double> m);

// typedef void (APIENTRYP PFNGLMULTMATRIXFPROC) ( const GLfloat *m )
typedef PFNGLMULTMATRIXFPROCDart = void Function(Pointer<Float> m);
typedef PFNGLMULTMATRIXFPROC = Void Function(Pointer<Float> m);

// typedef void (APIENTRYP PFNGLROTATEDPROC) ( GLdouble angle, GLdouble x, GLdouble y, GLdouble z )
typedef PFNGLROTATEDPROCDart =
    void Function(double angle, double x, double y, double z);
typedef PFNGLROTATEDPROC =
    Void Function(Double angle, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLROTATEFPROC) ( GLfloat angle, GLfloat x, GLfloat y, GLfloat z )
typedef PFNGLROTATEFPROCDart =
    void Function(double angle, double x, double y, double z);
typedef PFNGLROTATEFPROC =
    Void Function(Float angle, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLSCALEDPROC) ( GLdouble x, GLdouble y, GLdouble z )
typedef PFNGLSCALEDPROCDart = void Function(double x, double y, double z);
typedef PFNGLSCALEDPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLSCALEFPROC) ( GLfloat x, GLfloat y, GLfloat z )
typedef PFNGLSCALEFPROCDart = void Function(double x, double y, double z);
typedef PFNGLSCALEFPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLTRANSLATEDPROC) ( GLdouble x, GLdouble y, GLdouble z )
typedef PFNGLTRANSLATEDPROCDart = void Function(double x, double y, double z);
typedef PFNGLTRANSLATEDPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLTRANSLATEFPROC) ( GLfloat x, GLfloat y, GLfloat z )
typedef PFNGLTRANSLATEFPROCDart = void Function(double x, double y, double z);
typedef PFNGLTRANSLATEFPROC = Void Function(Float x, Float y, Float z);

// typedef GLboolean (APIENTRYP PFNGLISLISTPROC) ( GLuint list )
typedef PFNGLISLISTPROCDart = int Function(int list);
typedef PFNGLISLISTPROC = Int32 Function(Uint32 list);

// typedef void (APIENTRYP PFNGLDELETELISTSPROC) ( GLuint list, GLsizei range )
typedef PFNGLDELETELISTSPROCDart = void Function(int list, int range);
typedef PFNGLDELETELISTSPROC = Void Function(Uint32 list, Uint32 range);

// typedef GLuint (APIENTRYP PFNGLGENLISTSPROC) ( GLsizei range )
typedef PFNGLGENLISTSPROCDart = int Function(int range);
typedef PFNGLGENLISTSPROC = Uint32 Function(Uint32 range);

// typedef void (APIENTRYP PFNGLNEWLISTPROC) ( GLuint list, GLenum mode )
typedef PFNGLNEWLISTPROCDart = void Function(int list, int mode);
typedef PFNGLNEWLISTPROC = Void Function(Uint32 list, Uint32 mode);

// typedef void (APIENTRYP PFNGLENDLISTPROC) ( void )
typedef PFNGLENDLISTPROCDart = void Function();
typedef PFNGLENDLISTPROC = Void Function();

// typedef void (APIENTRYP PFNGLCALLLISTPROC) ( GLuint list )
typedef PFNGLCALLLISTPROCDart = void Function(int list);
typedef PFNGLCALLLISTPROC = Void Function(Uint32 list);

// typedef void (APIENTRYP PFNGLCALLLISTSPROC) ( GLsizei n, GLenum type, const GLvoid *lists )
typedef PFNGLCALLLISTSPROCDart =
    void Function(int n, int type, Pointer<NativeType> lists);
typedef PFNGLCALLLISTSPROC =
    Void Function(Uint32 n, Uint32 type, Pointer<NativeType> lists);

// typedef void (APIENTRYP PFNGLLISTBASEPROC) ( GLuint base )
typedef PFNGLLISTBASEPROCDart = void Function(int base);
typedef PFNGLLISTBASEPROC = Void Function(Uint32 base);

// typedef void (APIENTRYP PFNGLBEGINPROC) ( GLenum mode )
typedef PFNGLBEGINPROCDart = void Function(int mode);
typedef PFNGLBEGINPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLENDPROC) ( void )
typedef PFNGLENDPROCDart = void Function();
typedef PFNGLENDPROC = Void Function();

// typedef void (APIENTRYP PFNGLVERTEX2DPROC) ( GLdouble x, GLdouble y )
typedef PFNGLVERTEX2DPROCDart = void Function(double x, double y);
typedef PFNGLVERTEX2DPROC = Void Function(Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEX2FPROC) ( GLfloat x, GLfloat y )
typedef PFNGLVERTEX2FPROCDart = void Function(double x, double y);
typedef PFNGLVERTEX2FPROC = Void Function(Float x, Float y);

// typedef void (APIENTRYP PFNGLVERTEX2IPROC) ( GLint x, GLint y )
typedef PFNGLVERTEX2IPROCDart = void Function(int x, int y);
typedef PFNGLVERTEX2IPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLVERTEX2SPROC) ( GLshort x, GLshort y )
typedef PFNGLVERTEX2SPROCDart = void Function(int x, int y);
typedef PFNGLVERTEX2SPROC = Void Function(Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLVERTEX3DPROC) ( GLdouble x, GLdouble y, GLdouble z )
typedef PFNGLVERTEX3DPROCDart = void Function(double x, double y, double z);
typedef PFNGLVERTEX3DPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEX3FPROC) ( GLfloat x, GLfloat y, GLfloat z )
typedef PFNGLVERTEX3FPROCDart = void Function(double x, double y, double z);
typedef PFNGLVERTEX3FPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLVERTEX3IPROC) ( GLint x, GLint y, GLint z )
typedef PFNGLVERTEX3IPROCDart = void Function(int x, int y, int z);
typedef PFNGLVERTEX3IPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLVERTEX3SPROC) ( GLshort x, GLshort y, GLshort z )
typedef PFNGLVERTEX3SPROCDart = void Function(int x, int y, int z);
typedef PFNGLVERTEX3SPROC = Void Function(Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLVERTEX4DPROC) ( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
typedef PFNGLVERTEX4DPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLVERTEX4DPROC =
    Void Function(Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEX4FPROC) ( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
typedef PFNGLVERTEX4FPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLVERTEX4FPROC = Void Function(Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLVERTEX4IPROC) ( GLint x, GLint y, GLint z, GLint w )
typedef PFNGLVERTEX4IPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLVERTEX4IPROC = Void Function(Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLVERTEX4SPROC) ( GLshort x, GLshort y, GLshort z, GLshort w )
typedef PFNGLVERTEX4SPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLVERTEX4SPROC = Void Function(Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLVERTEX2DVPROC) ( const GLdouble *v )
typedef PFNGLVERTEX2DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLVERTEX2DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEX2FVPROC) ( const GLfloat *v )
typedef PFNGLVERTEX2FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLVERTEX2FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEX2IVPROC) ( const GLint *v )
typedef PFNGLVERTEX2IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLVERTEX2IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEX2SVPROC) ( const GLshort *v )
typedef PFNGLVERTEX2SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLVERTEX2SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEX3DVPROC) ( const GLdouble *v )
typedef PFNGLVERTEX3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLVERTEX3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEX3FVPROC) ( const GLfloat *v )
typedef PFNGLVERTEX3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLVERTEX3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEX3IVPROC) ( const GLint *v )
typedef PFNGLVERTEX3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLVERTEX3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEX3SVPROC) ( const GLshort *v )
typedef PFNGLVERTEX3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLVERTEX3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEX4DVPROC) ( const GLdouble *v )
typedef PFNGLVERTEX4DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLVERTEX4DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEX4FVPROC) ( const GLfloat *v )
typedef PFNGLVERTEX4FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLVERTEX4FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEX4IVPROC) ( const GLint *v )
typedef PFNGLVERTEX4IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLVERTEX4IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEX4SVPROC) ( const GLshort *v )
typedef PFNGLVERTEX4SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLVERTEX4SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLNORMAL3BPROC) ( GLbyte nx, GLbyte ny, GLbyte nz )
typedef PFNGLNORMAL3BPROCDart = void Function(int nx, int ny, int nz);
typedef PFNGLNORMAL3BPROC = Void Function(Int8 nx, Int8 ny, Int8 nz);

// typedef void (APIENTRYP PFNGLNORMAL3DPROC) ( GLdouble nx, GLdouble ny, GLdouble nz )
typedef PFNGLNORMAL3DPROCDart = void Function(double nx, double ny, double nz);
typedef PFNGLNORMAL3DPROC = Void Function(Double nx, Double ny, Double nz);

// typedef void (APIENTRYP PFNGLNORMAL3FPROC) ( GLfloat nx, GLfloat ny, GLfloat nz )
typedef PFNGLNORMAL3FPROCDart = void Function(double nx, double ny, double nz);
typedef PFNGLNORMAL3FPROC = Void Function(Float nx, Float ny, Float nz);

// typedef void (APIENTRYP PFNGLNORMAL3IPROC) ( GLint nx, GLint ny, GLint nz )
typedef PFNGLNORMAL3IPROCDart = void Function(int nx, int ny, int nz);
typedef PFNGLNORMAL3IPROC = Void Function(Int32 nx, Int32 ny, Int32 nz);

// typedef void (APIENTRYP PFNGLNORMAL3SPROC) ( GLshort nx, GLshort ny, GLshort nz )
typedef PFNGLNORMAL3SPROCDart = void Function(int nx, int ny, int nz);
typedef PFNGLNORMAL3SPROC = Void Function(Int16 nx, Int16 ny, Int16 nz);

// typedef void (APIENTRYP PFNGLNORMAL3BVPROC) ( const GLbyte *v )
typedef PFNGLNORMAL3BVPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLNORMAL3BVPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLNORMAL3DVPROC) ( const GLdouble *v )
typedef PFNGLNORMAL3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLNORMAL3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLNORMAL3FVPROC) ( const GLfloat *v )
typedef PFNGLNORMAL3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLNORMAL3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLNORMAL3IVPROC) ( const GLint *v )
typedef PFNGLNORMAL3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLNORMAL3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLNORMAL3SVPROC) ( const GLshort *v )
typedef PFNGLNORMAL3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLNORMAL3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLINDEXDPROC) ( GLdouble c )
typedef PFNGLINDEXDPROCDart = void Function(double c);
typedef PFNGLINDEXDPROC = Void Function(Double c);

// typedef void (APIENTRYP PFNGLINDEXFPROC) ( GLfloat c )
typedef PFNGLINDEXFPROCDart = void Function(double c);
typedef PFNGLINDEXFPROC = Void Function(Float c);

// typedef void (APIENTRYP PFNGLINDEXIPROC) ( GLint c )
typedef PFNGLINDEXIPROCDart = void Function(int c);
typedef PFNGLINDEXIPROC = Void Function(Int32 c);

// typedef void (APIENTRYP PFNGLINDEXSPROC) ( GLshort c )
typedef PFNGLINDEXSPROCDart = void Function(int c);
typedef PFNGLINDEXSPROC = Void Function(Int16 c);

// typedef void (APIENTRYP PFNGLINDEXUBPROC) ( GLubyte c )
typedef PFNGLINDEXUBPROCDart = void Function(int c);
typedef PFNGLINDEXUBPROC = Void Function(Uint8 c);

// typedef void (APIENTRYP PFNGLINDEXDVPROC) ( const GLdouble *c )
typedef PFNGLINDEXDVPROCDart = void Function(Pointer<Double> c);
typedef PFNGLINDEXDVPROC = Void Function(Pointer<Double> c);

// typedef void (APIENTRYP PFNGLINDEXFVPROC) ( const GLfloat *c )
typedef PFNGLINDEXFVPROCDart = void Function(Pointer<Float> c);
typedef PFNGLINDEXFVPROC = Void Function(Pointer<Float> c);

// typedef void (APIENTRYP PFNGLINDEXIVPROC) ( const GLint *c )
typedef PFNGLINDEXIVPROCDart = void Function(Pointer<Int32> c);
typedef PFNGLINDEXIVPROC = Void Function(Pointer<Int32> c);

// typedef void (APIENTRYP PFNGLINDEXSVPROC) ( const GLshort *c )
typedef PFNGLINDEXSVPROCDart = void Function(Pointer<Int16> c);
typedef PFNGLINDEXSVPROC = Void Function(Pointer<Int16> c);

// typedef void (APIENTRYP PFNGLINDEXUBVPROC) ( const GLubyte *c )
typedef PFNGLINDEXUBVPROCDart = void Function(Pointer<Uint8> c);
typedef PFNGLINDEXUBVPROC = Void Function(Pointer<Uint8> c);

// typedef void (APIENTRYP PFNGLCOLOR3BPROC) ( GLbyte red, GLbyte green, GLbyte blue )
typedef PFNGLCOLOR3BPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3BPROC = Void Function(Int8 red, Int8 green, Int8 blue);

// typedef void (APIENTRYP PFNGLCOLOR3DPROC) ( GLdouble red, GLdouble green, GLdouble blue )
typedef PFNGLCOLOR3DPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLCOLOR3DPROC = Void Function(Double red, Double green, Double blue);

// typedef void (APIENTRYP PFNGLCOLOR3FPROC) ( GLfloat red, GLfloat green, GLfloat blue )
typedef PFNGLCOLOR3FPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLCOLOR3FPROC = Void Function(Float red, Float green, Float blue);

// typedef void (APIENTRYP PFNGLCOLOR3IPROC) ( GLint red, GLint green, GLint blue )
typedef PFNGLCOLOR3IPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3IPROC = Void Function(Int32 red, Int32 green, Int32 blue);

// typedef void (APIENTRYP PFNGLCOLOR3SPROC) ( GLshort red, GLshort green, GLshort blue )
typedef PFNGLCOLOR3SPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3SPROC = Void Function(Int16 red, Int16 green, Int16 blue);

// typedef void (APIENTRYP PFNGLCOLOR3UBPROC) ( GLubyte red, GLubyte green, GLubyte blue )
typedef PFNGLCOLOR3UBPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3UBPROC = Void Function(Uint8 red, Uint8 green, Uint8 blue);

// typedef void (APIENTRYP PFNGLCOLOR3UIPROC) ( GLuint red, GLuint green, GLuint blue )
typedef PFNGLCOLOR3UIPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3UIPROC =
    Void Function(Uint32 red, Uint32 green, Uint32 blue);

// typedef void (APIENTRYP PFNGLCOLOR3USPROC) ( GLushort red, GLushort green, GLushort blue )
typedef PFNGLCOLOR3USPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3USPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue);

// typedef void (APIENTRYP PFNGLCOLOR4BPROC) ( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha )
typedef PFNGLCOLOR4BPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4BPROC =
    Void Function(Int8 red, Int8 green, Int8 blue, Int8 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4DPROC) ( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha )
typedef PFNGLCOLOR4DPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLCOLOR4DPROC =
    Void Function(Double red, Double green, Double blue, Double alpha);

// typedef void (APIENTRYP PFNGLCOLOR4FPROC) ( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
typedef PFNGLCOLOR4FPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLCOLOR4FPROC =
    Void Function(Float red, Float green, Float blue, Float alpha);

// typedef void (APIENTRYP PFNGLCOLOR4IPROC) ( GLint red, GLint green, GLint blue, GLint alpha )
typedef PFNGLCOLOR4IPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4IPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4SPROC) ( GLshort red, GLshort green, GLshort blue, GLshort alpha )
typedef PFNGLCOLOR4SPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4SPROC =
    Void Function(Int16 red, Int16 green, Int16 blue, Int16 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4UBPROC) ( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
typedef PFNGLCOLOR4UBPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4UBPROC =
    Void Function(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4UIPROC) ( GLuint red, GLuint green, GLuint blue, GLuint alpha )
typedef PFNGLCOLOR4UIPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4UIPROC =
    Void Function(Uint32 red, Uint32 green, Uint32 blue, Uint32 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4USPROC) ( GLushort red, GLushort green, GLushort blue, GLushort alpha )
typedef PFNGLCOLOR4USPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4USPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue, Uint16 alpha);

// typedef void (APIENTRYP PFNGLCOLOR3BVPROC) ( const GLbyte *v )
typedef PFNGLCOLOR3BVPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLCOLOR3BVPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLCOLOR3DVPROC) ( const GLdouble *v )
typedef PFNGLCOLOR3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLCOLOR3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLCOLOR3FVPROC) ( const GLfloat *v )
typedef PFNGLCOLOR3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLCOLOR3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOLOR3IVPROC) ( const GLint *v )
typedef PFNGLCOLOR3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLCOLOR3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLCOLOR3SVPROC) ( const GLshort *v )
typedef PFNGLCOLOR3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLCOLOR3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLCOLOR3UBVPROC) ( const GLubyte *v )
typedef PFNGLCOLOR3UBVPROCDart = void Function(Pointer<Uint8> v);
typedef PFNGLCOLOR3UBVPROC = Void Function(Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLCOLOR3UIVPROC) ( const GLuint *v )
typedef PFNGLCOLOR3UIVPROCDart = void Function(Pointer<Uint32> v);
typedef PFNGLCOLOR3UIVPROC = Void Function(Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLCOLOR3USVPROC) ( const GLushort *v )
typedef PFNGLCOLOR3USVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLCOLOR3USVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLCOLOR4BVPROC) ( const GLbyte *v )
typedef PFNGLCOLOR4BVPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLCOLOR4BVPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLCOLOR4DVPROC) ( const GLdouble *v )
typedef PFNGLCOLOR4DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLCOLOR4DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLCOLOR4FVPROC) ( const GLfloat *v )
typedef PFNGLCOLOR4FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLCOLOR4FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOLOR4IVPROC) ( const GLint *v )
typedef PFNGLCOLOR4IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLCOLOR4IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLCOLOR4SVPROC) ( const GLshort *v )
typedef PFNGLCOLOR4SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLCOLOR4SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLCOLOR4UBVPROC) ( const GLubyte *v )
typedef PFNGLCOLOR4UBVPROCDart = void Function(Pointer<Uint8> v);
typedef PFNGLCOLOR4UBVPROC = Void Function(Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLCOLOR4UIVPROC) ( const GLuint *v )
typedef PFNGLCOLOR4UIVPROCDart = void Function(Pointer<Uint32> v);
typedef PFNGLCOLOR4UIVPROC = Void Function(Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLCOLOR4USVPROC) ( const GLushort *v )
typedef PFNGLCOLOR4USVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLCOLOR4USVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD1DPROC) ( GLdouble s )
typedef PFNGLTEXCOORD1DPROCDart = void Function(double s);
typedef PFNGLTEXCOORD1DPROC = Void Function(Double s);

// typedef void (APIENTRYP PFNGLTEXCOORD1FPROC) ( GLfloat s )
typedef PFNGLTEXCOORD1FPROCDart = void Function(double s);
typedef PFNGLTEXCOORD1FPROC = Void Function(Float s);

// typedef void (APIENTRYP PFNGLTEXCOORD1IPROC) ( GLint s )
typedef PFNGLTEXCOORD1IPROCDart = void Function(int s);
typedef PFNGLTEXCOORD1IPROC = Void Function(Int32 s);

// typedef void (APIENTRYP PFNGLTEXCOORD1SPROC) ( GLshort s )
typedef PFNGLTEXCOORD1SPROCDart = void Function(int s);
typedef PFNGLTEXCOORD1SPROC = Void Function(Int16 s);

// typedef void (APIENTRYP PFNGLTEXCOORD2DPROC) ( GLdouble s, GLdouble t )
typedef PFNGLTEXCOORD2DPROCDart = void Function(double s, double t);
typedef PFNGLTEXCOORD2DPROC = Void Function(Double s, Double t);

// typedef void (APIENTRYP PFNGLTEXCOORD2FPROC) ( GLfloat s, GLfloat t )
typedef PFNGLTEXCOORD2FPROCDart = void Function(double s, double t);
typedef PFNGLTEXCOORD2FPROC = Void Function(Float s, Float t);

// typedef void (APIENTRYP PFNGLTEXCOORD2IPROC) ( GLint s, GLint t )
typedef PFNGLTEXCOORD2IPROCDart = void Function(int s, int t);
typedef PFNGLTEXCOORD2IPROC = Void Function(Int32 s, Int32 t);

// typedef void (APIENTRYP PFNGLTEXCOORD2SPROC) ( GLshort s, GLshort t )
typedef PFNGLTEXCOORD2SPROCDart = void Function(int s, int t);
typedef PFNGLTEXCOORD2SPROC = Void Function(Int16 s, Int16 t);

// typedef void (APIENTRYP PFNGLTEXCOORD3DPROC) ( GLdouble s, GLdouble t, GLdouble r )
typedef PFNGLTEXCOORD3DPROCDart = void Function(double s, double t, double r);
typedef PFNGLTEXCOORD3DPROC = Void Function(Double s, Double t, Double r);

// typedef void (APIENTRYP PFNGLTEXCOORD3FPROC) ( GLfloat s, GLfloat t, GLfloat r )
typedef PFNGLTEXCOORD3FPROCDart = void Function(double s, double t, double r);
typedef PFNGLTEXCOORD3FPROC = Void Function(Float s, Float t, Float r);

// typedef void (APIENTRYP PFNGLTEXCOORD3IPROC) ( GLint s, GLint t, GLint r )
typedef PFNGLTEXCOORD3IPROCDart = void Function(int s, int t, int r);
typedef PFNGLTEXCOORD3IPROC = Void Function(Int32 s, Int32 t, Int32 r);

// typedef void (APIENTRYP PFNGLTEXCOORD3SPROC) ( GLshort s, GLshort t, GLshort r )
typedef PFNGLTEXCOORD3SPROCDart = void Function(int s, int t, int r);
typedef PFNGLTEXCOORD3SPROC = Void Function(Int16 s, Int16 t, Int16 r);

// typedef void (APIENTRYP PFNGLTEXCOORD4DPROC) ( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
typedef PFNGLTEXCOORD4DPROCDart =
    void Function(double s, double t, double r, double q);
typedef PFNGLTEXCOORD4DPROC =
    Void Function(Double s, Double t, Double r, Double q);

// typedef void (APIENTRYP PFNGLTEXCOORD4FPROC) ( GLfloat s, GLfloat t, GLfloat r, GLfloat q )
typedef PFNGLTEXCOORD4FPROCDart =
    void Function(double s, double t, double r, double q);
typedef PFNGLTEXCOORD4FPROC = Void Function(Float s, Float t, Float r, Float q);

// typedef void (APIENTRYP PFNGLTEXCOORD4IPROC) ( GLint s, GLint t, GLint r, GLint q )
typedef PFNGLTEXCOORD4IPROCDart = void Function(int s, int t, int r, int q);
typedef PFNGLTEXCOORD4IPROC = Void Function(Int32 s, Int32 t, Int32 r, Int32 q);

// typedef void (APIENTRYP PFNGLTEXCOORD4SPROC) ( GLshort s, GLshort t, GLshort r, GLshort q )
typedef PFNGLTEXCOORD4SPROCDart = void Function(int s, int t, int r, int q);
typedef PFNGLTEXCOORD4SPROC = Void Function(Int16 s, Int16 t, Int16 r, Int16 q);

// typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC) ( const GLdouble *v )
typedef PFNGLTEXCOORD1DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLTEXCOORD1DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC) ( const GLfloat *v )
typedef PFNGLTEXCOORD1FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLTEXCOORD1FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC) ( const GLint *v )
typedef PFNGLTEXCOORD1IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLTEXCOORD1IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC) ( const GLshort *v )
typedef PFNGLTEXCOORD1SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLTEXCOORD1SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC) ( const GLdouble *v )
typedef PFNGLTEXCOORD2DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLTEXCOORD2DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC) ( const GLfloat *v )
typedef PFNGLTEXCOORD2FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLTEXCOORD2FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC) ( const GLint *v )
typedef PFNGLTEXCOORD2IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLTEXCOORD2IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC) ( const GLshort *v )
typedef PFNGLTEXCOORD2SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLTEXCOORD2SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC) ( const GLdouble *v )
typedef PFNGLTEXCOORD3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLTEXCOORD3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC) ( const GLfloat *v )
typedef PFNGLTEXCOORD3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLTEXCOORD3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC) ( const GLint *v )
typedef PFNGLTEXCOORD3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLTEXCOORD3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC) ( const GLshort *v )
typedef PFNGLTEXCOORD3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLTEXCOORD3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC) ( const GLdouble *v )
typedef PFNGLTEXCOORD4DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLTEXCOORD4DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC) ( const GLfloat *v )
typedef PFNGLTEXCOORD4FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLTEXCOORD4FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC) ( const GLint *v )
typedef PFNGLTEXCOORD4IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLTEXCOORD4IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC) ( const GLshort *v )
typedef PFNGLTEXCOORD4SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLTEXCOORD4SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLRASTERPOS2DPROC) ( GLdouble x, GLdouble y )
typedef PFNGLRASTERPOS2DPROCDart = void Function(double x, double y);
typedef PFNGLRASTERPOS2DPROC = Void Function(Double x, Double y);

// typedef void (APIENTRYP PFNGLRASTERPOS2FPROC) ( GLfloat x, GLfloat y )
typedef PFNGLRASTERPOS2FPROCDart = void Function(double x, double y);
typedef PFNGLRASTERPOS2FPROC = Void Function(Float x, Float y);

// typedef void (APIENTRYP PFNGLRASTERPOS2IPROC) ( GLint x, GLint y )
typedef PFNGLRASTERPOS2IPROCDart = void Function(int x, int y);
typedef PFNGLRASTERPOS2IPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLRASTERPOS2SPROC) ( GLshort x, GLshort y )
typedef PFNGLRASTERPOS2SPROCDart = void Function(int x, int y);
typedef PFNGLRASTERPOS2SPROC = Void Function(Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLRASTERPOS3DPROC) ( GLdouble x, GLdouble y, GLdouble z )
typedef PFNGLRASTERPOS3DPROCDart = void Function(double x, double y, double z);
typedef PFNGLRASTERPOS3DPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLRASTERPOS3FPROC) ( GLfloat x, GLfloat y, GLfloat z )
typedef PFNGLRASTERPOS3FPROCDart = void Function(double x, double y, double z);
typedef PFNGLRASTERPOS3FPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLRASTERPOS3IPROC) ( GLint x, GLint y, GLint z )
typedef PFNGLRASTERPOS3IPROCDart = void Function(int x, int y, int z);
typedef PFNGLRASTERPOS3IPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLRASTERPOS3SPROC) ( GLshort x, GLshort y, GLshort z )
typedef PFNGLRASTERPOS3SPROCDart = void Function(int x, int y, int z);
typedef PFNGLRASTERPOS3SPROC = Void Function(Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLRASTERPOS4DPROC) ( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
typedef PFNGLRASTERPOS4DPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLRASTERPOS4DPROC =
    Void Function(Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLRASTERPOS4FPROC) ( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
typedef PFNGLRASTERPOS4FPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLRASTERPOS4FPROC =
    Void Function(Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLRASTERPOS4IPROC) ( GLint x, GLint y, GLint z, GLint w )
typedef PFNGLRASTERPOS4IPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLRASTERPOS4IPROC =
    Void Function(Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLRASTERPOS4SPROC) ( GLshort x, GLshort y, GLshort z, GLshort w )
typedef PFNGLRASTERPOS4SPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLRASTERPOS4SPROC =
    Void Function(Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC) ( const GLdouble *v )
typedef PFNGLRASTERPOS2DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLRASTERPOS2DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC) ( const GLfloat *v )
typedef PFNGLRASTERPOS2FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLRASTERPOS2FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC) ( const GLint *v )
typedef PFNGLRASTERPOS2IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLRASTERPOS2IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC) ( const GLshort *v )
typedef PFNGLRASTERPOS2SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLRASTERPOS2SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC) ( const GLdouble *v )
typedef PFNGLRASTERPOS3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLRASTERPOS3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC) ( const GLfloat *v )
typedef PFNGLRASTERPOS3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLRASTERPOS3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC) ( const GLint *v )
typedef PFNGLRASTERPOS3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLRASTERPOS3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC) ( const GLshort *v )
typedef PFNGLRASTERPOS3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLRASTERPOS3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC) ( const GLdouble *v )
typedef PFNGLRASTERPOS4DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLRASTERPOS4DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC) ( const GLfloat *v )
typedef PFNGLRASTERPOS4FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLRASTERPOS4FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC) ( const GLint *v )
typedef PFNGLRASTERPOS4IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLRASTERPOS4IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC) ( const GLshort *v )
typedef PFNGLRASTERPOS4SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLRASTERPOS4SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLRECTDPROC) ( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 )
typedef PFNGLRECTDPROCDart =
    void Function(double x1, double y1, double x2, double y2);
typedef PFNGLRECTDPROC =
    Void Function(Double x1, Double y1, Double x2, Double y2);

// typedef void (APIENTRYP PFNGLRECTFPROC) ( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
typedef PFNGLRECTFPROCDart =
    void Function(double x1, double y1, double x2, double y2);
typedef PFNGLRECTFPROC = Void Function(Float x1, Float y1, Float x2, Float y2);

// typedef void (APIENTRYP PFNGLRECTIPROC) ( GLint x1, GLint y1, GLint x2, GLint y2 )
typedef PFNGLRECTIPROCDart = void Function(int x1, int y1, int x2, int y2);
typedef PFNGLRECTIPROC = Void Function(Int32 x1, Int32 y1, Int32 x2, Int32 y2);

// typedef void (APIENTRYP PFNGLRECTSPROC) ( GLshort x1, GLshort y1, GLshort x2, GLshort y2 )
typedef PFNGLRECTSPROCDart = void Function(int x1, int y1, int x2, int y2);
typedef PFNGLRECTSPROC = Void Function(Int16 x1, Int16 y1, Int16 x2, Int16 y2);

// typedef void (APIENTRYP PFNGLRECTDVPROC) ( const GLdouble *v1, const GLdouble *v2 )
typedef PFNGLRECTDVPROCDart =
    void Function(Pointer<Double> v1, Pointer<Double> v2);
typedef PFNGLRECTDVPROC = Void Function(Pointer<Double> v1, Pointer<Double> v2);

// typedef void (APIENTRYP PFNGLRECTFVPROC) ( const GLfloat *v1, const GLfloat *v2 )
typedef PFNGLRECTFVPROCDart =
    void Function(Pointer<Float> v1, Pointer<Float> v2);
typedef PFNGLRECTFVPROC = Void Function(Pointer<Float> v1, Pointer<Float> v2);

// typedef void (APIENTRYP PFNGLRECTIVPROC) ( const GLint *v1, const GLint *v2 )
typedef PFNGLRECTIVPROCDart =
    void Function(Pointer<Int32> v1, Pointer<Int32> v2);
typedef PFNGLRECTIVPROC = Void Function(Pointer<Int32> v1, Pointer<Int32> v2);

// typedef void (APIENTRYP PFNGLRECTSVPROC) ( const GLshort *v1, const GLshort *v2 )
typedef PFNGLRECTSVPROCDart =
    void Function(Pointer<Int16> v1, Pointer<Int16> v2);
typedef PFNGLRECTSVPROC = Void Function(Pointer<Int16> v1, Pointer<Int16> v2);

// typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
typedef PFNGLVERTEXPOINTERPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> ptr);
typedef PFNGLVERTEXPOINTERPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> ptr,
    );

// typedef void (APIENTRYP PFNGLNORMALPOINTERPROC) ( GLenum type, GLsizei stride, const GLvoid *ptr )
typedef PFNGLNORMALPOINTERPROCDart =
    void Function(int type, int stride, Pointer<NativeType> ptr);
typedef PFNGLNORMALPOINTERPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> ptr);

// typedef void (APIENTRYP PFNGLCOLORPOINTERPROC) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
typedef PFNGLCOLORPOINTERPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> ptr);
typedef PFNGLCOLORPOINTERPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> ptr,
    );

// typedef void (APIENTRYP PFNGLINDEXPOINTERPROC) ( GLenum type, GLsizei stride, const GLvoid *ptr )
typedef PFNGLINDEXPOINTERPROCDart =
    void Function(int type, int stride, Pointer<NativeType> ptr);
typedef PFNGLINDEXPOINTERPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> ptr);

// typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC) ( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
typedef PFNGLTEXCOORDPOINTERPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> ptr);
typedef PFNGLTEXCOORDPOINTERPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> ptr,
    );

// typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC) ( GLsizei stride, const GLvoid *ptr )
typedef PFNGLEDGEFLAGPOINTERPROCDart =
    void Function(int stride, Pointer<NativeType> ptr);
typedef PFNGLEDGEFLAGPOINTERPROC =
    Void Function(Uint32 stride, Pointer<NativeType> ptr);

// typedef void (APIENTRYP PFNGLGETPOINTERVPROC) ( GLenum pname, GLvoid **params )
typedef PFNGLGETPOINTERVPROCDart =
    void Function(int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETPOINTERVPROC =
    Void Function(Uint32 pname, Pointer<Pointer<NativeType>> params);

// typedef void (APIENTRYP PFNGLARRAYELEMENTPROC) ( GLint i )
typedef PFNGLARRAYELEMENTPROCDart = void Function(int i);
typedef PFNGLARRAYELEMENTPROC = Void Function(Int32 i);

// typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) ( GLenum mode, GLint first, GLsizei count )
typedef PFNGLDRAWARRAYSPROCDart = void Function(int mode, int first, int count);
typedef PFNGLDRAWARRAYSPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count);

// typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) ( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices )
typedef PFNGLDRAWELEMENTSPROCDart =
    void Function(int mode, int count, int type, Pointer<NativeType> indices);
typedef PFNGLDRAWELEMENTSPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
    );

// typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC) ( GLenum format, GLsizei stride, const GLvoid *pointer )
typedef PFNGLINTERLEAVEDARRAYSPROCDart =
    void Function(int format, int stride, Pointer<NativeType> pointer);
typedef PFNGLINTERLEAVEDARRAYSPROC =
    Void Function(Uint32 format, Uint32 stride, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLSHADEMODELPROC) ( GLenum mode )
typedef PFNGLSHADEMODELPROCDart = void Function(int mode);
typedef PFNGLSHADEMODELPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLLIGHTFPROC) ( GLenum light, GLenum pname, GLfloat param )
typedef PFNGLLIGHTFPROCDart = void Function(int light, int pname, double param);
typedef PFNGLLIGHTFPROC =
    Void Function(Uint32 light, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLLIGHTIPROC) ( GLenum light, GLenum pname, GLint param )
typedef PFNGLLIGHTIPROCDart = void Function(int light, int pname, int param);
typedef PFNGLLIGHTIPROC =
    Void Function(Uint32 light, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLLIGHTFVPROC) ( GLenum light, GLenum pname, const GLfloat *params )
typedef PFNGLLIGHTFVPROCDart =
    void Function(int light, int pname, Pointer<Float> params);
typedef PFNGLLIGHTFVPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLLIGHTIVPROC) ( GLenum light, GLenum pname, const GLint *params )
typedef PFNGLLIGHTIVPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLLIGHTIVPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETLIGHTFVPROC) ( GLenum light, GLenum pname, GLfloat *params )
typedef PFNGLGETLIGHTFVPROCDart =
    void Function(int light, int pname, Pointer<Float> params);
typedef PFNGLGETLIGHTFVPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETLIGHTIVPROC) ( GLenum light, GLenum pname, GLint *params )
typedef PFNGLGETLIGHTIVPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLGETLIGHTIVPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLLIGHTMODELFPROC) ( GLenum pname, GLfloat param )
typedef PFNGLLIGHTMODELFPROCDart = void Function(int pname, double param);
typedef PFNGLLIGHTMODELFPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLLIGHTMODELIPROC) ( GLenum pname, GLint param )
typedef PFNGLLIGHTMODELIPROCDart = void Function(int pname, int param);
typedef PFNGLLIGHTMODELIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC) ( GLenum pname, const GLfloat *params )
typedef PFNGLLIGHTMODELFVPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLLIGHTMODELFVPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC) ( GLenum pname, const GLint *params )
typedef PFNGLLIGHTMODELIVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLLIGHTMODELIVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLMATERIALFPROC) ( GLenum face, GLenum pname, GLfloat param )
typedef PFNGLMATERIALFPROCDart =
    void Function(int face, int pname, double param);
typedef PFNGLMATERIALFPROC =
    Void Function(Uint32 face, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLMATERIALIPROC) ( GLenum face, GLenum pname, GLint param )
typedef PFNGLMATERIALIPROCDart = void Function(int face, int pname, int param);
typedef PFNGLMATERIALIPROC =
    Void Function(Uint32 face, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMATERIALFVPROC) ( GLenum face, GLenum pname, const GLfloat *params )
typedef PFNGLMATERIALFVPROCDart =
    void Function(int face, int pname, Pointer<Float> params);
typedef PFNGLMATERIALFVPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLMATERIALIVPROC) ( GLenum face, GLenum pname, const GLint *params )
typedef PFNGLMATERIALIVPROCDart =
    void Function(int face, int pname, Pointer<Int32> params);
typedef PFNGLMATERIALIVPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETMATERIALFVPROC) ( GLenum face, GLenum pname, GLfloat *params )
typedef PFNGLGETMATERIALFVPROCDart =
    void Function(int face, int pname, Pointer<Float> params);
typedef PFNGLGETMATERIALFVPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETMATERIALIVPROC) ( GLenum face, GLenum pname, GLint *params )
typedef PFNGLGETMATERIALIVPROCDart =
    void Function(int face, int pname, Pointer<Int32> params);
typedef PFNGLGETMATERIALIVPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOLORMATERIALPROC) ( GLenum face, GLenum mode )
typedef PFNGLCOLORMATERIALPROCDart = void Function(int face, int mode);
typedef PFNGLCOLORMATERIALPROC = Void Function(Uint32 face, Uint32 mode);

// typedef void (APIENTRYP PFNGLPIXELZOOMPROC) ( GLfloat xfactor, GLfloat yfactor )
typedef PFNGLPIXELZOOMPROCDart = void Function(double xfactor, double yfactor);
typedef PFNGLPIXELZOOMPROC = Void Function(Float xfactor, Float yfactor);

// typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) ( GLenum pname, GLfloat param )
typedef PFNGLPIXELSTOREFPROCDart = void Function(int pname, double param);
typedef PFNGLPIXELSTOREFPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) ( GLenum pname, GLint param )
typedef PFNGLPIXELSTOREIPROCDart = void Function(int pname, int param);
typedef PFNGLPIXELSTOREIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC) ( GLenum pname, GLfloat param )
typedef PFNGLPIXELTRANSFERFPROCDart = void Function(int pname, double param);
typedef PFNGLPIXELTRANSFERFPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC) ( GLenum pname, GLint param )
typedef PFNGLPIXELTRANSFERIPROCDart = void Function(int pname, int param);
typedef PFNGLPIXELTRANSFERIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELMAPFVPROC) ( GLenum map, GLsizei mapsize, const GLfloat *values )
typedef PFNGLPIXELMAPFVPROCDart =
    void Function(int map, int mapsize, Pointer<Float> values);
typedef PFNGLPIXELMAPFVPROC =
    Void Function(Uint32 map, Uint32 mapsize, Pointer<Float> values);

// typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC) ( GLenum map, GLsizei mapsize, const GLuint *values )
typedef PFNGLPIXELMAPUIVPROCDart =
    void Function(int map, int mapsize, Pointer<Uint32> values);
typedef PFNGLPIXELMAPUIVPROC =
    Void Function(Uint32 map, Uint32 mapsize, Pointer<Uint32> values);

// typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC) ( GLenum map, GLsizei mapsize, const GLushort *values )
typedef PFNGLPIXELMAPUSVPROCDart =
    void Function(int map, int mapsize, Pointer<Uint16> values);
typedef PFNGLPIXELMAPUSVPROC =
    Void Function(Uint32 map, Uint32 mapsize, Pointer<Uint16> values);

// typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC) ( GLenum map, GLfloat *values )
typedef PFNGLGETPIXELMAPFVPROCDart =
    void Function(int map, Pointer<Float> values);
typedef PFNGLGETPIXELMAPFVPROC =
    Void Function(Uint32 map, Pointer<Float> values);

// typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC) ( GLenum map, GLuint *values )
typedef PFNGLGETPIXELMAPUIVPROCDart =
    void Function(int map, Pointer<Uint32> values);
typedef PFNGLGETPIXELMAPUIVPROC =
    Void Function(Uint32 map, Pointer<Uint32> values);

// typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC) ( GLenum map, GLushort *values )
typedef PFNGLGETPIXELMAPUSVPROCDart =
    void Function(int map, Pointer<Uint16> values);
typedef PFNGLGETPIXELMAPUSVPROC =
    Void Function(Uint32 map, Pointer<Uint16> values);

// typedef void (APIENTRYP PFNGLBITMAPPROC) ( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap )
typedef PFNGLBITMAPPROCDart =
    void Function(
      int width,
      int height,
      double xorig,
      double yorig,
      double xmove,
      double ymove,
      Pointer<Uint8> bitmap,
    );
typedef PFNGLBITMAPPROC =
    Void Function(
      Uint32 width,
      Uint32 height,
      Float xorig,
      Float yorig,
      Float xmove,
      Float ymove,
      Pointer<Uint8> bitmap,
    );

// typedef void (APIENTRYP PFNGLREADPIXELSPROC) ( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels )
typedef PFNGLREADPIXELSPROCDart =
    void Function(
      int x,
      int y,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLREADPIXELSPROC =
    Void Function(
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLDRAWPIXELSPROC) ( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLDRAWPIXELSPROCDart =
    void Function(
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLDRAWPIXELSPROC =
    Void Function(
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYPIXELSPROC) ( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type )
typedef PFNGLCOPYPIXELSPROCDart =
    void Function(int x, int y, int width, int height, int type);
typedef PFNGLCOPYPIXELSPROC =
    Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height, Uint32 type);

// typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) ( GLenum func, GLint ref, GLuint mask )
typedef PFNGLSTENCILFUNCPROCDart = void Function(int func, int ref, int mask);
typedef PFNGLSTENCILFUNCPROC =
    Void Function(Uint32 func, Int32 ref, Uint32 mask);

// typedef void (APIENTRYP PFNGLSTENCILMASKPROC) ( GLuint mask )
typedef PFNGLSTENCILMASKPROCDart = void Function(int mask);
typedef PFNGLSTENCILMASKPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLSTENCILOPPROC) ( GLenum fail, GLenum zfail, GLenum zpass )
typedef PFNGLSTENCILOPPROCDart = void Function(int fail, int zfail, int zpass);
typedef PFNGLSTENCILOPPROC =
    Void Function(Uint32 fail, Uint32 zfail, Uint32 zpass);

// typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) ( GLint s )
typedef PFNGLCLEARSTENCILPROCDart = void Function(int s);
typedef PFNGLCLEARSTENCILPROC = Void Function(Int32 s);

// typedef void (APIENTRYP PFNGLTEXGENDPROC) ( GLenum coord, GLenum pname, GLdouble param )
typedef PFNGLTEXGENDPROCDart =
    void Function(int coord, int pname, double param);
typedef PFNGLTEXGENDPROC =
    Void Function(Uint32 coord, Uint32 pname, Double param);

// typedef void (APIENTRYP PFNGLTEXGENFPROC) ( GLenum coord, GLenum pname, GLfloat param )
typedef PFNGLTEXGENFPROCDart =
    void Function(int coord, int pname, double param);
typedef PFNGLTEXGENFPROC =
    Void Function(Uint32 coord, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLTEXGENIPROC) ( GLenum coord, GLenum pname, GLint param )
typedef PFNGLTEXGENIPROCDart = void Function(int coord, int pname, int param);
typedef PFNGLTEXGENIPROC =
    Void Function(Uint32 coord, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXGENDVPROC) ( GLenum coord, GLenum pname, const GLdouble *params )
typedef PFNGLTEXGENDVPROCDart =
    void Function(int coord, int pname, Pointer<Double> params);
typedef PFNGLTEXGENDVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLTEXGENFVPROC) ( GLenum coord, GLenum pname, const GLfloat *params )
typedef PFNGLTEXGENFVPROCDart =
    void Function(int coord, int pname, Pointer<Float> params);
typedef PFNGLTEXGENFVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLTEXGENIVPROC) ( GLenum coord, GLenum pname, const GLint *params )
typedef PFNGLTEXGENIVPROCDart =
    void Function(int coord, int pname, Pointer<Int32> params);
typedef PFNGLTEXGENIVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXGENDVPROC) ( GLenum coord, GLenum pname, GLdouble *params )
typedef PFNGLGETTEXGENDVPROCDart =
    void Function(int coord, int pname, Pointer<Double> params);
typedef PFNGLGETTEXGENDVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETTEXGENFVPROC) ( GLenum coord, GLenum pname, GLfloat *params )
typedef PFNGLGETTEXGENFVPROCDart =
    void Function(int coord, int pname, Pointer<Float> params);
typedef PFNGLGETTEXGENFVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETTEXGENIVPROC) ( GLenum coord, GLenum pname, GLint *params )
typedef PFNGLGETTEXGENIVPROCDart =
    void Function(int coord, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXGENIVPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXENVFPROC) ( GLenum target, GLenum pname, GLfloat param )
typedef PFNGLTEXENVFPROCDart =
    void Function(int target, int pname, double param);
typedef PFNGLTEXENVFPROC =
    Void Function(Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLTEXENVIPROC) ( GLenum target, GLenum pname, GLint param )
typedef PFNGLTEXENVIPROCDart = void Function(int target, int pname, int param);
typedef PFNGLTEXENVIPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXENVFVPROC) ( GLenum target, GLenum pname, const GLfloat *params )
typedef PFNGLTEXENVFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLTEXENVFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLTEXENVIVPROC) ( GLenum target, GLenum pname, const GLint *params )
typedef PFNGLTEXENVIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXENVIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXENVFVPROC) ( GLenum target, GLenum pname, GLfloat *params )
typedef PFNGLGETTEXENVFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETTEXENVFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETTEXENVIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETTEXENVIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXENVIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) ( GLenum target, GLenum pname, GLfloat param )
typedef PFNGLTEXPARAMETERFPROCDart =
    void Function(int target, int pname, double param);
typedef PFNGLTEXPARAMETERFPROC =
    Void Function(Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) ( GLenum target, GLenum pname, GLint param )
typedef PFNGLTEXPARAMETERIPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLTEXPARAMETERIPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) ( GLenum target, GLenum pname, const GLfloat *params )
typedef PFNGLTEXPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLTEXPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) ( GLenum target, GLenum pname, const GLint *params )
typedef PFNGLTEXPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) ( GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETTEXPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETTEXPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETTEXPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) ( GLenum target, GLint level, GLenum pname, GLfloat *params )
typedef PFNGLGETTEXLEVELPARAMETERFVPROCDart =
    void Function(int target, int level, int pname, Pointer<Float> params);
typedef PFNGLGETTEXLEVELPARAMETERFVPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) ( GLenum target, GLint level, GLenum pname, GLint *params )
typedef PFNGLGETTEXLEVELPARAMETERIVPROCDart =
    void Function(int target, int level, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXLEVELPARAMETERIVPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) ( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLTEXIMAGE1DPROCDart =
    void Function(
      int target,
      int level,
      int internalFormat,
      int width,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 internalFormat,
      Uint32 width,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) ( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLTEXIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int internalFormat,
      int width,
      int height,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) ( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels )
typedef PFNGLGETTEXIMAGEPROCDart =
    void Function(
      int target,
      int level,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETTEXIMAGEPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGENTEXTURESPROC) ( GLsizei n, GLuint *textures )
typedef PFNGLGENTEXTURESPROCDart =
    void Function(int n, Pointer<Uint32> textures);
typedef PFNGLGENTEXTURESPROC =
    Void Function(Uint32 n, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) ( GLsizei n, const GLuint *textures)
typedef PFNGLDELETETEXTURESPROCDart =
    void Function(int n, Pointer<Uint32> textures);
typedef PFNGLDELETETEXTURESPROC =
    Void Function(Uint32 n, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) ( GLenum target, GLuint texture )
typedef PFNGLBINDTEXTUREPROCDart = void Function(int target, int texture);
typedef PFNGLBINDTEXTUREPROC = Void Function(Uint32 target, Uint32 texture);

// typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC) ( GLsizei n, const GLuint *textures, const GLclampf *priorities )
typedef PFNGLPRIORITIZETEXTURESPROCDart =
    void Function(int n, Pointer<Uint32> textures, Pointer<Float> priorities);
typedef PFNGLPRIORITIZETEXTURESPROC =
    Void Function(
      Uint32 n,
      Pointer<Uint32> textures,
      Pointer<Float> priorities,
    );

// typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC) ( GLsizei n, const GLuint *textures, GLboolean *residences )
typedef PFNGLARETEXTURESRESIDENTPROCDart =
    int Function(int n, Pointer<Uint32> textures, Pointer<Int32> residences);
typedef PFNGLARETEXTURESRESIDENTPROC =
    Int32 Function(
      Uint32 n,
      Pointer<Uint32> textures,
      Pointer<Int32> residences,
    );

// typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) ( GLuint texture )
typedef PFNGLISTEXTUREPROCDart = int Function(int texture);
typedef PFNGLISTEXTUREPROC = Int32 Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) ( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLTEXSUBIMAGE1DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLTEXSUBIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) ( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border )
typedef PFNGLCOPYTEXIMAGE1DPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int border,
    );
typedef PFNGLCOPYTEXIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) ( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border )
typedef PFNGLCOPYTEXIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
      int border,
    );
typedef PFNGLCOPYTEXIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) ( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width )
typedef PFNGLCOPYTEXSUBIMAGE1DPROCDart =
    void Function(int target, int level, int xoffset, int x, int y, int width);
typedef PFNGLCOPYTEXSUBIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height )
typedef PFNGLCOPYTEXSUBIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXSUBIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLMAP1DPROC) ( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points )
typedef PFNGLMAP1DPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int stride,
      int order,
      Pointer<Double> points,
    );
typedef PFNGLMAP1DPROC =
    Void Function(
      Uint32 target,
      Double u1,
      Double u2,
      Int32 stride,
      Int32 order,
      Pointer<Double> points,
    );

// typedef void (APIENTRYP PFNGLMAP1FPROC) ( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points )
typedef PFNGLMAP1FPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int stride,
      int order,
      Pointer<Float> points,
    );
typedef PFNGLMAP1FPROC =
    Void Function(
      Uint32 target,
      Float u1,
      Float u2,
      Int32 stride,
      Int32 order,
      Pointer<Float> points,
    );

// typedef void (APIENTRYP PFNGLMAP2DPROC) ( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points )
typedef PFNGLMAP2DPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      Pointer<Double> points,
    );
typedef PFNGLMAP2DPROC =
    Void Function(
      Uint32 target,
      Double u1,
      Double u2,
      Int32 ustride,
      Int32 uorder,
      Double v1,
      Double v2,
      Int32 vstride,
      Int32 vorder,
      Pointer<Double> points,
    );

// typedef void (APIENTRYP PFNGLMAP2FPROC) ( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points )
typedef PFNGLMAP2FPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      Pointer<Float> points,
    );
typedef PFNGLMAP2FPROC =
    Void Function(
      Uint32 target,
      Float u1,
      Float u2,
      Int32 ustride,
      Int32 uorder,
      Float v1,
      Float v2,
      Int32 vstride,
      Int32 vorder,
      Pointer<Float> points,
    );

// typedef void (APIENTRYP PFNGLGETMAPDVPROC) ( GLenum target, GLenum query, GLdouble *v )
typedef PFNGLGETMAPDVPROCDart =
    void Function(int target, int query, Pointer<Double> v);
typedef PFNGLGETMAPDVPROC =
    Void Function(Uint32 target, Uint32 query, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLGETMAPFVPROC) ( GLenum target, GLenum query, GLfloat *v )
typedef PFNGLGETMAPFVPROCDart =
    void Function(int target, int query, Pointer<Float> v);
typedef PFNGLGETMAPFVPROC =
    Void Function(Uint32 target, Uint32 query, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLGETMAPIVPROC) ( GLenum target, GLenum query, GLint *v )
typedef PFNGLGETMAPIVPROCDart =
    void Function(int target, int query, Pointer<Int32> v);
typedef PFNGLGETMAPIVPROC =
    Void Function(Uint32 target, Uint32 query, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLEVALCOORD1DPROC) ( GLdouble u )
typedef PFNGLEVALCOORD1DPROCDart = void Function(double u);
typedef PFNGLEVALCOORD1DPROC = Void Function(Double u);

// typedef void (APIENTRYP PFNGLEVALCOORD1FPROC) ( GLfloat u )
typedef PFNGLEVALCOORD1FPROCDart = void Function(double u);
typedef PFNGLEVALCOORD1FPROC = Void Function(Float u);

// typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC) ( const GLdouble *u )
typedef PFNGLEVALCOORD1DVPROCDart = void Function(Pointer<Double> u);
typedef PFNGLEVALCOORD1DVPROC = Void Function(Pointer<Double> u);

// typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC) ( const GLfloat *u )
typedef PFNGLEVALCOORD1FVPROCDart = void Function(Pointer<Float> u);
typedef PFNGLEVALCOORD1FVPROC = Void Function(Pointer<Float> u);

// typedef void (APIENTRYP PFNGLEVALCOORD2DPROC) ( GLdouble u, GLdouble v )
typedef PFNGLEVALCOORD2DPROCDart = void Function(double u, double v);
typedef PFNGLEVALCOORD2DPROC = Void Function(Double u, Double v);

// typedef void (APIENTRYP PFNGLEVALCOORD2FPROC) ( GLfloat u, GLfloat v )
typedef PFNGLEVALCOORD2FPROCDart = void Function(double u, double v);
typedef PFNGLEVALCOORD2FPROC = Void Function(Float u, Float v);

// typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC) ( const GLdouble *u )
typedef PFNGLEVALCOORD2DVPROCDart = void Function(Pointer<Double> u);
typedef PFNGLEVALCOORD2DVPROC = Void Function(Pointer<Double> u);

// typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC) ( const GLfloat *u )
typedef PFNGLEVALCOORD2FVPROCDart = void Function(Pointer<Float> u);
typedef PFNGLEVALCOORD2FVPROC = Void Function(Pointer<Float> u);

// typedef void (APIENTRYP PFNGLMAPGRID1DPROC) ( GLint un, GLdouble u1, GLdouble u2 )
typedef PFNGLMAPGRID1DPROCDart = void Function(int un, double u1, double u2);
typedef PFNGLMAPGRID1DPROC = Void Function(Int32 un, Double u1, Double u2);

// typedef void (APIENTRYP PFNGLMAPGRID1FPROC) ( GLint un, GLfloat u1, GLfloat u2 )
typedef PFNGLMAPGRID1FPROCDart = void Function(int un, double u1, double u2);
typedef PFNGLMAPGRID1FPROC = Void Function(Int32 un, Float u1, Float u2);

// typedef void (APIENTRYP PFNGLMAPGRID2DPROC) ( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 )
typedef PFNGLMAPGRID2DPROCDart =
    void Function(int un, double u1, double u2, int vn, double v1, double v2);
typedef PFNGLMAPGRID2DPROC =
    Void Function(
      Int32 un,
      Double u1,
      Double u2,
      Int32 vn,
      Double v1,
      Double v2,
    );

// typedef void (APIENTRYP PFNGLMAPGRID2FPROC) ( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 )
typedef PFNGLMAPGRID2FPROCDart =
    void Function(int un, double u1, double u2, int vn, double v1, double v2);
typedef PFNGLMAPGRID2FPROC =
    Void Function(Int32 un, Float u1, Float u2, Int32 vn, Float v1, Float v2);

// typedef void (APIENTRYP PFNGLEVALPOINT1PROC) ( GLint i )
typedef PFNGLEVALPOINT1PROCDart = void Function(int i);
typedef PFNGLEVALPOINT1PROC = Void Function(Int32 i);

// typedef void (APIENTRYP PFNGLEVALPOINT2PROC) ( GLint i, GLint j )
typedef PFNGLEVALPOINT2PROCDart = void Function(int i, int j);
typedef PFNGLEVALPOINT2PROC = Void Function(Int32 i, Int32 j);

// typedef void (APIENTRYP PFNGLEVALMESH1PROC) ( GLenum mode, GLint i1, GLint i2 )
typedef PFNGLEVALMESH1PROCDart = void Function(int mode, int i1, int i2);
typedef PFNGLEVALMESH1PROC = Void Function(Uint32 mode, Int32 i1, Int32 i2);

// typedef void (APIENTRYP PFNGLEVALMESH2PROC) ( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )
typedef PFNGLEVALMESH2PROCDart =
    void Function(int mode, int i1, int i2, int j1, int j2);
typedef PFNGLEVALMESH2PROC =
    Void Function(Uint32 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2);

// typedef void (APIENTRYP PFNGLFOGFPROC) ( GLenum pname, GLfloat param )
typedef PFNGLFOGFPROCDart = void Function(int pname, double param);
typedef PFNGLFOGFPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLFOGIPROC) ( GLenum pname, GLint param )
typedef PFNGLFOGIPROCDart = void Function(int pname, int param);
typedef PFNGLFOGIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFOGFVPROC) ( GLenum pname, const GLfloat *params )
typedef PFNGLFOGFVPROCDart = void Function(int pname, Pointer<Float> params);
typedef PFNGLFOGFVPROC = Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLFOGIVPROC) ( GLenum pname, const GLint *params )
typedef PFNGLFOGIVPROCDart = void Function(int pname, Pointer<Int32> params);
typedef PFNGLFOGIVPROC = Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC) ( GLsizei size, GLenum type, GLfloat *buffer )
typedef PFNGLFEEDBACKBUFFERPROCDart =
    void Function(int size, int type, Pointer<Float> buffer);
typedef PFNGLFEEDBACKBUFFERPROC =
    Void Function(Uint32 size, Uint32 type, Pointer<Float> buffer);

// typedef void (APIENTRYP PFNGLPASSTHROUGHPROC) ( GLfloat token )
typedef PFNGLPASSTHROUGHPROCDart = void Function(double token);
typedef PFNGLPASSTHROUGHPROC = Void Function(Float token);

// typedef void (APIENTRYP PFNGLSELECTBUFFERPROC) ( GLsizei size, GLuint *buffer )
typedef PFNGLSELECTBUFFERPROCDart =
    void Function(int size, Pointer<Uint32> buffer);
typedef PFNGLSELECTBUFFERPROC =
    Void Function(Uint32 size, Pointer<Uint32> buffer);

// typedef void (APIENTRYP PFNGLINITNAMESPROC) ( void )
typedef PFNGLINITNAMESPROCDart = void Function();
typedef PFNGLINITNAMESPROC = Void Function();

// typedef void (APIENTRYP PFNGLLOADNAMEPROC) ( GLuint name )
typedef PFNGLLOADNAMEPROCDart = void Function(int name);
typedef PFNGLLOADNAMEPROC = Void Function(Uint32 name);

// typedef void (APIENTRYP PFNGLPUSHNAMEPROC) ( GLuint name )
typedef PFNGLPUSHNAMEPROCDart = void Function(int name);
typedef PFNGLPUSHNAMEPROC = Void Function(Uint32 name);

// typedef void (APIENTRYP PFNGLPOPNAMEPROC) ( void )
typedef PFNGLPOPNAMEPROCDart = void Function();
typedef PFNGLPOPNAMEPROC = Void Function();

// typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) ( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices )
typedef PFNGLDRAWRANGEELEMENTSPROCDart =
    void Function(
      int mode,
      int start,
      int end,
      int count,
      int type,
      Pointer<NativeType> indices,
    );
typedef PFNGLDRAWRANGEELEMENTSPROC =
    Void Function(
      Uint32 mode,
      Uint32 start,
      Uint32 end,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) ( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
typedef PFNGLTEXIMAGE3DPROCDart =
    void Function(
      int target,
      int level,
      int internalFormat,
      int width,
      int height,
      int depth,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXIMAGE3DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
typedef PFNGLTEXSUBIMAGE3DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE3DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height )
typedef PFNGLCOPYTEXSUBIMAGE3DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXSUBIMAGE3DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLCOLORTABLEPROC) ( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table )
typedef PFNGLCOLORTABLEPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int format,
      int type,
      Pointer<NativeType> table,
    );
typedef PFNGLCOLORTABLEPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) ( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data )
typedef PFNGLCOLORSUBTABLEPROCDart =
    void Function(
      int target,
      int start,
      int count,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCOLORSUBTABLEPROC =
    Void Function(
      Uint32 target,
      Uint32 start,
      Uint32 count,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLCOLORTABLEPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLCOLORTABLEPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLCOLORTABLEPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLCOLORTABLEPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) ( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width )
typedef PFNGLCOPYCOLORSUBTABLEPROCDart =
    void Function(int target, int start, int x, int y, int width);
typedef PFNGLCOPYCOLORSUBTABLEPROC =
    Void Function(Uint32 target, Uint32 start, Int32 x, Int32 y, Uint32 width);

// typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) ( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
typedef PFNGLCOPYCOLORTABLEPROCDart =
    void Function(int target, int internalformat, int x, int y, int width);
typedef PFNGLCOPYCOLORTABLEPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) ( GLenum target, GLenum format, GLenum type, GLvoid *table )
typedef PFNGLGETCOLORTABLEPROCDart =
    void Function(int target, int format, int type, Pointer<NativeType> table);
typedef PFNGLGETCOLORTABLEPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) ( GLenum target, GLenum pname, GLfloat *params )
typedef PFNGLGETCOLORTABLEPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETCOLORTABLEPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETCOLORTABLEPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCOLORTABLEPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) ( GLenum mode )
typedef PFNGLBLENDEQUATIONPROCDart = void Function(int mode);
typedef PFNGLBLENDEQUATIONPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLBLENDCOLORPROC) ( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
typedef PFNGLBLENDCOLORPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLBLENDCOLORPROC =
    Void Function(Float red, Float green, Float blue, Float alpha);

// typedef void (APIENTRYP PFNGLHISTOGRAMPROC) ( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink )
typedef PFNGLHISTOGRAMPROCDart =
    void Function(int target, int width, int internalformat, int sink);
typedef PFNGLHISTOGRAMPROC =
    Void Function(
      Uint32 target,
      Uint32 width,
      Uint32 internalformat,
      Int32 sink,
    );

// typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) ( GLenum target )
typedef PFNGLRESETHISTOGRAMPROCDart = void Function(int target);
typedef PFNGLRESETHISTOGRAMPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) ( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values )
typedef PFNGLGETHISTOGRAMPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      Pointer<NativeType> values,
    );
typedef PFNGLGETHISTOGRAMPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) ( GLenum target, GLenum pname, GLfloat *params )
typedef PFNGLGETHISTOGRAMPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETHISTOGRAMPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETHISTOGRAMPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETHISTOGRAMPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLMINMAXPROC) ( GLenum target, GLenum internalformat, GLboolean sink )
typedef PFNGLMINMAXPROCDart =
    void Function(int target, int internalformat, int sink);
typedef PFNGLMINMAXPROC =
    Void Function(Uint32 target, Uint32 internalformat, Int32 sink);

// typedef void (APIENTRYP PFNGLRESETMINMAXPROC) ( GLenum target )
typedef PFNGLRESETMINMAXPROCDart = void Function(int target);
typedef PFNGLRESETMINMAXPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETMINMAXPROC) ( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values )
typedef PFNGLGETMINMAXPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int types,
      Pointer<NativeType> values,
    );
typedef PFNGLGETMINMAXPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 types,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) ( GLenum target, GLenum pname, GLfloat *params )
typedef PFNGLGETMINMAXPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETMINMAXPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETMINMAXPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMINMAXPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) ( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image )
typedef PFNGLCONVOLUTIONFILTER1DPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int format,
      int type,
      Pointer<NativeType> image,
    );
typedef PFNGLCONVOLUTIONFILTER1DPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) ( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image )
typedef PFNGLCONVOLUTIONFILTER2DPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> image,
    );
typedef PFNGLCONVOLUTIONFILTER2DPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) ( GLenum target, GLenum pname, GLfloat params )
typedef PFNGLCONVOLUTIONPARAMETERFPROCDart =
    void Function(int target, int pname, double params);
typedef PFNGLCONVOLUTIONPARAMETERFPROC =
    Void Function(Uint32 target, Uint32 pname, Float params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) ( GLenum target, GLenum pname, const GLfloat *params )
typedef PFNGLCONVOLUTIONPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLCONVOLUTIONPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) ( GLenum target, GLenum pname, GLint params )
typedef PFNGLCONVOLUTIONPARAMETERIPROCDart =
    void Function(int target, int pname, int params);
typedef PFNGLCONVOLUTIONPARAMETERIPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) ( GLenum target, GLenum pname, const GLint *params )
typedef PFNGLCONVOLUTIONPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLCONVOLUTIONPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) ( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
typedef PFNGLCOPYCONVOLUTIONFILTER1DPROCDart =
    void Function(int target, int internalformat, int x, int y, int width);
typedef PFNGLCOPYCONVOLUTIONFILTER1DPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) ( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYCONVOLUTIONFILTER2DPROCDart =
    void Function(
      int target,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYCONVOLUTIONFILTER2DPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) ( GLenum target, GLenum format, GLenum type, GLvoid *image )
typedef PFNGLGETCONVOLUTIONFILTERPROCDart =
    void Function(int target, int format, int type, Pointer<NativeType> image);
typedef PFNGLGETCONVOLUTIONFILTERPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) ( GLenum target, GLenum pname, GLfloat *params )
typedef PFNGLGETCONVOLUTIONPARAMETERFVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETCONVOLUTIONPARAMETERFVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) ( GLenum target, GLenum pname, GLint *params )
typedef PFNGLGETCONVOLUTIONPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCONVOLUTIONPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) ( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column )
typedef PFNGLSEPARABLEFILTER2DPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
    );
typedef PFNGLSEPARABLEFILTER2DPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
    );

// typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) ( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span )
typedef PFNGLGETSEPARABLEFILTERPROCDart =
    void Function(
      int target,
      int format,
      int type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );
typedef PFNGLGETSEPARABLEFILTERPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );

// typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) ( GLenum texture )
typedef PFNGLACTIVETEXTUREPROCDart = void Function(int texture);
typedef PFNGLACTIVETEXTUREPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) ( GLenum texture )
typedef PFNGLCLIENTACTIVETEXTUREPROCDart = void Function(int texture);
typedef PFNGLCLIENTACTIVETEXTUREPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) ( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXIMAGE1DPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) ( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) ( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXIMAGE3DPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE3DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) ( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) ( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data )
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) ( GLenum target, GLint lod, GLvoid *img )
typedef PFNGLGETCOMPRESSEDTEXIMAGEPROCDart =
    void Function(int target, int lod, Pointer<NativeType> img);
typedef PFNGLGETCOMPRESSEDTEXIMAGEPROC =
    Void Function(Uint32 target, Int32 lod, Pointer<NativeType> img);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) ( GLenum target, GLdouble s )
typedef PFNGLMULTITEXCOORD1DPROCDart = void Function(int target, double s);
typedef PFNGLMULTITEXCOORD1DPROC = Void Function(Uint32 target, Double s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) ( GLenum target, const GLdouble *v )
typedef PFNGLMULTITEXCOORD1DVPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD1DVPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) ( GLenum target, GLfloat s )
typedef PFNGLMULTITEXCOORD1FPROCDart = void Function(int target, double s);
typedef PFNGLMULTITEXCOORD1FPROC = Void Function(Uint32 target, Float s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) ( GLenum target, const GLfloat *v )
typedef PFNGLMULTITEXCOORD1FVPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD1FVPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) ( GLenum target, GLint s )
typedef PFNGLMULTITEXCOORD1IPROCDart = void Function(int target, int s);
typedef PFNGLMULTITEXCOORD1IPROC = Void Function(Uint32 target, Int32 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) ( GLenum target, const GLint *v )
typedef PFNGLMULTITEXCOORD1IVPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD1IVPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) ( GLenum target, GLshort s )
typedef PFNGLMULTITEXCOORD1SPROCDart = void Function(int target, int s);
typedef PFNGLMULTITEXCOORD1SPROC = Void Function(Uint32 target, Int16 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) ( GLenum target, const GLshort *v )
typedef PFNGLMULTITEXCOORD1SVPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD1SVPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) ( GLenum target, GLdouble s, GLdouble t )
typedef PFNGLMULTITEXCOORD2DPROCDart =
    void Function(int target, double s, double t);
typedef PFNGLMULTITEXCOORD2DPROC =
    Void Function(Uint32 target, Double s, Double t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) ( GLenum target, const GLdouble *v )
typedef PFNGLMULTITEXCOORD2DVPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD2DVPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) ( GLenum target, GLfloat s, GLfloat t )
typedef PFNGLMULTITEXCOORD2FPROCDart =
    void Function(int target, double s, double t);
typedef PFNGLMULTITEXCOORD2FPROC =
    Void Function(Uint32 target, Float s, Float t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) ( GLenum target, const GLfloat *v )
typedef PFNGLMULTITEXCOORD2FVPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD2FVPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) ( GLenum target, GLint s, GLint t )
typedef PFNGLMULTITEXCOORD2IPROCDart = void Function(int target, int s, int t);
typedef PFNGLMULTITEXCOORD2IPROC =
    Void Function(Uint32 target, Int32 s, Int32 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) ( GLenum target, const GLint *v )
typedef PFNGLMULTITEXCOORD2IVPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD2IVPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) ( GLenum target, GLshort s, GLshort t )
typedef PFNGLMULTITEXCOORD2SPROCDart = void Function(int target, int s, int t);
typedef PFNGLMULTITEXCOORD2SPROC =
    Void Function(Uint32 target, Int16 s, Int16 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) ( GLenum target, const GLshort *v )
typedef PFNGLMULTITEXCOORD2SVPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD2SVPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) ( GLenum target, GLdouble s, GLdouble t, GLdouble r )
typedef PFNGLMULTITEXCOORD3DPROCDart =
    void Function(int target, double s, double t, double r);
typedef PFNGLMULTITEXCOORD3DPROC =
    Void Function(Uint32 target, Double s, Double t, Double r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) ( GLenum target, const GLdouble *v )
typedef PFNGLMULTITEXCOORD3DVPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD3DVPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) ( GLenum target, GLfloat s, GLfloat t, GLfloat r )
typedef PFNGLMULTITEXCOORD3FPROCDart =
    void Function(int target, double s, double t, double r);
typedef PFNGLMULTITEXCOORD3FPROC =
    Void Function(Uint32 target, Float s, Float t, Float r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) ( GLenum target, const GLfloat *v )
typedef PFNGLMULTITEXCOORD3FVPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD3FVPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) ( GLenum target, GLint s, GLint t, GLint r )
typedef PFNGLMULTITEXCOORD3IPROCDart =
    void Function(int target, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3IPROC =
    Void Function(Uint32 target, Int32 s, Int32 t, Int32 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) ( GLenum target, const GLint *v )
typedef PFNGLMULTITEXCOORD3IVPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD3IVPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) ( GLenum target, GLshort s, GLshort t, GLshort r )
typedef PFNGLMULTITEXCOORD3SPROCDart =
    void Function(int target, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3SPROC =
    Void Function(Uint32 target, Int16 s, Int16 t, Int16 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) ( GLenum target, const GLshort *v )
typedef PFNGLMULTITEXCOORD3SVPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD3SVPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) ( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q )
typedef PFNGLMULTITEXCOORD4DPROCDart =
    void Function(int target, double s, double t, double r, double q);
typedef PFNGLMULTITEXCOORD4DPROC =
    Void Function(Uint32 target, Double s, Double t, Double r, Double q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) ( GLenum target, const GLdouble *v )
typedef PFNGLMULTITEXCOORD4DVPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD4DVPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) ( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q )
typedef PFNGLMULTITEXCOORD4FPROCDart =
    void Function(int target, double s, double t, double r, double q);
typedef PFNGLMULTITEXCOORD4FPROC =
    Void Function(Uint32 target, Float s, Float t, Float r, Float q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) ( GLenum target, const GLfloat *v )
typedef PFNGLMULTITEXCOORD4FVPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD4FVPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) ( GLenum target, GLint s, GLint t, GLint r, GLint q )
typedef PFNGLMULTITEXCOORD4IPROCDart =
    void Function(int target, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4IPROC =
    Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) ( GLenum target, const GLint *v )
typedef PFNGLMULTITEXCOORD4IVPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD4IVPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) ( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q )
typedef PFNGLMULTITEXCOORD4SPROCDart =
    void Function(int target, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4SPROC =
    Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) ( GLenum target, const GLshort *v )
typedef PFNGLMULTITEXCOORD4SVPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD4SVPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) ( const GLdouble m[16] )
typedef PFNGLLOADTRANSPOSEMATRIXDPROCDart = void Function(double m);
typedef PFNGLLOADTRANSPOSEMATRIXDPROC = Void Function(Double m);

// typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) ( const GLfloat m[16] )
typedef PFNGLLOADTRANSPOSEMATRIXFPROCDart = void Function(double m);
typedef PFNGLLOADTRANSPOSEMATRIXFPROC = Void Function(Float m);

// typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) ( const GLdouble m[16] )
typedef PFNGLMULTTRANSPOSEMATRIXDPROCDart = void Function(double m);
typedef PFNGLMULTTRANSPOSEMATRIXDPROC = Void Function(Double m);

// typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) ( const GLfloat m[16] )
typedef PFNGLMULTTRANSPOSEMATRIXFPROCDart = void Function(double m);
typedef PFNGLMULTTRANSPOSEMATRIXFPROC = Void Function(Float m);

// typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) ( GLclampf value, GLboolean invert )
typedef PFNGLSAMPLECOVERAGEPROCDart = void Function(double value, int invert);
typedef PFNGLSAMPLECOVERAGEPROC = Void Function(Float value, Int32 invert);

// typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture)
typedef PFNGLACTIVETEXTUREARBPROCDart = void Function(int texture);
typedef PFNGLACTIVETEXTUREARBPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture)
typedef PFNGLCLIENTACTIVETEXTUREARBPROCDart = void Function(int texture);
typedef PFNGLCLIENTACTIVETEXTUREARBPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s)
typedef PFNGLMULTITEXCOORD1DARBPROCDart = void Function(int target, double s);
typedef PFNGLMULTITEXCOORD1DARBPROC = Void Function(Uint32 target, Double s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v)
typedef PFNGLMULTITEXCOORD1DVARBPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD1DVARBPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s)
typedef PFNGLMULTITEXCOORD1FARBPROCDart = void Function(int target, double s);
typedef PFNGLMULTITEXCOORD1FARBPROC = Void Function(Uint32 target, Float s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v)
typedef PFNGLMULTITEXCOORD1FVARBPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD1FVARBPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s)
typedef PFNGLMULTITEXCOORD1IARBPROCDart = void Function(int target, int s);
typedef PFNGLMULTITEXCOORD1IARBPROC = Void Function(Uint32 target, Int32 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v)
typedef PFNGLMULTITEXCOORD1IVARBPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD1IVARBPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s)
typedef PFNGLMULTITEXCOORD1SARBPROCDart = void Function(int target, int s);
typedef PFNGLMULTITEXCOORD1SARBPROC = Void Function(Uint32 target, Int16 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v)
typedef PFNGLMULTITEXCOORD1SVARBPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD1SVARBPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t)
typedef PFNGLMULTITEXCOORD2DARBPROCDart =
    void Function(int target, double s, double t);
typedef PFNGLMULTITEXCOORD2DARBPROC =
    Void Function(Uint32 target, Double s, Double t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v)
typedef PFNGLMULTITEXCOORD2DVARBPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD2DVARBPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t)
typedef PFNGLMULTITEXCOORD2FARBPROCDart =
    void Function(int target, double s, double t);
typedef PFNGLMULTITEXCOORD2FARBPROC =
    Void Function(Uint32 target, Float s, Float t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v)
typedef PFNGLMULTITEXCOORD2FVARBPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD2FVARBPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t)
typedef PFNGLMULTITEXCOORD2IARBPROCDart =
    void Function(int target, int s, int t);
typedef PFNGLMULTITEXCOORD2IARBPROC =
    Void Function(Uint32 target, Int32 s, Int32 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v)
typedef PFNGLMULTITEXCOORD2IVARBPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD2IVARBPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t)
typedef PFNGLMULTITEXCOORD2SARBPROCDart =
    void Function(int target, int s, int t);
typedef PFNGLMULTITEXCOORD2SARBPROC =
    Void Function(Uint32 target, Int16 s, Int16 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v)
typedef PFNGLMULTITEXCOORD2SVARBPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD2SVARBPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)
typedef PFNGLMULTITEXCOORD3DARBPROCDart =
    void Function(int target, double s, double t, double r);
typedef PFNGLMULTITEXCOORD3DARBPROC =
    Void Function(Uint32 target, Double s, Double t, Double r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v)
typedef PFNGLMULTITEXCOORD3DVARBPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD3DVARBPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)
typedef PFNGLMULTITEXCOORD3FARBPROCDart =
    void Function(int target, double s, double t, double r);
typedef PFNGLMULTITEXCOORD3FARBPROC =
    Void Function(Uint32 target, Float s, Float t, Float r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v)
typedef PFNGLMULTITEXCOORD3FVARBPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD3FVARBPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r)
typedef PFNGLMULTITEXCOORD3IARBPROCDart =
    void Function(int target, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3IARBPROC =
    Void Function(Uint32 target, Int32 s, Int32 t, Int32 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v)
typedef PFNGLMULTITEXCOORD3IVARBPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD3IVARBPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r)
typedef PFNGLMULTITEXCOORD3SARBPROCDart =
    void Function(int target, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3SARBPROC =
    Void Function(Uint32 target, Int16 s, Int16 t, Int16 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v)
typedef PFNGLMULTITEXCOORD3SVARBPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD3SVARBPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
typedef PFNGLMULTITEXCOORD4DARBPROCDart =
    void Function(int target, double s, double t, double r, double q);
typedef PFNGLMULTITEXCOORD4DARBPROC =
    Void Function(Uint32 target, Double s, Double t, Double r, Double q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v)
typedef PFNGLMULTITEXCOORD4DVARBPROCDart =
    void Function(int target, Pointer<Double> v);
typedef PFNGLMULTITEXCOORD4DVARBPROC =
    Void Function(Uint32 target, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
typedef PFNGLMULTITEXCOORD4FARBPROCDart =
    void Function(int target, double s, double t, double r, double q);
typedef PFNGLMULTITEXCOORD4FARBPROC =
    Void Function(Uint32 target, Float s, Float t, Float r, Float q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v)
typedef PFNGLMULTITEXCOORD4FVARBPROCDart =
    void Function(int target, Pointer<Float> v);
typedef PFNGLMULTITEXCOORD4FVARBPROC =
    Void Function(Uint32 target, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)
typedef PFNGLMULTITEXCOORD4IARBPROCDart =
    void Function(int target, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4IARBPROC =
    Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v)
typedef PFNGLMULTITEXCOORD4IVARBPROCDart =
    void Function(int target, Pointer<Int32> v);
typedef PFNGLMULTITEXCOORD4IVARBPROC =
    Void Function(Uint32 target, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
typedef PFNGLMULTITEXCOORD4SARBPROCDart =
    void Function(int target, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4SARBPROC =
    Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v)
typedef PFNGLMULTITEXCOORD4SVARBPROCDart =
    void Function(int target, Pointer<Int16> v);
typedef PFNGLMULTITEXCOORD4SVARBPROC =
    Void Function(Uint32 target, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
typedef PFNGLBLENDFUNCSEPARATEPROCDart =
    void Function(
      int sfactorRgb,
      int dfactorRgb,
      int sfactorAlpha,
      int dfactorAlpha,
    );
typedef PFNGLBLENDFUNCSEPARATEPROC =
    Void Function(
      Uint32 sfactorRgb,
      Uint32 dfactorRgb,
      Uint32 sfactorAlpha,
      Uint32 dfactorAlpha,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)
typedef PFNGLMULTIDRAWARRAYSPROCDart =
    void Function(
      int mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      int drawcount,
    );
typedef PFNGLMULTIDRAWARRAYSPROC =
    Void Function(
      Uint32 mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      Uint32 drawcount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)
typedef PFNGLMULTIDRAWELEMENTSPROCDart =
    void Function(
      int mode,
      Pointer<Uint32> count,
      int type,
      Pointer<Pointer<NativeType>> indices,
      int drawcount,
    );
typedef PFNGLMULTIDRAWELEMENTSPROC =
    Void Function(
      Uint32 mode,
      Pointer<Uint32> count,
      Uint32 type,
      Pointer<Pointer<NativeType>> indices,
      Uint32 drawcount,
    );

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param)
typedef PFNGLPOINTPARAMETERFPROCDart = void Function(int pname, double param);
typedef PFNGLPOINTPARAMETERFPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLPOINTPARAMETERFVPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLPOINTPARAMETERFVPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param)
typedef PFNGLPOINTPARAMETERIPROCDart = void Function(int pname, int param);
typedef PFNGLPOINTPARAMETERIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params)
typedef PFNGLPOINTPARAMETERIVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLPOINTPARAMETERIVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord)
typedef PFNGLFOGCOORDFPROCDart = void Function(double coord);
typedef PFNGLFOGCOORDFPROC = Void Function(Float coord);

// typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord)
typedef PFNGLFOGCOORDFVPROCDart = void Function(Pointer<Float> coord);
typedef PFNGLFOGCOORDFVPROC = Void Function(Pointer<Float> coord);

// typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord)
typedef PFNGLFOGCOORDDPROCDart = void Function(double coord);
typedef PFNGLFOGCOORDDPROC = Void Function(Double coord);

// typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord)
typedef PFNGLFOGCOORDDVPROCDart = void Function(Pointer<Double> coord);
typedef PFNGLFOGCOORDDVPROC = Void Function(Pointer<Double> coord);

// typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLFOGCOORDPOINTERPROCDart =
    void Function(int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLFOGCOORDPOINTERPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue)
typedef PFNGLSECONDARYCOLOR3BPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3BPROC =
    Void Function(Int8 red, Int8 green, Int8 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v)
typedef PFNGLSECONDARYCOLOR3BVPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLSECONDARYCOLOR3BVPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue)
typedef PFNGLSECONDARYCOLOR3DPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLSECONDARYCOLOR3DPROC =
    Void Function(Double red, Double green, Double blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v)
typedef PFNGLSECONDARYCOLOR3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLSECONDARYCOLOR3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue)
typedef PFNGLSECONDARYCOLOR3FPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLSECONDARYCOLOR3FPROC =
    Void Function(Float red, Float green, Float blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v)
typedef PFNGLSECONDARYCOLOR3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLSECONDARYCOLOR3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue)
typedef PFNGLSECONDARYCOLOR3IPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3IPROC =
    Void Function(Int32 red, Int32 green, Int32 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v)
typedef PFNGLSECONDARYCOLOR3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLSECONDARYCOLOR3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue)
typedef PFNGLSECONDARYCOLOR3SPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3SPROC =
    Void Function(Int16 red, Int16 green, Int16 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v)
typedef PFNGLSECONDARYCOLOR3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLSECONDARYCOLOR3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue)
typedef PFNGLSECONDARYCOLOR3UBPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3UBPROC =
    Void Function(Uint8 red, Uint8 green, Uint8 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v)
typedef PFNGLSECONDARYCOLOR3UBVPROCDart = void Function(Pointer<Uint8> v);
typedef PFNGLSECONDARYCOLOR3UBVPROC = Void Function(Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue)
typedef PFNGLSECONDARYCOLOR3UIPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3UIPROC =
    Void Function(Uint32 red, Uint32 green, Uint32 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v)
typedef PFNGLSECONDARYCOLOR3UIVPROCDart = void Function(Pointer<Uint32> v);
typedef PFNGLSECONDARYCOLOR3UIVPROC = Void Function(Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue)
typedef PFNGLSECONDARYCOLOR3USPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3USPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v)
typedef PFNGLSECONDARYCOLOR3USVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLSECONDARYCOLOR3USVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLSECONDARYCOLORPOINTERPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLSECONDARYCOLORPOINTERPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y)
typedef PFNGLWINDOWPOS2DPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2DPROC = Void Function(Double x, Double y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS2DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS2DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y)
typedef PFNGLWINDOWPOS2FPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2FPROC = Void Function(Float x, Float y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS2FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS2FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y)
typedef PFNGLWINDOWPOS2IPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2IPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v)
typedef PFNGLWINDOWPOS2IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS2IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y)
typedef PFNGLWINDOWPOS2SPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2SPROC = Void Function(Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS2SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS2SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLWINDOWPOS3DPROCDart = void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3DPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS3DVPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS3DVPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLWINDOWPOS3FPROCDart = void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3FPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS3FVPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS3FVPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z)
typedef PFNGLWINDOWPOS3IPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3IPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v)
typedef PFNGLWINDOWPOS3IVPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS3IVPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z)
typedef PFNGLWINDOWPOS3SPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3SPROC = Void Function(Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS3SVPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS3SVPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids)
typedef PFNGLGENQUERIESPROCDart = void Function(int n, Pointer<Uint32> ids);
typedef PFNGLGENQUERIESPROC = Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids)
typedef PFNGLDELETEQUERIESPROCDart = void Function(int n, Pointer<Uint32> ids);
typedef PFNGLDELETEQUERIESPROC = Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id)
typedef PFNGLISQUERYPROCDart = int Function(int id);
typedef PFNGLISQUERYPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id)
typedef PFNGLBEGINQUERYPROCDart = void Function(int target, int id);
typedef PFNGLBEGINQUERYPROC = Void Function(Uint32 target, Uint32 id);

// typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target)
typedef PFNGLENDQUERYPROCDart = void Function(int target);
typedef PFNGLENDQUERYPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETQUERYIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETQUERYIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params)
typedef PFNGLGETQUERYOBJECTIVPROCDart =
    void Function(int id, int pname, Pointer<Int32> params);
typedef PFNGLGETQUERYOBJECTIVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params)
typedef PFNGLGETQUERYOBJECTUIVPROCDart =
    void Function(int id, int pname, Pointer<Uint32> params);
typedef PFNGLGETQUERYOBJECTUIVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer)
typedef PFNGLBINDBUFFERPROCDart = void Function(int target, int buffer);
typedef PFNGLBINDBUFFERPROC = Void Function(Uint32 target, Uint32 buffer);

// typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers)
typedef PFNGLDELETEBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> buffers);
typedef PFNGLDELETEBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> buffers);

// typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers)
typedef PFNGLGENBUFFERSPROCDart = void Function(int n, Pointer<Uint32> buffers);
typedef PFNGLGENBUFFERSPROC = Void Function(Uint32 n, Pointer<Uint32> buffers);

// typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer)
typedef PFNGLISBUFFERPROCDart = int Function(int buffer);
typedef PFNGLISBUFFERPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage)
typedef PFNGLBUFFERDATAPROCDart =
    void Function(
      int target,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int usage,
    );
typedef PFNGLBUFFERDATAPROC =
    Void Function(
      Uint32 target,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 usage,
    );

// typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
typedef PFNGLBUFFERSUBDATAPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLBUFFERSUBDATAPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data)
typedef PFNGLGETBUFFERSUBDATAPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLGETBUFFERSUBDATAPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void *(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access)
typedef PFNGLMAPBUFFERPROCDart =
    Pointer<NativeType> Function(int target, int access);
typedef PFNGLMAPBUFFERPROC =
    Pointer<NativeType> Function(Uint32 target, Uint32 access);

// typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target)
typedef PFNGLUNMAPBUFFERPROCDart = int Function(int target);
typedef PFNGLUNMAPBUFFERPROC = Int32 Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETBUFFERPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETBUFFERPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params)
typedef PFNGLGETBUFFERPOINTERVPROCDart =
    void Function(int target, int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETBUFFERPOINTERVPROC =
    Void Function(
      Uint32 target,
      Uint32 pname,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha)
typedef PFNGLBLENDEQUATIONSEPARATEPROCDart =
    void Function(int modeRgb, int modeAlpha);
typedef PFNGLBLENDEQUATIONSEPARATEPROC =
    Void Function(Uint32 modeRgb, Uint32 modeAlpha);

// typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs)
typedef PFNGLDRAWBUFFERSPROCDart = void Function(int n, Pointer<Uint32> bufs);
typedef PFNGLDRAWBUFFERSPROC = Void Function(Uint32 n, Pointer<Uint32> bufs);

// typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
typedef PFNGLSTENCILOPSEPARATEPROCDart =
    void Function(int face, int sfail, int dpfail, int dppass);
typedef PFNGLSTENCILOPSEPARATEPROC =
    Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass);

// typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask)
typedef PFNGLSTENCILFUNCSEPARATEPROCDart =
    void Function(int face, int func, int ref, int mask);
typedef PFNGLSTENCILFUNCSEPARATEPROC =
    Void Function(Uint32 face, Uint32 func, Int32 ref, Uint32 mask);

// typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask)
typedef PFNGLSTENCILMASKSEPARATEPROCDart = void Function(int face, int mask);
typedef PFNGLSTENCILMASKSEPARATEPROC = Void Function(Uint32 face, Uint32 mask);

// typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader)
typedef PFNGLATTACHSHADERPROCDart = void Function(int program, int shader);
typedef PFNGLATTACHSHADERPROC = Void Function(Uint32 program, Uint32 shader);

// typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name)
typedef PFNGLBINDATTRIBLOCATIONPROCDart =
    void Function(int program, int index, Pointer<Utf8> name);
typedef PFNGLBINDATTRIBLOCATIONPROC =
    Void Function(Uint32 program, Uint32 index, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader)
typedef PFNGLCOMPILESHADERPROCDart = void Function(int shader);
typedef PFNGLCOMPILESHADERPROC = Void Function(Uint32 shader);

// typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void)
typedef PFNGLCREATEPROGRAMPROCDart = int Function();
typedef PFNGLCREATEPROGRAMPROC = Uint32 Function();

// typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type)
typedef PFNGLCREATESHADERPROCDart = int Function(int type);
typedef PFNGLCREATESHADERPROC = Uint32 Function(Uint32 type);

// typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program)
typedef PFNGLDELETEPROGRAMPROCDart = void Function(int program);
typedef PFNGLDELETEPROGRAMPROC = Void Function(Uint32 program);

// typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader)
typedef PFNGLDELETESHADERPROCDart = void Function(int shader);
typedef PFNGLDELETESHADERPROC = Void Function(Uint32 shader);

// typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader)
typedef PFNGLDETACHSHADERPROCDart = void Function(int program, int shader);
typedef PFNGLDETACHSHADERPROC = Void Function(Uint32 program, Uint32 shader);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index)
typedef PFNGLDISABLEVERTEXATTRIBARRAYPROCDart = void Function(int index);
typedef PFNGLDISABLEVERTEXATTRIBARRAYPROC = Void Function(Uint32 index);

// typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index)
typedef PFNGLENABLEVERTEXATTRIBARRAYPROCDart = void Function(int index);
typedef PFNGLENABLEVERTEXATTRIBARRAYPROC = Void Function(Uint32 index);

// typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
typedef PFNGLGETACTIVEATTRIBPROCDart =
    void Function(
      int program,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVEATTRIBPROC =
    Void Function(
      Uint32 program,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
typedef PFNGLGETACTIVEUNIFORMPROCDart =
    void Function(
      int program,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVEUNIFORMPROC =
    Void Function(
      Uint32 program,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
typedef PFNGLGETATTACHEDSHADERSPROCDart =
    void Function(
      int program,
      int maxCount,
      Pointer<Uint32> count,
      Pointer<Uint32> shaders,
    );
typedef PFNGLGETATTACHEDSHADERSPROC =
    Void Function(
      Uint32 program,
      Uint32 maxCount,
      Pointer<Uint32> count,
      Pointer<Uint32> shaders,
    );

// typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETATTRIBLOCATIONPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETATTRIBLOCATIONPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params)
typedef PFNGLGETPROGRAMIVPROCDart =
    void Function(int program, int pname, Pointer<Int32> params);
typedef PFNGLGETPROGRAMIVPROC =
    Void Function(Uint32 program, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
typedef PFNGLGETPROGRAMINFOLOGPROCDart =
    void Function(
      int program,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );
typedef PFNGLGETPROGRAMINFOLOGPROC =
    Void Function(
      Uint32 program,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );

// typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params)
typedef PFNGLGETSHADERIVPROCDart =
    void Function(int shader, int pname, Pointer<Int32> params);
typedef PFNGLGETSHADERIVPROC =
    Void Function(Uint32 shader, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
typedef PFNGLGETSHADERINFOLOGPROCDart =
    void Function(
      int shader,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );
typedef PFNGLGETSHADERINFOLOGPROC =
    Void Function(
      Uint32 shader,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );

// typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
typedef PFNGLGETSHADERSOURCEPROCDart =
    void Function(
      int shader,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> source,
    );
typedef PFNGLGETSHADERSOURCEPROC =
    Void Function(
      Uint32 shader,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> source,
    );

// typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETUNIFORMLOCATIONPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETUNIFORMLOCATIONPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params)
typedef PFNGLGETUNIFORMFVPROCDart =
    void Function(int program, int location, Pointer<Float> params);
typedef PFNGLGETUNIFORMFVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params)
typedef PFNGLGETUNIFORMIVPROCDart =
    void Function(int program, int location, Pointer<Int32> params);
typedef PFNGLGETUNIFORMIVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETVERTEXATTRIBDVPROCDart =
    void Function(int index, int pname, Pointer<Double> params);
typedef PFNGLGETVERTEXATTRIBDVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETVERTEXATTRIBFVPROCDart =
    void Function(int index, int pname, Pointer<Float> params);
typedef PFNGLGETVERTEXATTRIBFVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBIVPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBIVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer)
typedef PFNGLGETVERTEXATTRIBPOINTERVPROCDart =
    void Function(int index, int pname, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLGETVERTEXATTRIBPOINTERVPROC =
    Void Function(
      Uint32 index,
      Uint32 pname,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program)
typedef PFNGLISPROGRAMPROCDart = int Function(int program);
typedef PFNGLISPROGRAMPROC = Int32 Function(Uint32 program);

// typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader)
typedef PFNGLISSHADERPROCDart = int Function(int shader);
typedef PFNGLISSHADERPROC = Int32 Function(Uint32 shader);

// typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program)
typedef PFNGLLINKPROGRAMPROCDart = void Function(int program);
typedef PFNGLLINKPROGRAMPROC = Void Function(Uint32 program);

// typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)
typedef PFNGLSHADERSOURCEPROCDart =
    void Function(
      int shader,
      int count,
      Pointer<Pointer<Int8>> string,
      Pointer<Int32> length,
    );
typedef PFNGLSHADERSOURCEPROC =
    Void Function(
      Uint32 shader,
      Uint32 count,
      Pointer<Pointer<Int8>> string,
      Pointer<Int32> length,
    );

// typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program)
typedef PFNGLUSEPROGRAMPROCDart = void Function(int program);
typedef PFNGLUSEPROGRAMPROC = Void Function(Uint32 program);

// typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0)
typedef PFNGLUNIFORM1FPROCDart = void Function(int location, double v0);
typedef PFNGLUNIFORM1FPROC = Void Function(Int32 location, Float v0);

// typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1)
typedef PFNGLUNIFORM2FPROCDart =
    void Function(int location, double v0, double v1);
typedef PFNGLUNIFORM2FPROC = Void Function(Int32 location, Float v0, Float v1);

// typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
typedef PFNGLUNIFORM3FPROCDart =
    void Function(int location, double v0, double v1, double v2);
typedef PFNGLUNIFORM3FPROC =
    Void Function(Int32 location, Float v0, Float v1, Float v2);

// typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
typedef PFNGLUNIFORM4FPROCDart =
    void Function(int location, double v0, double v1, double v2, double v3);
typedef PFNGLUNIFORM4FPROC =
    Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3);

// typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0)
typedef PFNGLUNIFORM1IPROCDart = void Function(int location, int v0);
typedef PFNGLUNIFORM1IPROC = Void Function(Int32 location, Int32 v0);

// typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1)
typedef PFNGLUNIFORM2IPROCDart = void Function(int location, int v0, int v1);
typedef PFNGLUNIFORM2IPROC = Void Function(Int32 location, Int32 v0, Int32 v1);

// typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2)
typedef PFNGLUNIFORM3IPROCDart =
    void Function(int location, int v0, int v1, int v2);
typedef PFNGLUNIFORM3IPROC =
    Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2);

// typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
typedef PFNGLUNIFORM4IPROCDart =
    void Function(int location, int v0, int v1, int v2, int v3);
typedef PFNGLUNIFORM4IPROC =
    Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);

// typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM1FVPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM1FVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM2FVPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM2FVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM3FVPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM3FVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM4FVPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM4FVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM1IVPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM1IVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM2IVPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM2IVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM3IVPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM3IVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM4IVPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM4IVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX2FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX2FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX3FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX3FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX4FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX4FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program)
typedef PFNGLVALIDATEPROGRAMPROCDart = void Function(int program);
typedef PFNGLVALIDATEPROGRAMPROC = Void Function(Uint32 program);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x)
typedef PFNGLVERTEXATTRIB1DPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1DPROC = Void Function(Uint32 index, Double x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB1DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB1DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x)
typedef PFNGLVERTEXATTRIB1FPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1FPROC = Void Function(Uint32 index, Float x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB1FVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB1FVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x)
typedef PFNGLVERTEXATTRIB1SPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIB1SPROC = Void Function(Uint32 index, Int16 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB1SVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB1SVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y)
typedef PFNGLVERTEXATTRIB2DPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2DPROC =
    Void Function(Uint32 index, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB2DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB2DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y)
typedef PFNGLVERTEXATTRIB2FPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2FPROC = Void Function(Uint32 index, Float x, Float y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB2FVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB2FVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y)
typedef PFNGLVERTEXATTRIB2SPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIB2SPROC = Void Function(Uint32 index, Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB2SVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB2SVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXATTRIB3DPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3DPROC =
    Void Function(Uint32 index, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB3DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB3DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLVERTEXATTRIB3FPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3FPROC =
    Void Function(Uint32 index, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB3FVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB3FVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
typedef PFNGLVERTEXATTRIB3SPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIB3SPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB3SVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB3SVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIB4NBVPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIB4NBVPROC =
    Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIB4NIVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIB4NIVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB4NSVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB4NSVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
typedef PFNGLVERTEXATTRIB4NUBPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4NUBPROC =
    Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIB4NUBVPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIB4NUBVPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIB4NUIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIB4NUIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIB4NUSVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB4NUSVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIB4BVPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIB4BVPROC = Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXATTRIB4DPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4DPROC =
    Void Function(Uint32 index, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB4DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB4DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLVERTEXATTRIB4FPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4FPROC =
    Void Function(Uint32 index, Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB4FVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB4FVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIB4IVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIB4IVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
typedef PFNGLVERTEXATTRIB4SPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4SPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB4SVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB4SVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIB4UBVPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIB4UBVPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIB4UIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIB4UIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIB4USVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB4USVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBPOINTERPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int normalized,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBPOINTERPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX2X3FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX2X3FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX3X2FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX3X2FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX2X4FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX2X4FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX4X2FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX4X2FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX3X4FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX3X4FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX4X3FVPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX4X3FVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
typedef PFNGLCOLORMASKIPROCDart =
    void Function(int index, int r, int g, int b, int a);
typedef PFNGLCOLORMASKIPROC =
    Void Function(Uint32 index, Int32 r, Int32 g, Int32 b, Int32 a);

// typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data)
typedef PfnglgetbooleaniVprocDart =
    void Function(int target, int index, Pointer<Int32> data);
typedef PfnglgetbooleaniVproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data)
typedef PfnglgetintegeriVprocDart =
    void Function(int target, int index, Pointer<Int32> data);
typedef PfnglgetintegeriVproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index)
typedef PFNGLENABLEIPROCDart = void Function(int target, int index);
typedef PFNGLENABLEIPROC = Void Function(Uint32 target, Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index)
typedef PFNGLDISABLEIPROCDart = void Function(int target, int index);
typedef PFNGLDISABLEIPROC = Void Function(Uint32 target, Uint32 index);

// typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index)
typedef PFNGLISENABLEDIPROCDart = int Function(int target, int index);
typedef PFNGLISENABLEDIPROC = Int32 Function(Uint32 target, Uint32 index);

// typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode)
typedef PFNGLBEGINTRANSFORMFEEDBACKPROCDart = void Function(int primitiveMode);
typedef PFNGLBEGINTRANSFORMFEEDBACKPROC = Void Function(Uint32 primitiveMode);

// typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void)
typedef PFNGLENDTRANSFORMFEEDBACKPROCDart = void Function();
typedef PFNGLENDTRANSFORMFEEDBACKPROC = Void Function();

// typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLBINDBUFFERRANGEPROCDart =
    void Function(
      int target,
      int index,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLBINDBUFFERRANGEPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer)
typedef PFNGLBINDBUFFERBASEPROCDart =
    void Function(int target, int index, int buffer);
typedef PFNGLBINDBUFFERBASEPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
typedef PFNGLTRANSFORMFEEDBACKVARYINGSPROCDart =
    void Function(
      int program,
      int count,
      Pointer<Pointer<Int8>> varyings,
      int bufferMode,
    );
typedef PFNGLTRANSFORMFEEDBACKVARYINGSPROC =
    Void Function(
      Uint32 program,
      Uint32 count,
      Pointer<Pointer<Int8>> varyings,
      Uint32 bufferMode,
    );

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGPROCDart =
    void Function(
      int program,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGPROC =
    Void Function(
      Uint32 program,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp)
typedef PFNGLCLAMPCOLORPROCDart = void Function(int target, int clamp);
typedef PFNGLCLAMPCOLORPROC = Void Function(Uint32 target, Uint32 clamp);

// typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode)
typedef PFNGLBEGINCONDITIONALRENDERPROCDart = void Function(int id, int mode);
typedef PFNGLBEGINCONDITIONALRENDERPROC = Void Function(Uint32 id, Uint32 mode);

// typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void)
typedef PFNGLENDCONDITIONALRENDERPROCDart = void Function();
typedef PFNGLENDCONDITIONALRENDERPROC = Void Function();

// typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBIPOINTERPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBIPOINTERPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBIIVPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBIIVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params)
typedef PFNGLGETVERTEXATTRIBIUIVPROCDart =
    void Function(int index, int pname, Pointer<Uint32> params);
typedef PFNGLGETVERTEXATTRIBIUIVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x)
typedef PFNGLVERTEXATTRIBI1IPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBI1IPROC = Void Function(Uint32 index, Int32 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y)
typedef PFNGLVERTEXATTRIBI2IPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBI2IPROC =
    Void Function(Uint32 index, Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z)
typedef PFNGLVERTEXATTRIBI3IPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBI3IPROC =
    Void Function(Uint32 index, Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLVERTEXATTRIBI4IPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBI4IPROC =
    Void Function(Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x)
typedef PFNGLVERTEXATTRIBI1UIPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBI1UIPROC = Void Function(Uint32 index, Uint32 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y)
typedef PFNGLVERTEXATTRIBI2UIPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBI2UIPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z)
typedef PFNGLVERTEXATTRIBI3UIPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBI3UIPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
typedef PFNGLVERTEXATTRIBI4UIPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBI4UIPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI1IVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI1IVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI2IVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI2IVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI3IVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI3IVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI4IVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI4IVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI1UIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI1UIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI2UIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI2UIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI3UIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI3UIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI4UIVPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI4UIVPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIBI4BVPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIBI4BVPROC =
    Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIBI4SVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBI4SVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIBI4UBVPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIBI4UBVPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIBI4USVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBI4USVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params)
typedef PFNGLGETUNIFORMUIVPROCDart =
    void Function(int program, int location, Pointer<Uint32> params);
typedef PFNGLGETUNIFORMUIVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name)
typedef PFNGLBINDFRAGDATALOCATIONPROCDart =
    void Function(int program, int color, Pointer<Utf8> name);
typedef PFNGLBINDFRAGDATALOCATIONPROC =
    Void Function(Uint32 program, Uint32 color, Pointer<Utf8> name);

// typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETFRAGDATALOCATIONPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETFRAGDATALOCATIONPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0)
typedef PFNGLUNIFORM1UIPROCDart = void Function(int location, int v0);
typedef PFNGLUNIFORM1UIPROC = Void Function(Int32 location, Uint32 v0);

// typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1)
typedef PFNGLUNIFORM2UIPROCDart = void Function(int location, int v0, int v1);
typedef PFNGLUNIFORM2UIPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1);

// typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)
typedef PFNGLUNIFORM3UIPROCDart =
    void Function(int location, int v0, int v1, int v2);
typedef PFNGLUNIFORM3UIPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2);

// typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
typedef PFNGLUNIFORM4UIPROCDart =
    void Function(int location, int v0, int v1, int v2, int v3);
typedef PFNGLUNIFORM4UIPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3);

// typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM1UIVPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM1UIVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM2UIVPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM2UIVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM3UIVPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM3UIVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM4UIVPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM4UIVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLTEXPARAMETERIIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXPARAMETERIIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params)
typedef PFNGLTEXPARAMETERIUIVPROCDart =
    void Function(int target, int pname, Pointer<Uint32> params);
typedef PFNGLTEXPARAMETERIUIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETTEXPARAMETERIIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXPARAMETERIIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params)
typedef PFNGLGETTEXPARAMETERIUIVPROCDart =
    void Function(int target, int pname, Pointer<Uint32> params);
typedef PFNGLGETTEXPARAMETERIUIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value)
typedef PFNGLCLEARBUFFERIVPROCDart =
    void Function(int buffer, int drawbuffer, Pointer<Int32> value);
typedef PFNGLCLEARBUFFERIVPROC =
    Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value)
typedef PFNGLCLEARBUFFERUIVPROCDart =
    void Function(int buffer, int drawbuffer, Pointer<Uint32> value);
typedef PFNGLCLEARBUFFERUIVPROC =
    Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value)
typedef PFNGLCLEARBUFFERFVPROCDart =
    void Function(int buffer, int drawbuffer, Pointer<Float> value);
typedef PFNGLCLEARBUFFERFVPROC =
    Void Function(Uint32 buffer, Int32 drawbuffer, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
typedef PFNGLCLEARBUFFERFIPROCDart =
    void Function(int buffer, int drawbuffer, double depth, int stencil);
typedef PFNGLCLEARBUFFERFIPROC =
    Void Function(Uint32 buffer, Int32 drawbuffer, Float depth, Int32 stencil);

// typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index)
typedef PFNGLGETSTRINGIPROCDart = Pointer<Uint8> Function(int name, int index);
typedef PFNGLGETSTRINGIPROC =
    Pointer<Uint8> Function(Uint32 name, Uint32 index);

// typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer)
typedef PFNGLISRENDERBUFFERPROCDart = int Function(int renderbuffer);
typedef PFNGLISRENDERBUFFERPROC = Int32 Function(Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer)
typedef PFNGLBINDRENDERBUFFERPROCDart =
    void Function(int target, int renderbuffer);
typedef PFNGLBINDRENDERBUFFERPROC =
    Void Function(Uint32 target, Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers)
typedef PFNGLDELETERENDERBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> renderbuffers);
typedef PFNGLDELETERENDERBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> renderbuffers);

// typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)
typedef PFNGLGENRENDERBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> renderbuffers);
typedef PFNGLGENRENDERBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> renderbuffers);

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEPROCDart =
    void Function(int target, int internalformat, int width, int height);
typedef PFNGLRENDERBUFFERSTORAGEPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETRENDERBUFFERPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETRENDERBUFFERPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer)
typedef PFNGLISFRAMEBUFFERPROCDart = int Function(int framebuffer);
typedef PFNGLISFRAMEBUFFERPROC = Int32 Function(Uint32 framebuffer);

// typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer)
typedef PFNGLBINDFRAMEBUFFERPROCDart =
    void Function(int target, int framebuffer);
typedef PFNGLBINDFRAMEBUFFERPROC =
    Void Function(Uint32 target, Uint32 framebuffer);

// typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers)
typedef PFNGLDELETEFRAMEBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> framebuffers);
typedef PFNGLDELETEFRAMEBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> framebuffers);

// typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)
typedef PFNGLGENFRAMEBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> framebuffers);
typedef PFNGLGENFRAMEBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> framebuffers);

// typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target)
typedef PFNGLCHECKFRAMEBUFFERSTATUSPROCDart = int Function(int target);
typedef PFNGLCHECKFRAMEBUFFERSTATUSPROC = Uint32 Function(Uint32 target);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTURE1DPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLFRAMEBUFFERTEXTURE1DPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTURE2DPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLFRAMEBUFFERTEXTURE2DPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
typedef PFNGLFRAMEBUFFERTEXTURE3DPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
      int zoffset,
    );
typedef PFNGLFRAMEBUFFERTEXTURE3DPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
      Int32 zoffset,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
typedef PFNGLFRAMEBUFFERRENDERBUFFERPROCDart =
    void Function(
      int target,
      int attachment,
      int renderbuffertarget,
      int renderbuffer,
    );
typedef PFNGLFRAMEBUFFERRENDERBUFFERPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 renderbuffertarget,
      Uint32 renderbuffer,
    );

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROCDart =
    void Function(int target, int attachment, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target)
typedef PFNGLGENERATEMIPMAPPROCDart = void Function(int target);
typedef PFNGLGENERATEMIPMAPPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
typedef PFNGLBLITFRAMEBUFFERPROCDart =
    void Function(
      int srcX0,
      int srcY0,
      int srcX1,
      int srcY1,
      int dstX0,
      int dstY0,
      int dstX1,
      int dstY1,
      int mask,
      int filter,
    );
typedef PFNGLBLITFRAMEBUFFERPROC =
    Void Function(
      Int32 srcX0,
      Int32 srcY0,
      Int32 srcX1,
      Int32 srcY1,
      Int32 dstX0,
      Int32 dstY0,
      Int32 dstX1,
      Int32 dstY1,
      Uint32 mask,
      Uint32 filter,
    );

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
typedef PFNGLFRAMEBUFFERTEXTURELAYERPROCDart =
    void Function(
      int target,
      int attachment,
      int texture,
      int level,
      int layer,
    );
typedef PFNGLFRAMEBUFFERTEXTURELAYERPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 layer,
    );

// typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
typedef PFNGLMAPBUFFERRANGEPROCDart =
    Pointer<NativeType> Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      int access,
    );
typedef PFNGLMAPBUFFERRANGEPROC =
    Pointer<NativeType> Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      Uint32 access,
    );

// typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length)
typedef PFNGLFLUSHMAPPEDBUFFERRANGEPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );
typedef PFNGLFLUSHMAPPEDBUFFERRANGEPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );

// typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array)
typedef PFNGLBINDVERTEXARRAYPROCDart = void Function(int array);
typedef PFNGLBINDVERTEXARRAYPROC = Void Function(Uint32 array);

// typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays)
typedef PFNGLDELETEVERTEXARRAYSPROCDart =
    void Function(int n, Pointer<Uint32> arrays);
typedef PFNGLDELETEVERTEXARRAYSPROC =
    Void Function(Uint32 n, Pointer<Uint32> arrays);

// typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)
typedef PFNGLGENVERTEXARRAYSPROCDart =
    void Function(int n, Pointer<Uint32> arrays);
typedef PFNGLGENVERTEXARRAYSPROC =
    Void Function(Uint32 n, Pointer<Uint32> arrays);

// typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array)
typedef PFNGLISVERTEXARRAYPROCDart = int Function(int array);
typedef PFNGLISVERTEXARRAYPROC = Int32 Function(Uint32 array);

// typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
typedef PFNGLDRAWARRAYSINSTANCEDPROCDart =
    void Function(int mode, int first, int count, int instancecount);
typedef PFNGLDRAWARRAYSINSTANCEDPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 instancecount);

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
typedef PFNGLDRAWELEMENTSINSTANCEDPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int instancecount,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 instancecount,
    );

// typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer)
typedef PFNGLTEXBUFFERPROCDart =
    void Function(int target, int internalformat, int buffer);
typedef PFNGLTEXBUFFERPROC =
    Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer);

// typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index)
typedef PFNGLPRIMITIVERESTARTINDEXPROCDart = void Function(int index);
typedef PFNGLPRIMITIVERESTARTINDEXPROC = Void Function(Uint32 index);

// typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
typedef PFNGLCOPYBUFFERSUBDATAPROCDart =
    void Function(
      int readTarget,
      int writeTarget,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );
typedef PFNGLCOPYBUFFERSUBDATAPROC =
    Void Function(
      Uint32 readTarget,
      Uint32 writeTarget,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)
typedef PFNGLGETUNIFORMINDICESPROCDart =
    void Function(
      int program,
      int uniformCount,
      Pointer<Pointer<Int8>> uniformNames,
      Pointer<Uint32> uniformIndices,
    );
typedef PFNGLGETUNIFORMINDICESPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformCount,
      Pointer<Pointer<Int8>> uniformNames,
      Pointer<Uint32> uniformIndices,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
typedef PFNGLGETACTIVEUNIFORMSIVPROCDart =
    void Function(
      int program,
      int uniformCount,
      Pointer<Uint32> uniformIndices,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETACTIVEUNIFORMSIVPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformCount,
      Pointer<Uint32> uniformIndices,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
typedef PFNGLGETACTIVEUNIFORMNAMEPROCDart =
    void Function(
      int program,
      int uniformIndex,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> uniformName,
    );
typedef PFNGLGETACTIVEUNIFORMNAMEPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformIndex,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> uniformName,
    );

// typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName)
typedef PFNGLGETUNIFORMBLOCKINDEXPROCDart =
    int Function(int program, Pointer<Utf8> uniformBlockName);
typedef PFNGLGETUNIFORMBLOCKINDEXPROC =
    Uint32 Function(Uint32 program, Pointer<Utf8> uniformBlockName);

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
typedef PFNGLGETACTIVEUNIFORMBLOCKIVPROCDart =
    void Function(
      int program,
      int uniformBlockIndex,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETACTIVEUNIFORMBLOCKIVPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformBlockIndex,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
typedef PFNGLGETACTIVEUNIFORMBLOCKNAMEPROCDart =
    void Function(
      int program,
      int uniformBlockIndex,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> uniformBlockName,
    );
typedef PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformBlockIndex,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> uniformBlockName,
    );

// typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
typedef PFNGLUNIFORMBLOCKBINDINGPROCDart =
    void Function(int program, int uniformBlockIndex, int uniformBlockBinding);
typedef PFNGLUNIFORMBLOCKBINDINGPROC =
    Void Function(
      Uint32 program,
      Uint32 uniformBlockIndex,
      Uint32 uniformBlockBinding,
    );

// typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
typedef PFNGLDRAWELEMENTSBASEVERTEXPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int basevertex,
    );
typedef PFNGLDRAWELEMENTSBASEVERTEXPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Int32 basevertex,
    );

// typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXPROCDart =
    void Function(
      int mode,
      int start,
      int end,
      int count,
      int type,
      Pointer<NativeType> indices,
      int basevertex,
    );
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC =
    Void Function(
      Uint32 mode,
      Uint32 start,
      Uint32 end,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Int32 basevertex,
    );

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int instancecount,
      int basevertex,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 instancecount,
      Int32 basevertex,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)
typedef PFNGLMULTIDRAWELEMENTSBASEVERTEXPROCDart =
    void Function(
      int mode,
      Pointer<Uint32> count,
      int type,
      Pointer<Pointer<NativeType>> indices,
      int drawcount,
      Pointer<Int32> basevertex,
    );
typedef PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC =
    Void Function(
      Uint32 mode,
      Pointer<Uint32> count,
      Uint32 type,
      Pointer<Pointer<NativeType>> indices,
      Uint32 drawcount,
      Pointer<Int32> basevertex,
    );

// typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode)
typedef PFNGLPROVOKINGVERTEXPROCDart = void Function(int mode);
typedef PFNGLPROVOKINGVERTEXPROC = Void Function(Uint32 mode);

// typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags)
typedef PFNGLFENCESYNCPROCDart =
    Pointer<NativeType> Function(int condition, int flags);
typedef PFNGLFENCESYNCPROC =
    Pointer<NativeType> Function(Uint32 condition, Uint32 flags);

// typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync)
typedef PFNGLISSYNCPROCDart = int Function(Pointer<NativeType> sync);
typedef PFNGLISSYNCPROC = Int32 Function(Pointer<NativeType> sync);

// typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync)
typedef PFNGLDELETESYNCPROCDart = void Function(Pointer<NativeType> sync);
typedef PFNGLDELETESYNCPROC = Void Function(Pointer<NativeType> sync);

// typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)
typedef PFNGLCLIENTWAITSYNCPROCDart =
    int Function(Pointer<NativeType> sync, int flags, int timeout);
typedef PFNGLCLIENTWAITSYNCPROC =
    Uint32 Function(Pointer<NativeType> sync, Uint32 flags, Uint64 timeout);

// typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)
typedef PFNGLWAITSYNCPROCDart =
    void Function(Pointer<NativeType> sync, int flags, int timeout);
typedef PFNGLWAITSYNCPROC =
    Void Function(Pointer<NativeType> sync, Uint32 flags, Uint64 timeout);

// typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data)
typedef PFNGLGETINTEGER64VPROCDart =
    void Function(int pname, Pointer<Int64> data);
typedef PFNGLGETINTEGER64VPROC =
    Void Function(Uint32 pname, Pointer<Int64> data);

// typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values)
typedef PFNGLGETSYNCIVPROCDart =
    void Function(
      Pointer<NativeType> sync,
      int pname,
      int count,
      Pointer<Uint32> length,
      Pointer<Int32> values,
    );
typedef PFNGLGETSYNCIVPROC =
    Void Function(
      Pointer<NativeType> sync,
      Uint32 pname,
      Uint32 count,
      Pointer<Uint32> length,
      Pointer<Int32> values,
    );

// typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data)
typedef Pfnglgetinteger64IVprocDart =
    void Function(int target, int index, Pointer<Int64> data);
typedef Pfnglgetinteger64IVproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Int64> data);

// typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params)
typedef PFNGLGETBUFFERPARAMETERI64VPROCDart =
    void Function(int target, int pname, Pointer<Int64> params);
typedef PFNGLGETBUFFERPARAMETERI64VPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTUREPROCDart =
    void Function(int target, int attachment, int texture, int level);
typedef PFNGLFRAMEBUFFERTEXTUREPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
typedef PFNGLTEXIMAGE2DMULTISAMPLEPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int fixedsamplelocations,
    );
typedef PFNGLTEXIMAGE2DMULTISAMPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
typedef PFNGLTEXIMAGE3DMULTISAMPLEPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int depth,
      int fixedsamplelocations,
    );
typedef PFNGLTEXIMAGE3DMULTISAMPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val)
typedef PFNGLGETMULTISAMPLEFVPROCDart =
    void Function(int pname, int index, Pointer<Float> val);
typedef PFNGLGETMULTISAMPLEFVPROC =
    Void Function(Uint32 pname, Uint32 index, Pointer<Float> val);

// typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask)
typedef PFNGLSAMPLEMASKIPROCDart = void Function(int maskNumber, int mask);
typedef PFNGLSAMPLEMASKIPROC = Void Function(Uint32 maskNumber, Uint32 mask);

// typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
typedef PFNGLBINDFRAGDATALOCATIONINDEXEDPROCDart =
    void Function(int program, int colorNumber, int index, Pointer<Utf8> name);
typedef PFNGLBINDFRAGDATALOCATIONINDEXEDPROC =
    Void Function(
      Uint32 program,
      Uint32 colorNumber,
      Uint32 index,
      Pointer<Utf8> name,
    );

// typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETFRAGDATAINDEXPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETFRAGDATAINDEXPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers)
typedef PFNGLGENSAMPLERSPROCDart =
    void Function(int count, Pointer<Uint32> samplers);
typedef PFNGLGENSAMPLERSPROC =
    Void Function(Uint32 count, Pointer<Uint32> samplers);

// typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers)
typedef PFNGLDELETESAMPLERSPROCDart =
    void Function(int count, Pointer<Uint32> samplers);
typedef PFNGLDELETESAMPLERSPROC =
    Void Function(Uint32 count, Pointer<Uint32> samplers);

// typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler)
typedef PFNGLISSAMPLERPROCDart = int Function(int sampler);
typedef PFNGLISSAMPLERPROC = Int32 Function(Uint32 sampler);

// typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler)
typedef PFNGLBINDSAMPLERPROCDart = void Function(int unit, int sampler);
typedef PFNGLBINDSAMPLERPROC = Void Function(Uint32 unit, Uint32 sampler);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param)
typedef PFNGLSAMPLERPARAMETERIPROCDart =
    void Function(int sampler, int pname, int param);
typedef PFNGLSAMPLERPARAMETERIPROC =
    Void Function(Uint32 sampler, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param)
typedef PFNGLSAMPLERPARAMETERIVPROCDart =
    void Function(int sampler, int pname, Pointer<Int32> param);
typedef PFNGLSAMPLERPARAMETERIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param)
typedef PFNGLSAMPLERPARAMETERFPROCDart =
    void Function(int sampler, int pname, double param);
typedef PFNGLSAMPLERPARAMETERFPROC =
    Void Function(Uint32 sampler, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param)
typedef PFNGLSAMPLERPARAMETERFVPROCDart =
    void Function(int sampler, int pname, Pointer<Float> param);
typedef PFNGLSAMPLERPARAMETERFVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Float> param);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param)
typedef PFNGLSAMPLERPARAMETERIIVPROCDart =
    void Function(int sampler, int pname, Pointer<Int32> param);
typedef PFNGLSAMPLERPARAMETERIIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param)
typedef PFNGLSAMPLERPARAMETERIUIVPROCDart =
    void Function(int sampler, int pname, Pointer<Uint32> param);
typedef PFNGLSAMPLERPARAMETERIUIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32> param);

// typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params)
typedef PFNGLGETSAMPLERPARAMETERIVPROCDart =
    void Function(int sampler, int pname, Pointer<Int32> params);
typedef PFNGLGETSAMPLERPARAMETERIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params)
typedef PFNGLGETSAMPLERPARAMETERIIVPROCDart =
    void Function(int sampler, int pname, Pointer<Int32> params);
typedef PFNGLGETSAMPLERPARAMETERIIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params)
typedef PFNGLGETSAMPLERPARAMETERFVPROCDart =
    void Function(int sampler, int pname, Pointer<Float> params);
typedef PFNGLGETSAMPLERPARAMETERFVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params)
typedef PFNGLGETSAMPLERPARAMETERIUIVPROCDart =
    void Function(int sampler, int pname, Pointer<Uint32> params);
typedef PFNGLGETSAMPLERPARAMETERIUIVPROC =
    Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target)
typedef PFNGLQUERYCOUNTERPROCDart = void Function(int id, int target);
typedef PFNGLQUERYCOUNTERPROC = Void Function(Uint32 id, Uint32 target);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params)
typedef PFNGLGETQUERYOBJECTI64VPROCDart =
    void Function(int id, int pname, Pointer<Int64> params);
typedef PFNGLGETQUERYOBJECTI64VPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params)
typedef PFNGLGETQUERYOBJECTUI64VPROCDart =
    void Function(int id, int pname, Pointer<Uint64> params);
typedef PFNGLGETQUERYOBJECTUI64VPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor)
typedef PFNGLVERTEXATTRIBDIVISORPROCDart =
    void Function(int index, int divisor);
typedef PFNGLVERTEXATTRIBDIVISORPROC =
    Void Function(Uint32 index, Uint32 divisor);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
typedef PFNGLVERTEXATTRIBP1UIPROCDart =
    void Function(int index, int type, int normalized, int value);
typedef PFNGLVERTEXATTRIBP1UIPROC =
    Void Function(Uint32 index, Uint32 type, Int32 normalized, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
typedef PFNGLVERTEXATTRIBP1UIVPROCDart =
    void Function(int index, int type, int normalized, Pointer<Uint32> value);
typedef PFNGLVERTEXATTRIBP1UIVPROC =
    Void Function(
      Uint32 index,
      Uint32 type,
      Int32 normalized,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
typedef PFNGLVERTEXATTRIBP2UIPROCDart =
    void Function(int index, int type, int normalized, int value);
typedef PFNGLVERTEXATTRIBP2UIPROC =
    Void Function(Uint32 index, Uint32 type, Int32 normalized, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
typedef PFNGLVERTEXATTRIBP2UIVPROCDart =
    void Function(int index, int type, int normalized, Pointer<Uint32> value);
typedef PFNGLVERTEXATTRIBP2UIVPROC =
    Void Function(
      Uint32 index,
      Uint32 type,
      Int32 normalized,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
typedef PFNGLVERTEXATTRIBP3UIPROCDart =
    void Function(int index, int type, int normalized, int value);
typedef PFNGLVERTEXATTRIBP3UIPROC =
    Void Function(Uint32 index, Uint32 type, Int32 normalized, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
typedef PFNGLVERTEXATTRIBP3UIVPROCDart =
    void Function(int index, int type, int normalized, Pointer<Uint32> value);
typedef PFNGLVERTEXATTRIBP3UIVPROC =
    Void Function(
      Uint32 index,
      Uint32 type,
      Int32 normalized,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
typedef PFNGLVERTEXATTRIBP4UIPROCDart =
    void Function(int index, int type, int normalized, int value);
typedef PFNGLVERTEXATTRIBP4UIPROC =
    Void Function(Uint32 index, Uint32 type, Int32 normalized, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
typedef PFNGLVERTEXATTRIBP4UIVPROCDart =
    void Function(int index, int type, int normalized, Pointer<Uint32> value);
typedef PFNGLVERTEXATTRIBP4UIVPROC =
    Void Function(
      Uint32 index,
      Uint32 type,
      Int32 normalized,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value)
typedef PFNGLVERTEXP2UIPROCDart = void Function(int type, int value);
typedef PFNGLVERTEXP2UIPROC = Void Function(Uint32 type, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value)
typedef PFNGLVERTEXP2UIVPROCDart =
    void Function(int type, Pointer<Uint32> value);
typedef PFNGLVERTEXP2UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value)
typedef PFNGLVERTEXP3UIPROCDart = void Function(int type, int value);
typedef PFNGLVERTEXP3UIPROC = Void Function(Uint32 type, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value)
typedef PFNGLVERTEXP3UIVPROCDart =
    void Function(int type, Pointer<Uint32> value);
typedef PFNGLVERTEXP3UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value)
typedef PFNGLVERTEXP4UIPROCDart = void Function(int type, int value);
typedef PFNGLVERTEXP4UIPROC = Void Function(Uint32 type, Uint32 value);

// typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value)
typedef PFNGLVERTEXP4UIVPROCDart =
    void Function(int type, Pointer<Uint32> value);
typedef PFNGLVERTEXP4UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords)
typedef PFNGLTEXCOORDP1UIPROCDart = void Function(int type, int coords);
typedef PFNGLTEXCOORDP1UIPROC = Void Function(Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords)
typedef PFNGLTEXCOORDP1UIVPROCDart =
    void Function(int type, Pointer<Uint32> coords);
typedef PFNGLTEXCOORDP1UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords)
typedef PFNGLTEXCOORDP2UIPROCDart = void Function(int type, int coords);
typedef PFNGLTEXCOORDP2UIPROC = Void Function(Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords)
typedef PFNGLTEXCOORDP2UIVPROCDart =
    void Function(int type, Pointer<Uint32> coords);
typedef PFNGLTEXCOORDP2UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords)
typedef PFNGLTEXCOORDP3UIPROCDart = void Function(int type, int coords);
typedef PFNGLTEXCOORDP3UIPROC = Void Function(Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords)
typedef PFNGLTEXCOORDP3UIVPROCDart =
    void Function(int type, Pointer<Uint32> coords);
typedef PFNGLTEXCOORDP3UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords)
typedef PFNGLTEXCOORDP4UIPROCDart = void Function(int type, int coords);
typedef PFNGLTEXCOORDP4UIPROC = Void Function(Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords)
typedef PFNGLTEXCOORDP4UIVPROCDart =
    void Function(int type, Pointer<Uint32> coords);
typedef PFNGLTEXCOORDP4UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords)
typedef PFNGLMULTITEXCOORDP1UIPROCDart =
    void Function(int texture, int type, int coords);
typedef PFNGLMULTITEXCOORDP1UIPROC =
    Void Function(Uint32 texture, Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)
typedef PFNGLMULTITEXCOORDP1UIVPROCDart =
    void Function(int texture, int type, Pointer<Uint32> coords);
typedef PFNGLMULTITEXCOORDP1UIVPROC =
    Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords)
typedef PFNGLMULTITEXCOORDP2UIPROCDart =
    void Function(int texture, int type, int coords);
typedef PFNGLMULTITEXCOORDP2UIPROC =
    Void Function(Uint32 texture, Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)
typedef PFNGLMULTITEXCOORDP2UIVPROCDart =
    void Function(int texture, int type, Pointer<Uint32> coords);
typedef PFNGLMULTITEXCOORDP2UIVPROC =
    Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords)
typedef PFNGLMULTITEXCOORDP3UIPROCDart =
    void Function(int texture, int type, int coords);
typedef PFNGLMULTITEXCOORDP3UIPROC =
    Void Function(Uint32 texture, Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)
typedef PFNGLMULTITEXCOORDP3UIVPROCDart =
    void Function(int texture, int type, Pointer<Uint32> coords);
typedef PFNGLMULTITEXCOORDP3UIVPROC =
    Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords)
typedef PFNGLMULTITEXCOORDP4UIPROCDart =
    void Function(int texture, int type, int coords);
typedef PFNGLMULTITEXCOORDP4UIPROC =
    Void Function(Uint32 texture, Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)
typedef PFNGLMULTITEXCOORDP4UIVPROCDart =
    void Function(int texture, int type, Pointer<Uint32> coords);
typedef PFNGLMULTITEXCOORDP4UIVPROC =
    Void Function(Uint32 texture, Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords)
typedef PFNGLNORMALP3UIPROCDart = void Function(int type, int coords);
typedef PFNGLNORMALP3UIPROC = Void Function(Uint32 type, Uint32 coords);

// typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords)
typedef PFNGLNORMALP3UIVPROCDart =
    void Function(int type, Pointer<Uint32> coords);
typedef PFNGLNORMALP3UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> coords);

// typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color)
typedef PFNGLCOLORP3UIPROCDart = void Function(int type, int color);
typedef PFNGLCOLORP3UIPROC = Void Function(Uint32 type, Uint32 color);

// typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color)
typedef PFNGLCOLORP3UIVPROCDart =
    void Function(int type, Pointer<Uint32> color);
typedef PFNGLCOLORP3UIVPROC = Void Function(Uint32 type, Pointer<Uint32> color);

// typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color)
typedef PFNGLCOLORP4UIPROCDart = void Function(int type, int color);
typedef PFNGLCOLORP4UIPROC = Void Function(Uint32 type, Uint32 color);

// typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color)
typedef PFNGLCOLORP4UIVPROCDart =
    void Function(int type, Pointer<Uint32> color);
typedef PFNGLCOLORP4UIVPROC = Void Function(Uint32 type, Pointer<Uint32> color);

// typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color)
typedef PFNGLSECONDARYCOLORP3UIPROCDart = void Function(int type, int color);
typedef PFNGLSECONDARYCOLORP3UIPROC = Void Function(Uint32 type, Uint32 color);

// typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color)
typedef PFNGLSECONDARYCOLORP3UIVPROCDart =
    void Function(int type, Pointer<Uint32> color);
typedef PFNGLSECONDARYCOLORP3UIVPROC =
    Void Function(Uint32 type, Pointer<Uint32> color);

// typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value)
typedef PFNGLMINSAMPLESHADINGPROCDart = void Function(double value);
typedef PFNGLMINSAMPLESHADINGPROC = Void Function(Float value);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode)
typedef PFNGLBLENDEQUATIONIPROCDart = void Function(int buf, int mode);
typedef PFNGLBLENDEQUATIONIPROC = Void Function(Uint32 buf, Uint32 mode);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
typedef PFNGLBLENDEQUATIONSEPARATEIPROCDart =
    void Function(int buf, int modeRgb, int modeAlpha);
typedef PFNGLBLENDEQUATIONSEPARATEIPROC =
    Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha);

// typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst)
typedef PFNGLBLENDFUNCIPROCDart = void Function(int buf, int src, int dst);
typedef PFNGLBLENDFUNCIPROC = Void Function(Uint32 buf, Uint32 src, Uint32 dst);

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
typedef PFNGLBLENDFUNCSEPARATEIPROCDart =
    void Function(int buf, int srcRgb, int dstRgb, int srcAlpha, int dstAlpha);
typedef PFNGLBLENDFUNCSEPARATEIPROC =
    Void Function(
      Uint32 buf,
      Uint32 srcRgb,
      Uint32 dstRgb,
      Uint32 srcAlpha,
      Uint32 dstAlpha,
    );

// typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect)
typedef PFNGLDRAWARRAYSINDIRECTPROCDart =
    void Function(int mode, Pointer<NativeType> indirect);
typedef PFNGLDRAWARRAYSINDIRECTPROC =
    Void Function(Uint32 mode, Pointer<NativeType> indirect);

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect)
typedef PFNGLDRAWELEMENTSINDIRECTPROCDart =
    void Function(int mode, int type, Pointer<NativeType> indirect);
typedef PFNGLDRAWELEMENTSINDIRECTPROC =
    Void Function(Uint32 mode, Uint32 type, Pointer<NativeType> indirect);

// typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x)
typedef PFNGLUNIFORM1DPROCDart = void Function(int location, double x);
typedef PFNGLUNIFORM1DPROC = Void Function(Int32 location, Double x);

// typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y)
typedef PFNGLUNIFORM2DPROCDart =
    void Function(int location, double x, double y);
typedef PFNGLUNIFORM2DPROC = Void Function(Int32 location, Double x, Double y);

// typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLUNIFORM3DPROCDart =
    void Function(int location, double x, double y, double z);
typedef PFNGLUNIFORM3DPROC =
    Void Function(Int32 location, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLUNIFORM4DPROCDart =
    void Function(int location, double x, double y, double z, double w);
typedef PFNGLUNIFORM4DPROC =
    Void Function(Int32 location, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLUNIFORM1DVPROCDart =
    void Function(int location, int count, Pointer<Double> value);
typedef PFNGLUNIFORM1DVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Double> value);

// typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLUNIFORM2DVPROCDart =
    void Function(int location, int count, Pointer<Double> value);
typedef PFNGLUNIFORM2DVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Double> value);

// typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLUNIFORM3DVPROCDart =
    void Function(int location, int count, Pointer<Double> value);
typedef PFNGLUNIFORM3DVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Double> value);

// typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLUNIFORM4DVPROCDart =
    void Function(int location, int count, Pointer<Double> value);
typedef PFNGLUNIFORM4DVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Double> value);

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX2DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX2DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX3DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX3DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX4DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX4DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX2X3DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX2X3DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX2X4DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX2X4DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX3X2DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX3X2DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX3X4DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX3X4DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX4X2DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX4X2DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLUNIFORMMATRIX4X3DVPROCDart =
    void Function(
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLUNIFORMMATRIX4X3DVPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params)
typedef PFNGLGETUNIFORMDVPROCDart =
    void Function(int program, int location, Pointer<Double> params);
typedef PFNGLGETUNIFORMDVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Double> params);

// typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name)
typedef PFNGLGETSUBROUTINEUNIFORMLOCATIONPROCDart =
    int Function(int program, int shadertype, Pointer<Utf8> name);
typedef PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC =
    Int32 Function(Uint32 program, Uint32 shadertype, Pointer<Utf8> name);

// typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name)
typedef PFNGLGETSUBROUTINEINDEXPROCDart =
    int Function(int program, int shadertype, Pointer<Utf8> name);
typedef PFNGLGETSUBROUTINEINDEXPROC =
    Uint32 Function(Uint32 program, Uint32 shadertype, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
typedef PFNGLGETACTIVESUBROUTINEUNIFORMIVPROCDart =
    void Function(
      int program,
      int shadertype,
      int index,
      int pname,
      Pointer<Int32> values,
    );
typedef PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC =
    Void Function(
      Uint32 program,
      Uint32 shadertype,
      Uint32 index,
      Uint32 pname,
      Pointer<Int32> values,
    );

// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
typedef PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROCDart =
    void Function(
      int program,
      int shadertype,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC =
    Void Function(
      Uint32 program,
      Uint32 shadertype,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
typedef PFNGLGETACTIVESUBROUTINENAMEPROCDart =
    void Function(
      int program,
      int shadertype,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVESUBROUTINENAMEPROC =
    Void Function(
      Uint32 program,
      Uint32 shadertype,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices)
typedef PFNGLUNIFORMSUBROUTINESUIVPROCDart =
    void Function(int shadertype, int count, Pointer<Uint32> indices);
typedef PFNGLUNIFORMSUBROUTINESUIVPROC =
    Void Function(Uint32 shadertype, Uint32 count, Pointer<Uint32> indices);

// typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params)
typedef PFNGLGETUNIFORMSUBROUTINEUIVPROCDart =
    void Function(int shadertype, int location, Pointer<Uint32> params);
typedef PFNGLGETUNIFORMSUBROUTINEUIVPROC =
    Void Function(Uint32 shadertype, Int32 location, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values)
typedef PFNGLGETPROGRAMSTAGEIVPROCDart =
    void Function(
      int program,
      int shadertype,
      int pname,
      Pointer<Int32> values,
    );
typedef PFNGLGETPROGRAMSTAGEIVPROC =
    Void Function(
      Uint32 program,
      Uint32 shadertype,
      Uint32 pname,
      Pointer<Int32> values,
    );

// typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value)
typedef PFNGLPATCHPARAMETERIPROCDart = void Function(int pname, int value);
typedef PFNGLPATCHPARAMETERIPROC = Void Function(Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values)
typedef PFNGLPATCHPARAMETERFVPROCDart =
    void Function(int pname, Pointer<Float> values);
typedef PFNGLPATCHPARAMETERFVPROC =
    Void Function(Uint32 pname, Pointer<Float> values);

// typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id)
typedef PFNGLBINDTRANSFORMFEEDBACKPROCDart = void Function(int target, int id);
typedef PFNGLBINDTRANSFORMFEEDBACKPROC =
    Void Function(Uint32 target, Uint32 id);

// typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids)
typedef PFNGLDELETETRANSFORMFEEDBACKSPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLDELETETRANSFORMFEEDBACKSPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)
typedef PFNGLGENTRANSFORMFEEDBACKSPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLGENTRANSFORMFEEDBACKSPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id)
typedef PFNGLISTRANSFORMFEEDBACKPROCDart = int Function(int id);
typedef PFNGLISTRANSFORMFEEDBACKPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void)
typedef PFNGLPAUSETRANSFORMFEEDBACKPROCDart = void Function();
typedef PFNGLPAUSETRANSFORMFEEDBACKPROC = Void Function();

// typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void)
typedef PFNGLRESUMETRANSFORMFEEDBACKPROCDart = void Function();
typedef PFNGLRESUMETRANSFORMFEEDBACKPROC = Void Function();

// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id)
typedef PFNGLDRAWTRANSFORMFEEDBACKPROCDart = void Function(int mode, int id);
typedef PFNGLDRAWTRANSFORMFEEDBACKPROC = Void Function(Uint32 mode, Uint32 id);

// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream)
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROCDart =
    void Function(int mode, int id, int stream);
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC =
    Void Function(Uint32 mode, Uint32 id, Uint32 stream);

// typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id)
typedef PFNGLBEGINQUERYINDEXEDPROCDart =
    void Function(int target, int index, int id);
typedef PFNGLBEGINQUERYINDEXEDPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 id);

// typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index)
typedef PFNGLENDQUERYINDEXEDPROCDart = void Function(int target, int index);
typedef PFNGLENDQUERYINDEXEDPROC = Void Function(Uint32 target, Uint32 index);

// typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETQUERYINDEXEDIVPROCDart =
    void Function(int target, int index, int pname, Pointer<Int32> params);
typedef PFNGLGETQUERYINDEXEDIVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void)
typedef PFNGLRELEASESHADERCOMPILERPROCDart = void Function();
typedef PFNGLRELEASESHADERCOMPILERPROC = Void Function();

// typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)
typedef PFNGLSHADERBINARYPROCDart =
    void Function(
      int count,
      Pointer<Uint32> shaders,
      int binaryFormat,
      Pointer<NativeType> binary,
      int length,
    );
typedef PFNGLSHADERBINARYPROC =
    Void Function(
      Uint32 count,
      Pointer<Uint32> shaders,
      Uint32 binaryFormat,
      Pointer<NativeType> binary,
      Uint32 length,
    );

// typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
typedef PFNGLGETSHADERPRECISIONFORMATPROCDart =
    void Function(
      int shadertype,
      int precisiontype,
      Pointer<Int32> range,
      Pointer<Int32> precision,
    );
typedef PFNGLGETSHADERPRECISIONFORMATPROC =
    Void Function(
      Uint32 shadertype,
      Uint32 precisiontype,
      Pointer<Int32> range,
      Pointer<Int32> precision,
    );

// typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f)
typedef PFNGLDEPTHRANGEFPROCDart = void Function(double n, double f);
typedef PFNGLDEPTHRANGEFPROC = Void Function(Float n, Float f);

// typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d)
typedef PFNGLCLEARDEPTHFPROCDart = void Function(double d);
typedef PFNGLCLEARDEPTHFPROC = Void Function(Float d);

// typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
typedef PFNGLGETPROGRAMBINARYPROCDart =
    void Function(
      int program,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> binaryFormat,
      Pointer<NativeType> binary,
    );
typedef PFNGLGETPROGRAMBINARYPROC =
    Void Function(
      Uint32 program,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> binaryFormat,
      Pointer<NativeType> binary,
    );

// typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
typedef PFNGLPROGRAMBINARYPROCDart =
    void Function(
      int program,
      int binaryFormat,
      Pointer<NativeType> binary,
      int length,
    );
typedef PFNGLPROGRAMBINARYPROC =
    Void Function(
      Uint32 program,
      Uint32 binaryFormat,
      Pointer<NativeType> binary,
      Uint32 length,
    );

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value)
typedef PFNGLPROGRAMPARAMETERIPROCDart =
    void Function(int program, int pname, int value);
typedef PFNGLPROGRAMPARAMETERIPROC =
    Void Function(Uint32 program, Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program)
typedef PFNGLUSEPROGRAMSTAGESPROCDart =
    void Function(int pipeline, int stages, int program);
typedef PFNGLUSEPROGRAMSTAGESPROC =
    Void Function(Uint32 pipeline, Uint32 stages, Uint32 program);

// typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program)
typedef PFNGLACTIVESHADERPROGRAMPROCDart =
    void Function(int pipeline, int program);
typedef PFNGLACTIVESHADERPROGRAMPROC =
    Void Function(Uint32 pipeline, Uint32 program);

// typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings)
typedef PFNGLCREATESHADERPROGRAMVPROCDart =
    int Function(int type, int count, Pointer<Pointer<Int8>> strings);
typedef PFNGLCREATESHADERPROGRAMVPROC =
    Uint32 Function(Uint32 type, Uint32 count, Pointer<Pointer<Int8>> strings);

// typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline)
typedef PFNGLBINDPROGRAMPIPELINEPROCDart = void Function(int pipeline);
typedef PFNGLBINDPROGRAMPIPELINEPROC = Void Function(Uint32 pipeline);

// typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines)
typedef PFNGLDELETEPROGRAMPIPELINESPROCDart =
    void Function(int n, Pointer<Uint32> pipelines);
typedef PFNGLDELETEPROGRAMPIPELINESPROC =
    Void Function(Uint32 n, Pointer<Uint32> pipelines);

// typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)
typedef PFNGLGENPROGRAMPIPELINESPROCDart =
    void Function(int n, Pointer<Uint32> pipelines);
typedef PFNGLGENPROGRAMPIPELINESPROC =
    Void Function(Uint32 n, Pointer<Uint32> pipelines);

// typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline)
typedef PFNGLISPROGRAMPIPELINEPROCDart = int Function(int pipeline);
typedef PFNGLISPROGRAMPIPELINEPROC = Int32 Function(Uint32 pipeline);

// typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params)
typedef PFNGLGETPROGRAMPIPELINEIVPROCDart =
    void Function(int pipeline, int pname, Pointer<Int32> params);
typedef PFNGLGETPROGRAMPIPELINEIVPROC =
    Void Function(Uint32 pipeline, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0)
typedef PFNGLPROGRAMUNIFORM1IPROCDart =
    void Function(int program, int location, int v0);
typedef PFNGLPROGRAMUNIFORM1IPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM1IVPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM1IVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0)
typedef PFNGLPROGRAMUNIFORM1FPROCDart =
    void Function(int program, int location, double v0);
typedef PFNGLPROGRAMUNIFORM1FPROC =
    Void Function(Uint32 program, Int32 location, Float v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM1FVPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM1FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0)
typedef PFNGLPROGRAMUNIFORM1DPROCDart =
    void Function(int program, int location, double v0);
typedef PFNGLPROGRAMUNIFORM1DPROC =
    Void Function(Uint32 program, Int32 location, Double v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM1DVPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM1DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0)
typedef PFNGLPROGRAMUNIFORM1UIPROCDart =
    void Function(int program, int location, int v0);
typedef PFNGLPROGRAMUNIFORM1UIPROC =
    Void Function(Uint32 program, Int32 location, Uint32 v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM1UIVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM1UIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1)
typedef PFNGLPROGRAMUNIFORM2IPROCDart =
    void Function(int program, int location, int v0, int v1);
typedef PFNGLPROGRAMUNIFORM2IPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM2IVPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM2IVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)
typedef PFNGLPROGRAMUNIFORM2FPROCDart =
    void Function(int program, int location, double v0, double v1);
typedef PFNGLPROGRAMUNIFORM2FPROC =
    Void Function(Uint32 program, Int32 location, Float v0, Float v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM2FVPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM2FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1)
typedef PFNGLPROGRAMUNIFORM2DPROCDart =
    void Function(int program, int location, double v0, double v1);
typedef PFNGLPROGRAMUNIFORM2DPROC =
    Void Function(Uint32 program, Int32 location, Double v0, Double v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM2DVPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM2DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)
typedef PFNGLPROGRAMUNIFORM2UIPROCDart =
    void Function(int program, int location, int v0, int v1);
typedef PFNGLPROGRAMUNIFORM2UIPROC =
    Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM2UIVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM2UIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
typedef PFNGLPROGRAMUNIFORM3IPROCDart =
    void Function(int program, int location, int v0, int v1, int v2);
typedef PFNGLPROGRAMUNIFORM3IPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM3IVPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM3IVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
typedef PFNGLPROGRAMUNIFORM3FPROCDart =
    void Function(int program, int location, double v0, double v1, double v2);
typedef PFNGLPROGRAMUNIFORM3FPROC =
    Void Function(Uint32 program, Int32 location, Float v0, Float v1, Float v2);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM3FVPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM3FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
typedef PFNGLPROGRAMUNIFORM3DPROCDart =
    void Function(int program, int location, double v0, double v1, double v2);
typedef PFNGLPROGRAMUNIFORM3DPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Double v0,
      Double v1,
      Double v2,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM3DVPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM3DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
typedef PFNGLPROGRAMUNIFORM3UIPROCDart =
    void Function(int program, int location, int v0, int v1, int v2);
typedef PFNGLPROGRAMUNIFORM3UIPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 v0,
      Uint32 v1,
      Uint32 v2,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM3UIVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM3UIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
typedef PFNGLPROGRAMUNIFORM4IPROCDart =
    void Function(int program, int location, int v0, int v1, int v2, int v3);
typedef PFNGLPROGRAMUNIFORM4IPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Int32 v0,
      Int32 v1,
      Int32 v2,
      Int32 v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM4IVPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM4IVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
typedef PFNGLPROGRAMUNIFORM4FPROCDart =
    void Function(
      int program,
      int location,
      double v0,
      double v1,
      double v2,
      double v3,
    );
typedef PFNGLPROGRAMUNIFORM4FPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Float v0,
      Float v1,
      Float v2,
      Float v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM4FVPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM4FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
typedef PFNGLPROGRAMUNIFORM4DPROCDart =
    void Function(
      int program,
      int location,
      double v0,
      double v1,
      double v2,
      double v3,
    );
typedef PFNGLPROGRAMUNIFORM4DPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Double v0,
      Double v1,
      Double v2,
      Double v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM4DVPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM4DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
typedef PFNGLPROGRAMUNIFORM4UIPROCDart =
    void Function(int program, int location, int v0, int v1, int v2, int v3);
typedef PFNGLPROGRAMUNIFORM4UIPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 v0,
      Uint32 v1,
      Uint32 v2,
      Uint32 v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM4UIVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM4UIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline)
typedef PFNGLVALIDATEPROGRAMPIPELINEPROCDart = void Function(int pipeline);
typedef PFNGLVALIDATEPROGRAMPIPELINEPROC = Void Function(Uint32 pipeline);

// typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
typedef PFNGLGETPROGRAMPIPELINEINFOLOGPROCDart =
    void Function(
      int pipeline,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );
typedef PFNGLGETPROGRAMPIPELINEINFOLOGPROC =
    Void Function(
      Uint32 pipeline,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x)
typedef PFNGLVERTEXATTRIBL1DPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIBL1DPROC = Void Function(Uint32 index, Double x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y)
typedef PFNGLVERTEXATTRIBL2DPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIBL2DPROC =
    Void Function(Uint32 index, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXATTRIBL3DPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIBL3DPROC =
    Void Function(Uint32 index, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXATTRIBL4DPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIBL4DPROC =
    Void Function(Uint32 index, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL1DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL1DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL2DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL2DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL3DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL3DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL4DVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL4DVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBLPOINTERPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBLPOINTERPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETVERTEXATTRIBLDVPROCDart =
    void Function(int index, int pname, Pointer<Double> params);
typedef PFNGLGETVERTEXATTRIBLDVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v)
typedef PFNGLVIEWPORTARRAYVPROCDart =
    void Function(int first, int count, Pointer<Float> v);
typedef PFNGLVIEWPORTARRAYVPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
typedef PFNGLVIEWPORTINDEXEDFPROCDart =
    void Function(int index, double x, double y, double w, double h);
typedef PFNGLVIEWPORTINDEXEDFPROC =
    Void Function(Uint32 index, Float x, Float y, Float w, Float h);

// typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVIEWPORTINDEXEDFVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVIEWPORTINDEXEDFVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v)
typedef PFNGLSCISSORARRAYVPROCDart =
    void Function(int first, int count, Pointer<Int32> v);
typedef PFNGLSCISSORARRAYVPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
typedef PFNGLSCISSORINDEXEDPROCDart =
    void Function(int index, int left, int bottom, int width, int height);
typedef PFNGLSCISSORINDEXEDPROC =
    Void Function(
      Uint32 index,
      Int32 left,
      Int32 bottom,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v)
typedef PFNGLSCISSORINDEXEDVPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLSCISSORINDEXEDVPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v)
typedef PFNGLDEPTHRANGEARRAYVPROCDart =
    void Function(int first, int count, Pointer<Double> v);
typedef PFNGLDEPTHRANGEARRAYVPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f)
typedef PFNGLDEPTHRANGEINDEXEDPROCDart =
    void Function(int index, double n, double f);
typedef PFNGLDEPTHRANGEINDEXEDPROC =
    Void Function(Uint32 index, Double n, Double f);

// typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data)
typedef PfnglgetfloatiVprocDart =
    void Function(int target, int index, Pointer<Float> data);
typedef PfnglgetfloatiVproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> data);

// typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data)
typedef PfnglgetdoubleiVprocDart =
    void Function(int target, int index, Pointer<Double> data);
typedef PfnglgetdoubleiVproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> data);

// typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
typedef PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROCDart =
    void Function(
      int mode,
      int first,
      int count,
      int instancecount,
      int baseinstance,
    );
typedef PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC =
    Void Function(
      Uint32 mode,
      Int32 first,
      Uint32 count,
      Uint32 instancecount,
      Uint32 baseinstance,
    );

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
typedef PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int instancecount,
      int baseinstance,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 instancecount,
      Uint32 baseinstance,
    );

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int instancecount,
      int basevertex,
      int baseinstance,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 instancecount,
      Int32 basevertex,
      Uint32 baseinstance,
    );

// typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params)
typedef PFNGLGETINTERNALFORMATIVPROCDart =
    void Function(
      int target,
      int internalformat,
      int pname,
      int count,
      Pointer<Int32> params,
    );
typedef PFNGLGETINTERNALFORMATIVPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 pname,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
typedef PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROCDart =
    void Function(
      int program,
      int bufferIndex,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC =
    Void Function(
      Uint32 program,
      Uint32 bufferIndex,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
typedef PFNGLBINDIMAGETEXTUREPROCDart =
    void Function(
      int unit,
      int texture,
      int level,
      int layered,
      int layer,
      int access,
      int format,
    );
typedef PFNGLBINDIMAGETEXTUREPROC =
    Void Function(
      Uint32 unit,
      Uint32 texture,
      Int32 level,
      Int32 layered,
      Int32 layer,
      Uint32 access,
      Uint32 format,
    );

// typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers)
typedef PFNGLMEMORYBARRIERPROCDart = void Function(int barriers);
typedef PFNGLMEMORYBARRIERPROC = Void Function(Uint32 barriers);

// typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
typedef PFNGLTEXSTORAGE1DPROCDart =
    void Function(int target, int levels, int internalformat, int width);
typedef PFNGLTEXSTORAGE1DPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLTEXSTORAGE2DPROCDart =
    void Function(
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLTEXSTORAGE2DPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLTEXSTORAGE3DPROCDart =
    void Function(
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
      int depth,
    );
typedef PFNGLTEXSTORAGE3DPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount)
typedef PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROCDart =
    void Function(int mode, int id, int instancecount);
typedef PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC =
    Void Function(Uint32 mode, Uint32 id, Uint32 instancecount);

// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROCDart =
    void Function(int mode, int id, int stream, int instancecount);
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC =
    Void Function(Uint32 mode, Uint32 id, Uint32 stream, Uint32 instancecount);

// typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)
typedef GLDEBUGPROCDart =
    void Function(
      int source,
      int type,
      int id,
      int severity,
      int length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );
typedef GLDEBUGPROC =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 id,
      Uint32 severity,
      Uint32 length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );

// typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARBUFFERDATAPROCDart =
    void Function(
      int target,
      int internalformat,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARBUFFERDATAPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARBUFFERSUBDATAPROCDart =
    void Function(
      int target,
      int internalformat,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARBUFFERSUBDATAPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
typedef PFNGLDISPATCHCOMPUTEPROCDart =
    void Function(int numGroupsX, int numGroupsY, int numGroupsZ);
typedef PFNGLDISPATCHCOMPUTEPROC =
    Void Function(Uint32 numGroupsX, Uint32 numGroupsY, Uint32 numGroupsZ);

// typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect)
typedef PFNGLDISPATCHCOMPUTEINDIRECTPROCDart =
    void Function(Pointer<NativeType> indirect);
typedef PFNGLDISPATCHCOMPUTEINDIRECTPROC =
    Void Function(Pointer<NativeType> indirect);

// typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
typedef PFNGLCOPYIMAGESUBDATAPROCDart =
    void Function(
      int srcName,
      int srcTarget,
      int srcLevel,
      int srcX,
      int srcY,
      int srcZ,
      int dstName,
      int dstTarget,
      int dstLevel,
      int dstX,
      int dstY,
      int dstZ,
      int srcWidth,
      int srcHeight,
      int srcDepth,
    );
typedef PFNGLCOPYIMAGESUBDATAPROC =
    Void Function(
      Uint32 srcName,
      Uint32 srcTarget,
      Int32 srcLevel,
      Int32 srcX,
      Int32 srcY,
      Int32 srcZ,
      Uint32 dstName,
      Uint32 dstTarget,
      Int32 dstLevel,
      Int32 dstX,
      Int32 dstY,
      Int32 dstZ,
      Uint32 srcWidth,
      Uint32 srcHeight,
      Uint32 srcDepth,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)
typedef PFNGLFRAMEBUFFERPARAMETERIPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLFRAMEBUFFERPARAMETERIPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETFRAMEBUFFERPARAMETERIVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAMEBUFFERPARAMETERIVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params)
typedef PFNGLGETINTERNALFORMATI64VPROCDart =
    void Function(
      int target,
      int internalformat,
      int pname,
      int count,
      Pointer<Int64> params,
    );
typedef PFNGLGETINTERNALFORMATI64VPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 pname,
      Uint32 count,
      Pointer<Int64> params,
    );

// typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLINVALIDATETEXSUBIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
    );
typedef PFNGLINVALIDATETEXSUBIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level)
typedef PFNGLINVALIDATETEXIMAGEPROCDart = void Function(int texture, int level);
typedef PFNGLINVALIDATETEXIMAGEPROC =
    Void Function(Uint32 texture, Int32 level);

// typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
typedef PFNGLINVALIDATEBUFFERSUBDATAPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );
typedef PFNGLINVALIDATEBUFFERSUBDATAPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );

// typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer)
typedef PFNGLINVALIDATEBUFFERDATAPROCDart = void Function(int buffer);
typedef PFNGLINVALIDATEBUFFERDATAPROC = Void Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments)
typedef PFNGLINVALIDATEFRAMEBUFFERPROCDart =
    void Function(int target, int numAttachments, Pointer<Uint32> attachments);
typedef PFNGLINVALIDATEFRAMEBUFFERPROC =
    Void Function(
      Uint32 target,
      Uint32 numAttachments,
      Pointer<Uint32> attachments,
    );

// typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLINVALIDATESUBFRAMEBUFFERPROCDart =
    void Function(
      int target,
      int numAttachments,
      Pointer<Uint32> attachments,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLINVALIDATESUBFRAMEBUFFERPROC =
    Void Function(
      Uint32 target,
      Uint32 numAttachments,
      Pointer<Uint32> attachments,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
typedef PFNGLMULTIDRAWARRAYSINDIRECTPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      int drawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Uint32 drawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      int drawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Uint32 drawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params)
typedef PFNGLGETPROGRAMINTERFACEIVPROCDart =
    void Function(
      int program,
      int programInterface,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETPROGRAMINTERFACEIVPROC =
    Void Function(
      Uint32 program,
      Uint32 programInterface,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)
typedef PFNGLGETPROGRAMRESOURCEINDEXPROCDart =
    int Function(int program, int programInterface, Pointer<Utf8> name);
typedef PFNGLGETPROGRAMRESOURCEINDEXPROC =
    Uint32 Function(
      Uint32 program,
      Uint32 programInterface,
      Pointer<Utf8> name,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
typedef PFNGLGETPROGRAMRESOURCENAMEPROCDart =
    void Function(
      int program,
      int programInterface,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );
typedef PFNGLGETPROGRAMRESOURCENAMEPROC =
    Void Function(
      Uint32 program,
      Uint32 programInterface,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params)
typedef PFNGLGETPROGRAMRESOURCEIVPROCDart =
    void Function(
      int program,
      int programInterface,
      int index,
      int propCount,
      Pointer<Uint32> props,
      int count,
      Pointer<Uint32> length,
      Pointer<Int32> params,
    );
typedef PFNGLGETPROGRAMRESOURCEIVPROC =
    Void Function(
      Uint32 program,
      Uint32 programInterface,
      Uint32 index,
      Uint32 propCount,
      Pointer<Uint32> props,
      Uint32 count,
      Pointer<Uint32> length,
      Pointer<Int32> params,
    );

// typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name)
typedef PFNGLGETPROGRAMRESOURCELOCATIONPROCDart =
    int Function(int program, int programInterface, Pointer<Utf8> name);
typedef PFNGLGETPROGRAMRESOURCELOCATIONPROC =
    Int32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8> name);

// typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)
typedef PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROCDart =
    int Function(int program, int programInterface, Pointer<Utf8> name);
typedef PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC =
    Int32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
typedef PFNGLSHADERSTORAGEBLOCKBINDINGPROCDart =
    void Function(int program, int storageBlockIndex, int storageBlockBinding);
typedef PFNGLSHADERSTORAGEBLOCKBINDINGPROC =
    Void Function(
      Uint32 program,
      Uint32 storageBlockIndex,
      Uint32 storageBlockBinding,
    );

// typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLTEXBUFFERRANGEPROCDart =
    void Function(
      int target,
      int internalformat,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLTEXBUFFERRANGEPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
typedef PFNGLTEXSTORAGE2DMULTISAMPLEPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int fixedsamplelocations,
    );
typedef PFNGLTEXSTORAGE2DMULTISAMPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
typedef PFNGLTEXSTORAGE3DMULTISAMPLEPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int depth,
      int fixedsamplelocations,
    );
typedef PFNGLTEXSTORAGE3DMULTISAMPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
typedef PFNGLTEXTUREVIEWPROCDart =
    void Function(
      int texture,
      int target,
      int origtexture,
      int internalformat,
      int minlevel,
      int numlevels,
      int minlayer,
      int numlayers,
    );
typedef PFNGLTEXTUREVIEWPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 origtexture,
      Uint32 internalformat,
      Uint32 minlevel,
      Uint32 numlevels,
      Uint32 minlayer,
      Uint32 numlayers,
    );

// typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
typedef PFNGLBINDVERTEXBUFFERPROCDart =
    void Function(
      int bindingindex,
      int buffer,
      Pointer<NativeType> offset,
      int stride,
    );
typedef PFNGLBINDVERTEXBUFFERPROC =
    Void Function(
      Uint32 bindingindex,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
typedef PFNGLVERTEXATTRIBFORMATPROCDart =
    void Function(
      int attribindex,
      int size,
      int type,
      int normalized,
      int relativeoffset,
    );
typedef PFNGLVERTEXATTRIBFORMATPROC =
    Void Function(
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXATTRIBIFORMATPROCDart =
    void Function(int attribindex, int size, int type, int relativeoffset);
typedef PFNGLVERTEXATTRIBIFORMATPROC =
    Void Function(
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXATTRIBLFORMATPROCDart =
    void Function(int attribindex, int size, int type, int relativeoffset);
typedef PFNGLVERTEXATTRIBLFORMATPROC =
    Void Function(
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex)
typedef PFNGLVERTEXATTRIBBINDINGPROCDart =
    void Function(int attribindex, int bindingindex);
typedef PFNGLVERTEXATTRIBBINDINGPROC =
    Void Function(Uint32 attribindex, Uint32 bindingindex);

// typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor)
typedef PFNGLVERTEXBINDINGDIVISORPROCDart =
    void Function(int bindingindex, int divisor);
typedef PFNGLVERTEXBINDINGDIVISORPROC =
    Void Function(Uint32 bindingindex, Uint32 divisor);

// typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
typedef PFNGLDEBUGMESSAGECONTROLPROCDart =
    void Function(
      int source,
      int type,
      int severity,
      int count,
      Pointer<Uint32> ids,
      int enabled,
    );
typedef PFNGLDEBUGMESSAGECONTROLPROC =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 severity,
      Uint32 count,
      Pointer<Uint32> ids,
      Int32 enabled,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
typedef PFNGLDEBUGMESSAGEINSERTPROCDart =
    void Function(
      int source,
      int type,
      int id,
      int severity,
      int length,
      Pointer<Utf8> buf,
    );
typedef PFNGLDEBUGMESSAGEINSERTPROC =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 id,
      Uint32 severity,
      Uint32 length,
      Pointer<Utf8> buf,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam)
typedef PFNGLDEBUGMESSAGECALLBACKPROCDart =
    void Function(
      Pointer<NativeFunction<GLDEBUGPROC>> callback,
      Pointer<NativeType> userParam,
    );
typedef PFNGLDEBUGMESSAGECALLBACKPROC =
    Void Function(
      Pointer<NativeFunction<GLDEBUGPROC>> callback,
      Pointer<NativeType> userParam,
    );

// typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
typedef PFNGLGETDEBUGMESSAGELOGPROCDart =
    int Function(
      int count,
      int bufSize,
      Pointer<Uint32> sources,
      Pointer<Uint32> types,
      Pointer<Uint32> ids,
      Pointer<Uint32> severities,
      Pointer<Uint32> lengths,
      Pointer<Int8> messageLog,
    );
typedef PFNGLGETDEBUGMESSAGELOGPROC =
    Uint32 Function(
      Uint32 count,
      Uint32 bufSize,
      Pointer<Uint32> sources,
      Pointer<Uint32> types,
      Pointer<Uint32> ids,
      Pointer<Uint32> severities,
      Pointer<Uint32> lengths,
      Pointer<Int8> messageLog,
    );

// typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message)
typedef PFNGLPUSHDEBUGGROUPPROCDart =
    void Function(int source, int id, int length, Pointer<Utf8> message);
typedef PFNGLPUSHDEBUGGROUPPROC =
    Void Function(
      Uint32 source,
      Uint32 id,
      Uint32 length,
      Pointer<Utf8> message,
    );

// typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void)
typedef PFNGLPOPDEBUGGROUPPROCDart = void Function();
typedef PFNGLPOPDEBUGGROUPPROC = Void Function();

// typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
typedef PFNGLOBJECTLABELPROCDart =
    void Function(int identifier, int name, int length, Pointer<Utf8> label);
typedef PFNGLOBJECTLABELPROC =
    Void Function(
      Uint32 identifier,
      Uint32 name,
      Uint32 length,
      Pointer<Utf8> label,
    );

// typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
typedef PFNGLGETOBJECTLABELPROCDart =
    void Function(
      int identifier,
      int name,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );
typedef PFNGLGETOBJECTLABELPROC =
    Void Function(
      Uint32 identifier,
      Uint32 name,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );

// typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label)
typedef PFNGLOBJECTPTRLABELPROCDart =
    void Function(Pointer<NativeType> ptr, int length, Pointer<Utf8> label);
typedef PFNGLOBJECTPTRLABELPROC =
    Void Function(Pointer<NativeType> ptr, Uint32 length, Pointer<Utf8> label);

// typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
typedef PFNGLGETOBJECTPTRLABELPROCDart =
    void Function(
      Pointer<NativeType> ptr,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );
typedef PFNGLGETOBJECTPTRLABELPROC =
    Void Function(
      Pointer<NativeType> ptr,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );

// typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
typedef PFNGLBUFFERSTORAGEPROCDart =
    void Function(
      int target,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int flags,
    );
typedef PFNGLBUFFERSTORAGEPROC =
    Void Function(
      Uint32 target,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARTEXIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARTEXIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARTEXSUBIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARTEXSUBIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
typedef PFNGLBINDBUFFERSBASEPROCDart =
    void Function(int target, int first, int count, Pointer<Uint32> buffers);
typedef PFNGLBINDBUFFERSBASEPROC =
    Void Function(
      Uint32 target,
      Uint32 first,
      Uint32 count,
      Pointer<Uint32> buffers,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
typedef PFNGLBINDBUFFERSRANGEPROCDart =
    void Function(
      int target,
      int first,
      int count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Pointer<Uint32>> sizes,
    );
typedef PFNGLBINDBUFFERSRANGEPROC =
    Void Function(
      Uint32 target,
      Uint32 first,
      Uint32 count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Pointer<Uint32>> sizes,
    );

// typedef void (APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)
typedef PFNGLBINDTEXTURESPROCDart =
    void Function(int first, int count, Pointer<Uint32> textures);
typedef PFNGLBINDTEXTURESPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers)
typedef PFNGLBINDSAMPLERSPROCDart =
    void Function(int first, int count, Pointer<Uint32> samplers);
typedef PFNGLBINDSAMPLERSPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Uint32> samplers);

// typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)
typedef PFNGLBINDIMAGETEXTURESPROCDart =
    void Function(int first, int count, Pointer<Uint32> textures);
typedef PFNGLBINDIMAGETEXTURESPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
typedef PFNGLBINDVERTEXBUFFERSPROCDart =
    void Function(
      int first,
      int count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Uint32> strides,
    );
typedef PFNGLBINDVERTEXBUFFERSPROC =
    Void Function(
      Uint32 first,
      Uint32 count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Uint32> strides,
    );

// typedef void (APIENTRYP PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth)
typedef PFNGLCLIPCONTROLPROCDart = void Function(int origin, int depth);
typedef PFNGLCLIPCONTROLPROC = Void Function(Uint32 origin, Uint32 depth);

// typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)
typedef PFNGLCREATETRANSFORMFEEDBACKSPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLCREATETRANSFORMFEEDBACKSPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer)
typedef PFNGLTRANSFORMFEEDBACKBUFFERBASEPROCDart =
    void Function(int xfb, int index, int buffer);
typedef PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC =
    Void Function(Uint32 xfb, Uint32 index, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROCDart =
    void Function(
      int xfb,
      int index,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC =
    Void Function(
      Uint32 xfb,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint *param)
typedef PFNGLGETTRANSFORMFEEDBACKIVPROCDart =
    void Function(int xfb, int pname, Pointer<Int32> param);
typedef PFNGLGETTRANSFORMFEEDBACKIVPROC =
    Void Function(Uint32 xfb, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param)
typedef PfnglgettransformfeedbackiVprocDart =
    void Function(int xfb, int pname, int index, Pointer<Int32> param);
typedef PfnglgettransformfeedbackiVproc =
    Void Function(Uint32 xfb, Uint32 pname, Uint32 index, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param)
typedef Pfnglgettransformfeedbacki64VprocDart =
    void Function(int xfb, int pname, int index, Pointer<Int64> param);
typedef Pfnglgettransformfeedbacki64Vproc =
    Void Function(Uint32 xfb, Uint32 pname, Uint32 index, Pointer<Int64> param);

// typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint *buffers)
typedef PFNGLCREATEBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> buffers);
typedef PFNGLCREATEBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> buffers);

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
typedef PFNGLNAMEDBUFFERSTORAGEPROCDart =
    void Function(
      int buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int flags,
    );
typedef PFNGLNAMEDBUFFERSTORAGEPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
typedef PFNGLNAMEDBUFFERDATAPROCDart =
    void Function(
      int buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int usage,
    );
typedef PFNGLNAMEDBUFFERDATAPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 usage,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
typedef PFNGLNAMEDBUFFERSUBDATAPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLNAMEDBUFFERSUBDATAPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
typedef PFNGLCOPYNAMEDBUFFERSUBDATAPROCDart =
    void Function(
      int readBuffer,
      int writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );
typedef PFNGLCOPYNAMEDBUFFERSUBDATAPROC =
    Void Function(
      Uint32 readBuffer,
      Uint32 writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARNAMEDBUFFERDATAPROCDart =
    void Function(
      int buffer,
      int internalformat,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARNAMEDBUFFERDATAPROC =
    Void Function(
      Uint32 buffer,
      Uint32 internalformat,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARNAMEDBUFFERSUBDATAPROCDart =
    void Function(
      int buffer,
      int internalformat,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARNAMEDBUFFERSUBDATAPROC =
    Void Function(
      Uint32 buffer,
      Uint32 internalformat,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access)
typedef PFNGLMAPNAMEDBUFFERPROCDart =
    Pointer<NativeType> Function(int buffer, int access);
typedef PFNGLMAPNAMEDBUFFERPROC =
    Pointer<NativeType> Function(Uint32 buffer, Uint32 access);

// typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
typedef PFNGLMAPNAMEDBUFFERRANGEPROCDart =
    Pointer<NativeType> Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      int access,
    );
typedef PFNGLMAPNAMEDBUFFERRANGEPROC =
    Pointer<NativeType> Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      Uint32 access,
    );

// typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer)
typedef PFNGLUNMAPNAMEDBUFFERPROCDart = int Function(int buffer);
typedef PFNGLUNMAPNAMEDBUFFERPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDBUFFERPARAMETERIVPROCDart =
    void Function(int buffer, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDBUFFERPARAMETERIVPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64 *params)
typedef PFNGLGETNAMEDBUFFERPARAMETERI64VPROCDart =
    void Function(int buffer, int pname, Pointer<Int64> params);
typedef PFNGLGETNAMEDBUFFERPARAMETERI64VPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void **params)
typedef PFNGLGETNAMEDBUFFERPOINTERVPROCDart =
    void Function(int buffer, int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETNAMEDBUFFERPOINTERVPROC =
    Void Function(
      Uint32 buffer,
      Uint32 pname,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
typedef PFNGLGETNAMEDBUFFERSUBDATAPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLGETNAMEDBUFFERSUBDATAPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)
typedef PFNGLCREATEFRAMEBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> framebuffers);
typedef PFNGLCREATEFRAMEBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> framebuffers);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int renderbuffertarget,
      int renderbuffer,
    );
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 renderbuffertarget,
      Uint32 renderbuffer,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param)
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIPROCDart =
    void Function(int framebuffer, int pname, int param);
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC =
    Void Function(Uint32 framebuffer, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREPROCDart =
    void Function(int framebuffer, int attachment, int texture, int level);
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int texture,
      int level,
      int layer,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 layer,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum buf)
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROCDart =
    void Function(int framebuffer, int buf);
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC =
    Void Function(Uint32 framebuffer, Uint32 buf);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs)
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROCDart =
    void Function(int framebuffer, int n, Pointer<Uint32> bufs);
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC =
    Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32> bufs);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum src)
typedef PFNGLNAMEDFRAMEBUFFERREADBUFFERPROCDart =
    void Function(int framebuffer, int src);
typedef PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC =
    Void Function(Uint32 framebuffer, Uint32 src);

// typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROCDart =
    void Function(
      int framebuffer,
      int numAttachments,
      Pointer<Uint32> attachments,
    );
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 numAttachments,
      Pointer<Uint32> attachments,
    );

// typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROCDart =
    void Function(
      int framebuffer,
      int numAttachments,
      Pointer<Uint32> attachments,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 numAttachments,
      Pointer<Uint32> attachments,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)
typedef PFNGLCLEARNAMEDFRAMEBUFFERIVPROCDart =
    void Function(
      int framebuffer,
      int buffer,
      int drawbuffer,
      Pointer<Int32> value,
    );
typedef PFNGLCLEARNAMEDFRAMEBUFFERIVPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 buffer,
      Int32 drawbuffer,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)
typedef PFNGLCLEARNAMEDFRAMEBUFFERUIVPROCDart =
    void Function(
      int framebuffer,
      int buffer,
      int drawbuffer,
      Pointer<Uint32> value,
    );
typedef PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 buffer,
      Int32 drawbuffer,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
typedef PFNGLCLEARNAMEDFRAMEBUFFERFVPROCDart =
    void Function(
      int framebuffer,
      int buffer,
      int drawbuffer,
      Pointer<Float> value,
    );
typedef PFNGLCLEARNAMEDFRAMEBUFFERFVPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 buffer,
      Int32 drawbuffer,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
typedef PFNGLCLEARNAMEDFRAMEBUFFERFIPROCDart =
    void Function(
      int framebuffer,
      int buffer,
      int drawbuffer,
      double depth,
      int stencil,
    );
typedef PFNGLCLEARNAMEDFRAMEBUFFERFIPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 buffer,
      Int32 drawbuffer,
      Float depth,
      Int32 stencil,
    );

// typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
typedef PFNGLBLITNAMEDFRAMEBUFFERPROCDart =
    void Function(
      int readFramebuffer,
      int drawFramebuffer,
      int srcX0,
      int srcY0,
      int srcX1,
      int srcY1,
      int dstX0,
      int dstY0,
      int dstX1,
      int dstY1,
      int mask,
      int filter,
    );
typedef PFNGLBLITNAMEDFRAMEBUFFERPROC =
    Void Function(
      Uint32 readFramebuffer,
      Uint32 drawFramebuffer,
      Int32 srcX0,
      Int32 srcY0,
      Int32 srcX1,
      Int32 srcY1,
      Int32 dstX0,
      Int32 dstY0,
      Int32 dstX1,
      Int32 dstY1,
      Uint32 mask,
      Uint32 filter,
    );

// typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target)
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROCDart =
    int Function(int framebuffer, int target);
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC =
    Uint32 Function(Uint32 framebuffer, Uint32 target);

// typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint *param)
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROCDart =
    void Function(int framebuffer, int pname, Pointer<Int32> param);
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC =
    Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)
typedef PFNGLCREATERENDERBUFFERSPROCDart =
    void Function(int n, Pointer<Uint32> renderbuffers);
typedef PFNGLCREATERENDERBUFFERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> renderbuffers);

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEPROCDart =
    void Function(int renderbuffer, int internalformat, int width, int height);
typedef PFNGLNAMEDRENDERBUFFERSTORAGEPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROCDart =
    void Function(
      int renderbuffer,
      int samples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROCDart =
    void Function(int renderbuffer, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC =
    Void Function(Uint32 renderbuffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint *textures)
typedef PFNGLCREATETEXTURESPROCDart =
    void Function(int target, int n, Pointer<Uint32> textures);
typedef PFNGLCREATETEXTURESPROC =
    Void Function(Uint32 target, Uint32 n, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer)
typedef PFNGLTEXTUREBUFFERPROCDart =
    void Function(int texture, int internalformat, int buffer);
typedef PFNGLTEXTUREBUFFERPROC =
    Void Function(Uint32 texture, Uint32 internalformat, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLTEXTUREBUFFERRANGEPROCDart =
    void Function(
      int texture,
      int internalformat,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLTEXTUREBUFFERRANGEPROC =
    Void Function(
      Uint32 texture,
      Uint32 internalformat,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
typedef PFNGLTEXTURESTORAGE1DPROCDart =
    void Function(int texture, int levels, int internalformat, int width);
typedef PFNGLTEXTURESTORAGE1DPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLTEXTURESTORAGE2DPROCDart =
    void Function(
      int texture,
      int levels,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLTEXTURESTORAGE2DPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLTEXTURESTORAGE3DPROCDart =
    void Function(
      int texture,
      int levels,
      int internalformat,
      int width,
      int height,
      int depth,
    );
typedef PFNGLTEXTURESTORAGE3DPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEPROCDart =
    void Function(
      int texture,
      int samples,
      int internalformat,
      int width,
      int height,
      int fixedsamplelocations,
    );
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC =
    Void Function(
      Uint32 texture,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEPROCDart =
    void Function(
      int texture,
      int samples,
      int internalformat,
      int width,
      int height,
      int depth,
      int fixedsamplelocations,
    );
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC =
    Void Function(
      Uint32 texture,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE1DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int width,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE1DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE2DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE2DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE3DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE3DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int width,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYTEXTURESUBIMAGE1DPROCDart =
    void Function(int texture, int level, int xoffset, int x, int y, int width);
typedef PFNGLCOPYTEXTURESUBIMAGE1DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXTURESUBIMAGE2DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXTURESUBIMAGE2DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXTURESUBIMAGE3DPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXTURESUBIMAGE3DPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param)
typedef PFNGLTEXTUREPARAMETERFPROCDart =
    void Function(int texture, int pname, double param);
typedef PFNGLTEXTUREPARAMETERFPROC =
    Void Function(Uint32 texture, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat *param)
typedef PFNGLTEXTUREPARAMETERFVPROCDart =
    void Function(int texture, int pname, Pointer<Float> param);
typedef PFNGLTEXTUREPARAMETERFVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Float> param);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param)
typedef PFNGLTEXTUREPARAMETERIPROCDart =
    void Function(int texture, int pname, int param);
typedef PFNGLTEXTUREPARAMETERIPROC =
    Void Function(Uint32 texture, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint *params)
typedef PFNGLTEXTUREPARAMETERIIVPROCDart =
    void Function(int texture, int pname, Pointer<Int32> params);
typedef PFNGLTEXTUREPARAMETERIIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint *params)
typedef PFNGLTEXTUREPARAMETERIUIVPROCDart =
    void Function(int texture, int pname, Pointer<Uint32> params);
typedef PFNGLTEXTUREPARAMETERIUIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint *param)
typedef PFNGLTEXTUREPARAMETERIVPROCDart =
    void Function(int texture, int pname, Pointer<Int32> param);
typedef PFNGLTEXTUREPARAMETERIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture)
typedef PFNGLGENERATETEXTUREMIPMAPPROCDart = void Function(int texture);
typedef PFNGLGENERATETEXTUREMIPMAPPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture)
typedef PFNGLBINDTEXTUREUNITPROCDart = void Function(int unit, int texture);
typedef PFNGLBINDTEXTUREUNITPROC = Void Function(Uint32 unit, Uint32 texture);

// typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
typedef PFNGLGETTEXTUREIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETTEXTUREIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels)
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int bufSize,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat *params)
typedef PFNGLGETTEXTURELEVELPARAMETERFVPROCDart =
    void Function(int texture, int level, int pname, Pointer<Float> params);
typedef PFNGLGETTEXTURELEVELPARAMETERFVPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint *params)
typedef PFNGLGETTEXTURELEVELPARAMETERIVPROCDart =
    void Function(int texture, int level, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXTURELEVELPARAMETERIVPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat *params)
typedef PFNGLGETTEXTUREPARAMETERFVPROCDart =
    void Function(int texture, int pname, Pointer<Float> params);
typedef PFNGLGETTEXTUREPARAMETERFVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint *params)
typedef PFNGLGETTEXTUREPARAMETERIIVPROCDart =
    void Function(int texture, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXTUREPARAMETERIIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint *params)
typedef PFNGLGETTEXTUREPARAMETERIUIVPROCDart =
    void Function(int texture, int pname, Pointer<Uint32> params);
typedef PFNGLGETTEXTUREPARAMETERIUIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint *params)
typedef PFNGLGETTEXTUREPARAMETERIVPROCDart =
    void Function(int texture, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXTUREPARAMETERIVPROC =
    Void Function(Uint32 texture, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)
typedef PFNGLCREATEVERTEXARRAYSPROCDart =
    void Function(int n, Pointer<Uint32> arrays);
typedef PFNGLCREATEVERTEXARRAYSPROC =
    Void Function(Uint32 n, Pointer<Uint32> arrays);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)
typedef PFNGLDISABLEVERTEXARRAYATTRIBPROCDart =
    void Function(int vaobj, int index);
typedef PFNGLDISABLEVERTEXARRAYATTRIBPROC =
    Void Function(Uint32 vaobj, Uint32 index);

// typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)
typedef PFNGLENABLEVERTEXARRAYATTRIBPROCDart =
    void Function(int vaobj, int index);
typedef PFNGLENABLEVERTEXARRAYATTRIBPROC =
    Void Function(Uint32 vaobj, Uint32 index);

// typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer)
typedef PFNGLVERTEXARRAYELEMENTBUFFERPROCDart =
    void Function(int vaobj, int buffer);
typedef PFNGLVERTEXARRAYELEMENTBUFFERPROC =
    Void Function(Uint32 vaobj, Uint32 buffer);

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
typedef PFNGLVERTEXARRAYVERTEXBUFFERPROCDart =
    void Function(
      int vaobj,
      int bindingindex,
      int buffer,
      Pointer<NativeType> offset,
      int stride,
    );
typedef PFNGLVERTEXARRAYVERTEXBUFFERPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 bindingindex,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
typedef PFNGLVERTEXARRAYVERTEXBUFFERSPROCDart =
    void Function(
      int vaobj,
      int first,
      int count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Uint32> strides,
    );
typedef PFNGLVERTEXARRAYVERTEXBUFFERSPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 first,
      Uint32 count,
      Pointer<Uint32> buffers,
      Pointer<Pointer<NativeType>> offsets,
      Pointer<Uint32> strides,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
typedef PFNGLVERTEXARRAYATTRIBBINDINGPROCDart =
    void Function(int vaobj, int attribindex, int bindingindex);
typedef PFNGLVERTEXARRAYATTRIBBINDINGPROC =
    Void Function(Uint32 vaobj, Uint32 attribindex, Uint32 bindingindex);

// typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYATTRIBFORMATPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int normalized,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYATTRIBFORMATPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYATTRIBIFORMATPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYATTRIBIFORMATPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYATTRIBLFORMATPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYATTRIBLFORMATPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)
typedef PFNGLVERTEXARRAYBINDINGDIVISORPROCDart =
    void Function(int vaobj, int bindingindex, int divisor);
typedef PFNGLVERTEXARRAYBINDINGDIVISORPROC =
    Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor);

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint *param)
typedef PFNGLGETVERTEXARRAYIVPROCDart =
    void Function(int vaobj, int pname, Pointer<Int32> param);
typedef PFNGLGETVERTEXARRAYIVPROC =
    Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param)
typedef PFNGLGETVERTEXARRAYINDEXEDIVPROCDart =
    void Function(int vaobj, int index, int pname, Pointer<Int32> param);
typedef PFNGLGETVERTEXARRAYINDEXEDIVPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 index,
      Uint32 pname,
      Pointer<Int32> param,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)
typedef PFNGLGETVERTEXARRAYINDEXED64IVPROCDart =
    void Function(int vaobj, int index, int pname, Pointer<Int64> param);
typedef PFNGLGETVERTEXARRAYINDEXED64IVPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 index,
      Uint32 pname,
      Pointer<Int64> param,
    );

// typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint *samplers)
typedef PFNGLCREATESAMPLERSPROCDart =
    void Function(int n, Pointer<Uint32> samplers);
typedef PFNGLCREATESAMPLERSPROC =
    Void Function(Uint32 n, Pointer<Uint32> samplers);

// typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)
typedef PFNGLCREATEPROGRAMPIPELINESPROCDart =
    void Function(int n, Pointer<Uint32> pipelines);
typedef PFNGLCREATEPROGRAMPIPELINESPROC =
    Void Function(Uint32 n, Pointer<Uint32> pipelines);

// typedef void (APIENTRYP PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint *ids)
typedef PFNGLCREATEQUERIESPROCDart =
    void Function(int target, int n, Pointer<Uint32> ids);
typedef PFNGLCREATEQUERIESPROC =
    Void Function(Uint32 target, Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
typedef PFNGLGETQUERYBUFFEROBJECTI64VPROCDart =
    void Function(int id, int buffer, int pname, Pointer<NativeType> offset);
typedef PFNGLGETQUERYBUFFEROBJECTI64VPROC =
    Void Function(
      Uint32 id,
      Uint32 buffer,
      Uint32 pname,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
typedef PFNGLGETQUERYBUFFEROBJECTIVPROCDart =
    void Function(int id, int buffer, int pname, Pointer<NativeType> offset);
typedef PFNGLGETQUERYBUFFEROBJECTIVPROC =
    Void Function(
      Uint32 id,
      Uint32 buffer,
      Uint32 pname,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
typedef PFNGLGETQUERYBUFFEROBJECTUI64VPROCDart =
    void Function(int id, int buffer, int pname, Pointer<NativeType> offset);
typedef PFNGLGETQUERYBUFFEROBJECTUI64VPROC =
    Void Function(
      Uint32 id,
      Uint32 buffer,
      Uint32 pname,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
typedef PFNGLGETQUERYBUFFEROBJECTUIVPROCDart =
    void Function(int id, int buffer, int pname, Pointer<NativeType> offset);
typedef PFNGLGETQUERYBUFFEROBJECTUIVPROC =
    Void Function(
      Uint32 id,
      Uint32 buffer,
      Uint32 pname,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers)
typedef PFNGLMEMORYBARRIERBYREGIONPROCDart = void Function(int barriers);
typedef PFNGLMEMORYBARRIERBYREGIONPROC = Void Function(Uint32 barriers);

// typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
typedef PFNGLGETTEXTURESUBIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETTEXTURESUBIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)
typedef PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int bufSize,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC) (void)
typedef PFNGLGETGRAPHICSRESETSTATUSPROCDart = int Function();
typedef PFNGLGETGRAPHICSRESETSTATUSPROC = Uint32 Function();

// typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, void *pixels)
typedef PFNGLGETNCOMPRESSEDTEXIMAGEPROCDart =
    void Function(int target, int lod, int bufSize, Pointer<NativeType> pixels);
typedef PFNGLGETNCOMPRESSEDTEXIMAGEPROC =
    Void Function(
      Uint32 target,
      Int32 lod,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETNTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
typedef PFNGLGETNTEXIMAGEPROCDart =
    void Function(
      int target,
      int level,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETNTEXIMAGEPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
typedef PFNGLGETNUNIFORMDVPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Double> params,
    );
typedef PFNGLGETNUNIFORMDVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
typedef PFNGLGETNUNIFORMFVPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Float> params,
    );
typedef PFNGLGETNUNIFORMFVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)
typedef PFNGLGETNUNIFORMIVPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Int32> params,
    );
typedef PFNGLGETNUNIFORMIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
typedef PFNGLGETNUNIFORMUIVPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Uint32> params,
    );
typedef PFNGLGETNUNIFORMUIVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
typedef PFNGLREADNPIXELSPROCDart =
    void Function(
      int x,
      int y,
      int width,
      int height,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> data,
    );
typedef PFNGLREADNPIXELSPROC =
    Void Function(
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETNMAPDVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
typedef PFNGLGETNMAPDVPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Double> v);
typedef PFNGLGETNMAPDVPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Double> v,
    );

// typedef void (APIENTRYP PFNGLGETNMAPFVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
typedef PFNGLGETNMAPFVPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Float> v);
typedef PFNGLGETNMAPFVPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLGETNMAPIVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v)
typedef PFNGLGETNMAPIVPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Int32> v);
typedef PFNGLGETNMAPIVPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Int32> v,
    );

// typedef void (APIENTRYP PFNGLGETNPIXELMAPFVPROC) (GLenum map, GLsizei bufSize, GLfloat *values)
typedef PFNGLGETNPIXELMAPFVPROCDart =
    void Function(int map, int bufSize, Pointer<Float> values);
typedef PFNGLGETNPIXELMAPFVPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Float> values);

// typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVPROC) (GLenum map, GLsizei bufSize, GLuint *values)
typedef PFNGLGETNPIXELMAPUIVPROCDart =
    void Function(int map, int bufSize, Pointer<Uint32> values);
typedef PFNGLGETNPIXELMAPUIVPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint32> values);

// typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVPROC) (GLenum map, GLsizei bufSize, GLushort *values)
typedef PFNGLGETNPIXELMAPUSVPROCDart =
    void Function(int map, int bufSize, Pointer<Uint16> values);
typedef PFNGLGETNPIXELMAPUSVPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint16> values);

// typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEPROC) (GLsizei bufSize, GLubyte *pattern)
typedef PFNGLGETNPOLYGONSTIPPLEPROCDart =
    void Function(int bufSize, Pointer<Uint8> pattern);
typedef PFNGLGETNPOLYGONSTIPPLEPROC =
    Void Function(Uint32 bufSize, Pointer<Uint8> pattern);

// typedef void (APIENTRYP PFNGLGETNCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)
typedef PFNGLGETNCOLORTABLEPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> table,
    );
typedef PFNGLGETNCOLORTABLEPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)
typedef PFNGLGETNCONVOLUTIONFILTERPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> image,
    );
typedef PFNGLGETNCONVOLUTIONFILTERPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)
typedef PFNGLGETNSEPARABLEFILTERPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int rowBufSize,
      Pointer<NativeType> row,
      int columnBufSize,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );
typedef PFNGLGETNSEPARABLEFILTERPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 rowBufSize,
      Pointer<NativeType> row,
      Uint32 columnBufSize,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );

// typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
typedef PFNGLGETNHISTOGRAMPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> values,
    );
typedef PFNGLGETNHISTOGRAMPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
typedef PFNGLGETNMINMAXPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> values,
    );
typedef PFNGLGETNMINMAXPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC) (void)
typedef PFNGLTEXTUREBARRIERPROCDart = void Function();
typedef PFNGLTEXTUREBARRIERPROC = Void Function();

// typedef void (APIENTRYP PFNGLSPECIALIZESHADERPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
typedef PFNGLSPECIALIZESHADERPROCDart =
    void Function(
      int shader,
      Pointer<Utf8> pEntryPoint,
      int numSpecializationConstants,
      Pointer<Uint32> pConstantIndex,
      Pointer<Uint32> pConstantValue,
    );
typedef PFNGLSPECIALIZESHADERPROC =
    Void Function(
      Uint32 shader,
      Pointer<Utf8> pEntryPoint,
      Uint32 numSpecializationConstants,
      Pointer<Uint32> pConstantIndex,
      Pointer<Uint32> pConstantValue,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      int maxdrawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      Uint32 maxdrawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      int maxdrawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      Uint32 maxdrawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPPROC) (GLfloat factor, GLfloat units, GLfloat clamp)
typedef PFNGLPOLYGONOFFSETCLAMPPROCDart =
    void Function(double factor, double units, double clamp);
typedef PFNGLPOLYGONOFFSETCLAMPPROC =
    Void Function(Float factor, Float units, Float clamp);

// typedef void (APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
typedef PFNGLPRIMITIVEBOUNDINGBOXARBPROCDart =
    void Function(
      double minX,
      double minY,
      double minZ,
      double minW,
      double maxX,
      double maxY,
      double maxZ,
      double maxW,
    );
typedef PFNGLPRIMITIVEBOUNDINGBOXARBPROC =
    Void Function(
      Float minX,
      Float minY,
      Float minZ,
      Float minW,
      Float maxX,
      Float maxY,
      Float maxZ,
      Float maxW,
    );

// typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture)
typedef PFNGLGETTEXTUREHANDLEARBPROCDart = int Function(int texture);
typedef PFNGLGETTEXTUREHANDLEARBPROC = Uint64 Function(Uint32 texture);

// typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler)
typedef PFNGLGETTEXTURESAMPLERHANDLEARBPROCDart =
    int Function(int texture, int sampler);
typedef PFNGLGETTEXTURESAMPLERHANDLEARBPROC =
    Uint64 Function(Uint32 texture, Uint32 sampler);

// typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)
typedef PFNGLMAKETEXTUREHANDLERESIDENTARBPROCDart = void Function(int handle);
typedef PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = Void Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle)
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROCDart =
    void Function(int handle);
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = Void Function(Uint64 handle);

// typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
typedef PFNGLGETIMAGEHANDLEARBPROCDart =
    int Function(int texture, int level, int layered, int layer, int format);
typedef PFNGLGETIMAGEHANDLEARBPROC =
    Uint64 Function(
      Uint32 texture,
      Int32 level,
      Int32 layered,
      Int32 layer,
      Uint32 format,
    );

// typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access)
typedef PFNGLMAKEIMAGEHANDLERESIDENTARBPROCDart =
    void Function(int handle, int access);
typedef PFNGLMAKEIMAGEHANDLERESIDENTARBPROC =
    Void Function(Uint64 handle, Uint32 access);

// typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle)
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROCDart = void Function(int handle);
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = Void Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value)
typedef PFNGLUNIFORMHANDLEUI64ARBPROCDart =
    void Function(int location, int value);
typedef PFNGLUNIFORMHANDLEUI64ARBPROC =
    Void Function(Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORMHANDLEUI64VARBPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORMHANDLEUI64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value)
typedef PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROCDart =
    void Function(int program, int location, int value);
typedef PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC =
    Void Function(Uint32 program, Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> values);
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> values,
    );

// typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)
typedef PFNGLISTEXTUREHANDLERESIDENTARBPROCDart = int Function(int handle);
typedef PFNGLISTEXTUREHANDLERESIDENTARBPROC = Int32 Function(Uint64 handle);

// typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle)
typedef PFNGLISIMAGEHANDLERESIDENTARBPROCDart = int Function(int handle);
typedef PFNGLISIMAGEHANDLERESIDENTARBPROC = Int32 Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x)
typedef PFNGLVERTEXATTRIBL1UI64ARBPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBL1UI64ARBPROC = Void Function(Uint32 index, Uint64 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v)
typedef PFNGLVERTEXATTRIBL1UI64VARBPROCDart =
    void Function(int index, Pointer<Uint64> v);
typedef PFNGLVERTEXATTRIBL1UI64VARBPROC =
    Void Function(Uint32 index, Pointer<Uint64> v);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params)
typedef PFNGLGETVERTEXATTRIBLUI64VARBPROCDart =
    void Function(int index, int pname, Pointer<Uint64> params);
typedef PFNGLGETVERTEXATTRIBLUI64VARBPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Uint64> params);

// typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags)
typedef PFNGLCREATESYNCFROMCLEVENTARBPROCDart =
    Pointer<NativeType> Function(
      Pointer<Pointer<NativeType>> context,
      Pointer<Pointer<NativeType>> event,
      int flags,
    );
typedef PFNGLCREATESYNCFROMCLEVENTARBPROC =
    Pointer<NativeType> Function(
      Pointer<Pointer<NativeType>> context,
      Pointer<Pointer<NativeType>> event,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp)
typedef PFNGLCLAMPCOLORARBPROCDart = void Function(int target, int clamp);
typedef PFNGLCLAMPCOLORARBPROC = Void Function(Uint32 target, Uint32 clamp);

// typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
typedef PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROCDart =
    void Function(
      int numGroupsX,
      int numGroupsY,
      int numGroupsZ,
      int groupSizeX,
      int groupSizeY,
      int groupSizeZ,
    );
typedef PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC =
    Void Function(
      Uint32 numGroupsX,
      Uint32 numGroupsY,
      Uint32 numGroupsZ,
      Uint32 groupSizeX,
      Uint32 groupSizeY,
      Uint32 groupSizeZ,
    );

// typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)
typedef GLDEBUGPROCARBDart =
    void Function(
      int source,
      int type,
      int id,
      int severity,
      int length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );
typedef GLDEBUGPROCARB =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 id,
      Uint32 severity,
      Uint32 length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
typedef PFNGLDEBUGMESSAGECONTROLARBPROCDart =
    void Function(
      int source,
      int type,
      int severity,
      int count,
      Pointer<Uint32> ids,
      int enabled,
    );
typedef PFNGLDEBUGMESSAGECONTROLARBPROC =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 severity,
      Uint32 count,
      Pointer<Uint32> ids,
      Int32 enabled,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
typedef PFNGLDEBUGMESSAGEINSERTARBPROCDart =
    void Function(
      int source,
      int type,
      int id,
      int severity,
      int length,
      Pointer<Utf8> buf,
    );
typedef PFNGLDEBUGMESSAGEINSERTARBPROC =
    Void Function(
      Uint32 source,
      Uint32 type,
      Uint32 id,
      Uint32 severity,
      Uint32 length,
      Pointer<Utf8> buf,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam)
typedef PFNGLDEBUGMESSAGECALLBACKARBPROCDart =
    void Function(
      Pointer<NativeFunction<GLDEBUGPROCARB>> callback,
      Pointer<NativeType> userParam,
    );
typedef PFNGLDEBUGMESSAGECALLBACKARBPROC =
    Void Function(
      Pointer<NativeFunction<GLDEBUGPROCARB>> callback,
      Pointer<NativeType> userParam,
    );

// typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
typedef PFNGLGETDEBUGMESSAGELOGARBPROCDart =
    int Function(
      int count,
      int bufSize,
      Pointer<Uint32> sources,
      Pointer<Uint32> types,
      Pointer<Uint32> ids,
      Pointer<Uint32> severities,
      Pointer<Uint32> lengths,
      Pointer<Int8> messageLog,
    );
typedef PFNGLGETDEBUGMESSAGELOGARBPROC =
    Uint32 Function(
      Uint32 count,
      Uint32 bufSize,
      Pointer<Uint32> sources,
      Pointer<Uint32> types,
      Pointer<Uint32> ids,
      Pointer<Uint32> severities,
      Pointer<Uint32> lengths,
      Pointer<Int8> messageLog,
    );

// typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs)
typedef PFNGLDRAWBUFFERSARBPROCDart =
    void Function(int n, Pointer<Uint32> bufs);
typedef PFNGLDRAWBUFFERSARBPROC = Void Function(Uint32 n, Pointer<Uint32> bufs);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode)
typedef PFNGLBLENDEQUATIONIARBPROCDart = void Function(int buf, int mode);
typedef PFNGLBLENDEQUATIONIARBPROC = Void Function(Uint32 buf, Uint32 mode);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
typedef PFNGLBLENDEQUATIONSEPARATEIARBPROCDart =
    void Function(int buf, int modeRgb, int modeAlpha);
typedef PFNGLBLENDEQUATIONSEPARATEIARBPROC =
    Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha);

// typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst)
typedef PFNGLBLENDFUNCIARBPROCDart = void Function(int buf, int src, int dst);
typedef PFNGLBLENDFUNCIARBPROC =
    Void Function(Uint32 buf, Uint32 src, Uint32 dst);

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
typedef PFNGLBLENDFUNCSEPARATEIARBPROCDart =
    void Function(int buf, int srcRgb, int dstRgb, int srcAlpha, int dstAlpha);
typedef PFNGLBLENDFUNCSEPARATEIARBPROC =
    Void Function(
      Uint32 buf,
      Uint32 srcRgb,
      Uint32 dstRgb,
      Uint32 srcAlpha,
      Uint32 dstAlpha,
    );

// typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
typedef PFNGLDRAWARRAYSINSTANCEDARBPROCDart =
    void Function(int mode, int first, int count, int primcount);
typedef PFNGLDRAWARRAYSINSTANCEDARBPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount);

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
typedef PFNGLDRAWELEMENTSINSTANCEDARBPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int primcount,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDARBPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string)
typedef PFNGLPROGRAMSTRINGARBPROCDart =
    void Function(int target, int format, int len, Pointer<NativeType> string);
typedef PFNGLPROGRAMSTRINGARBPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 len,
      Pointer<NativeType> string,
    );

// typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program)
typedef PFNGLBINDPROGRAMARBPROCDart = void Function(int target, int program);
typedef PFNGLBINDPROGRAMARBPROC = Void Function(Uint32 target, Uint32 program);

// typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs)
typedef PFNGLDELETEPROGRAMSARBPROCDart =
    void Function(int n, Pointer<Uint32> programs);
typedef PFNGLDELETEPROGRAMSARBPROC =
    Void Function(Uint32 n, Pointer<Uint32> programs);

// typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs)
typedef PFNGLGENPROGRAMSARBPROCDart =
    void Function(int n, Pointer<Uint32> programs);
typedef PFNGLGENPROGRAMSARBPROC =
    Void Function(Uint32 n, Pointer<Uint32> programs);

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLPROGRAMENVPARAMETER4DARBPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMENVPARAMETER4DARBPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params)
typedef PFNGLPROGRAMENVPARAMETER4DVARBPROCDart =
    void Function(int target, int index, Pointer<Double> params);
typedef PFNGLPROGRAMENVPARAMETER4DVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLPROGRAMENVPARAMETER4FARBPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMENVPARAMETER4FARBPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params)
typedef PFNGLPROGRAMENVPARAMETER4FVARBPROCDart =
    void Function(int target, int index, Pointer<Float> params);
typedef PFNGLPROGRAMENVPARAMETER4FVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLPROGRAMLOCALPARAMETER4DARBPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMLOCALPARAMETER4DARBPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params)
typedef PFNGLPROGRAMLOCALPARAMETER4DVARBPROCDart =
    void Function(int target, int index, Pointer<Double> params);
typedef PFNGLPROGRAMLOCALPARAMETER4DVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLPROGRAMLOCALPARAMETER4FARBPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMLOCALPARAMETER4FARBPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params)
typedef PFNGLPROGRAMLOCALPARAMETER4FVARBPROCDart =
    void Function(int target, int index, Pointer<Float> params);
typedef PFNGLPROGRAMLOCALPARAMETER4FVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params)
typedef PFNGLGETPROGRAMENVPARAMETERDVARBPROCDart =
    void Function(int target, int index, Pointer<Double> params);
typedef PFNGLGETPROGRAMENVPARAMETERDVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params)
typedef PFNGLGETPROGRAMENVPARAMETERFVARBPROCDart =
    void Function(int target, int index, Pointer<Float> params);
typedef PFNGLGETPROGRAMENVPARAMETERFVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params)
typedef PFNGLGETPROGRAMLOCALPARAMETERDVARBPROCDart =
    void Function(int target, int index, Pointer<Double> params);
typedef PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params)
typedef PFNGLGETPROGRAMLOCALPARAMETERFVARBPROCDart =
    void Function(int target, int index, Pointer<Float> params);
typedef PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETPROGRAMIVARBPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETPROGRAMIVARBPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string)
typedef PFNGLGETPROGRAMSTRINGARBPROCDart =
    void Function(int target, int pname, Pointer<NativeType> string);
typedef PFNGLGETPROGRAMSTRINGARBPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<NativeType> string);

// typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program)
typedef PFNGLISPROGRAMARBPROCDart = int Function(int program);
typedef PFNGLISPROGRAMARBPROC = Int32 Function(Uint32 program);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value)
typedef PFNGLPROGRAMPARAMETERIARBPROCDart =
    void Function(int program, int pname, int value);
typedef PFNGLPROGRAMPARAMETERIARBPROC =
    Void Function(Uint32 program, Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTUREARBPROCDart =
    void Function(int target, int attachment, int texture, int level);
typedef PFNGLFRAMEBUFFERTEXTUREARBPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
typedef PFNGLFRAMEBUFFERTEXTURELAYERARBPROCDart =
    void Function(
      int target,
      int attachment,
      int texture,
      int level,
      int layer,
    );
typedef PFNGLFRAMEBUFFERTEXTURELAYERARBPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 layer,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
typedef PFNGLFRAMEBUFFERTEXTUREFACEARBPROCDart =
    void Function(int target, int attachment, int texture, int level, int face);
typedef PFNGLFRAMEBUFFERTEXTUREFACEARBPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Uint32 face,
    );

// typedef void (APIENTRYP PFNGLSPECIALIZESHADERARBPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
typedef PFNGLSPECIALIZESHADERARBPROCDart =
    void Function(
      int shader,
      Pointer<Utf8> pEntryPoint,
      int numSpecializationConstants,
      Pointer<Uint32> pConstantIndex,
      Pointer<Uint32> pConstantValue,
    );
typedef PFNGLSPECIALIZESHADERARBPROC =
    Void Function(
      Uint32 shader,
      Pointer<Utf8> pEntryPoint,
      Uint32 numSpecializationConstants,
      Pointer<Uint32> pConstantIndex,
      Pointer<Uint32> pConstantValue,
    );

// typedef void (APIENTRYP PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x)
typedef PFNGLUNIFORM1I64ARBPROCDart = void Function(int location, int x);
typedef PFNGLUNIFORM1I64ARBPROC = Void Function(Int32 location, Int64 x);

// typedef void (APIENTRYP PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y)
typedef PFNGLUNIFORM2I64ARBPROCDart = void Function(int location, int x, int y);
typedef PFNGLUNIFORM2I64ARBPROC =
    Void Function(Int32 location, Int64 x, Int64 y);

// typedef void (APIENTRYP PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z)
typedef PFNGLUNIFORM3I64ARBPROCDart =
    void Function(int location, int x, int y, int z);
typedef PFNGLUNIFORM3I64ARBPROC =
    Void Function(Int32 location, Int64 x, Int64 y, Int64 z);

// typedef void (APIENTRYP PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
typedef PFNGLUNIFORM4I64ARBPROCDart =
    void Function(int location, int x, int y, int z, int w);
typedef PFNGLUNIFORM4I64ARBPROC =
    Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);

// typedef void (APIENTRYP PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLUNIFORM1I64VARBPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM1I64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLUNIFORM2I64VARBPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM2I64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLUNIFORM3I64VARBPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM3I64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLUNIFORM4I64VARBPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM4I64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x)
typedef PFNGLUNIFORM1UI64ARBPROCDart = void Function(int location, int x);
typedef PFNGLUNIFORM1UI64ARBPROC = Void Function(Int32 location, Uint64 x);

// typedef void (APIENTRYP PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y)
typedef PFNGLUNIFORM2UI64ARBPROCDart =
    void Function(int location, int x, int y);
typedef PFNGLUNIFORM2UI64ARBPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y);

// typedef void (APIENTRYP PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
typedef PFNGLUNIFORM3UI64ARBPROCDart =
    void Function(int location, int x, int y, int z);
typedef PFNGLUNIFORM3UI64ARBPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z);

// typedef void (APIENTRYP PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
typedef PFNGLUNIFORM4UI64ARBPROCDart =
    void Function(int location, int x, int y, int z, int w);
typedef PFNGLUNIFORM4UI64ARBPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w);

// typedef void (APIENTRYP PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORM1UI64VARBPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM1UI64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORM2UI64VARBPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM2UI64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORM3UI64VARBPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM3UI64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORM4UI64VARBPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM4UI64VARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64 *params)
typedef PFNGLGETUNIFORMI64VARBPROCDart =
    void Function(int program, int location, Pointer<Int64> params);
typedef PFNGLGETUNIFORMI64VARBPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64 *params)
typedef PFNGLGETUNIFORMUI64VARBPROCDart =
    void Function(int program, int location, Pointer<Uint64> params);
typedef PFNGLGETUNIFORMUI64VARBPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params)
typedef PFNGLGETNUNIFORMI64VARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Int64> params,
    );
typedef PFNGLGETNUNIFORMI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Int64> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)
typedef PFNGLGETNUNIFORMUI64VARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Uint64> params,
    );
typedef PFNGLGETNUNIFORMUI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Uint64> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x)
typedef PFNGLPROGRAMUNIFORM1I64ARBPROCDart =
    void Function(int program, int location, int x);
typedef PFNGLPROGRAMUNIFORM1I64ARBPROC =
    Void Function(Uint32 program, Int32 location, Int64 x);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y)
typedef PFNGLPROGRAMUNIFORM2I64ARBPROCDart =
    void Function(int program, int location, int x, int y);
typedef PFNGLPROGRAMUNIFORM2I64ARBPROC =
    Void Function(Uint32 program, Int32 location, Int64 x, Int64 y);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
typedef PFNGLPROGRAMUNIFORM3I64ARBPROCDart =
    void Function(int program, int location, int x, int y, int z);
typedef PFNGLPROGRAMUNIFORM3I64ARBPROC =
    Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
typedef PFNGLPROGRAMUNIFORM4I64ARBPROCDart =
    void Function(int program, int location, int x, int y, int z, int w);
typedef PFNGLPROGRAMUNIFORM4I64ARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Int64 x,
      Int64 y,
      Int64 z,
      Int64 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLPROGRAMUNIFORM1I64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM1I64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLPROGRAMUNIFORM2I64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM2I64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLPROGRAMUNIFORM3I64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM3I64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)
typedef PFNGLPROGRAMUNIFORM4I64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM4I64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x)
typedef PFNGLPROGRAMUNIFORM1UI64ARBPROCDart =
    void Function(int program, int location, int x);
typedef PFNGLPROGRAMUNIFORM1UI64ARBPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y)
typedef PFNGLPROGRAMUNIFORM2UI64ARBPROCDart =
    void Function(int program, int location, int x, int y);
typedef PFNGLPROGRAMUNIFORM2UI64ARBPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
typedef PFNGLPROGRAMUNIFORM3UI64ARBPROCDart =
    void Function(int program, int location, int x, int y, int z);
typedef PFNGLPROGRAMUNIFORM3UI64ARBPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
typedef PFNGLPROGRAMUNIFORM4UI64ARBPROCDart =
    void Function(int program, int location, int x, int y, int z, int w);
typedef PFNGLPROGRAMUNIFORM4UI64ARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint64 x,
      Uint64 y,
      Uint64 z,
      Uint64 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLPROGRAMUNIFORM1UI64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM1UI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLPROGRAMUNIFORM2UI64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM2UI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLPROGRAMUNIFORM3UI64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM3UI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLPROGRAMUNIFORM4UI64VARBPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM4UI64VARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      int maxdrawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      Uint32 maxdrawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      int maxdrawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      Uint32 maxdrawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor)
typedef PFNGLVERTEXATTRIBDIVISORARBPROCDart =
    void Function(int index, int divisor);
typedef PFNGLVERTEXATTRIBDIVISORARBPROC =
    Void Function(Uint32 index, Uint32 divisor);

// typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index)
typedef PFNGLCURRENTPALETTEMATRIXARBPROCDart = void Function(int index);
typedef PFNGLCURRENTPALETTEMATRIXARBPROC = Void Function(Int32 index);

// typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices)
typedef PFNGLMATRIXINDEXUBVARBPROCDart =
    void Function(int size, Pointer<Uint8> indices);
typedef PFNGLMATRIXINDEXUBVARBPROC =
    Void Function(Int32 size, Pointer<Uint8> indices);

// typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices)
typedef PFNGLMATRIXINDEXUSVARBPROCDart =
    void Function(int size, Pointer<Uint16> indices);
typedef PFNGLMATRIXINDEXUSVARBPROC =
    Void Function(Int32 size, Pointer<Uint16> indices);

// typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices)
typedef PFNGLMATRIXINDEXUIVARBPROCDart =
    void Function(int size, Pointer<Uint32> indices);
typedef PFNGLMATRIXINDEXUIVARBPROC =
    Void Function(Int32 size, Pointer<Uint32> indices);

// typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLMATRIXINDEXPOINTERARBPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLMATRIXINDEXPOINTERARBPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert)
typedef PFNGLSAMPLECOVERAGEARBPROCDart =
    void Function(double value, int invert);
typedef PFNGLSAMPLECOVERAGEARBPROC = Void Function(Float value, Int32 invert);

// typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids)
typedef PFNGLGENQUERIESARBPROCDart = void Function(int n, Pointer<Uint32> ids);
typedef PFNGLGENQUERIESARBPROC = Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids)
typedef PFNGLDELETEQUERIESARBPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLDELETEQUERIESARBPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id)
typedef PFNGLISQUERYARBPROCDart = int Function(int id);
typedef PFNGLISQUERYARBPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id)
typedef PFNGLBEGINQUERYARBPROCDart = void Function(int target, int id);
typedef PFNGLBEGINQUERYARBPROC = Void Function(Uint32 target, Uint32 id);

// typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target)
typedef PFNGLENDQUERYARBPROCDart = void Function(int target);
typedef PFNGLENDQUERYARBPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETQUERYIVARBPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETQUERYIVARBPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params)
typedef PFNGLGETQUERYOBJECTIVARBPROCDart =
    void Function(int id, int pname, Pointer<Int32> params);
typedef PFNGLGETQUERYOBJECTIVARBPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params)
typedef PFNGLGETQUERYOBJECTUIVARBPROCDart =
    void Function(int id, int pname, Pointer<Uint32> params);
typedef PFNGLGETQUERYOBJECTUIVARBPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count)
typedef PFNGLMAXSHADERCOMPILERTHREADSARBPROCDart = void Function(int count);
typedef PFNGLMAXSHADERCOMPILERTHREADSARBPROC = Void Function(Uint32 count);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param)
typedef PFNGLPOINTPARAMETERFARBPROCDart =
    void Function(int pname, double param);
typedef PFNGLPOINTPARAMETERFARBPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLPOINTPARAMETERFVARBPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLPOINTPARAMETERFVARBPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void)
typedef PFNGLGETGRAPHICSRESETSTATUSARBPROCDart = int Function();
typedef PFNGLGETGRAPHICSRESETSTATUSARBPROC = Uint32 Function();

// typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)
typedef PFNGLGETNTEXIMAGEARBPROCDart =
    void Function(
      int target,
      int level,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> img,
    );
typedef PFNGLGETNTEXIMAGEARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> img,
    );

// typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
typedef PFNGLREADNPIXELSARBPROCDart =
    void Function(
      int x,
      int y,
      int width,
      int height,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> data,
    );
typedef PFNGLREADNPIXELSARBPROC =
    Void Function(
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img)
typedef PFNGLGETNCOMPRESSEDTEXIMAGEARBPROCDart =
    void Function(int target, int lod, int bufSize, Pointer<NativeType> img);
typedef PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC =
    Void Function(
      Uint32 target,
      Int32 lod,
      Uint32 bufSize,
      Pointer<NativeType> img,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
typedef PFNGLGETNUNIFORMFVARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Float> params,
    );
typedef PFNGLGETNUNIFORMFVARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)
typedef PFNGLGETNUNIFORMIVARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Int32> params,
    );
typedef PFNGLGETNUNIFORMIVARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
typedef PFNGLGETNUNIFORMUIVARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Uint32> params,
    );
typedef PFNGLGETNUNIFORMUIVARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
typedef PFNGLGETNUNIFORMDVARBPROCDart =
    void Function(
      int program,
      int location,
      int bufSize,
      Pointer<Double> params,
    );
typedef PFNGLGETNUNIFORMDVARBPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 bufSize,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
typedef PFNGLGETNMAPDVARBPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Double> v);
typedef PFNGLGETNMAPDVARBPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Double> v,
    );

// typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
typedef PFNGLGETNMAPFVARBPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Float> v);
typedef PFNGLGETNMAPFVARBPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v)
typedef PFNGLGETNMAPIVARBPROCDart =
    void Function(int target, int query, int bufSize, Pointer<Int32> v);
typedef PFNGLGETNMAPIVARBPROC =
    Void Function(
      Uint32 target,
      Uint32 query,
      Uint32 bufSize,
      Pointer<Int32> v,
    );

// typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values)
typedef PFNGLGETNPIXELMAPFVARBPROCDart =
    void Function(int map, int bufSize, Pointer<Float> values);
typedef PFNGLGETNPIXELMAPFVARBPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Float> values);

// typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values)
typedef PFNGLGETNPIXELMAPUIVARBPROCDart =
    void Function(int map, int bufSize, Pointer<Uint32> values);
typedef PFNGLGETNPIXELMAPUIVARBPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint32> values);

// typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values)
typedef PFNGLGETNPIXELMAPUSVARBPROCDart =
    void Function(int map, int bufSize, Pointer<Uint16> values);
typedef PFNGLGETNPIXELMAPUSVARBPROC =
    Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint16> values);

// typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern)
typedef PFNGLGETNPOLYGONSTIPPLEARBPROCDart =
    void Function(int bufSize, Pointer<Uint8> pattern);
typedef PFNGLGETNPOLYGONSTIPPLEARBPROC =
    Void Function(Uint32 bufSize, Pointer<Uint8> pattern);

// typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)
typedef PFNGLGETNCOLORTABLEARBPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> table,
    );
typedef PFNGLGETNCOLORTABLEARBPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)
typedef PFNGLGETNCONVOLUTIONFILTERARBPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> image,
    );
typedef PFNGLGETNCONVOLUTIONFILTERARBPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)
typedef PFNGLGETNSEPARABLEFILTERARBPROCDart =
    void Function(
      int target,
      int format,
      int type,
      int rowBufSize,
      Pointer<NativeType> row,
      int columnBufSize,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );
typedef PFNGLGETNSEPARABLEFILTERARBPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Uint32 rowBufSize,
      Pointer<NativeType> row,
      Uint32 columnBufSize,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );

// typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
typedef PFNGLGETNHISTOGRAMARBPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> values,
    );
typedef PFNGLGETNHISTOGRAMARBPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)
typedef PFNGLGETNMINMAXARBPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      int bufSize,
      Pointer<NativeType> values,
    );
typedef PFNGLGETNMINMAXARBPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Uint32 bufSize,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v)
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROCDart =
    void Function(int target, int start, int count, Pointer<Float> v);
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC =
    Void Function(Uint32 target, Uint32 start, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROCDart =
    void Function(int framebuffer, int start, int count, Pointer<Float> v);
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 start,
      Uint32 count,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLEVALUATEDEPTHVALUESARBPROC) (void)
typedef PFNGLEVALUATEDEPTHVALUESARBPROCDart = void Function();
typedef PFNGLEVALUATEDEPTHVALUESARBPROC = Void Function();

// typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value)
typedef PFNGLMINSAMPLESHADINGARBPROCDart = void Function(double value);
typedef PFNGLMINSAMPLESHADINGARBPROC = Void Function(Float value);

// typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj)
typedef PFNGLDELETEOBJECTARBPROCDart = void Function(Pointer<NativeType> obj);
typedef PFNGLDELETEOBJECTARBPROC = Void Function(Pointer<NativeType> obj);

// typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname)
typedef PFNGLGETHANDLEARBPROCDart = Pointer<NativeType> Function(int pname);
typedef PFNGLGETHANDLEARBPROC = Pointer<NativeType> Function(Uint32 pname);

// typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj)
typedef PFNGLDETACHOBJECTARBPROCDart =
    void Function(
      Pointer<NativeType> containerObj,
      Pointer<NativeType> attachedObj,
    );
typedef PFNGLDETACHOBJECTARBPROC =
    Void Function(
      Pointer<NativeType> containerObj,
      Pointer<NativeType> attachedObj,
    );

// typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType)
typedef PFNGLCREATESHADEROBJECTARBPROCDart =
    Pointer<NativeType> Function(int shaderType);
typedef PFNGLCREATESHADEROBJECTARBPROC =
    Pointer<NativeType> Function(Uint32 shaderType);

// typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
typedef PFNGLSHADERSOURCEARBPROCDart =
    void Function(
      Pointer<NativeType> shaderObj,
      int count,
      Pointer<Pointer<Int8>> string,
      Pointer<Int32> length,
    );
typedef PFNGLSHADERSOURCEARBPROC =
    Void Function(
      Pointer<NativeType> shaderObj,
      Uint32 count,
      Pointer<Pointer<Int8>> string,
      Pointer<Int32> length,
    );

// typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj)
typedef PFNGLCOMPILESHADERARBPROCDart =
    void Function(Pointer<NativeType> shaderObj);
typedef PFNGLCOMPILESHADERARBPROC =
    Void Function(Pointer<NativeType> shaderObj);

// typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void)
typedef PFNGLCREATEPROGRAMOBJECTARBPROCDart = Pointer<NativeType> Function();
typedef PFNGLCREATEPROGRAMOBJECTARBPROC = Pointer<NativeType> Function();

// typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj)
typedef PFNGLATTACHOBJECTARBPROCDart =
    void Function(Pointer<NativeType> containerObj, Pointer<NativeType> obj);
typedef PFNGLATTACHOBJECTARBPROC =
    Void Function(Pointer<NativeType> containerObj, Pointer<NativeType> obj);

// typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj)
typedef PFNGLLINKPROGRAMARBPROCDart =
    void Function(Pointer<NativeType> programObj);
typedef PFNGLLINKPROGRAMARBPROC = Void Function(Pointer<NativeType> programObj);

// typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj)
typedef PFNGLUSEPROGRAMOBJECTARBPROCDart =
    void Function(Pointer<NativeType> programObj);
typedef PFNGLUSEPROGRAMOBJECTARBPROC =
    Void Function(Pointer<NativeType> programObj);

// typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj)
typedef PFNGLVALIDATEPROGRAMARBPROCDart =
    void Function(Pointer<NativeType> programObj);
typedef PFNGLVALIDATEPROGRAMARBPROC =
    Void Function(Pointer<NativeType> programObj);

// typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0)
typedef PFNGLUNIFORM1FARBPROCDart = void Function(int location, double v0);
typedef PFNGLUNIFORM1FARBPROC = Void Function(Int32 location, Float v0);

// typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1)
typedef PFNGLUNIFORM2FARBPROCDart =
    void Function(int location, double v0, double v1);
typedef PFNGLUNIFORM2FARBPROC =
    Void Function(Int32 location, Float v0, Float v1);

// typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
typedef PFNGLUNIFORM3FARBPROCDart =
    void Function(int location, double v0, double v1, double v2);
typedef PFNGLUNIFORM3FARBPROC =
    Void Function(Int32 location, Float v0, Float v1, Float v2);

// typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
typedef PFNGLUNIFORM4FARBPROCDart =
    void Function(int location, double v0, double v1, double v2, double v3);
typedef PFNGLUNIFORM4FARBPROC =
    Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3);

// typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0)
typedef PFNGLUNIFORM1IARBPROCDart = void Function(int location, int v0);
typedef PFNGLUNIFORM1IARBPROC = Void Function(Int32 location, Int32 v0);

// typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1)
typedef PFNGLUNIFORM2IARBPROCDart = void Function(int location, int v0, int v1);
typedef PFNGLUNIFORM2IARBPROC =
    Void Function(Int32 location, Int32 v0, Int32 v1);

// typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2)
typedef PFNGLUNIFORM3IARBPROCDart =
    void Function(int location, int v0, int v1, int v2);
typedef PFNGLUNIFORM3IARBPROC =
    Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2);

// typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
typedef PFNGLUNIFORM4IARBPROCDart =
    void Function(int location, int v0, int v1, int v2, int v3);
typedef PFNGLUNIFORM4IARBPROC =
    Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);

// typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM1FVARBPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM1FVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM2FVARBPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM2FVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM3FVARBPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM3FVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLUNIFORM4FVARBPROCDart =
    void Function(int location, int count, Pointer<Float> value);
typedef PFNGLUNIFORM4FVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM1IVARBPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM1IVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM2IVARBPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM2IVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM3IVARBPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM3IVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value)
typedef PFNGLUNIFORM4IVARBPROCDart =
    void Function(int location, int count, Pointer<Int32> value);
typedef PFNGLUNIFORM4IVARBPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX2FVARBPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX2FVARBPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX3FVARBPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX3FVARBPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLUNIFORMMATRIX4FVARBPROCDart =
    void Function(int location, int count, int transpose, Pointer<Float> value);
typedef PFNGLUNIFORMMATRIX4FVARBPROC =
    Void Function(
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params)
typedef PFNGLGETOBJECTPARAMETERFVARBPROCDart =
    void Function(Pointer<NativeType> obj, int pname, Pointer<Float> params);
typedef PFNGLGETOBJECTPARAMETERFVARBPROC =
    Void Function(Pointer<NativeType> obj, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params)
typedef PFNGLGETOBJECTPARAMETERIVARBPROCDart =
    void Function(Pointer<NativeType> obj, int pname, Pointer<Int32> params);
typedef PFNGLGETOBJECTPARAMETERIVARBPROC =
    Void Function(Pointer<NativeType> obj, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
typedef PFNGLGETINFOLOGARBPROCDart =
    void Function(
      Pointer<NativeType> obj,
      int maxLength,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );
typedef PFNGLGETINFOLOGARBPROC =
    Void Function(
      Pointer<NativeType> obj,
      Uint32 maxLength,
      Pointer<Uint32> length,
      Pointer<Int8> infoLog,
    );

// typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
typedef PFNGLGETATTACHEDOBJECTSARBPROCDart =
    void Function(
      Pointer<NativeType> containerObj,
      int maxCount,
      Pointer<Uint32> count,
      Pointer<Pointer<NativeType>> obj,
    );
typedef PFNGLGETATTACHEDOBJECTSARBPROC =
    Void Function(
      Pointer<NativeType> containerObj,
      Uint32 maxCount,
      Pointer<Uint32> count,
      Pointer<Pointer<NativeType>> obj,
    );

// typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name)
typedef PFNGLGETUNIFORMLOCATIONARBPROCDart =
    int Function(Pointer<NativeType> programObj, Pointer<Utf8> name);
typedef PFNGLGETUNIFORMLOCATIONARBPROC =
    Int32 Function(Pointer<NativeType> programObj, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
typedef PFNGLGETACTIVEUNIFORMARBPROCDart =
    void Function(
      Pointer<NativeType> programObj,
      int index,
      int maxLength,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVEUNIFORMARBPROC =
    Void Function(
      Pointer<NativeType> programObj,
      Uint32 index,
      Uint32 maxLength,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params)
typedef PFNGLGETUNIFORMFVARBPROCDart =
    void Function(
      Pointer<NativeType> programObj,
      int location,
      Pointer<Float> params,
    );
typedef PFNGLGETUNIFORMFVARBPROC =
    Void Function(
      Pointer<NativeType> programObj,
      Int32 location,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params)
typedef PFNGLGETUNIFORMIVARBPROCDart =
    void Function(
      Pointer<NativeType> programObj,
      int location,
      Pointer<Int32> params,
    );
typedef PFNGLGETUNIFORMIVARBPROC =
    Void Function(
      Pointer<NativeType> programObj,
      Int32 location,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
typedef PFNGLGETSHADERSOURCEARBPROCDart =
    void Function(
      Pointer<NativeType> obj,
      int maxLength,
      Pointer<Uint32> length,
      Pointer<Int8> source,
    );
typedef PFNGLGETSHADERSOURCEARBPROC =
    Void Function(
      Pointer<NativeType> obj,
      Uint32 maxLength,
      Pointer<Uint32> length,
      Pointer<Int8> source,
    );

// typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
typedef PFNGLNAMEDSTRINGARBPROCDart =
    void Function(
      int type,
      int namelen,
      Pointer<Utf8> name,
      int stringlen,
      Pointer<Utf8> string,
    );
typedef PFNGLNAMEDSTRINGARBPROC =
    Void Function(
      Uint32 type,
      Int32 namelen,
      Pointer<Utf8> name,
      Int32 stringlen,
      Pointer<Utf8> string,
    );

// typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)
typedef PFNGLDELETENAMEDSTRINGARBPROCDart =
    void Function(int namelen, Pointer<Utf8> name);
typedef PFNGLDELETENAMEDSTRINGARBPROC =
    Void Function(Int32 namelen, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)
typedef PFNGLCOMPILESHADERINCLUDEARBPROCDart =
    void Function(
      int shader,
      int count,
      Pointer<Pointer<Int8>> path,
      Pointer<Int32> length,
    );
typedef PFNGLCOMPILESHADERINCLUDEARBPROC =
    Void Function(
      Uint32 shader,
      Uint32 count,
      Pointer<Pointer<Int8>> path,
      Pointer<Int32> length,
    );

// typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)
typedef PFNGLISNAMEDSTRINGARBPROCDart =
    int Function(int namelen, Pointer<Utf8> name);
typedef PFNGLISNAMEDSTRINGARBPROC =
    Int32 Function(Int32 namelen, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
typedef PFNGLGETNAMEDSTRINGARBPROCDart =
    void Function(
      int namelen,
      Pointer<Utf8> name,
      int bufSize,
      Pointer<Int32> stringlen,
      Pointer<Int8> string,
    );
typedef PFNGLGETNAMEDSTRINGARBPROC =
    Void Function(
      Int32 namelen,
      Pointer<Utf8> name,
      Uint32 bufSize,
      Pointer<Int32> stringlen,
      Pointer<Int8> string,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDSTRINGIVARBPROCDart =
    void Function(
      int namelen,
      Pointer<Utf8> name,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETNAMEDSTRINGIVARBPROC =
    Void Function(
      Int32 namelen,
      Pointer<Utf8> name,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
typedef PFNGLBUFFERPAGECOMMITMENTARBPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int commit,
    );
typedef PFNGLBUFFERPAGECOMMITMENTARBPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int commit,
    );
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int commit,
    );
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
typedef PFNGLTEXPAGECOMMITMENTARBPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int commit,
    );
typedef PFNGLTEXPAGECOMMITMENTARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer)
typedef PFNGLTEXBUFFERARBPROCDart =
    void Function(int target, int internalformat, int buffer);
typedef PFNGLTEXBUFFERARBPROC =
    Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer);

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXIMAGE3DARBPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE3DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXIMAGE2DARBPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE2DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXIMAGE1DARBPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXIMAGE1DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int imageSize,
      Pointer<NativeType> data,
    );
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, void *img)
typedef PFNGLGETCOMPRESSEDTEXIMAGEARBPROCDart =
    void Function(int target, int level, Pointer<NativeType> img);
typedef PFNGLGETCOMPRESSEDTEXIMAGEARBPROC =
    Void Function(Uint32 target, Int32 level, Pointer<NativeType> img);

// typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m)
typedef PFNGLLOADTRANSPOSEMATRIXFARBPROCDart = void Function(Pointer<Float> m);
typedef PFNGLLOADTRANSPOSEMATRIXFARBPROC = Void Function(Pointer<Float> m);

// typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m)
typedef PFNGLLOADTRANSPOSEMATRIXDARBPROCDart = void Function(Pointer<Double> m);
typedef PFNGLLOADTRANSPOSEMATRIXDARBPROC = Void Function(Pointer<Double> m);

// typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m)
typedef PFNGLMULTTRANSPOSEMATRIXFARBPROCDart = void Function(Pointer<Float> m);
typedef PFNGLMULTTRANSPOSEMATRIXFARBPROC = Void Function(Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m)
typedef PFNGLMULTTRANSPOSEMATRIXDARBPROCDart = void Function(Pointer<Double> m);
typedef PFNGLMULTTRANSPOSEMATRIXDARBPROC = Void Function(Pointer<Double> m);

// typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights)
typedef PFNGLWEIGHTBVARBPROCDart =
    void Function(int size, Pointer<Utf8> weights);
typedef PFNGLWEIGHTBVARBPROC = Void Function(Int32 size, Pointer<Utf8> weights);

// typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights)
typedef PFNGLWEIGHTSVARBPROCDart =
    void Function(int size, Pointer<Int16> weights);
typedef PFNGLWEIGHTSVARBPROC =
    Void Function(Int32 size, Pointer<Int16> weights);

// typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights)
typedef PFNGLWEIGHTIVARBPROCDart =
    void Function(int size, Pointer<Int32> weights);
typedef PFNGLWEIGHTIVARBPROC =
    Void Function(Int32 size, Pointer<Int32> weights);

// typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights)
typedef PFNGLWEIGHTFVARBPROCDart =
    void Function(int size, Pointer<Float> weights);
typedef PFNGLWEIGHTFVARBPROC =
    Void Function(Int32 size, Pointer<Float> weights);

// typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights)
typedef PFNGLWEIGHTDVARBPROCDart =
    void Function(int size, Pointer<Double> weights);
typedef PFNGLWEIGHTDVARBPROC =
    Void Function(Int32 size, Pointer<Double> weights);

// typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights)
typedef PFNGLWEIGHTUBVARBPROCDart =
    void Function(int size, Pointer<Uint8> weights);
typedef PFNGLWEIGHTUBVARBPROC =
    Void Function(Int32 size, Pointer<Uint8> weights);

// typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights)
typedef PFNGLWEIGHTUSVARBPROCDart =
    void Function(int size, Pointer<Uint16> weights);
typedef PFNGLWEIGHTUSVARBPROC =
    Void Function(Int32 size, Pointer<Uint16> weights);

// typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights)
typedef PFNGLWEIGHTUIVARBPROCDart =
    void Function(int size, Pointer<Uint32> weights);
typedef PFNGLWEIGHTUIVARBPROC =
    Void Function(Int32 size, Pointer<Uint32> weights);

// typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLWEIGHTPOINTERARBPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLWEIGHTPOINTERARBPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count)
typedef PFNGLVERTEXBLENDARBPROCDart = void Function(int count);
typedef PFNGLVERTEXBLENDARBPROC = Void Function(Int32 count);

// typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer)
typedef PFNGLBINDBUFFERARBPROCDart = void Function(int target, int buffer);
typedef PFNGLBINDBUFFERARBPROC = Void Function(Uint32 target, Uint32 buffer);

// typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers)
typedef PFNGLDELETEBUFFERSARBPROCDart =
    void Function(int n, Pointer<Uint32> buffers);
typedef PFNGLDELETEBUFFERSARBPROC =
    Void Function(Uint32 n, Pointer<Uint32> buffers);

// typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers)
typedef PFNGLGENBUFFERSARBPROCDart =
    void Function(int n, Pointer<Uint32> buffers);
typedef PFNGLGENBUFFERSARBPROC =
    Void Function(Uint32 n, Pointer<Uint32> buffers);

// typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer)
typedef PFNGLISBUFFERARBPROCDart = int Function(int buffer);
typedef PFNGLISBUFFERARBPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)
typedef PFNGLBUFFERDATAARBPROCDart =
    void Function(
      int target,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
      int usage,
    );
typedef PFNGLBUFFERDATAARBPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
      Uint32 usage,
    );

// typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)
typedef PFNGLBUFFERSUBDATAARBPROCDart =
    void Function(
      int target,
      int offset,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
    );
typedef PFNGLBUFFERSUBDATAARBPROC =
    Void Function(
      Uint32 target,
      Uint64 offset,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)
typedef PFNGLGETBUFFERSUBDATAARBPROCDart =
    void Function(
      int target,
      int offset,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
    );
typedef PFNGLGETBUFFERSUBDATAARBPROC =
    Void Function(
      Uint32 target,
      Uint64 offset,
      Pointer<NativeType> size,
      Pointer<NativeType> data,
    );

// typedef void *(APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access)
typedef PFNGLMAPBUFFERARBPROCDart =
    Pointer<NativeType> Function(int target, int access);
typedef PFNGLMAPBUFFERARBPROC =
    Pointer<NativeType> Function(Uint32 target, Uint32 access);

// typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target)
typedef PFNGLUNMAPBUFFERARBPROCDart = int Function(int target);
typedef PFNGLUNMAPBUFFERARBPROC = Int32 Function(Uint32 target);

// typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETBUFFERPARAMETERIVARBPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETBUFFERPARAMETERIVARBPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void **params)
typedef PFNGLGETBUFFERPOINTERVARBPROCDart =
    void Function(int target, int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETBUFFERPOINTERVARBPROC =
    Void Function(
      Uint32 target,
      Uint32 pname,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x)
typedef PFNGLVERTEXATTRIB1DARBPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1DARBPROC = Void Function(Uint32 index, Double x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB1DVARBPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB1DVARBPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x)
typedef PFNGLVERTEXATTRIB1FARBPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1FARBPROC = Void Function(Uint32 index, Float x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB1FVARBPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB1FVARBPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x)
typedef PFNGLVERTEXATTRIB1SARBPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIB1SARBPROC = Void Function(Uint32 index, Int16 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB1SVARBPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB1SVARBPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y)
typedef PFNGLVERTEXATTRIB2DARBPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2DARBPROC =
    Void Function(Uint32 index, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB2DVARBPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB2DVARBPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y)
typedef PFNGLVERTEXATTRIB2FARBPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2FARBPROC =
    Void Function(Uint32 index, Float x, Float y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB2FVARBPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB2FVARBPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y)
typedef PFNGLVERTEXATTRIB2SARBPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIB2SARBPROC =
    Void Function(Uint32 index, Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB2SVARBPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB2SVARBPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXATTRIB3DARBPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3DARBPROC =
    Void Function(Uint32 index, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB3DVARBPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB3DVARBPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLVERTEXATTRIB3FARBPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3FARBPROC =
    Void Function(Uint32 index, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB3FVARBPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB3FVARBPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
typedef PFNGLVERTEXATTRIB3SARBPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIB3SARBPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB3SVARBPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB3SVARBPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIB4NBVARBPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIB4NBVARBPROC =
    Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIB4NIVARBPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIB4NIVARBPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB4NSVARBPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB4NSVARBPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
typedef PFNGLVERTEXATTRIB4NUBARBPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4NUBARBPROC =
    Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIB4NUBVARBPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIB4NUBVARBPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIB4NUIVARBPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIB4NUIVARBPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIB4NUSVARBPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB4NUSVARBPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIB4BVARBPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIB4BVARBPROC =
    Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXATTRIB4DARBPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4DARBPROC =
    Void Function(Uint32 index, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB4DVARBPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB4DVARBPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLVERTEXATTRIB4FARBPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4FARBPROC =
    Void Function(Uint32 index, Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB4FVARBPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB4FVARBPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIB4IVARBPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIB4IVARBPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
typedef PFNGLVERTEXATTRIB4SARBPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4SARBPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB4SVARBPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB4SVARBPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIB4UBVARBPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIB4UBVARBPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIB4UIVARBPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIB4UIVARBPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIB4USVARBPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB4USVARBPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBPOINTERARBPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int normalized,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBPOINTERARBPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)
typedef PFNGLENABLEVERTEXATTRIBARRAYARBPROCDart = void Function(int index);
typedef PFNGLENABLEVERTEXATTRIBARRAYARBPROC = Void Function(Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)
typedef PFNGLDISABLEVERTEXATTRIBARRAYARBPROCDart = void Function(int index);
typedef PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = Void Function(Uint32 index);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETVERTEXATTRIBDVARBPROCDart =
    void Function(int index, int pname, Pointer<Double> params);
typedef PFNGLGETVERTEXATTRIBDVARBPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETVERTEXATTRIBFVARBPROCDart =
    void Function(int index, int pname, Pointer<Float> params);
typedef PFNGLGETVERTEXATTRIBFVARBPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBIVARBPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBIVARBPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void **pointer)
typedef PFNGLGETVERTEXATTRIBPOINTERVARBPROCDart =
    void Function(int index, int pname, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLGETVERTEXATTRIBPOINTERVARBPROC =
    Void Function(
      Uint32 index,
      Uint32 pname,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name)
typedef PFNGLBINDATTRIBLOCATIONARBPROCDart =
    void Function(
      Pointer<NativeType> programObj,
      int index,
      Pointer<Utf8> name,
    );
typedef PFNGLBINDATTRIBLOCATIONARBPROC =
    Void Function(
      Pointer<NativeType> programObj,
      Uint32 index,
      Pointer<Utf8> name,
    );

// typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
typedef PFNGLGETACTIVEATTRIBARBPROCDart =
    void Function(
      Pointer<NativeType> programObj,
      int index,
      int maxLength,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVEATTRIBARBPROC =
    Void Function(
      Pointer<NativeType> programObj,
      Uint32 index,
      Uint32 maxLength,
      Pointer<Uint32> length,
      Pointer<Int32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name)
typedef PFNGLGETATTRIBLOCATIONARBPROCDart =
    int Function(Pointer<NativeType> programObj, Pointer<Utf8> name);
typedef PFNGLGETATTRIBLOCATIONARBPROC =
    Int32 Function(Pointer<NativeType> programObj, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYDVNVPROC) (GLuint first, GLsizei count, const GLdouble *v)
typedef PFNGLDEPTHRANGEARRAYDVNVPROCDart =
    void Function(int first, int count, Pointer<Double> v);
typedef PFNGLDEPTHRANGEARRAYDVNVPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDDNVPROC) (GLuint index, GLdouble n, GLdouble f)
typedef PFNGLDEPTHRANGEINDEXEDDNVPROCDart =
    void Function(int index, double n, double f);
typedef PFNGLDEPTHRANGEINDEXEDDNVPROC =
    Void Function(Uint32 index, Double n, Double f);

// typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y)
typedef PFNGLWINDOWPOS2DARBPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2DARBPROC = Void Function(Double x, Double y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS2DVARBPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS2DVARBPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y)
typedef PFNGLWINDOWPOS2FARBPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2FARBPROC = Void Function(Float x, Float y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS2FVARBPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS2FVARBPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y)
typedef PFNGLWINDOWPOS2IARBPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2IARBPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v)
typedef PFNGLWINDOWPOS2IVARBPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS2IVARBPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y)
typedef PFNGLWINDOWPOS2SARBPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2SARBPROC = Void Function(Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS2SVARBPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS2SVARBPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLWINDOWPOS3DARBPROCDart =
    void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3DARBPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS3DVARBPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS3DVARBPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLWINDOWPOS3FARBPROCDart =
    void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3FARBPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS3FVARBPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS3FVARBPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z)
typedef PFNGLWINDOWPOS3IARBPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3IARBPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v)
typedef PFNGLWINDOWPOS3IVARBPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS3IVARBPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z)
typedef PFNGLWINDOWPOS3SARBPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3SARBPROC = Void Function(Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS3SVARBPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS3SVARBPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void)
typedef PFNGLBLENDBARRIERKHRPROCDart = void Function();
typedef PFNGLBLENDBARRIERKHRPROC = Void Function();

// typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) (GLuint count)
typedef PFNGLMAXSHADERCOMPILERTHREADSKHRPROCDart = void Function(int count);
typedef PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = Void Function(Uint32 count);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s)
typedef PFNGLMULTITEXCOORD1BOESPROCDart = void Function(int texture, int s);
typedef PFNGLMULTITEXCOORD1BOESPROC = Void Function(Uint32 texture, Int8 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords)
typedef PFNGLMULTITEXCOORD1BVOESPROCDart =
    void Function(int texture, Pointer<Utf8> coords);
typedef PFNGLMULTITEXCOORD1BVOESPROC =
    Void Function(Uint32 texture, Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t)
typedef PFNGLMULTITEXCOORD2BOESPROCDart =
    void Function(int texture, int s, int t);
typedef PFNGLMULTITEXCOORD2BOESPROC =
    Void Function(Uint32 texture, Int8 s, Int8 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords)
typedef PFNGLMULTITEXCOORD2BVOESPROCDart =
    void Function(int texture, Pointer<Utf8> coords);
typedef PFNGLMULTITEXCOORD2BVOESPROC =
    Void Function(Uint32 texture, Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r)
typedef PFNGLMULTITEXCOORD3BOESPROCDart =
    void Function(int texture, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3BOESPROC =
    Void Function(Uint32 texture, Int8 s, Int8 t, Int8 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords)
typedef PFNGLMULTITEXCOORD3BVOESPROCDart =
    void Function(int texture, Pointer<Utf8> coords);
typedef PFNGLMULTITEXCOORD3BVOESPROC =
    Void Function(Uint32 texture, Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
typedef PFNGLMULTITEXCOORD4BOESPROCDart =
    void Function(int texture, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4BOESPROC =
    Void Function(Uint32 texture, Int8 s, Int8 t, Int8 r, Int8 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords)
typedef PFNGLMULTITEXCOORD4BVOESPROCDart =
    void Function(int texture, Pointer<Utf8> coords);
typedef PFNGLMULTITEXCOORD4BVOESPROC =
    Void Function(Uint32 texture, Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD1BOESPROC) (GLbyte s)
typedef PFNGLTEXCOORD1BOESPROCDart = void Function(int s);
typedef PFNGLTEXCOORD1BOESPROC = Void Function(Int8 s);

// typedef void (APIENTRYP PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords)
typedef PFNGLTEXCOORD1BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLTEXCOORD1BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t)
typedef PFNGLTEXCOORD2BOESPROCDart = void Function(int s, int t);
typedef PFNGLTEXCOORD2BOESPROC = Void Function(Int8 s, Int8 t);

// typedef void (APIENTRYP PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords)
typedef PFNGLTEXCOORD2BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLTEXCOORD2BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r)
typedef PFNGLTEXCOORD3BOESPROCDart = void Function(int s, int t, int r);
typedef PFNGLTEXCOORD3BOESPROC = Void Function(Int8 s, Int8 t, Int8 r);

// typedef void (APIENTRYP PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords)
typedef PFNGLTEXCOORD3BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLTEXCOORD3BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q)
typedef PFNGLTEXCOORD4BOESPROCDart = void Function(int s, int t, int r, int q);
typedef PFNGLTEXCOORD4BOESPROC = Void Function(Int8 s, Int8 t, Int8 r, Int8 q);

// typedef void (APIENTRYP PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords)
typedef PFNGLTEXCOORD4BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLTEXCOORD4BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLVERTEX2BOESPROC) (GLbyte x, GLbyte y)
typedef PFNGLVERTEX2BOESPROCDart = void Function(int x, int y);
typedef PFNGLVERTEX2BOESPROC = Void Function(Int8 x, Int8 y);

// typedef void (APIENTRYP PFNGLVERTEX2BVOESPROC) (const GLbyte *coords)
typedef PFNGLVERTEX2BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLVERTEX2BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y, GLbyte z)
typedef PFNGLVERTEX3BOESPROCDart = void Function(int x, int y, int z);
typedef PFNGLVERTEX3BOESPROC = Void Function(Int8 x, Int8 y, Int8 z);

// typedef void (APIENTRYP PFNGLVERTEX3BVOESPROC) (const GLbyte *coords)
typedef PFNGLVERTEX3BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLVERTEX3BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z, GLbyte w)
typedef PFNGLVERTEX4BOESPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLVERTEX4BOESPROC = Void Function(Int8 x, Int8 y, Int8 z, Int8 w);

// typedef void (APIENTRYP PFNGLVERTEX4BVOESPROC) (const GLbyte *coords)
typedef PFNGLVERTEX4BVOESPROCDart = void Function(Pointer<Utf8> coords);
typedef PFNGLVERTEX4BVOESPROC = Void Function(Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref)
typedef PFNGLALPHAFUNCXOESPROCDart = void Function(int func, int ref);
typedef PFNGLALPHAFUNCXOESPROC = Void Function(Uint32 func, Int32 ref);

// typedef void (APIENTRYP PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
typedef PFNGLCLEARCOLORXOESPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCLEARCOLORXOESPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLCLEARDEPTHXOESPROC) (GLfixed depth)
typedef PFNGLCLEARDEPTHXOESPROCDart = void Function(int depth);
typedef PFNGLCLEARDEPTHXOESPROC = Void Function(Int32 depth);

// typedef void (APIENTRYP PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation)
typedef PFNGLCLIPPLANEXOESPROCDart =
    void Function(int plane, Pointer<Int32> equation);
typedef PFNGLCLIPPLANEXOESPROC =
    Void Function(Uint32 plane, Pointer<Int32> equation);

// typedef void (APIENTRYP PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
typedef PFNGLCOLOR4XOESPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4XOESPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f)
typedef PFNGLDEPTHRANGEXOESPROCDart = void Function(int n, int f);
typedef PFNGLDEPTHRANGEXOESPROC = Void Function(Int32 n, Int32 f);

// typedef void (APIENTRYP PFNGLFOGXOESPROC) (GLenum pname, GLfixed param)
typedef PFNGLFOGXOESPROCDart = void Function(int pname, int param);
typedef PFNGLFOGXOESPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param)
typedef PFNGLFOGXVOESPROCDart = void Function(int pname, Pointer<Int32> param);
typedef PFNGLFOGXVOESPROC = Void Function(Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
typedef PFNGLFRUSTUMXOESPROCDart =
    void Function(int l, int r, int b, int t, int n, int f);
typedef PFNGLFRUSTUMXOESPROC =
    Void Function(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f);

// typedef void (APIENTRYP PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation)
typedef PFNGLGETCLIPPLANEXOESPROCDart =
    void Function(int plane, Pointer<Int32> equation);
typedef PFNGLGETCLIPPLANEXOESPROC =
    Void Function(Uint32 plane, Pointer<Int32> equation);

// typedef void (APIENTRYP PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params)
typedef PFNGLGETFIXEDVOESPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLGETFIXEDVOESPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)
typedef PFNGLGETTEXENVXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXENVXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)
typedef PFNGLGETTEXPARAMETERXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXPARAMETERXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param)
typedef PFNGLLIGHTMODELXOESPROCDart = void Function(int pname, int param);
typedef PFNGLLIGHTMODELXOESPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param)
typedef PFNGLLIGHTMODELXVOESPROCDart =
    void Function(int pname, Pointer<Int32> param);
typedef PFNGLLIGHTMODELXVOESPROC =
    Void Function(Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param)
typedef PFNGLLIGHTXOESPROCDart = void Function(int light, int pname, int param);
typedef PFNGLLIGHTXOESPROC =
    Void Function(Uint32 light, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params)
typedef PFNGLLIGHTXVOESPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLLIGHTXVOESPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLLINEWIDTHXOESPROC) (GLfixed width)
typedef PFNGLLINEWIDTHXOESPROCDart = void Function(int width);
typedef PFNGLLINEWIDTHXOESPROC = Void Function(Int32 width);

// typedef void (APIENTRYP PFNGLLOADMATRIXXOESPROC) (const GLfixed *m)
typedef PFNGLLOADMATRIXXOESPROCDart = void Function(Pointer<Int32> m);
typedef PFNGLLOADMATRIXXOESPROC = Void Function(Pointer<Int32> m);

// typedef void (APIENTRYP PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param)
typedef PFNGLMATERIALXOESPROCDart =
    void Function(int face, int pname, int param);
typedef PFNGLMATERIALXOESPROC =
    Void Function(Uint32 face, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param)
typedef PFNGLMATERIALXVOESPROCDart =
    void Function(int face, int pname, Pointer<Int32> param);
typedef PFNGLMATERIALXVOESPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLMULTMATRIXXOESPROC) (const GLfixed *m)
typedef PFNGLMULTMATRIXXOESPROCDart = void Function(Pointer<Int32> m);
typedef PFNGLMULTMATRIXXOESPROC = Void Function(Pointer<Int32> m);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
typedef PFNGLMULTITEXCOORD4XOESPROCDart =
    void Function(int texture, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4XOESPROC =
    Void Function(Uint32 texture, Int32 s, Int32 t, Int32 r, Int32 q);

// typedef void (APIENTRYP PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz)
typedef PFNGLNORMAL3XOESPROCDart = void Function(int nx, int ny, int nz);
typedef PFNGLNORMAL3XOESPROC = Void Function(Int32 nx, Int32 ny, Int32 nz);

// typedef void (APIENTRYP PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
typedef PFNGLORTHOXOESPROCDart =
    void Function(int l, int r, int b, int t, int n, int f);
typedef PFNGLORTHOXOESPROC =
    Void Function(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params)
typedef PFNGLPOINTPARAMETERXVOESPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLPOINTPARAMETERXVOESPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPOINTSIZEXOESPROC) (GLfixed size)
typedef PFNGLPOINTSIZEXOESPROCDart = void Function(int size);
typedef PFNGLPOINTSIZEXOESPROC = Void Function(Int32 size);

// typedef void (APIENTRYP PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units)
typedef PFNGLPOLYGONOFFSETXOESPROCDart = void Function(int factor, int units);
typedef PFNGLPOLYGONOFFSETXOESPROC = Void Function(Int32 factor, Int32 units);

// typedef void (APIENTRYP PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
typedef PFNGLROTATEXOESPROCDart = void Function(int angle, int x, int y, int z);
typedef PFNGLROTATEXOESPROC =
    Void Function(Int32 angle, Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z)
typedef PFNGLSCALEXOESPROCDart = void Function(int x, int y, int z);
typedef PFNGLSCALEXOESPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param)
typedef PFNGLTEXENVXOESPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLTEXENVXOESPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)
typedef PFNGLTEXENVXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXENVXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param)
typedef PFNGLTEXPARAMETERXOESPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLTEXPARAMETERXOESPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)
typedef PFNGLTEXPARAMETERXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXPARAMETERXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z)
typedef PFNGLTRANSLATEXOESPROCDart = void Function(int x, int y, int z);
typedef PFNGLTRANSLATEXOESPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLACCUMXOESPROC) (GLenum op, GLfixed value)
typedef PFNGLACCUMXOESPROCDart = void Function(int op, int value);
typedef PFNGLACCUMXOESPROC = Void Function(Uint32 op, Int32 value);

// typedef void (APIENTRYP PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap)
typedef PFNGLBITMAPXOESPROCDart =
    void Function(
      int width,
      int height,
      int xorig,
      int yorig,
      int xmove,
      int ymove,
      Pointer<Uint8> bitmap,
    );
typedef PFNGLBITMAPXOESPROC =
    Void Function(
      Uint32 width,
      Uint32 height,
      Int32 xorig,
      Int32 yorig,
      Int32 xmove,
      Int32 ymove,
      Pointer<Uint8> bitmap,
    );

// typedef void (APIENTRYP PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
typedef PFNGLBLENDCOLORXOESPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLBLENDCOLORXOESPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
typedef PFNGLCLEARACCUMXOESPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCLEARACCUMXOESPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue)
typedef PFNGLCOLOR3XOESPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3XOESPROC = Void Function(Int32 red, Int32 green, Int32 blue);

// typedef void (APIENTRYP PFNGLCOLOR3XVOESPROC) (const GLfixed *components)
typedef PFNGLCOLOR3XVOESPROCDart = void Function(Pointer<Int32> components);
typedef PFNGLCOLOR3XVOESPROC = Void Function(Pointer<Int32> components);

// typedef void (APIENTRYP PFNGLCOLOR4XVOESPROC) (const GLfixed *components)
typedef PFNGLCOLOR4XVOESPROCDart = void Function(Pointer<Int32> components);
typedef PFNGLCOLOR4XVOESPROC = Void Function(Pointer<Int32> components);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param)
typedef PFNGLCONVOLUTIONPARAMETERXOESPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLCONVOLUTIONPARAMETERXOESPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)
typedef PFNGLCONVOLUTIONPARAMETERXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLCONVOLUTIONPARAMETERXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLEVALCOORD1XOESPROC) (GLfixed u)
typedef PFNGLEVALCOORD1XOESPROCDart = void Function(int u);
typedef PFNGLEVALCOORD1XOESPROC = Void Function(Int32 u);

// typedef void (APIENTRYP PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords)
typedef PFNGLEVALCOORD1XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLEVALCOORD1XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v)
typedef PFNGLEVALCOORD2XOESPROCDart = void Function(int u, int v);
typedef PFNGLEVALCOORD2XOESPROC = Void Function(Int32 u, Int32 v);

// typedef void (APIENTRYP PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords)
typedef PFNGLEVALCOORD2XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLEVALCOORD2XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer)
typedef PFNGLFEEDBACKBUFFERXOESPROCDart =
    void Function(int n, int type, Pointer<Int32> buffer);
typedef PFNGLFEEDBACKBUFFERXOESPROC =
    Void Function(Uint32 n, Uint32 type, Pointer<Int32> buffer);

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)
typedef PFNGLGETCONVOLUTIONPARAMETERXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCONVOLUTIONPARAMETERXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)
typedef PFNGLGETHISTOGRAMPARAMETERXVOESPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETHISTOGRAMPARAMETERXVOESPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params)
typedef PFNGLGETLIGHTXOESPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLGETLIGHTXOESPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v)
typedef PFNGLGETMAPXVOESPROCDart =
    void Function(int target, int query, Pointer<Int32> v);
typedef PFNGLGETMAPXVOESPROC =
    Void Function(Uint32 target, Uint32 query, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param)
typedef PFNGLGETMATERIALXOESPROCDart =
    void Function(int face, int pname, int param);
typedef PFNGLGETMATERIALXOESPROC =
    Void Function(Uint32 face, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values)
typedef PFNGLGETPIXELMAPXVPROCDart =
    void Function(int map, int size, Pointer<Int32> values);
typedef PFNGLGETPIXELMAPXVPROC =
    Void Function(Uint32 map, Int32 size, Pointer<Int32> values);

// typedef void (APIENTRYP PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params)
typedef PFNGLGETTEXGENXVOESPROCDart =
    void Function(int coord, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXGENXVOESPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params)
typedef PFNGLGETTEXLEVELPARAMETERXVOESPROCDart =
    void Function(int target, int level, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXLEVELPARAMETERXVOESPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLINDEXXOESPROC) (GLfixed component)
typedef PFNGLINDEXXOESPROCDart = void Function(int component);
typedef PFNGLINDEXXOESPROC = Void Function(Int32 component);

// typedef void (APIENTRYP PFNGLINDEXXVOESPROC) (const GLfixed *component)
typedef PFNGLINDEXXVOESPROCDart = void Function(Pointer<Int32> component);
typedef PFNGLINDEXXVOESPROC = Void Function(Pointer<Int32> component);

// typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m)
typedef PFNGLLOADTRANSPOSEMATRIXXOESPROCDart = void Function(Pointer<Int32> m);
typedef PFNGLLOADTRANSPOSEMATRIXXOESPROC = Void Function(Pointer<Int32> m);

// typedef void (APIENTRYP PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
typedef PFNGLMAP1XOESPROCDart =
    void Function(
      int target,
      int u1,
      int u2,
      int stride,
      int order,
      int points,
    );
typedef PFNGLMAP1XOESPROC =
    Void Function(
      Uint32 target,
      Int32 u1,
      Int32 u2,
      Int32 stride,
      Int32 order,
      Int32 points,
    );

// typedef void (APIENTRYP PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
typedef PFNGLMAP2XOESPROCDart =
    void Function(
      int target,
      int u1,
      int u2,
      int ustride,
      int uorder,
      int v1,
      int v2,
      int vstride,
      int vorder,
      int points,
    );
typedef PFNGLMAP2XOESPROC =
    Void Function(
      Uint32 target,
      Int32 u1,
      Int32 u2,
      Int32 ustride,
      Int32 uorder,
      Int32 v1,
      Int32 v2,
      Int32 vstride,
      Int32 vorder,
      Int32 points,
    );

// typedef void (APIENTRYP PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2)
typedef PFNGLMAPGRID1XOESPROCDart = void Function(int n, int u1, int u2);
typedef PFNGLMAPGRID1XOESPROC = Void Function(Int32 n, Int32 u1, Int32 u2);

// typedef void (APIENTRYP PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
typedef PFNGLMAPGRID2XOESPROCDart =
    void Function(int n, int u1, int u2, int v1, int v2);
typedef PFNGLMAPGRID2XOESPROC =
    Void Function(Int32 n, Int32 u1, Int32 u2, Int32 v1, Int32 v2);

// typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m)
typedef PFNGLMULTTRANSPOSEMATRIXXOESPROCDart = void Function(Pointer<Int32> m);
typedef PFNGLMULTTRANSPOSEMATRIXXOESPROC = Void Function(Pointer<Int32> m);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s)
typedef PFNGLMULTITEXCOORD1XOESPROCDart = void Function(int texture, int s);
typedef PFNGLMULTITEXCOORD1XOESPROC = Void Function(Uint32 texture, Int32 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords)
typedef PFNGLMULTITEXCOORD1XVOESPROCDart =
    void Function(int texture, Pointer<Int32> coords);
typedef PFNGLMULTITEXCOORD1XVOESPROC =
    Void Function(Uint32 texture, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t)
typedef PFNGLMULTITEXCOORD2XOESPROCDart =
    void Function(int texture, int s, int t);
typedef PFNGLMULTITEXCOORD2XOESPROC =
    Void Function(Uint32 texture, Int32 s, Int32 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords)
typedef PFNGLMULTITEXCOORD2XVOESPROCDart =
    void Function(int texture, Pointer<Int32> coords);
typedef PFNGLMULTITEXCOORD2XVOESPROC =
    Void Function(Uint32 texture, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r)
typedef PFNGLMULTITEXCOORD3XOESPROCDart =
    void Function(int texture, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3XOESPROC =
    Void Function(Uint32 texture, Int32 s, Int32 t, Int32 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords)
typedef PFNGLMULTITEXCOORD3XVOESPROCDart =
    void Function(int texture, Pointer<Int32> coords);
typedef PFNGLMULTITEXCOORD3XVOESPROC =
    Void Function(Uint32 texture, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords)
typedef PFNGLMULTITEXCOORD4XVOESPROCDart =
    void Function(int texture, Pointer<Int32> coords);
typedef PFNGLMULTITEXCOORD4XVOESPROC =
    Void Function(Uint32 texture, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLNORMAL3XVOESPROC) (const GLfixed *coords)
typedef PFNGLNORMAL3XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLNORMAL3XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLPASSTHROUGHXOESPROC) (GLfixed token)
typedef PFNGLPASSTHROUGHXOESPROCDart = void Function(int token);
typedef PFNGLPASSTHROUGHXOESPROC = Void Function(Int32 token);

// typedef void (APIENTRYP PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values)
typedef PFNGLPIXELMAPXPROCDart =
    void Function(int map, int size, Pointer<Int32> values);
typedef PFNGLPIXELMAPXPROC =
    Void Function(Uint32 map, Int32 size, Pointer<Int32> values);

// typedef void (APIENTRYP PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param)
typedef PFNGLPIXELSTOREXPROCDart = void Function(int pname, int param);
typedef PFNGLPIXELSTOREXPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param)
typedef PFNGLPIXELTRANSFERXOESPROCDart = void Function(int pname, int param);
typedef PFNGLPIXELTRANSFERXOESPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor)
typedef PFNGLPIXELZOOMXOESPROCDart = void Function(int xfactor, int yfactor);
typedef PFNGLPIXELZOOMXOESPROC = Void Function(Int32 xfactor, Int32 yfactor);

// typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities)
typedef PFNGLPRIORITIZETEXTURESXOESPROCDart =
    void Function(int n, Pointer<Uint32> textures, Pointer<Int32> priorities);
typedef PFNGLPRIORITIZETEXTURESXOESPROC =
    Void Function(
      Uint32 n,
      Pointer<Uint32> textures,
      Pointer<Int32> priorities,
    );

// typedef void (APIENTRYP PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y)
typedef PFNGLRASTERPOS2XOESPROCDart = void Function(int x, int y);
typedef PFNGLRASTERPOS2XOESPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords)
typedef PFNGLRASTERPOS2XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLRASTERPOS2XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z)
typedef PFNGLRASTERPOS3XOESPROCDart = void Function(int x, int y, int z);
typedef PFNGLRASTERPOS3XOESPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords)
typedef PFNGLRASTERPOS3XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLRASTERPOS3XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w)
typedef PFNGLRASTERPOS4XOESPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLRASTERPOS4XOESPROC =
    Void Function(Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords)
typedef PFNGLRASTERPOS4XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLRASTERPOS4XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
typedef PFNGLRECTXOESPROCDart = void Function(int x1, int y1, int x2, int y2);
typedef PFNGLRECTXOESPROC =
    Void Function(Int32 x1, Int32 y1, Int32 x2, Int32 y2);

// typedef void (APIENTRYP PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2)
typedef PFNGLRECTXVOESPROCDart =
    void Function(Pointer<Int32> v1, Pointer<Int32> v2);
typedef PFNGLRECTXVOESPROC =
    Void Function(Pointer<Int32> v1, Pointer<Int32> v2);

// typedef void (APIENTRYP PFNGLTEXCOORD1XOESPROC) (GLfixed s)
typedef PFNGLTEXCOORD1XOESPROCDart = void Function(int s);
typedef PFNGLTEXCOORD1XOESPROC = Void Function(Int32 s);

// typedef void (APIENTRYP PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords)
typedef PFNGLTEXCOORD1XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLTEXCOORD1XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t)
typedef PFNGLTEXCOORD2XOESPROCDart = void Function(int s, int t);
typedef PFNGLTEXCOORD2XOESPROC = Void Function(Int32 s, Int32 t);

// typedef void (APIENTRYP PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords)
typedef PFNGLTEXCOORD2XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLTEXCOORD2XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r)
typedef PFNGLTEXCOORD3XOESPROCDart = void Function(int s, int t, int r);
typedef PFNGLTEXCOORD3XOESPROC = Void Function(Int32 s, Int32 t, Int32 r);

// typedef void (APIENTRYP PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords)
typedef PFNGLTEXCOORD3XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLTEXCOORD3XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q)
typedef PFNGLTEXCOORD4XOESPROCDart = void Function(int s, int t, int r, int q);
typedef PFNGLTEXCOORD4XOESPROC =
    Void Function(Int32 s, Int32 t, Int32 r, Int32 q);

// typedef void (APIENTRYP PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords)
typedef PFNGLTEXCOORD4XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLTEXCOORD4XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param)
typedef PFNGLTEXGENXOESPROCDart =
    void Function(int coord, int pname, int param);
typedef PFNGLTEXGENXOESPROC =
    Void Function(Uint32 coord, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params)
typedef PFNGLTEXGENXVOESPROCDart =
    void Function(int coord, int pname, Pointer<Int32> params);
typedef PFNGLTEXGENXVOESPROC =
    Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLVERTEX2XOESPROC) (GLfixed x)
typedef PFNGLVERTEX2XOESPROCDart = void Function(int x);
typedef PFNGLVERTEX2XOESPROC = Void Function(Int32 x);

// typedef void (APIENTRYP PFNGLVERTEX2XVOESPROC) (const GLfixed *coords)
typedef PFNGLVERTEX2XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLVERTEX2XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y)
typedef PFNGLVERTEX3XOESPROCDart = void Function(int x, int y);
typedef PFNGLVERTEX3XOESPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLVERTEX3XVOESPROC) (const GLfixed *coords)
typedef PFNGLVERTEX3XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLVERTEX3XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z)
typedef PFNGLVERTEX4XOESPROCDart = void Function(int x, int y, int z);
typedef PFNGLVERTEX4XOESPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLVERTEX4XVOESPROC) (const GLfixed *coords)
typedef PFNGLVERTEX4XVOESPROCDart = void Function(Pointer<Int32> coords);
typedef PFNGLVERTEX4XVOESPROC = Void Function(Pointer<Int32> coords);

// typedef GLbitfield (APIENTRYP PFNGLQUERYMATRIXXOESPROC) (GLfixed *mantissa, GLint *exponent)
typedef PFNGLQUERYMATRIXXOESPROCDart =
    int Function(Pointer<Int32> mantissa, Pointer<Int32> exponent);
typedef PFNGLQUERYMATRIXXOESPROC =
    Uint32 Function(Pointer<Int32> mantissa, Pointer<Int32> exponent);

// typedef void (APIENTRYP PFNGLCLEARDEPTHFOESPROC) (GLclampf depth)
typedef PFNGLCLEARDEPTHFOESPROCDart = void Function(double depth);
typedef PFNGLCLEARDEPTHFOESPROC = Void Function(Float depth);

// typedef void (APIENTRYP PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation)
typedef PFNGLCLIPPLANEFOESPROCDart =
    void Function(int plane, Pointer<Float> equation);
typedef PFNGLCLIPPLANEFOESPROC =
    Void Function(Uint32 plane, Pointer<Float> equation);

// typedef void (APIENTRYP PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f)
typedef PFNGLDEPTHRANGEFOESPROCDart = void Function(double n, double f);
typedef PFNGLDEPTHRANGEFOESPROC = Void Function(Float n, Float f);

// typedef void (APIENTRYP PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
typedef PFNGLFRUSTUMFOESPROCDart =
    void Function(double l, double r, double b, double t, double n, double f);
typedef PFNGLFRUSTUMFOESPROC =
    Void Function(Float l, Float r, Float b, Float t, Float n, Float f);

// typedef void (APIENTRYP PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation)
typedef PFNGLGETCLIPPLANEFOESPROCDart =
    void Function(int plane, Pointer<Float> equation);
typedef PFNGLGETCLIPPLANEFOESPROC =
    Void Function(Uint32 plane, Pointer<Float> equation);

// typedef void (APIENTRYP PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
typedef PFNGLORTHOFOESPROCDart =
    void Function(double l, double r, double b, double t, double n, double f);
typedef PFNGLORTHOFOESPROC =
    Void Function(Float l, Float r, Float b, Float t, Float n, Float f);

// typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask)
typedef PFNGLTBUFFERMASK3DFXPROCDart = void Function(int mask);
typedef PFNGLTBUFFERMASK3DFXPROC = Void Function(Uint32 mask);

// typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam)
typedef GLDEBUGPROCAMDDart =
    void Function(
      int id,
      int category,
      int severity,
      int length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );
typedef GLDEBUGPROCAMD =
    Void Function(
      Uint32 id,
      Uint32 category,
      Uint32 severity,
      Uint32 length,
      Pointer<Utf8> message,
      Pointer<NativeType> userParam,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
typedef PFNGLDEBUGMESSAGEENABLEAMDPROCDart =
    void Function(
      int category,
      int severity,
      int count,
      Pointer<Uint32> ids,
      int enabled,
    );
typedef PFNGLDEBUGMESSAGEENABLEAMDPROC =
    Void Function(
      Uint32 category,
      Uint32 severity,
      Uint32 count,
      Pointer<Uint32> ids,
      Int32 enabled,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
typedef PFNGLDEBUGMESSAGEINSERTAMDPROCDart =
    void Function(
      int category,
      int severity,
      int id,
      int length,
      Pointer<Utf8> buf,
    );
typedef PFNGLDEBUGMESSAGEINSERTAMDPROC =
    Void Function(
      Uint32 category,
      Uint32 severity,
      Uint32 id,
      Uint32 length,
      Pointer<Utf8> buf,
    );

// typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam)
typedef PFNGLDEBUGMESSAGECALLBACKAMDPROCDart =
    void Function(
      Pointer<NativeFunction<GLDEBUGPROCAMD>> callback,
      Pointer<NativeType> userParam,
    );
typedef PFNGLDEBUGMESSAGECALLBACKAMDPROC =
    Void Function(
      Pointer<NativeFunction<GLDEBUGPROCAMD>> callback,
      Pointer<NativeType> userParam,
    );

// typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
typedef PFNGLGETDEBUGMESSAGELOGAMDPROCDart =
    int Function(
      int count,
      int bufSize,
      Pointer<Uint32> categories,
      Pointer<Uint32> severities,
      Pointer<Uint32> ids,
      Pointer<Uint32> lengths,
      Pointer<Int8> message,
    );
typedef PFNGLGETDEBUGMESSAGELOGAMDPROC =
    Uint32 Function(
      Uint32 count,
      Uint32 bufSize,
      Pointer<Uint32> categories,
      Pointer<Uint32> severities,
      Pointer<Uint32> ids,
      Pointer<Uint32> lengths,
      Pointer<Int8> message,
    );

// typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst)
typedef PFNGLBLENDFUNCINDEXEDAMDPROCDart =
    void Function(int buf, int src, int dst);
typedef PFNGLBLENDFUNCINDEXEDAMDPROC =
    Void Function(Uint32 buf, Uint32 src, Uint32 dst);

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
typedef PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROCDart =
    void Function(int buf, int srcRgb, int dstRgb, int srcAlpha, int dstAlpha);
typedef PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC =
    Void Function(
      Uint32 buf,
      Uint32 srcRgb,
      Uint32 dstRgb,
      Uint32 srcAlpha,
      Uint32 dstAlpha,
    );

// typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode)
typedef PFNGLBLENDEQUATIONINDEXEDAMDPROCDart = void Function(int buf, int mode);
typedef PFNGLBLENDEQUATIONINDEXEDAMDPROC =
    Void Function(Uint32 buf, Uint32 mode);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
typedef PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROCDart =
    void Function(int buf, int modeRgb, int modeAlpha);
typedef PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC =
    Void Function(Uint32 buf, Uint32 modeRgb, Uint32 modeAlpha);

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROCDart =
    void Function(
      int target,
      int samples,
      int storageSamples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 storageSamples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROCDart =
    void Function(
      int renderbuffer,
      int samples,
      int storageSamples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 samples,
      Uint32 storageSamples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values)
typedef PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROCDart =
    void Function(
      int target,
      int numsamples,
      int pixelindex,
      Pointer<Float> values,
    );
typedef PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC =
    Void Function(
      Uint32 target,
      Uint32 numsamples,
      Uint32 pixelindex,
      Pointer<Float> values,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values)
typedef PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROCDart =
    void Function(
      int framebuffer,
      int numsamples,
      int pixelindex,
      Pointer<Float> values,
    );
typedef PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 numsamples,
      Uint32 pixelindex,
      Pointer<Float> values,
    );

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC) (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values)
typedef PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROCDart =
    void Function(
      int target,
      int pname,
      int numsamples,
      int pixelindex,
      int size,
      Pointer<Float> values,
    );
typedef PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC =
    Void Function(
      Uint32 target,
      Uint32 pname,
      Uint32 numsamples,
      Uint32 pixelindex,
      Uint32 size,
      Pointer<Float> values,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC) (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values)
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROCDart =
    void Function(
      int framebuffer,
      int pname,
      int numsamples,
      int pixelindex,
      int size,
      Pointer<Float> values,
    );
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 pname,
      Uint32 numsamples,
      Uint32 pixelindex,
      Uint32 size,
      Pointer<Float> values,
    );

// typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x)
typedef PFNGLUNIFORM1I64NVPROCDart = void Function(int location, int x);
typedef PFNGLUNIFORM1I64NVPROC = Void Function(Int32 location, Int64 x);

// typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y)
typedef PFNGLUNIFORM2I64NVPROCDart = void Function(int location, int x, int y);
typedef PFNGLUNIFORM2I64NVPROC =
    Void Function(Int32 location, Int64 x, Int64 y);

// typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
typedef PFNGLUNIFORM3I64NVPROCDart =
    void Function(int location, int x, int y, int z);
typedef PFNGLUNIFORM3I64NVPROC =
    Void Function(Int32 location, Int64 x, Int64 y, Int64 z);

// typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
typedef PFNGLUNIFORM4I64NVPROCDart =
    void Function(int location, int x, int y, int z, int w);
typedef PFNGLUNIFORM4I64NVPROC =
    Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);

// typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLUNIFORM1I64VNVPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM1I64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLUNIFORM2I64VNVPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM2I64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLUNIFORM3I64VNVPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM3I64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLUNIFORM4I64VNVPROCDart =
    void Function(int location, int count, Pointer<Int64> value);
typedef PFNGLUNIFORM4I64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Int64> value);

// typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x)
typedef PFNGLUNIFORM1UI64NVPROCDart = void Function(int location, int x);
typedef PFNGLUNIFORM1UI64NVPROC = Void Function(Int32 location, Uint64 x);

// typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y)
typedef PFNGLUNIFORM2UI64NVPROCDart = void Function(int location, int x, int y);
typedef PFNGLUNIFORM2UI64NVPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y);

// typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
typedef PFNGLUNIFORM3UI64NVPROCDart =
    void Function(int location, int x, int y, int z);
typedef PFNGLUNIFORM3UI64NVPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z);

// typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
typedef PFNGLUNIFORM4UI64NVPROCDart =
    void Function(int location, int x, int y, int z, int w);
typedef PFNGLUNIFORM4UI64NVPROC =
    Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w);

// typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLUNIFORM1UI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM1UI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLUNIFORM2UI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM2UI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLUNIFORM3UI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM3UI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLUNIFORM4UI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORM4UI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params)
typedef PFNGLGETUNIFORMI64VNVPROCDart =
    void Function(int program, int location, Pointer<Int64> params);
typedef PFNGLGETUNIFORMI64VNVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params)
typedef PFNGLGETUNIFORMUI64VNVPROCDart =
    void Function(int program, int location, Pointer<Uint64> params);
typedef PFNGLGETUNIFORMUI64VNVPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x)
typedef PFNGLPROGRAMUNIFORM1I64NVPROCDart =
    void Function(int program, int location, int x);
typedef PFNGLPROGRAMUNIFORM1I64NVPROC =
    Void Function(Uint32 program, Int32 location, Int64 x);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
typedef PFNGLPROGRAMUNIFORM2I64NVPROCDart =
    void Function(int program, int location, int x, int y);
typedef PFNGLPROGRAMUNIFORM2I64NVPROC =
    Void Function(Uint32 program, Int32 location, Int64 x, Int64 y);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
typedef PFNGLPROGRAMUNIFORM3I64NVPROCDart =
    void Function(int program, int location, int x, int y, int z);
typedef PFNGLPROGRAMUNIFORM3I64NVPROC =
    Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
typedef PFNGLPROGRAMUNIFORM4I64NVPROCDart =
    void Function(int program, int location, int x, int y, int z, int w);
typedef PFNGLPROGRAMUNIFORM4I64NVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Int64 x,
      Int64 y,
      Int64 z,
      Int64 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLPROGRAMUNIFORM1I64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM1I64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLPROGRAMUNIFORM2I64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM2I64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLPROGRAMUNIFORM3I64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM3I64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
typedef PFNGLPROGRAMUNIFORM4I64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Int64> value);
typedef PFNGLPROGRAMUNIFORM4I64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x)
typedef PFNGLPROGRAMUNIFORM1UI64NVPROCDart =
    void Function(int program, int location, int x);
typedef PFNGLPROGRAMUNIFORM1UI64NVPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
typedef PFNGLPROGRAMUNIFORM2UI64NVPROCDart =
    void Function(int program, int location, int x, int y);
typedef PFNGLPROGRAMUNIFORM2UI64NVPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
typedef PFNGLPROGRAMUNIFORM3UI64NVPROCDart =
    void Function(int program, int location, int x, int y, int z);
typedef PFNGLPROGRAMUNIFORM3UI64NVPROC =
    Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
typedef PFNGLPROGRAMUNIFORM4UI64NVPROCDart =
    void Function(int program, int location, int x, int y, int z, int w);
typedef PFNGLPROGRAMUNIFORM4UI64NVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint64 x,
      Uint64 y,
      Uint64 z,
      Uint64 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLPROGRAMUNIFORM1UI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM1UI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLPROGRAMUNIFORM2UI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM2UI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLPROGRAMUNIFORM3UI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM3UI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLPROGRAMUNIFORM4UI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORM4UI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param)
typedef PFNGLVERTEXATTRIBPARAMETERIAMDPROCDart =
    void Function(int index, int pname, int param);
typedef PFNGLVERTEXATTRIBPARAMETERIAMDPROC =
    Void Function(Uint32 index, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)
typedef PFNGLMULTIDRAWARRAYSINDIRECTAMDPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      int primcount,
      int stride,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Uint32 primcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      int primcount,
      int stride,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Uint32 primcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names)
typedef PFNGLGENNAMESAMDPROCDart =
    void Function(int identifier, int num, Pointer<Uint32> names);
typedef PFNGLGENNAMESAMDPROC =
    Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32> names);

// typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names)
typedef PFNGLDELETENAMESAMDPROCDart =
    void Function(int identifier, int num, Pointer<Uint32> names);
typedef PFNGLDELETENAMESAMDPROC =
    Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32> names);

// typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name)
typedef PFNGLISNAMEAMDPROCDart = int Function(int identifier, int name);
typedef PFNGLISNAMEAMDPROC = Int32 Function(Uint32 identifier, Uint32 name);

// typedef void (APIENTRYP PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param)
typedef PFNGLQUERYOBJECTPARAMETERUIAMDPROCDart =
    void Function(int target, int id, int pname, int param);
typedef PFNGLQUERYOBJECTPARAMETERUIAMDPROC =
    Void Function(Uint32 target, Uint32 id, Uint32 pname, Uint32 param);

// typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups)
typedef PFNGLGETPERFMONITORGROUPSAMDPROCDart =
    void Function(
      Pointer<Int32> numGroups,
      int groupsSize,
      Pointer<Uint32> groups,
    );
typedef PFNGLGETPERFMONITORGROUPSAMDPROC =
    Void Function(
      Pointer<Int32> numGroups,
      Uint32 groupsSize,
      Pointer<Uint32> groups,
    );

// typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)
typedef PFNGLGETPERFMONITORCOUNTERSAMDPROCDart =
    void Function(
      int group,
      Pointer<Int32> numCounters,
      Pointer<Int32> maxActiveCounters,
      int counterSize,
      Pointer<Uint32> counters,
    );
typedef PFNGLGETPERFMONITORCOUNTERSAMDPROC =
    Void Function(
      Uint32 group,
      Pointer<Int32> numCounters,
      Pointer<Int32> maxActiveCounters,
      Uint32 counterSize,
      Pointer<Uint32> counters,
    );

// typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
typedef PFNGLGETPERFMONITORGROUPSTRINGAMDPROCDart =
    void Function(
      int group,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> groupString,
    );
typedef PFNGLGETPERFMONITORGROUPSTRINGAMDPROC =
    Void Function(
      Uint32 group,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> groupString,
    );

// typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
typedef PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROCDart =
    void Function(
      int group,
      int counter,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> counterString,
    );
typedef PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC =
    Void Function(
      Uint32 group,
      Uint32 counter,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> counterString,
    );

// typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data)
typedef PFNGLGETPERFMONITORCOUNTERINFOAMDPROCDart =
    void Function(int group, int counter, int pname, Pointer<NativeType> data);
typedef PFNGLGETPERFMONITORCOUNTERINFOAMDPROC =
    Void Function(
      Uint32 group,
      Uint32 counter,
      Uint32 pname,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)
typedef PFNGLGENPERFMONITORSAMDPROCDart =
    void Function(int n, Pointer<Uint32> monitors);
typedef PFNGLGENPERFMONITORSAMDPROC =
    Void Function(Uint32 n, Pointer<Uint32> monitors);

// typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)
typedef PFNGLDELETEPERFMONITORSAMDPROCDart =
    void Function(int n, Pointer<Uint32> monitors);
typedef PFNGLDELETEPERFMONITORSAMDPROC =
    Void Function(Uint32 n, Pointer<Uint32> monitors);

// typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
typedef PFNGLSELECTPERFMONITORCOUNTERSAMDPROCDart =
    void Function(
      int monitor,
      int enable,
      int group,
      int numCounters,
      Pointer<Uint32> counterList,
    );
typedef PFNGLSELECTPERFMONITORCOUNTERSAMDPROC =
    Void Function(
      Uint32 monitor,
      Int32 enable,
      Uint32 group,
      Int32 numCounters,
      Pointer<Uint32> counterList,
    );

// typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor)
typedef PFNGLBEGINPERFMONITORAMDPROCDart = void Function(int monitor);
typedef PFNGLBEGINPERFMONITORAMDPROC = Void Function(Uint32 monitor);

// typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor)
typedef PFNGLENDPERFMONITORAMDPROCDart = void Function(int monitor);
typedef PFNGLENDPERFMONITORAMDPROC = Void Function(Uint32 monitor);

// typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
typedef PFNGLGETPERFMONITORCOUNTERDATAAMDPROCDart =
    void Function(
      int monitor,
      int pname,
      int dataSize,
      Pointer<Uint32> data,
      Pointer<Int32> bytesWritten,
    );
typedef PFNGLGETPERFMONITORCOUNTERDATAAMDPROC =
    Void Function(
      Uint32 monitor,
      Uint32 pname,
      Uint32 dataSize,
      Pointer<Uint32> data,
      Pointer<Int32> bytesWritten,
    );

// typedef void (APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val)
typedef PFNGLSETMULTISAMPLEFVAMDPROCDart =
    void Function(int pname, int index, Pointer<Float> val);
typedef PFNGLSETMULTISAMPLEFVAMDPROC =
    Void Function(Uint32 pname, Uint32 index, Pointer<Float> val);

// typedef void (APIENTRYP PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
typedef PFNGLTEXSTORAGESPARSEAMDPROCDart =
    void Function(
      int target,
      int internalFormat,
      int width,
      int height,
      int depth,
      int layers,
      int flags,
    );
typedef PFNGLTEXSTORAGESPARSEAMDPROC =
    Void Function(
      Uint32 target,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 layers,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
typedef PFNGLTEXTURESTORAGESPARSEAMDPROCDart =
    void Function(
      int texture,
      int target,
      int internalFormat,
      int width,
      int height,
      int depth,
      int layers,
      int flags,
    );
typedef PFNGLTEXTURESTORAGESPARSEAMDPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 layers,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value)
typedef PFNGLSTENCILOPVALUEAMDPROCDart = void Function(int face, int value);
typedef PFNGLSTENCILOPVALUEAMDPROC = Void Function(Uint32 face, Uint32 value);

// typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor)
typedef PFNGLTESSELLATIONFACTORAMDPROCDart = void Function(double factor);
typedef PFNGLTESSELLATIONFACTORAMDPROC = Void Function(Float factor);

// typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode)
typedef PFNGLTESSELLATIONMODEAMDPROCDart = void Function(int mode);
typedef PFNGLTESSELLATIONMODEAMDPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer)
typedef PFNGLELEMENTPOINTERAPPLEPROCDart =
    void Function(int type, Pointer<NativeType> pointer);
typedef PFNGLELEMENTPOINTERAPPLEPROC =
    Void Function(Uint32 type, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count)
typedef PFNGLDRAWELEMENTARRAYAPPLEPROCDart =
    void Function(int mode, int first, int count);
typedef PFNGLDRAWELEMENTARRAYAPPLEPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count);

// typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
typedef PFNGLDRAWRANGEELEMENTARRAYAPPLEPROCDart =
    void Function(int mode, int start, int end, int first, int count);
typedef PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC =
    Void Function(
      Uint32 mode,
      Uint32 start,
      Uint32 end,
      Int32 first,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
typedef PFNGLMULTIDRAWELEMENTARRAYAPPLEPROCDart =
    void Function(
      int mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      int primcount,
    );
typedef PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC =
    Void Function(
      Uint32 mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
typedef PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROCDart =
    void Function(
      int mode,
      int start,
      int end,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      int primcount,
    );
typedef PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC =
    Void Function(
      Uint32 mode,
      Uint32 start,
      Uint32 end,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences)
typedef PFNGLGENFENCESAPPLEPROCDart =
    void Function(int n, Pointer<Uint32> fences);
typedef PFNGLGENFENCESAPPLEPROC =
    Void Function(Uint32 n, Pointer<Uint32> fences);

// typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences)
typedef PFNGLDELETEFENCESAPPLEPROCDart =
    void Function(int n, Pointer<Uint32> fences);
typedef PFNGLDELETEFENCESAPPLEPROC =
    Void Function(Uint32 n, Pointer<Uint32> fences);

// typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence)
typedef PFNGLSETFENCEAPPLEPROCDart = void Function(int fence);
typedef PFNGLSETFENCEAPPLEPROC = Void Function(Uint32 fence);

// typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence)
typedef PFNGLISFENCEAPPLEPROCDart = int Function(int fence);
typedef PFNGLISFENCEAPPLEPROC = Int32 Function(Uint32 fence);

// typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence)
typedef PFNGLTESTFENCEAPPLEPROCDart = int Function(int fence);
typedef PFNGLTESTFENCEAPPLEPROC = Int32 Function(Uint32 fence);

// typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence)
typedef PFNGLFINISHFENCEAPPLEPROCDart = void Function(int fence);
typedef PFNGLFINISHFENCEAPPLEPROC = Void Function(Uint32 fence);

// typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name)
typedef PFNGLTESTOBJECTAPPLEPROCDart = int Function(int object, int name);
typedef PFNGLTESTOBJECTAPPLEPROC = Int32 Function(Uint32 object, Uint32 name);

// typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name)
typedef PFNGLFINISHOBJECTAPPLEPROCDart = void Function(int object, int name);
typedef PFNGLFINISHOBJECTAPPLEPROC = Void Function(Uint32 object, Int32 name);

// typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param)
typedef PFNGLBUFFERPARAMETERIAPPLEPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLBUFFERPARAMETERIAPPLEPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size)
typedef PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROCDart =
    void Function(int target, Pointer<NativeType> offset, Pointer<Uint32> size);
typedef PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)
typedef PFNGLOBJECTPURGEABLEAPPLEPROCDart =
    int Function(int objectType, int name, int option);
typedef PFNGLOBJECTPURGEABLEAPPLEPROC =
    Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option);

// typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)
typedef PFNGLOBJECTUNPURGEABLEAPPLEPROCDart =
    int Function(int objectType, int name, int option);
typedef PFNGLOBJECTUNPURGEABLEAPPLEPROC =
    Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option);

// typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params)
typedef PFNGLGETOBJECTPARAMETERIVAPPLEPROCDart =
    void Function(int objectType, int name, int pname, Pointer<Int32> params);
typedef PFNGLGETOBJECTPARAMETERIVAPPLEPROC =
    Void Function(
      Uint32 objectType,
      Uint32 name,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer)
typedef PFNGLTEXTURERANGEAPPLEPROCDart =
    void Function(int target, int length, Pointer<NativeType> pointer);
typedef PFNGLTEXTURERANGEAPPLEPROC =
    Void Function(Uint32 target, Uint32 length, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params)
typedef PFNGLGETTEXPARAMETERPOINTERVAPPLEPROCDart =
    void Function(int target, int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC =
    Void Function(
      Uint32 target,
      Uint32 pname,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array)
typedef PFNGLBINDVERTEXARRAYAPPLEPROCDart = void Function(int array);
typedef PFNGLBINDVERTEXARRAYAPPLEPROC = Void Function(Uint32 array);

// typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays)
typedef PFNGLDELETEVERTEXARRAYSAPPLEPROCDart =
    void Function(int n, Pointer<Uint32> arrays);
typedef PFNGLDELETEVERTEXARRAYSAPPLEPROC =
    Void Function(Uint32 n, Pointer<Uint32> arrays);

// typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays)
typedef PFNGLGENVERTEXARRAYSAPPLEPROCDart =
    void Function(int n, Pointer<Uint32> arrays);
typedef PFNGLGENVERTEXARRAYSAPPLEPROC =
    Void Function(Uint32 n, Pointer<Uint32> arrays);

// typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array)
typedef PFNGLISVERTEXARRAYAPPLEPROCDart = int Function(int array);
typedef PFNGLISVERTEXARRAYAPPLEPROC = Int32 Function(Uint32 array);

// typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)
typedef PFNGLVERTEXARRAYRANGEAPPLEPROCDart =
    void Function(int length, Pointer<NativeType> pointer);
typedef PFNGLVERTEXARRAYRANGEAPPLEPROC =
    Void Function(Uint32 length, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)
typedef PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROCDart =
    void Function(int length, Pointer<NativeType> pointer);
typedef PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC =
    Void Function(Uint32 length, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param)
typedef PFNGLVERTEXARRAYPARAMETERIAPPLEPROCDart =
    void Function(int pname, int param);
typedef PFNGLVERTEXARRAYPARAMETERIAPPLEPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)
typedef PFNGLENABLEVERTEXATTRIBAPPLEPROCDart =
    void Function(int index, int pname);
typedef PFNGLENABLEVERTEXATTRIBAPPLEPROC =
    Void Function(Uint32 index, Uint32 pname);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)
typedef PFNGLDISABLEVERTEXATTRIBAPPLEPROCDart =
    void Function(int index, int pname);
typedef PFNGLDISABLEVERTEXATTRIBAPPLEPROC =
    Void Function(Uint32 index, Uint32 pname);

// typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname)
typedef PFNGLISVERTEXATTRIBENABLEDAPPLEPROCDart =
    int Function(int index, int pname);
typedef PFNGLISVERTEXATTRIBENABLEDAPPLEPROC =
    Int32 Function(Uint32 index, Uint32 pname);

// typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
typedef PFNGLMAPVERTEXATTRIB1DAPPLEPROCDart =
    void Function(
      int index,
      int size,
      double u1,
      double u2,
      int stride,
      int order,
      Pointer<Double> points,
    );
typedef PFNGLMAPVERTEXATTRIB1DAPPLEPROC =
    Void Function(
      Uint32 index,
      Uint32 size,
      Double u1,
      Double u2,
      Int32 stride,
      Int32 order,
      Pointer<Double> points,
    );

// typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
typedef PFNGLMAPVERTEXATTRIB1FAPPLEPROCDart =
    void Function(
      int index,
      int size,
      double u1,
      double u2,
      int stride,
      int order,
      Pointer<Float> points,
    );
typedef PFNGLMAPVERTEXATTRIB1FAPPLEPROC =
    Void Function(
      Uint32 index,
      Uint32 size,
      Float u1,
      Float u2,
      Int32 stride,
      Int32 order,
      Pointer<Float> points,
    );

// typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
typedef PFNGLMAPVERTEXATTRIB2DAPPLEPROCDart =
    void Function(
      int index,
      int size,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      Pointer<Double> points,
    );
typedef PFNGLMAPVERTEXATTRIB2DAPPLEPROC =
    Void Function(
      Uint32 index,
      Uint32 size,
      Double u1,
      Double u2,
      Int32 ustride,
      Int32 uorder,
      Double v1,
      Double v2,
      Int32 vstride,
      Int32 vorder,
      Pointer<Double> points,
    );

// typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
typedef PFNGLMAPVERTEXATTRIB2FAPPLEPROCDart =
    void Function(
      int index,
      int size,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      Pointer<Float> points,
    );
typedef PFNGLMAPVERTEXATTRIB2FAPPLEPROC =
    Void Function(
      Uint32 index,
      Uint32 size,
      Float u1,
      Float u2,
      Int32 ustride,
      Int32 uorder,
      Float v1,
      Float v2,
      Int32 vstride,
      Int32 vorder,
      Pointer<Float> points,
    );

// typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs)
typedef PFNGLDRAWBUFFERSATIPROCDart =
    void Function(int n, Pointer<Uint32> bufs);
typedef PFNGLDRAWBUFFERSATIPROC = Void Function(Uint32 n, Pointer<Uint32> bufs);

// typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer)
typedef PFNGLELEMENTPOINTERATIPROCDart =
    void Function(int type, Pointer<NativeType> pointer);
typedef PFNGLELEMENTPOINTERATIPROC =
    Void Function(Uint32 type, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count)
typedef PFNGLDRAWELEMENTARRAYATIPROCDart = void Function(int mode, int count);
typedef PFNGLDRAWELEMENTARRAYATIPROC = Void Function(Uint32 mode, Uint32 count);

// typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count)
typedef PFNGLDRAWRANGEELEMENTARRAYATIPROCDart =
    void Function(int mode, int start, int end, int count);
typedef PFNGLDRAWRANGEELEMENTARRAYATIPROC =
    Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count);

// typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param)
typedef PFNGLTEXBUMPPARAMETERIVATIPROCDart =
    void Function(int pname, Pointer<Int32> param);
typedef PFNGLTEXBUMPPARAMETERIVATIPROC =
    Void Function(Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param)
typedef PFNGLTEXBUMPPARAMETERFVATIPROCDart =
    void Function(int pname, Pointer<Float> param);
typedef PFNGLTEXBUMPPARAMETERFVATIPROC =
    Void Function(Uint32 pname, Pointer<Float> param);

// typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param)
typedef PFNGLGETTEXBUMPPARAMETERIVATIPROCDart =
    void Function(int pname, Pointer<Int32> param);
typedef PFNGLGETTEXBUMPPARAMETERIVATIPROC =
    Void Function(Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param)
typedef PFNGLGETTEXBUMPPARAMETERFVATIPROCDart =
    void Function(int pname, Pointer<Float> param);
typedef PFNGLGETTEXBUMPPARAMETERFVATIPROC =
    Void Function(Uint32 pname, Pointer<Float> param);

// typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range)
typedef PFNGLGENFRAGMENTSHADERSATIPROCDart = int Function(int range);
typedef PFNGLGENFRAGMENTSHADERSATIPROC = Uint32 Function(Uint32 range);

// typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id)
typedef PFNGLBINDFRAGMENTSHADERATIPROCDart = void Function(int id);
typedef PFNGLBINDFRAGMENTSHADERATIPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id)
typedef PFNGLDELETEFRAGMENTSHADERATIPROCDart = void Function(int id);
typedef PFNGLDELETEFRAGMENTSHADERATIPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void)
typedef PFNGLBEGINFRAGMENTSHADERATIPROCDart = void Function();
typedef PFNGLBEGINFRAGMENTSHADERATIPROC = Void Function();

// typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void)
typedef PFNGLENDFRAGMENTSHADERATIPROCDart = void Function();
typedef PFNGLENDFRAGMENTSHADERATIPROC = Void Function();

// typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle)
typedef PFNGLPASSTEXCOORDATIPROCDart =
    void Function(int dst, int coord, int swizzle);
typedef PFNGLPASSTEXCOORDATIPROC =
    Void Function(Uint32 dst, Uint32 coord, Uint32 swizzle);

// typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle)
typedef PFNGLSAMPLEMAPATIPROCDart =
    void Function(int dst, int interp, int swizzle);
typedef PFNGLSAMPLEMAPATIPROC =
    Void Function(Uint32 dst, Uint32 interp, Uint32 swizzle);

// typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
typedef PFNGLCOLORFRAGMENTOP1ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMask,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
    );
typedef PFNGLCOLORFRAGMENTOP1ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMask,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
    );

// typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
typedef PFNGLCOLORFRAGMENTOP2ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMask,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
      int arg2,
      int arg2Rep,
      int arg2Mod,
    );
typedef PFNGLCOLORFRAGMENTOP2ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMask,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
      Uint32 arg2,
      Uint32 arg2Rep,
      Uint32 arg2Mod,
    );

// typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
typedef PFNGLCOLORFRAGMENTOP3ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMask,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
      int arg2,
      int arg2Rep,
      int arg2Mod,
      int arg3,
      int arg3Rep,
      int arg3Mod,
    );
typedef PFNGLCOLORFRAGMENTOP3ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMask,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
      Uint32 arg2,
      Uint32 arg2Rep,
      Uint32 arg2Mod,
      Uint32 arg3,
      Uint32 arg3Rep,
      Uint32 arg3Mod,
    );

// typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
typedef PFNGLALPHAFRAGMENTOP1ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
    );
typedef PFNGLALPHAFRAGMENTOP1ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
    );

// typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
typedef PFNGLALPHAFRAGMENTOP2ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
      int arg2,
      int arg2Rep,
      int arg2Mod,
    );
typedef PFNGLALPHAFRAGMENTOP2ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
      Uint32 arg2,
      Uint32 arg2Rep,
      Uint32 arg2Mod,
    );

// typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
typedef PFNGLALPHAFRAGMENTOP3ATIPROCDart =
    void Function(
      int op,
      int dst,
      int dstMod,
      int arg1,
      int arg1Rep,
      int arg1Mod,
      int arg2,
      int arg2Rep,
      int arg2Mod,
      int arg3,
      int arg3Rep,
      int arg3Mod,
    );
typedef PFNGLALPHAFRAGMENTOP3ATIPROC =
    Void Function(
      Uint32 op,
      Uint32 dst,
      Uint32 dstMod,
      Uint32 arg1,
      Uint32 arg1Rep,
      Uint32 arg1Mod,
      Uint32 arg2,
      Uint32 arg2Rep,
      Uint32 arg2Mod,
      Uint32 arg3,
      Uint32 arg3Rep,
      Uint32 arg3Mod,
    );

// typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value)
typedef PFNGLSETFRAGMENTSHADERCONSTANTATIPROCDart =
    void Function(int dst, Pointer<Float> value);
typedef PFNGLSETFRAGMENTSHADERCONSTANTATIPROC =
    Void Function(Uint32 dst, Pointer<Float> value);

// typedef void *(APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer)
typedef PFNGLMAPOBJECTBUFFERATIPROCDart =
    Pointer<NativeType> Function(int buffer);
typedef PFNGLMAPOBJECTBUFFERATIPROC =
    Pointer<NativeType> Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer)
typedef PFNGLUNMAPOBJECTBUFFERATIPROCDart = void Function(int buffer);
typedef PFNGLUNMAPOBJECTBUFFERATIPROC = Void Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param)
typedef PFNGLPNTRIANGLESIATIPROCDart = void Function(int pname, int param);
typedef PFNGLPNTRIANGLESIATIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param)
typedef PFNGLPNTRIANGLESFATIPROCDart = void Function(int pname, double param);
typedef PFNGLPNTRIANGLESFATIPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
typedef PFNGLSTENCILOPSEPARATEATIPROCDart =
    void Function(int face, int sfail, int dpfail, int dppass);
typedef PFNGLSTENCILOPSEPARATEATIPROC =
    Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass);

// typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
typedef PFNGLSTENCILFUNCSEPARATEATIPROCDart =
    void Function(int frontfunc, int backfunc, int ref, int mask);
typedef PFNGLSTENCILFUNCSEPARATEATIPROC =
    Void Function(Uint32 frontfunc, Uint32 backfunc, Int32 ref, Uint32 mask);

// typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage)
typedef PFNGLNEWOBJECTBUFFERATIPROCDart =
    int Function(int size, Pointer<NativeType> pointer, int usage);
typedef PFNGLNEWOBJECTBUFFERATIPROC =
    Uint32 Function(Uint32 size, Pointer<NativeType> pointer, Uint32 usage);

// typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer)
typedef PFNGLISOBJECTBUFFERATIPROCDart = int Function(int buffer);
typedef PFNGLISOBJECTBUFFERATIPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)
typedef PFNGLUPDATEOBJECTBUFFERATIPROCDart =
    void Function(
      int buffer,
      int offset,
      int size,
      Pointer<NativeType> pointer,
      int preserve,
    );
typedef PFNGLUPDATEOBJECTBUFFERATIPROC =
    Void Function(
      Uint32 buffer,
      Uint32 offset,
      Uint32 size,
      Pointer<NativeType> pointer,
      Uint32 preserve,
    );

// typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params)
typedef PFNGLGETOBJECTBUFFERFVATIPROCDart =
    void Function(int buffer, int pname, Pointer<Float> params);
typedef PFNGLGETOBJECTBUFFERFVATIPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params)
typedef PFNGLGETOBJECTBUFFERIVATIPROCDart =
    void Function(int buffer, int pname, Pointer<Int32> params);
typedef PFNGLGETOBJECTBUFFERIVATIPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer)
typedef PFNGLFREEOBJECTBUFFERATIPROCDart = void Function(int buffer);
typedef PFNGLFREEOBJECTBUFFERATIPROC = Void Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
typedef PFNGLARRAYOBJECTATIPROCDart =
    void Function(
      int array,
      int size,
      int type,
      int stride,
      int buffer,
      int offset,
    );
typedef PFNGLARRAYOBJECTATIPROC =
    Void Function(
      Uint32 array,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Uint32 buffer,
      Uint32 offset,
    );

// typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params)
typedef PFNGLGETARRAYOBJECTFVATIPROCDart =
    void Function(int array, int pname, Pointer<Float> params);
typedef PFNGLGETARRAYOBJECTFVATIPROC =
    Void Function(Uint32 array, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params)
typedef PFNGLGETARRAYOBJECTIVATIPROCDart =
    void Function(int array, int pname, Pointer<Int32> params);
typedef PFNGLGETARRAYOBJECTIVATIPROC =
    Void Function(Uint32 array, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
typedef PFNGLVARIANTARRAYOBJECTATIPROCDart =
    void Function(int id, int type, int stride, int buffer, int offset);
typedef PFNGLVARIANTARRAYOBJECTATIPROC =
    Void Function(
      Uint32 id,
      Uint32 type,
      Uint32 stride,
      Uint32 buffer,
      Uint32 offset,
    );

// typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params)
typedef PFNGLGETVARIANTARRAYOBJECTFVATIPROCDart =
    void Function(int id, int pname, Pointer<Float> params);
typedef PFNGLGETVARIANTARRAYOBJECTFVATIPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params)
typedef PFNGLGETVARIANTARRAYOBJECTIVATIPROCDart =
    void Function(int id, int pname, Pointer<Int32> params);
typedef PFNGLGETVARIANTARRAYOBJECTIVATIPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
typedef PFNGLVERTEXATTRIBARRAYOBJECTATIPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int normalized,
      int stride,
      int buffer,
      int offset,
    );
typedef PFNGLVERTEXATTRIBARRAYOBJECTATIPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 stride,
      Uint32 buffer,
      Uint32 offset,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROCDart =
    void Function(int index, int pname, Pointer<Float> params);
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x)
typedef PFNGLVERTEXSTREAM1SATIPROCDart = void Function(int stream, int x);
typedef PFNGLVERTEXSTREAM1SATIPROC = Void Function(Uint32 stream, Int16 x);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords)
typedef PFNGLVERTEXSTREAM1SVATIPROCDart =
    void Function(int stream, Pointer<Int16> coords);
typedef PFNGLVERTEXSTREAM1SVATIPROC =
    Void Function(Uint32 stream, Pointer<Int16> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x)
typedef PFNGLVERTEXSTREAM1IATIPROCDart = void Function(int stream, int x);
typedef PFNGLVERTEXSTREAM1IATIPROC = Void Function(Uint32 stream, Int32 x);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords)
typedef PFNGLVERTEXSTREAM1IVATIPROCDart =
    void Function(int stream, Pointer<Int32> coords);
typedef PFNGLVERTEXSTREAM1IVATIPROC =
    Void Function(Uint32 stream, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x)
typedef PFNGLVERTEXSTREAM1FATIPROCDart = void Function(int stream, double x);
typedef PFNGLVERTEXSTREAM1FATIPROC = Void Function(Uint32 stream, Float x);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords)
typedef PFNGLVERTEXSTREAM1FVATIPROCDart =
    void Function(int stream, Pointer<Float> coords);
typedef PFNGLVERTEXSTREAM1FVATIPROC =
    Void Function(Uint32 stream, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x)
typedef PFNGLVERTEXSTREAM1DATIPROCDart = void Function(int stream, double x);
typedef PFNGLVERTEXSTREAM1DATIPROC = Void Function(Uint32 stream, Double x);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords)
typedef PFNGLVERTEXSTREAM1DVATIPROCDart =
    void Function(int stream, Pointer<Double> coords);
typedef PFNGLVERTEXSTREAM1DVATIPROC =
    Void Function(Uint32 stream, Pointer<Double> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y)
typedef PFNGLVERTEXSTREAM2SATIPROCDart =
    void Function(int stream, int x, int y);
typedef PFNGLVERTEXSTREAM2SATIPROC =
    Void Function(Uint32 stream, Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords)
typedef PFNGLVERTEXSTREAM2SVATIPROCDart =
    void Function(int stream, Pointer<Int16> coords);
typedef PFNGLVERTEXSTREAM2SVATIPROC =
    Void Function(Uint32 stream, Pointer<Int16> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y)
typedef PFNGLVERTEXSTREAM2IATIPROCDart =
    void Function(int stream, int x, int y);
typedef PFNGLVERTEXSTREAM2IATIPROC =
    Void Function(Uint32 stream, Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords)
typedef PFNGLVERTEXSTREAM2IVATIPROCDart =
    void Function(int stream, Pointer<Int32> coords);
typedef PFNGLVERTEXSTREAM2IVATIPROC =
    Void Function(Uint32 stream, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y)
typedef PFNGLVERTEXSTREAM2FATIPROCDart =
    void Function(int stream, double x, double y);
typedef PFNGLVERTEXSTREAM2FATIPROC =
    Void Function(Uint32 stream, Float x, Float y);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords)
typedef PFNGLVERTEXSTREAM2FVATIPROCDart =
    void Function(int stream, Pointer<Float> coords);
typedef PFNGLVERTEXSTREAM2FVATIPROC =
    Void Function(Uint32 stream, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y)
typedef PFNGLVERTEXSTREAM2DATIPROCDart =
    void Function(int stream, double x, double y);
typedef PFNGLVERTEXSTREAM2DATIPROC =
    Void Function(Uint32 stream, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords)
typedef PFNGLVERTEXSTREAM2DVATIPROCDart =
    void Function(int stream, Pointer<Double> coords);
typedef PFNGLVERTEXSTREAM2DVATIPROC =
    Void Function(Uint32 stream, Pointer<Double> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z)
typedef PFNGLVERTEXSTREAM3SATIPROCDart =
    void Function(int stream, int x, int y, int z);
typedef PFNGLVERTEXSTREAM3SATIPROC =
    Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)
typedef PFNGLVERTEXSTREAM3SVATIPROCDart =
    void Function(int stream, Pointer<Int16> coords);
typedef PFNGLVERTEXSTREAM3SVATIPROC =
    Void Function(Uint32 stream, Pointer<Int16> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z)
typedef PFNGLVERTEXSTREAM3IATIPROCDart =
    void Function(int stream, int x, int y, int z);
typedef PFNGLVERTEXSTREAM3IATIPROC =
    Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)
typedef PFNGLVERTEXSTREAM3IVATIPROCDart =
    void Function(int stream, Pointer<Int32> coords);
typedef PFNGLVERTEXSTREAM3IVATIPROC =
    Void Function(Uint32 stream, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLVERTEXSTREAM3FATIPROCDart =
    void Function(int stream, double x, double y, double z);
typedef PFNGLVERTEXSTREAM3FATIPROC =
    Void Function(Uint32 stream, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)
typedef PFNGLVERTEXSTREAM3FVATIPROCDart =
    void Function(int stream, Pointer<Float> coords);
typedef PFNGLVERTEXSTREAM3FVATIPROC =
    Void Function(Uint32 stream, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXSTREAM3DATIPROCDart =
    void Function(int stream, double x, double y, double z);
typedef PFNGLVERTEXSTREAM3DATIPROC =
    Void Function(Uint32 stream, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)
typedef PFNGLVERTEXSTREAM3DVATIPROCDart =
    void Function(int stream, Pointer<Double> coords);
typedef PFNGLVERTEXSTREAM3DVATIPROC =
    Void Function(Uint32 stream, Pointer<Double> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
typedef PFNGLVERTEXSTREAM4SATIPROCDart =
    void Function(int stream, int x, int y, int z, int w);
typedef PFNGLVERTEXSTREAM4SATIPROC =
    Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords)
typedef PFNGLVERTEXSTREAM4SVATIPROCDart =
    void Function(int stream, Pointer<Int16> coords);
typedef PFNGLVERTEXSTREAM4SVATIPROC =
    Void Function(Uint32 stream, Pointer<Int16> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLVERTEXSTREAM4IATIPROCDart =
    void Function(int stream, int x, int y, int z, int w);
typedef PFNGLVERTEXSTREAM4IATIPROC =
    Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords)
typedef PFNGLVERTEXSTREAM4IVATIPROCDart =
    void Function(int stream, Pointer<Int32> coords);
typedef PFNGLVERTEXSTREAM4IVATIPROC =
    Void Function(Uint32 stream, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLVERTEXSTREAM4FATIPROCDart =
    void Function(int stream, double x, double y, double z, double w);
typedef PFNGLVERTEXSTREAM4FATIPROC =
    Void Function(Uint32 stream, Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords)
typedef PFNGLVERTEXSTREAM4FVATIPROCDart =
    void Function(int stream, Pointer<Float> coords);
typedef PFNGLVERTEXSTREAM4FVATIPROC =
    Void Function(Uint32 stream, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXSTREAM4DATIPROCDart =
    void Function(int stream, double x, double y, double z, double w);
typedef PFNGLVERTEXSTREAM4DATIPROC =
    Void Function(Uint32 stream, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords)
typedef PFNGLVERTEXSTREAM4DVATIPROCDart =
    void Function(int stream, Pointer<Double> coords);
typedef PFNGLVERTEXSTREAM4DVATIPROC =
    Void Function(Uint32 stream, Pointer<Double> coords);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
typedef PFNGLNORMALSTREAM3BATIPROCDart =
    void Function(int stream, int nx, int ny, int nz);
typedef PFNGLNORMALSTREAM3BATIPROC =
    Void Function(Uint32 stream, Int8 nx, Int8 ny, Int8 nz);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords)
typedef PFNGLNORMALSTREAM3BVATIPROCDart =
    void Function(int stream, Pointer<Utf8> coords);
typedef PFNGLNORMALSTREAM3BVATIPROC =
    Void Function(Uint32 stream, Pointer<Utf8> coords);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz)
typedef PFNGLNORMALSTREAM3SATIPROCDart =
    void Function(int stream, int nx, int ny, int nz);
typedef PFNGLNORMALSTREAM3SATIPROC =
    Void Function(Uint32 stream, Int16 nx, Int16 ny, Int16 nz);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)
typedef PFNGLNORMALSTREAM3SVATIPROCDart =
    void Function(int stream, Pointer<Int16> coords);
typedef PFNGLNORMALSTREAM3SVATIPROC =
    Void Function(Uint32 stream, Pointer<Int16> coords);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz)
typedef PFNGLNORMALSTREAM3IATIPROCDart =
    void Function(int stream, int nx, int ny, int nz);
typedef PFNGLNORMALSTREAM3IATIPROC =
    Void Function(Uint32 stream, Int32 nx, Int32 ny, Int32 nz);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)
typedef PFNGLNORMALSTREAM3IVATIPROCDart =
    void Function(int stream, Pointer<Int32> coords);
typedef PFNGLNORMALSTREAM3IVATIPROC =
    Void Function(Uint32 stream, Pointer<Int32> coords);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
typedef PFNGLNORMALSTREAM3FATIPROCDart =
    void Function(int stream, double nx, double ny, double nz);
typedef PFNGLNORMALSTREAM3FATIPROC =
    Void Function(Uint32 stream, Float nx, Float ny, Float nz);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)
typedef PFNGLNORMALSTREAM3FVATIPROCDart =
    void Function(int stream, Pointer<Float> coords);
typedef PFNGLNORMALSTREAM3FVATIPROC =
    Void Function(Uint32 stream, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
typedef PFNGLNORMALSTREAM3DATIPROCDart =
    void Function(int stream, double nx, double ny, double nz);
typedef PFNGLNORMALSTREAM3DATIPROC =
    Void Function(Uint32 stream, Double nx, Double ny, Double nz);

// typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)
typedef PFNGLNORMALSTREAM3DVATIPROCDart =
    void Function(int stream, Pointer<Double> coords);
typedef PFNGLNORMALSTREAM3DVATIPROC =
    Void Function(Uint32 stream, Pointer<Double> coords);

// typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream)
typedef PFNGLCLIENTACTIVEVERTEXSTREAMATIPROCDart = void Function(int stream);
typedef PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = Void Function(Uint32 stream);

// typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param)
typedef PFNGLVERTEXBLENDENVIATIPROCDart = void Function(int pname, int param);
typedef PFNGLVERTEXBLENDENVIATIPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param)
typedef PFNGLVERTEXBLENDENVFATIPROCDart =
    void Function(int pname, double param);
typedef PFNGLVERTEXBLENDENVFATIPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC) (GLenum target, GLeglImageOES image, const GLint* attrib_list)
typedef PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROCDart =
    void Function(
      int target,
      Pointer<NativeType> image,
      Pointer<Int32> attribList,
    );
typedef PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> image,
      Pointer<Int32> attribList,
    );

// typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC) (GLuint texture, GLeglImageOES image, const GLint* attrib_list)
typedef PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROCDart =
    void Function(
      int texture,
      Pointer<NativeType> image,
      Pointer<Int32> attribList,
    );
typedef PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC =
    Void Function(
      Uint32 texture,
      Pointer<NativeType> image,
      Pointer<Int32> attribList,
    );

// typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer)
typedef PFNGLUNIFORMBUFFEREXTPROCDart =
    void Function(int program, int location, int buffer);
typedef PFNGLUNIFORMBUFFEREXTPROC =
    Void Function(Uint32 program, Int32 location, Uint32 buffer);

// typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location)
typedef PFNGLGETUNIFORMBUFFERSIZEEXTPROCDart =
    int Function(int program, int location);
typedef PFNGLGETUNIFORMBUFFERSIZEEXTPROC =
    Int32 Function(Uint32 program, Int32 location);

// typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location)
typedef PFNGLGETUNIFORMOFFSETEXTPROCDart =
    Pointer<NativeType> Function(int program, int location);
typedef PFNGLGETUNIFORMOFFSETEXTPROC =
    Pointer<NativeType> Function(Uint32 program, Int32 location);

// typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
typedef PFNGLBLENDCOLOREXTPROCDart =
    void Function(double red, double green, double blue, double alpha);
typedef PFNGLBLENDCOLOREXTPROC =
    Void Function(Float red, Float green, Float blue, Float alpha);

// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha)
typedef PFNGLBLENDEQUATIONSEPARATEEXTPROCDart =
    void Function(int modeRgb, int modeAlpha);
typedef PFNGLBLENDEQUATIONSEPARATEEXTPROC =
    Void Function(Uint32 modeRgb, Uint32 modeAlpha);

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
typedef PFNGLBLENDFUNCSEPARATEEXTPROCDart =
    void Function(
      int sfactorRgb,
      int dfactorRgb,
      int sfactorAlpha,
      int dfactorAlpha,
    );
typedef PFNGLBLENDFUNCSEPARATEEXTPROC =
    Void Function(
      Uint32 sfactorRgb,
      Uint32 dfactorRgb,
      Uint32 sfactorAlpha,
      Uint32 dfactorAlpha,
    );

// typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode)
typedef PFNGLBLENDEQUATIONEXTPROCDart = void Function(int mode);
typedef PFNGLBLENDEQUATIONEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)
typedef PFNGLCOLORSUBTABLEEXTPROCDart =
    void Function(
      int target,
      int start,
      int count,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCOLORSUBTABLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 start,
      Uint32 count,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYCOLORSUBTABLEEXTPROCDart =
    void Function(int target, int start, int x, int y, int width);
typedef PFNGLCOPYCOLORSUBTABLEEXTPROC =
    Void Function(Uint32 target, Uint32 start, Int32 x, Int32 y, Uint32 width);

// typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count)
typedef PFNGLLOCKARRAYSEXTPROCDart = void Function(int first, int count);
typedef PFNGLLOCKARRAYSEXTPROC = Void Function(Int32 first, Uint32 count);

// typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void)
typedef PFNGLUNLOCKARRAYSEXTPROCDart = void Function();
typedef PFNGLUNLOCKARRAYSEXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)
typedef PFNGLCONVOLUTIONFILTER1DEXTPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int format,
      int type,
      Pointer<NativeType> image,
    );
typedef PFNGLCONVOLUTIONFILTER1DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)
typedef PFNGLCONVOLUTIONFILTER2DEXTPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> image,
    );
typedef PFNGLCONVOLUTIONFILTER2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params)
typedef PFNGLCONVOLUTIONPARAMETERFEXTPROCDart =
    void Function(int target, int pname, double params);
typedef PFNGLCONVOLUTIONPARAMETERFEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Float params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLCONVOLUTIONPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLCONVOLUTIONPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params)
typedef PFNGLCONVOLUTIONPARAMETERIEXTPROCDart =
    void Function(int target, int pname, int params);
typedef PFNGLCONVOLUTIONPARAMETERIEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 params);

// typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLCONVOLUTIONPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLCONVOLUTIONPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYCONVOLUTIONFILTER1DEXTPROCDart =
    void Function(int target, int internalformat, int x, int y, int width);
typedef PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYCONVOLUTIONFILTER2DEXTPROCDart =
    void Function(
      int target,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image)
typedef PFNGLGETCONVOLUTIONFILTEREXTPROCDart =
    void Function(int target, int format, int type, Pointer<NativeType> image);
typedef PFNGLGETCONVOLUTIONFILTEREXTPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> image,
    );

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETCONVOLUTIONPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETCONVOLUTIONPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)
typedef PFNGLGETSEPARABLEFILTEREXTPROCDart =
    void Function(
      int target,
      int format,
      int type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );
typedef PFNGLGETSEPARABLEFILTEREXTPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
      Pointer<NativeType> span,
    );

// typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)
typedef PFNGLSEPARABLEFILTER2DEXTPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
    );
typedef PFNGLSEPARABLEFILTER2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> row,
      Pointer<NativeType> column,
    );

// typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz)
typedef PFNGLTANGENT3BEXTPROCDart = void Function(int tx, int ty, int tz);
typedef PFNGLTANGENT3BEXTPROC = Void Function(Int8 tx, Int8 ty, Int8 tz);

// typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v)
typedef PFNGLTANGENT3BVEXTPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLTANGENT3BVEXTPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz)
typedef PFNGLTANGENT3DEXTPROCDart =
    void Function(double tx, double ty, double tz);
typedef PFNGLTANGENT3DEXTPROC = Void Function(Double tx, Double ty, Double tz);

// typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v)
typedef PFNGLTANGENT3DVEXTPROCDart = void Function(Pointer<Double> v);
typedef PFNGLTANGENT3DVEXTPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz)
typedef PFNGLTANGENT3FEXTPROCDart =
    void Function(double tx, double ty, double tz);
typedef PFNGLTANGENT3FEXTPROC = Void Function(Float tx, Float ty, Float tz);

// typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v)
typedef PFNGLTANGENT3FVEXTPROCDart = void Function(Pointer<Float> v);
typedef PFNGLTANGENT3FVEXTPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz)
typedef PFNGLTANGENT3IEXTPROCDart = void Function(int tx, int ty, int tz);
typedef PFNGLTANGENT3IEXTPROC = Void Function(Int32 tx, Int32 ty, Int32 tz);

// typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v)
typedef PFNGLTANGENT3IVEXTPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLTANGENT3IVEXTPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz)
typedef PFNGLTANGENT3SEXTPROCDart = void Function(int tx, int ty, int tz);
typedef PFNGLTANGENT3SEXTPROC = Void Function(Int16 tx, Int16 ty, Int16 tz);

// typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v)
typedef PFNGLTANGENT3SVEXTPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLTANGENT3SVEXTPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz)
typedef PFNGLBINORMAL3BEXTPROCDart = void Function(int bx, int by, int bz);
typedef PFNGLBINORMAL3BEXTPROC = Void Function(Int8 bx, Int8 by, Int8 bz);

// typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v)
typedef PFNGLBINORMAL3BVEXTPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLBINORMAL3BVEXTPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz)
typedef PFNGLBINORMAL3DEXTPROCDart =
    void Function(double bx, double by, double bz);
typedef PFNGLBINORMAL3DEXTPROC = Void Function(Double bx, Double by, Double bz);

// typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v)
typedef PFNGLBINORMAL3DVEXTPROCDart = void Function(Pointer<Double> v);
typedef PFNGLBINORMAL3DVEXTPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz)
typedef PFNGLBINORMAL3FEXTPROCDart =
    void Function(double bx, double by, double bz);
typedef PFNGLBINORMAL3FEXTPROC = Void Function(Float bx, Float by, Float bz);

// typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v)
typedef PFNGLBINORMAL3FVEXTPROCDart = void Function(Pointer<Float> v);
typedef PFNGLBINORMAL3FVEXTPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz)
typedef PFNGLBINORMAL3IEXTPROCDart = void Function(int bx, int by, int bz);
typedef PFNGLBINORMAL3IEXTPROC = Void Function(Int32 bx, Int32 by, Int32 bz);

// typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v)
typedef PFNGLBINORMAL3IVEXTPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLBINORMAL3IVEXTPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz)
typedef PFNGLBINORMAL3SEXTPROCDart = void Function(int bx, int by, int bz);
typedef PFNGLBINORMAL3SEXTPROC = Void Function(Int16 bx, Int16 by, Int16 bz);

// typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v)
typedef PFNGLBINORMAL3SVEXTPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLBINORMAL3SVEXTPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLTANGENTPOINTEREXTPROCDart =
    void Function(int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLTANGENTPOINTEREXTPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLBINORMALPOINTEREXTPROCDart =
    void Function(int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLBINORMALPOINTEREXTPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
typedef PFNGLCOPYTEXIMAGE1DEXTPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int border,
    );
typedef PFNGLCOPYTEXIMAGE1DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
typedef PFNGLCOPYTEXIMAGE2DEXTPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
      int border,
    );
typedef PFNGLCOPYTEXIMAGE2DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYTEXSUBIMAGE1DEXTPROCDart =
    void Function(int target, int level, int xoffset, int x, int y, int width);
typedef PFNGLCOPYTEXSUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXSUBIMAGE2DEXTPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXSUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXSUBIMAGE3DEXTPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXSUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params)
typedef PFNGLCULLPARAMETERDVEXTPROCDart =
    void Function(int pname, Pointer<Double> params);
typedef PFNGLCULLPARAMETERDVEXTPROC =
    Void Function(Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params)
typedef PFNGLCULLPARAMETERFVEXTPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLCULLPARAMETERFVEXTPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label)
typedef PFNGLLABELOBJECTEXTPROCDart =
    void Function(int type, int object, int length, Pointer<Utf8> label);
typedef PFNGLLABELOBJECTEXTPROC =
    Void Function(
      Uint32 type,
      Uint32 object,
      Uint32 length,
      Pointer<Utf8> label,
    );

// typedef void (APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
typedef PFNGLGETOBJECTLABELEXTPROCDart =
    void Function(
      int type,
      int object,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );
typedef PFNGLGETOBJECTLABELEXTPROC =
    Void Function(
      Uint32 type,
      Uint32 object,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Int8> label,
    );

// typedef void (APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker)
typedef PFNGLINSERTEVENTMARKEREXTPROCDart =
    void Function(int length, Pointer<Utf8> marker);
typedef PFNGLINSERTEVENTMARKEREXTPROC =
    Void Function(Uint32 length, Pointer<Utf8> marker);

// typedef void (APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker)
typedef PFNGLPUSHGROUPMARKEREXTPROCDart =
    void Function(int length, Pointer<Utf8> marker);
typedef PFNGLPUSHGROUPMARKEREXTPROC =
    Void Function(Uint32 length, Pointer<Utf8> marker);

// typedef void (APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) (void)
typedef PFNGLPOPGROUPMARKEREXTPROCDart = void Function();
typedef PFNGLPOPGROUPMARKEREXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax)
typedef PFNGLDEPTHBOUNDSEXTPROCDart = void Function(double zmin, double zmax);
typedef PFNGLDEPTHBOUNDSEXTPROC = Void Function(Double zmin, Double zmax);

// typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m)
typedef PFNGLMATRIXLOADFEXTPROCDart = void Function(int mode, Pointer<Float> m);
typedef PFNGLMATRIXLOADFEXTPROC = Void Function(Uint32 mode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m)
typedef PFNGLMATRIXLOADDEXTPROCDart =
    void Function(int mode, Pointer<Double> m);
typedef PFNGLMATRIXLOADDEXTPROC = Void Function(Uint32 mode, Pointer<Double> m);

// typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m)
typedef PFNGLMATRIXMULTFEXTPROCDart = void Function(int mode, Pointer<Float> m);
typedef PFNGLMATRIXMULTFEXTPROC = Void Function(Uint32 mode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m)
typedef PFNGLMATRIXMULTDEXTPROCDart =
    void Function(int mode, Pointer<Double> m);
typedef PFNGLMATRIXMULTDEXTPROC = Void Function(Uint32 mode, Pointer<Double> m);

// typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode)
typedef PFNGLMATRIXLOADIDENTITYEXTPROCDart = void Function(int mode);
typedef PFNGLMATRIXLOADIDENTITYEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLMATRIXROTATEFEXTPROCDart =
    void Function(int mode, double angle, double x, double y, double z);
typedef PFNGLMATRIXROTATEFEXTPROC =
    Void Function(Uint32 mode, Float angle, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLMATRIXROTATEDEXTPROCDart =
    void Function(int mode, double angle, double x, double y, double z);
typedef PFNGLMATRIXROTATEDEXTPROC =
    Void Function(Uint32 mode, Double angle, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLMATRIXSCALEFEXTPROCDart =
    void Function(int mode, double x, double y, double z);
typedef PFNGLMATRIXSCALEFEXTPROC =
    Void Function(Uint32 mode, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLMATRIXSCALEDEXTPROCDart =
    void Function(int mode, double x, double y, double z);
typedef PFNGLMATRIXSCALEDEXTPROC =
    Void Function(Uint32 mode, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLMATRIXTRANSLATEFEXTPROCDart =
    void Function(int mode, double x, double y, double z);
typedef PFNGLMATRIXTRANSLATEFEXTPROC =
    Void Function(Uint32 mode, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLMATRIXTRANSLATEDEXTPROCDart =
    void Function(int mode, double x, double y, double z);
typedef PFNGLMATRIXTRANSLATEDEXTPROC =
    Void Function(Uint32 mode, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
typedef PFNGLMATRIXFRUSTUMEXTPROCDart =
    void Function(
      int mode,
      double left,
      double right,
      double bottom,
      double top,
      double zNear,
      double zFar,
    );
typedef PFNGLMATRIXFRUSTUMEXTPROC =
    Void Function(
      Uint32 mode,
      Double left,
      Double right,
      Double bottom,
      Double top,
      Double zNear,
      Double zFar,
    );

// typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
typedef PFNGLMATRIXORTHOEXTPROCDart =
    void Function(
      int mode,
      double left,
      double right,
      double bottom,
      double top,
      double zNear,
      double zFar,
    );
typedef PFNGLMATRIXORTHOEXTPROC =
    Void Function(
      Uint32 mode,
      Double left,
      Double right,
      Double bottom,
      Double top,
      Double zNear,
      Double zFar,
    );

// typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode)
typedef PFNGLMATRIXPOPEXTPROCDart = void Function(int mode);
typedef PFNGLMATRIXPOPEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode)
typedef PFNGLMATRIXPUSHEXTPROCDart = void Function(int mode);
typedef PFNGLMATRIXPUSHEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)
typedef PFNGLCLIENTATTRIBDEFAULTEXTPROCDart = void Function(int mask);
typedef PFNGLCLIENTATTRIBDEFAULTEXTPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)
typedef PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROCDart = void Function(int mask);
typedef PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param)
typedef PFNGLTEXTUREPARAMETERFEXTPROCDart =
    void Function(int texture, int target, int pname, double param);
typedef PFNGLTEXTUREPARAMETERFEXTPROC =
    Void Function(Uint32 texture, Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLTEXTUREPARAMETERFVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Float> params);
typedef PFNGLTEXTUREPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param)
typedef PFNGLTEXTUREPARAMETERIEXTPROCDart =
    void Function(int texture, int target, int pname, int param);
typedef PFNGLTEXTUREPARAMETERIEXTPROC =
    Void Function(Uint32 texture, Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params)
typedef PFNGLTEXTUREPARAMETERIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXTUREPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTUREIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTUREIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTUREIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTUREIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
typedef PFNGLCOPYTEXTUREIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int border,
    );
typedef PFNGLCOPYTEXTUREIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
typedef PFNGLCOPYTEXTUREIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
      int border,
    );
typedef PFNGLCOPYTEXTUREIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYTEXTURESUBIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int x,
      int y,
      int width,
    );
typedef PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXTURESUBIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
typedef PFNGLGETTEXTUREIMAGEEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETTEXTUREIMAGEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETTEXTUREPARAMETERFVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Float> params);
typedef PFNGLGETTEXTUREPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETTEXTUREPARAMETERIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXTUREPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
typedef PFNGLGETTEXTURELEVELPARAMETERFVEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int pname,
      Pointer<Float> params,
    );
typedef PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
typedef PFNGLGETTEXTURELEVELPARAMETERIVEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTUREIMAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTUREIMAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXTURESUBIMAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXTURESUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYTEXTURESUBIMAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture)
typedef PFNGLBINDMULTITEXTUREEXTPROCDart =
    void Function(int texunit, int target, int texture);
typedef PFNGLBINDMULTITEXTUREEXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 texture);

// typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLMULTITEXCOORDPOINTEREXTPROCDart =
    void Function(
      int texunit,
      int size,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLMULTITEXCOORDPOINTEREXTPROC =
    Void Function(
      Uint32 texunit,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
typedef PFNGLMULTITEXENVFEXTPROCDart =
    void Function(int texunit, int target, int pname, double param);
typedef PFNGLMULTITEXENVFEXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLMULTITEXENVFVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Float> params);
typedef PFNGLMULTITEXENVFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)
typedef PFNGLMULTITEXENVIEXTPROCDart =
    void Function(int texunit, int target, int pname, int param);
typedef PFNGLMULTITEXENVIEXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
typedef PFNGLMULTITEXENVIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLMULTITEXENVIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
typedef PFNGLMULTITEXGENDEXTPROCDart =
    void Function(int texunit, int coord, int pname, double param);
typedef PFNGLMULTITEXGENDEXTPROC =
    Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Double param);

// typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
typedef PFNGLMULTITEXGENDVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Double> params);
typedef PFNGLMULTITEXGENDVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
typedef PFNGLMULTITEXGENFEXTPROCDart =
    void Function(int texunit, int coord, int pname, double param);
typedef PFNGLMULTITEXGENFEXTPROC =
    Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
typedef PFNGLMULTITEXGENFVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Float> params);
typedef PFNGLMULTITEXGENFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param)
typedef PFNGLMULTITEXGENIEXTPROCDart =
    void Function(int texunit, int coord, int pname, int param);
typedef PFNGLMULTITEXGENIEXTPROC =
    Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
typedef PFNGLMULTITEXGENIVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Int32> params);
typedef PFNGLMULTITEXGENIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETMULTITEXENVFVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Float> params);
typedef PFNGLGETMULTITEXENVFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETMULTITEXENVIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMULTITEXENVIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
typedef PFNGLGETMULTITEXGENDVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Double> params);
typedef PFNGLGETMULTITEXGENDVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
typedef PFNGLGETMULTITEXGENFVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Float> params);
typedef PFNGLGETMULTITEXGENFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params)
typedef PFNGLGETMULTITEXGENIVEXTPROCDart =
    void Function(int texunit, int coord, int pname, Pointer<Int32> params);
typedef PFNGLGETMULTITEXGENIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 coord,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)
typedef PFNGLMULTITEXPARAMETERIEXTPROCDart =
    void Function(int texunit, int target, int pname, int param);
typedef PFNGLMULTITEXPARAMETERIEXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
typedef PFNGLMULTITEXPARAMETERIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLMULTITEXPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
typedef PFNGLMULTITEXPARAMETERFEXTPROCDart =
    void Function(int texunit, int target, int pname, double param);
typedef PFNGLMULTITEXPARAMETERFEXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLMULTITEXPARAMETERFVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Float> params);
typedef PFNGLMULTITEXPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXSUBIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXSUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXSUBIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXSUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
typedef PFNGLCOPYMULTITEXIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int border,
    );
typedef PFNGLCOPYMULTITEXIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
typedef PFNGLCOPYMULTITEXIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int x,
      int y,
      int width,
      int height,
      int border,
    );
typedef PFNGLCOPYMULTITEXIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
      Int32 border,
    );

// typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int x,
      int y,
      int width,
    );
typedef PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
typedef PFNGLGETMULTITEXIMAGEEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLGETMULTITEXIMAGEEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETMULTITEXPARAMETERFVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Float> params);
typedef PFNGLGETMULTITEXPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETMULTITEXPARAMETERIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMULTITEXPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
typedef PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int pname,
      Pointer<Float> params,
    );
typedef PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
typedef PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXIMAGE3DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXIMAGE3DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
typedef PFNGLMULTITEXSUBIMAGE3DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLMULTITEXSUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int x,
      int y,
      int width,
      int height,
    );
typedef PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 x,
      Int32 y,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)
typedef PFNGLENABLECLIENTSTATEINDEXEDEXTPROCDart =
    void Function(int array, int index);
typedef PFNGLENABLECLIENTSTATEINDEXEDEXTPROC =
    Void Function(Uint32 array, Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)
typedef PFNGLDISABLECLIENTSTATEINDEXEDEXTPROCDart =
    void Function(int array, int index);
typedef PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC =
    Void Function(Uint32 array, Uint32 index);

// typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data)
typedef PFNGLGETFLOATINDEXEDVEXTPROCDart =
    void Function(int target, int index, Pointer<Float> data);
typedef PFNGLGETFLOATINDEXEDVEXTPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> data);

// typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data)
typedef PFNGLGETDOUBLEINDEXEDVEXTPROCDart =
    void Function(int target, int index, Pointer<Double> data);
typedef PFNGLGETDOUBLEINDEXEDVEXTPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> data);

// typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data)
typedef PFNGLGETPOINTERINDEXEDVEXTPROCDart =
    void Function(int target, int index, Pointer<Pointer<NativeType>> data);
typedef PFNGLGETPOINTERINDEXEDVEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Pointer<Pointer<NativeType>> data,
    );

// typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index)
typedef PFNGLENABLEINDEXEDEXTPROCDart = void Function(int target, int index);
typedef PFNGLENABLEINDEXEDEXTPROC = Void Function(Uint32 target, Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index)
typedef PFNGLDISABLEINDEXEDEXTPROCDart = void Function(int target, int index);
typedef PFNGLDISABLEINDEXEDEXTPROC = Void Function(Uint32 target, Uint32 index);

// typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index)
typedef PFNGLISENABLEDINDEXEDEXTPROCDart = int Function(int target, int index);
typedef PFNGLISENABLEDINDEXEDEXTPROC =
    Int32 Function(Uint32 target, Uint32 index);

// typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data)
typedef PFNGLGETINTEGERINDEXEDVEXTPROCDart =
    void Function(int target, int index, Pointer<Int32> data);
typedef PFNGLGETINTEGERINDEXEDVEXTPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data)
typedef PFNGLGETBOOLEANINDEXEDVEXTPROCDart =
    void Function(int target, int index, Pointer<Int32> data);
typedef PFNGLGETBOOLEANINDEXEDVEXTPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img)
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROCDart =
    void Function(int texture, int target, int lod, Pointer<NativeType> img);
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Int32 lod,
      Pointer<NativeType> img,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int internalformat,
      int width,
      int border,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Int32 border,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROCDart =
    void Function(
      int texunit,
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int imageSize,
      Pointer<NativeType> bits,
    );
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 imageSize,
      Pointer<NativeType> bits,
    );

// typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img)
typedef PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROCDart =
    void Function(int texunit, int target, int lod, Pointer<NativeType> img);
typedef PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Int32 lod,
      Pointer<NativeType> img,
    );

// typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)
typedef PFNGLMATRIXLOADTRANSPOSEFEXTPROCDart =
    void Function(int mode, Pointer<Float> m);
typedef PFNGLMATRIXLOADTRANSPOSEFEXTPROC =
    Void Function(Uint32 mode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)
typedef PFNGLMATRIXLOADTRANSPOSEDEXTPROCDart =
    void Function(int mode, Pointer<Double> m);
typedef PFNGLMATRIXLOADTRANSPOSEDEXTPROC =
    Void Function(Uint32 mode, Pointer<Double> m);

// typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)
typedef PFNGLMATRIXMULTTRANSPOSEFEXTPROCDart =
    void Function(int mode, Pointer<Float> m);
typedef PFNGLMATRIXMULTTRANSPOSEFEXTPROC =
    Void Function(Uint32 mode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)
typedef PFNGLMATRIXMULTTRANSPOSEDEXTPROCDart =
    void Function(int mode, Pointer<Double> m);
typedef PFNGLMATRIXMULTTRANSPOSEDEXTPROC =
    Void Function(Uint32 mode, Pointer<Double> m);

// typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
typedef PFNGLNAMEDBUFFERDATAEXTPROCDart =
    void Function(
      int buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int usage,
    );
typedef PFNGLNAMEDBUFFERDATAEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 usage,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
typedef PFNGLNAMEDBUFFERSUBDATAEXTPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLNAMEDBUFFERSUBDATAEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access)
typedef PFNGLMAPNAMEDBUFFEREXTPROCDart =
    Pointer<NativeType> Function(int buffer, int access);
typedef PFNGLMAPNAMEDBUFFEREXTPROC =
    Pointer<NativeType> Function(Uint32 buffer, Uint32 access);

// typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer)
typedef PFNGLUNMAPNAMEDBUFFEREXTPROCDart = int Function(int buffer);
typedef PFNGLUNMAPNAMEDBUFFEREXTPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROCDart =
    void Function(int buffer, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params)
typedef PFNGLGETNAMEDBUFFERPOINTERVEXTPROCDart =
    void Function(int buffer, int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETNAMEDBUFFERPOINTERVEXTPROC =
    Void Function(
      Uint32 buffer,
      Uint32 pname,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
typedef PFNGLGETNAMEDBUFFERSUBDATAEXTPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLGETNAMEDBUFFERSUBDATAEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0)
typedef PFNGLPROGRAMUNIFORM1FEXTPROCDart =
    void Function(int program, int location, double v0);
typedef PFNGLPROGRAMUNIFORM1FEXTPROC =
    Void Function(Uint32 program, Int32 location, Float v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)
typedef PFNGLPROGRAMUNIFORM2FEXTPROCDart =
    void Function(int program, int location, double v0, double v1);
typedef PFNGLPROGRAMUNIFORM2FEXTPROC =
    Void Function(Uint32 program, Int32 location, Float v0, Float v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
typedef PFNGLPROGRAMUNIFORM3FEXTPROCDart =
    void Function(int program, int location, double v0, double v1, double v2);
typedef PFNGLPROGRAMUNIFORM3FEXTPROC =
    Void Function(Uint32 program, Int32 location, Float v0, Float v1, Float v2);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
typedef PFNGLPROGRAMUNIFORM4FEXTPROCDart =
    void Function(
      int program,
      int location,
      double v0,
      double v1,
      double v2,
      double v3,
    );
typedef PFNGLPROGRAMUNIFORM4FEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Float v0,
      Float v1,
      Float v2,
      Float v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0)
typedef PFNGLPROGRAMUNIFORM1IEXTPROCDart =
    void Function(int program, int location, int v0);
typedef PFNGLPROGRAMUNIFORM1IEXTPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1)
typedef PFNGLPROGRAMUNIFORM2IEXTPROCDart =
    void Function(int program, int location, int v0, int v1);
typedef PFNGLPROGRAMUNIFORM2IEXTPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
typedef PFNGLPROGRAMUNIFORM3IEXTPROCDart =
    void Function(int program, int location, int v0, int v1, int v2);
typedef PFNGLPROGRAMUNIFORM3IEXTPROC =
    Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
typedef PFNGLPROGRAMUNIFORM4IEXTPROCDart =
    void Function(int program, int location, int v0, int v1, int v2, int v3);
typedef PFNGLPROGRAMUNIFORM4IEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Int32 v0,
      Int32 v1,
      Int32 v2,
      Int32 v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM1FVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM1FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM2FVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM2FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM3FVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM3FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORM4FVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Float> value);
typedef PFNGLPROGRAMUNIFORM4FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM1IVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM1IVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM2IVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM2IVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM3IVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM3IVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)
typedef PFNGLPROGRAMUNIFORM4IVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Int32> value);
typedef PFNGLPROGRAMUNIFORM4IVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Int32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Float> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Float> value,
    );

// typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
typedef PFNGLTEXTUREBUFFEREXTPROCDart =
    void Function(int texture, int target, int internalformat, int buffer);
typedef PFNGLTEXTUREBUFFEREXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 internalformat,
      Uint32 buffer,
    );

// typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
typedef PFNGLMULTITEXBUFFEREXTPROCDart =
    void Function(int texunit, int target, int internalformat, int buffer);
typedef PFNGLMULTITEXBUFFEREXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 internalformat,
      Uint32 buffer,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params)
typedef PFNGLTEXTUREPARAMETERIIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXTUREPARAMETERIIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params)
typedef PFNGLTEXTUREPARAMETERIUIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Uint32> params);
typedef PFNGLTEXTUREPARAMETERIUIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETTEXTUREPARAMETERIIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXTUREPARAMETERIIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params)
typedef PFNGLGETTEXTUREPARAMETERIUIVEXTPROCDart =
    void Function(int texture, int target, int pname, Pointer<Uint32> params);
typedef PFNGLGETTEXTUREPARAMETERIUIVEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 pname,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)
typedef PFNGLMULTITEXPARAMETERIIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLMULTITEXPARAMETERIIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
typedef PFNGLMULTITEXPARAMETERIUIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Uint32> params);
typedef PFNGLMULTITEXPARAMETERIUIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETMULTITEXPARAMETERIIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMULTITEXPARAMETERIIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params)
typedef PFNGLGETMULTITEXPARAMETERIUIVEXTPROCDart =
    void Function(int texunit, int target, int pname, Pointer<Uint32> params);
typedef PFNGLGETMULTITEXPARAMETERIUIVEXTPROC =
    Void Function(
      Uint32 texunit,
      Uint32 target,
      Uint32 pname,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0)
typedef PFNGLPROGRAMUNIFORM1UIEXTPROCDart =
    void Function(int program, int location, int v0);
typedef PFNGLPROGRAMUNIFORM1UIEXTPROC =
    Void Function(Uint32 program, Int32 location, Uint32 v0);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)
typedef PFNGLPROGRAMUNIFORM2UIEXTPROCDart =
    void Function(int program, int location, int v0, int v1);
typedef PFNGLPROGRAMUNIFORM2UIEXTPROC =
    Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
typedef PFNGLPROGRAMUNIFORM3UIEXTPROCDart =
    void Function(int program, int location, int v0, int v1, int v2);
typedef PFNGLPROGRAMUNIFORM3UIEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 v0,
      Uint32 v1,
      Uint32 v2,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
typedef PFNGLPROGRAMUNIFORM4UIEXTPROCDart =
    void Function(int program, int location, int v0, int v1, int v2, int v3);
typedef PFNGLPROGRAMUNIFORM4UIEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 v0,
      Uint32 v1,
      Uint32 v2,
      Uint32 v3,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM1UIVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM1UIVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM2UIVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM2UIVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM3UIVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM3UIVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)
typedef PFNGLPROGRAMUNIFORM4UIVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Uint32> value);
typedef PFNGLPROGRAMUNIFORM4UIVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint32> value,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      int count,
      Pointer<Float> params,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      int x,
      int y,
      int z,
      int w,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Int32 x,
      Int32 y,
      Int32 z,
      Int32 w,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Int32> params);
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      int count,
      Pointer<Int32> params,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      int x,
      int y,
      int z,
      int w,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Uint32 x,
      Uint32 y,
      Uint32 z,
      Uint32 w,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Uint32> params);
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      int count,
      Pointer<Uint32> params,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params)
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Int32> params);
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params)
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Uint32> params);
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)
typedef PFNGLENABLECLIENTSTATEIEXTPROCDart =
    void Function(int array, int index);
typedef PFNGLENABLECLIENTSTATEIEXTPROC =
    Void Function(Uint32 array, Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)
typedef PFNGLDISABLECLIENTSTATEIEXTPROCDart =
    void Function(int array, int index);
typedef PFNGLDISABLECLIENTSTATEIEXTPROC =
    Void Function(Uint32 array, Uint32 index);

// typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params)
typedef PfnglgetfloatiVextprocDart =
    void Function(int pname, int index, Pointer<Float> params);
typedef PfnglgetfloatiVextproc =
    Void Function(Uint32 pname, Uint32 index, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)
typedef PfnglgetdoubleiVextprocDart =
    void Function(int pname, int index, Pointer<Double> params);
typedef PfnglgetdoubleiVextproc =
    Void Function(Uint32 pname, Uint32 index, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params)
typedef PfnglgetpointeriVextprocDart =
    void Function(int pname, int index, Pointer<Pointer<NativeType>> params);
typedef PfnglgetpointeriVextproc =
    Void Function(
      Uint32 pname,
      Uint32 index,
      Pointer<Pointer<NativeType>> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)
typedef PFNGLNAMEDPROGRAMSTRINGEXTPROCDart =
    void Function(
      int program,
      int target,
      int format,
      int len,
      Pointer<NativeType> string,
    );
typedef PFNGLNAMEDPROGRAMSTRINGEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 format,
      Uint32 len,
      Pointer<NativeType> string,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Double> params);
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROCDart =
    void Function(
      int program,
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params)
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Float> params);
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params)
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Double> params);
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params)
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROCDart =
    void Function(int program, int target, int index, Pointer<Float> params);
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 index,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDPROGRAMIVEXTPROCDart =
    void Function(int program, int target, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDPROGRAMIVEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string)
typedef PFNGLGETNAMEDPROGRAMSTRINGEXTPROCDart =
    void Function(
      int program,
      int target,
      int pname,
      Pointer<NativeType> string,
    );
typedef PFNGLGETNAMEDPROGRAMSTRINGEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 target,
      Uint32 pname,
      Pointer<NativeType> string,
    );

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROCDart =
    void Function(int renderbuffer, int internalformat, int width, int height);
typedef PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROCDart =
    void Function(int renderbuffer, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC =
    Void Function(Uint32 renderbuffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROCDart =
    void Function(
      int renderbuffer,
      int samples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROCDart =
    void Function(
      int renderbuffer,
      int coverageSamples,
      int colorSamples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC =
    Void Function(
      Uint32 renderbuffer,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target)
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROCDart =
    int Function(int framebuffer, int target);
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC =
    Uint32 Function(Uint32 framebuffer, Uint32 target);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int textarget,
      int texture,
      int level,
      int zoffset,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
      Int32 zoffset,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int renderbuffertarget,
      int renderbuffer,
    );
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 renderbuffertarget,
      Uint32 renderbuffer,
    );

// typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target)
typedef PFNGLGENERATETEXTUREMIPMAPEXTPROCDart =
    void Function(int texture, int target);
typedef PFNGLGENERATETEXTUREMIPMAPEXTPROC =
    Void Function(Uint32 texture, Uint32 target);

// typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target)
typedef PFNGLGENERATEMULTITEXMIPMAPEXTPROCDart =
    void Function(int texunit, int target);
typedef PFNGLGENERATEMULTITEXMIPMAPEXTPROC =
    Void Function(Uint32 texunit, Uint32 target);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)
typedef PFNGLFRAMEBUFFERDRAWBUFFEREXTPROCDart =
    void Function(int framebuffer, int mode);
typedef PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC =
    Void Function(Uint32 framebuffer, Uint32 mode);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs)
typedef PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROCDart =
    void Function(int framebuffer, int n, Pointer<Uint32> bufs);
typedef PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC =
    Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32> bufs);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)
typedef PFNGLFRAMEBUFFERREADBUFFEREXTPROCDart =
    void Function(int framebuffer, int mode);
typedef PFNGLFRAMEBUFFERREADBUFFEREXTPROC =
    Void Function(Uint32 framebuffer, Uint32 mode);

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params)
typedef PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROCDart =
    void Function(int framebuffer, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC =
    Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
typedef PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROCDart =
    void Function(
      int readBuffer,
      int writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );
typedef PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC =
    Void Function(
      Uint32 readBuffer,
      Uint32 writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROCDart =
    void Function(int framebuffer, int attachment, int texture, int level);
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int texture,
      int level,
      int layer,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 layer,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROCDart =
    void Function(
      int framebuffer,
      int attachment,
      int texture,
      int level,
      int face,
    );
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Uint32 face,
    );

// typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer)
typedef PFNGLTEXTURERENDERBUFFEREXTPROCDart =
    void Function(int texture, int target, int renderbuffer);
typedef PFNGLTEXTURERENDERBUFFEREXTPROC =
    Void Function(Uint32 texture, Uint32 target, Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer)
typedef PFNGLMULTITEXRENDERBUFFEREXTPROCDart =
    void Function(int texunit, int target, int renderbuffer);
typedef PFNGLMULTITEXRENDERBUFFEREXTPROC =
    Void Function(Uint32 texunit, Uint32 target, Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYVERTEXOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYCOLOROFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYCOLOROFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYINDEXOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYINDEXOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYNORMALOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYNORMALOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int texunit,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 texunit,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int index,
      int size,
      int type,
      int normalized,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 index,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)
typedef PFNGLENABLEVERTEXARRAYEXTPROCDart = void Function(int vaobj, int array);
typedef PFNGLENABLEVERTEXARRAYEXTPROC =
    Void Function(Uint32 vaobj, Uint32 array);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)
typedef PFNGLDISABLEVERTEXARRAYEXTPROCDart =
    void Function(int vaobj, int array);
typedef PFNGLDISABLEVERTEXARRAYEXTPROC =
    Void Function(Uint32 vaobj, Uint32 array);

// typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)
typedef PFNGLENABLEVERTEXARRAYATTRIBEXTPROCDart =
    void Function(int vaobj, int index);
typedef PFNGLENABLEVERTEXARRAYATTRIBEXTPROC =
    Void Function(Uint32 vaobj, Uint32 index);

// typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)
typedef PFNGLDISABLEVERTEXARRAYATTRIBEXTPROCDart =
    void Function(int vaobj, int index);
typedef PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC =
    Void Function(Uint32 vaobj, Uint32 index);

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param)
typedef PFNGLGETVERTEXARRAYINTEGERVEXTPROCDart =
    void Function(int vaobj, int pname, Pointer<Int32> param);
typedef PFNGLGETVERTEXARRAYINTEGERVEXTPROC =
    Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32> param);

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param)
typedef PFNGLGETVERTEXARRAYPOINTERVEXTPROCDart =
    void Function(int vaobj, int pname, Pointer<Pointer<NativeType>> param);
typedef PFNGLGETVERTEXARRAYPOINTERVEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 pname,
      Pointer<Pointer<NativeType>> param,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param)
typedef PfnglgetvertexarrayintegeriVextprocDart =
    void Function(int vaobj, int index, int pname, Pointer<Int32> param);
typedef PfnglgetvertexarrayintegeriVextproc =
    Void Function(
      Uint32 vaobj,
      Uint32 index,
      Uint32 pname,
      Pointer<Int32> param,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param)
typedef PfnglgetvertexarraypointeriVextprocDart =
    void Function(
      int vaobj,
      int index,
      int pname,
      Pointer<Pointer<NativeType>> param,
    );
typedef PfnglgetvertexarraypointeriVextproc =
    Void Function(
      Uint32 vaobj,
      Uint32 index,
      Uint32 pname,
      Pointer<Pointer<NativeType>> param,
    );

// typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
typedef PFNGLMAPNAMEDBUFFERRANGEEXTPROCDart =
    Pointer<NativeType> Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      int access,
    );
typedef PFNGLMAPNAMEDBUFFERRANGEEXTPROC =
    Pointer<NativeType> Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
      Uint32 access,
    );

// typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> length,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
typedef PFNGLNAMEDBUFFERSTORAGEEXTPROCDart =
    void Function(
      int buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      int flags,
    );
typedef PFNGLNAMEDBUFFERSTORAGEEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARNAMEDBUFFERDATAEXTPROCDart =
    void Function(
      int buffer,
      int internalformat,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARNAMEDBUFFERDATAEXTPROC =
    Void Function(
      Uint32 buffer,
      Uint32 internalformat,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
typedef PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROCDart =
    void Function(
      int buffer,
      int internalformat,
      Pointer<Uint32> offset,
      Pointer<Uint32> size,
      int format,
      int type,
      Pointer<NativeType> data,
    );
typedef PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC =
    Void Function(
      Uint32 buffer,
      Uint32 internalformat,
      Pointer<Uint32> offset,
      Pointer<Uint32> size,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param)
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROCDart =
    void Function(int framebuffer, int pname, int param);
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC =
    Void Function(Uint32 framebuffer, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params)
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROCDart =
    void Function(int framebuffer, int pname, Pointer<Int32> params);
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC =
    Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x)
typedef PFNGLPROGRAMUNIFORM1DEXTPROCDart =
    void Function(int program, int location, double x);
typedef PFNGLPROGRAMUNIFORM1DEXTPROC =
    Void Function(Uint32 program, Int32 location, Double x);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y)
typedef PFNGLPROGRAMUNIFORM2DEXTPROCDart =
    void Function(int program, int location, double x, double y);
typedef PFNGLPROGRAMUNIFORM2DEXTPROC =
    Void Function(Uint32 program, Int32 location, Double x, Double y);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLPROGRAMUNIFORM3DEXTPROCDart =
    void Function(int program, int location, double x, double y, double z);
typedef PFNGLPROGRAMUNIFORM3DEXTPROC =
    Void Function(Uint32 program, Int32 location, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLPROGRAMUNIFORM4DEXTPROCDart =
    void Function(
      int program,
      int location,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMUNIFORM4DEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM1DVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM1DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM2DVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM2DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM3DVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM3DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORM4DVEXTPROCDart =
    void Function(int program, int location, int count, Pointer<Double> value);
typedef PFNGLPROGRAMUNIFORM4DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROCDart =
    void Function(
      int program,
      int location,
      int count,
      int transpose,
      Pointer<Double> value,
    );
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Int32 transpose,
      Pointer<Double> value,
    );

// typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLTEXTUREBUFFERRANGEEXTPROCDart =
    void Function(
      int texture,
      int target,
      int internalformat,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLTEXTUREBUFFERRANGEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 internalformat,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
typedef PFNGLTEXTURESTORAGE1DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int levels,
      int internalformat,
      int width,
    );
typedef PFNGLTEXTURESTORAGE1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLTEXTURESTORAGE2DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLTEXTURESTORAGE2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLTEXTURESTORAGE3DEXTPROCDart =
    void Function(
      int texture,
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
      int depth,
    );
typedef PFNGLTEXTURESTORAGE3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROCDart =
    void Function(
      int texture,
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int fixedsamplelocations,
    );
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROCDart =
    void Function(
      int texture,
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
      int depth,
      int fixedsamplelocations,
    );
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedsamplelocations,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
typedef PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROCDart =
    void Function(
      int vaobj,
      int bindingindex,
      int buffer,
      Pointer<NativeType> offset,
      int stride,
    );
typedef PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 bindingindex,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int normalized,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROCDart =
    void Function(
      int vaobj,
      int attribindex,
      int size,
      int type,
      int relativeoffset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 attribindex,
      Int32 size,
      Uint32 type,
      Uint32 relativeoffset,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
typedef PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROCDart =
    void Function(int vaobj, int attribindex, int bindingindex);
typedef PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC =
    Void Function(Uint32 vaobj, Uint32 attribindex, Uint32 bindingindex);

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)
typedef PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROCDart =
    void Function(int vaobj, int bindingindex, int divisor);
typedef PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC =
    Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor);

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
typedef PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROCDart =
    void Function(
      int vaobj,
      int buffer,
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> offset,
    );
typedef PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC =
    Void Function(
      Uint32 vaobj,
      Uint32 buffer,
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
typedef PFNGLTEXTUREPAGECOMMITMENTEXTPROCDart =
    void Function(
      int texture,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int commit,
    );
typedef PFNGLTEXTUREPAGECOMMITMENTEXTPROC =
    Void Function(
      Uint32 texture,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor)
typedef PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROCDart =
    void Function(int vaobj, int index, int divisor);
typedef PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC =
    Void Function(Uint32 vaobj, Uint32 index, Uint32 divisor);

// typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
typedef PFNGLCOLORMASKINDEXEDEXTPROCDart =
    void Function(int index, int r, int g, int b, int a);
typedef PFNGLCOLORMASKINDEXEDEXTPROC =
    Void Function(Uint32 index, Int32 r, Int32 g, Int32 b, Int32 a);

// typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
typedef PFNGLDRAWARRAYSINSTANCEDEXTPROCDart =
    void Function(int mode, int start, int count, int primcount);
typedef PFNGLDRAWARRAYSINSTANCEDEXTPROC =
    Void Function(Uint32 mode, Int32 start, Uint32 count, Uint32 primcount);

// typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
typedef PFNGLDRAWELEMENTSINSTANCEDEXTPROCDart =
    void Function(
      int mode,
      int count,
      int type,
      Pointer<NativeType> indices,
      int primcount,
    );
typedef PFNGLDRAWELEMENTSINSTANCEDEXTPROC =
    Void Function(
      Uint32 mode,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
typedef PFNGLDRAWRANGEELEMENTSEXTPROCDart =
    void Function(
      int mode,
      int start,
      int end,
      int count,
      int type,
      Pointer<NativeType> indices,
    );
typedef PFNGLDRAWRANGEELEMENTSEXTPROC =
    Void Function(
      Uint32 mode,
      Uint32 start,
      Uint32 end,
      Uint32 count,
      Uint32 type,
      Pointer<NativeType> indices,
    );

// typedef void (APIENTRYP PFNGLBUFFERSTORAGEEXTERNALEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
typedef PFNGLBUFFERSTORAGEEXTERNALEXTPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> clientBuffer,
      int flags,
    );
typedef PFNGLBUFFERSTORAGEEXTERNALEXTPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> clientBuffer,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
typedef PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> clientBuffer,
      int flags,
    );
typedef PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> clientBuffer,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord)
typedef PFNGLFOGCOORDFEXTPROCDart = void Function(double coord);
typedef PFNGLFOGCOORDFEXTPROC = Void Function(Float coord);

// typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord)
typedef PFNGLFOGCOORDFVEXTPROCDart = void Function(Pointer<Float> coord);
typedef PFNGLFOGCOORDFVEXTPROC = Void Function(Pointer<Float> coord);

// typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord)
typedef PFNGLFOGCOORDDEXTPROCDart = void Function(double coord);
typedef PFNGLFOGCOORDDEXTPROC = Void Function(Double coord);

// typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord)
typedef PFNGLFOGCOORDDVEXTPROCDart = void Function(Pointer<Double> coord);
typedef PFNGLFOGCOORDDVEXTPROC = Void Function(Pointer<Double> coord);

// typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLFOGCOORDPOINTEREXTPROCDart =
    void Function(int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLFOGCOORDPOINTEREXTPROC =
    Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
typedef PFNGLBLITFRAMEBUFFEREXTPROCDart =
    void Function(
      int srcX0,
      int srcY0,
      int srcX1,
      int srcY1,
      int dstX0,
      int dstY0,
      int dstX1,
      int dstY1,
      int mask,
      int filter,
    );
typedef PFNGLBLITFRAMEBUFFEREXTPROC =
    Void Function(
      Int32 srcX0,
      Int32 srcY0,
      Int32 srcX1,
      Int32 srcY1,
      Int32 dstX0,
      Int32 dstY0,
      Int32 dstX1,
      Int32 dstY1,
      Uint32 mask,
      Uint32 filter,
    );

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROCDart =
    void Function(
      int target,
      int samples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer)
typedef PFNGLISRENDERBUFFEREXTPROCDart = int Function(int renderbuffer);
typedef PFNGLISRENDERBUFFEREXTPROC = Int32 Function(Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer)
typedef PFNGLBINDRENDERBUFFEREXTPROCDart =
    void Function(int target, int renderbuffer);
typedef PFNGLBINDRENDERBUFFEREXTPROC =
    Void Function(Uint32 target, Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers)
typedef PFNGLDELETERENDERBUFFERSEXTPROCDart =
    void Function(int n, Pointer<Uint32> renderbuffers);
typedef PFNGLDELETERENDERBUFFERSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> renderbuffers);

// typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers)
typedef PFNGLGENRENDERBUFFERSEXTPROCDart =
    void Function(int n, Pointer<Uint32> renderbuffers);
typedef PFNGLGENRENDERBUFFERSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> renderbuffers);

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEEXTPROCDart =
    void Function(int target, int internalformat, int width, int height);
typedef PFNGLRENDERBUFFERSTORAGEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETRENDERBUFFERPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer)
typedef PFNGLISFRAMEBUFFEREXTPROCDart = int Function(int framebuffer);
typedef PFNGLISFRAMEBUFFEREXTPROC = Int32 Function(Uint32 framebuffer);

// typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer)
typedef PFNGLBINDFRAMEBUFFEREXTPROCDart =
    void Function(int target, int framebuffer);
typedef PFNGLBINDFRAMEBUFFEREXTPROC =
    Void Function(Uint32 target, Uint32 framebuffer);

// typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers)
typedef PFNGLDELETEFRAMEBUFFERSEXTPROCDart =
    void Function(int n, Pointer<Uint32> framebuffers);
typedef PFNGLDELETEFRAMEBUFFERSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> framebuffers);

// typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers)
typedef PFNGLGENFRAMEBUFFERSEXTPROCDart =
    void Function(int n, Pointer<Uint32> framebuffers);
typedef PFNGLGENFRAMEBUFFERSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> framebuffers);

// typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target)
typedef PFNGLCHECKFRAMEBUFFERSTATUSEXTPROCDart = int Function(int target);
typedef PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = Uint32 Function(Uint32 target);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTURE1DEXTPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLFRAMEBUFFERTEXTURE1DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTURE2DEXTPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
    );
typedef PFNGLFRAMEBUFFERTEXTURE2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
typedef PFNGLFRAMEBUFFERTEXTURE3DEXTPROCDart =
    void Function(
      int target,
      int attachment,
      int textarget,
      int texture,
      int level,
      int zoffset,
    );
typedef PFNGLFRAMEBUFFERTEXTURE3DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 textarget,
      Uint32 texture,
      Int32 level,
      Int32 zoffset,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
typedef PFNGLFRAMEBUFFERRENDERBUFFEREXTPROCDart =
    void Function(
      int target,
      int attachment,
      int renderbuffertarget,
      int renderbuffer,
    );
typedef PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 renderbuffertarget,
      Uint32 renderbuffer,
    );

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROCDart =
    void Function(int target, int attachment, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target)
typedef PFNGLGENERATEMIPMAPEXTPROCDart = void Function(int target);
typedef PFNGLGENERATEMIPMAPEXTPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value)
typedef PFNGLPROGRAMPARAMETERIEXTPROCDart =
    void Function(int program, int pname, int value);
typedef PFNGLPROGRAMPARAMETERIEXTPROC =
    Void Function(Uint32 program, Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params)
typedef PFNGLPROGRAMENVPARAMETERS4FVEXTPROCDart =
    void Function(int target, int index, int count, Pointer<Float> params);
typedef PFNGLPROGRAMENVPARAMETERS4FVEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params)
typedef PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROCDart =
    void Function(int target, int index, int count, Pointer<Float> params);
typedef PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params)
typedef PFNGLGETUNIFORMUIVEXTPROCDart =
    void Function(int program, int location, Pointer<Uint32> params);
typedef PFNGLGETUNIFORMUIVEXTPROC =
    Void Function(Uint32 program, Int32 location, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name)
typedef PFNGLBINDFRAGDATALOCATIONEXTPROCDart =
    void Function(int program, int color, Pointer<Utf8> name);
typedef PFNGLBINDFRAGDATALOCATIONEXTPROC =
    Void Function(Uint32 program, Uint32 color, Pointer<Utf8> name);

// typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETFRAGDATALOCATIONEXTPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETFRAGDATALOCATIONEXTPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0)
typedef PFNGLUNIFORM1UIEXTPROCDart = void Function(int location, int v0);
typedef PFNGLUNIFORM1UIEXTPROC = Void Function(Int32 location, Uint32 v0);

// typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1)
typedef PFNGLUNIFORM2UIEXTPROCDart =
    void Function(int location, int v0, int v1);
typedef PFNGLUNIFORM2UIEXTPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1);

// typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)
typedef PFNGLUNIFORM3UIEXTPROCDart =
    void Function(int location, int v0, int v1, int v2);
typedef PFNGLUNIFORM3UIEXTPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2);

// typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
typedef PFNGLUNIFORM4UIEXTPROCDart =
    void Function(int location, int v0, int v1, int v2, int v3);
typedef PFNGLUNIFORM4UIEXTPROC =
    Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3);

// typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM1UIVEXTPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM1UIVEXTPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM2UIVEXTPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM2UIVEXTPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM3UIVEXTPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM3UIVEXTPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
typedef PFNGLUNIFORM4UIVEXTPROCDart =
    void Function(int location, int count, Pointer<Uint32> value);
typedef PFNGLUNIFORM4UIVEXTPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint32> value);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x)
typedef PFNGLVERTEXATTRIBI1IEXTPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBI1IEXTPROC = Void Function(Uint32 index, Int32 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y)
typedef PFNGLVERTEXATTRIBI2IEXTPROCDart =
    void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBI2IEXTPROC =
    Void Function(Uint32 index, Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z)
typedef PFNGLVERTEXATTRIBI3IEXTPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBI3IEXTPROC =
    Void Function(Uint32 index, Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLVERTEXATTRIBI4IEXTPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBI4IEXTPROC =
    Void Function(Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x)
typedef PFNGLVERTEXATTRIBI1UIEXTPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBI1UIEXTPROC = Void Function(Uint32 index, Uint32 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y)
typedef PFNGLVERTEXATTRIBI2UIEXTPROCDart =
    void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBI2UIEXTPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z)
typedef PFNGLVERTEXATTRIBI3UIEXTPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBI3UIEXTPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
typedef PFNGLVERTEXATTRIBI4UIEXTPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBI4UIEXTPROC =
    Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI1IVEXTPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI1IVEXTPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI2IVEXTPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI2IVEXTPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI3IVEXTPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI3IVEXTPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v)
typedef PFNGLVERTEXATTRIBI4IVEXTPROCDart =
    void Function(int index, Pointer<Int32> v);
typedef PFNGLVERTEXATTRIBI4IVEXTPROC =
    Void Function(Uint32 index, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI1UIVEXTPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI1UIVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI2UIVEXTPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI2UIVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI3UIVEXTPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI3UIVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v)
typedef PFNGLVERTEXATTRIBI4UIVEXTPROCDart =
    void Function(int index, Pointer<Uint32> v);
typedef PFNGLVERTEXATTRIBI4UIVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v)
typedef PFNGLVERTEXATTRIBI4BVEXTPROCDart =
    void Function(int index, Pointer<Utf8> v);
typedef PFNGLVERTEXATTRIBI4BVEXTPROC =
    Void Function(Uint32 index, Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIBI4SVEXTPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBI4SVEXTPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIBI4UBVEXTPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIBI4UBVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v)
typedef PFNGLVERTEXATTRIBI4USVEXTPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBI4USVEXTPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBIPOINTEREXTPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBIPOINTEREXTPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBIIVEXTPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBIIVEXTPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params)
typedef PFNGLGETVERTEXATTRIBIUIVEXTPROCDart =
    void Function(int index, int pname, Pointer<Uint32> params);
typedef PFNGLGETVERTEXATTRIBIUIVEXTPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
typedef PFNGLGETHISTOGRAMEXTPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      Pointer<NativeType> values,
    );
typedef PFNGLGETHISTOGRAMEXTPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETHISTOGRAMPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETHISTOGRAMPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETHISTOGRAMPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETHISTOGRAMPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
typedef PFNGLGETMINMAXEXTPROCDart =
    void Function(
      int target,
      int reset,
      int format,
      int type,
      Pointer<NativeType> values,
    );
typedef PFNGLGETMINMAXEXTPROC =
    Void Function(
      Uint32 target,
      Int32 reset,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> values,
    );

// typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETMINMAXPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETMINMAXPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETMINMAXPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMINMAXPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
typedef PFNGLHISTOGRAMEXTPROCDart =
    void Function(int target, int width, int internalformat, int sink);
typedef PFNGLHISTOGRAMEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 width,
      Uint32 internalformat,
      Int32 sink,
    );

// typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink)
typedef PFNGLMINMAXEXTPROCDart =
    void Function(int target, int internalformat, int sink);
typedef PFNGLMINMAXEXTPROC =
    Void Function(Uint32 target, Uint32 internalformat, Int32 sink);

// typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target)
typedef PFNGLRESETHISTOGRAMEXTPROCDart = void Function(int target);
typedef PFNGLRESETHISTOGRAMEXTPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target)
typedef PFNGLRESETMINMAXEXTPROCDart = void Function(int target);
typedef PFNGLRESETMINMAXEXTPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref)
typedef PFNGLINDEXFUNCEXTPROCDart = void Function(int func, double ref);
typedef PFNGLINDEXFUNCEXTPROC = Void Function(Uint32 func, Float ref);

// typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode)
typedef PFNGLINDEXMATERIALEXTPROCDart = void Function(int face, int mode);
typedef PFNGLINDEXMATERIALEXTPROC = Void Function(Uint32 face, Uint32 mode);

// typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode)
typedef PFNGLAPPLYTEXTUREEXTPROCDart = void Function(int mode);
typedef PFNGLAPPLYTEXTUREEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname)
typedef PFNGLTEXTURELIGHTEXTPROCDart = void Function(int pname);
typedef PFNGLTEXTURELIGHTEXTPROC = Void Function(Uint32 pname);

// typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode)
typedef PFNGLTEXTUREMATERIALEXTPROCDart = void Function(int face, int mode);
typedef PFNGLTEXTUREMATERIALEXTPROC = Void Function(Uint32 face, Uint32 mode);

// typedef void (APIENTRYP PFNGLGETUNSIGNEDBYTEVEXTPROC) (GLenum pname, GLubyte *data)
typedef PFNGLGETUNSIGNEDBYTEVEXTPROCDart =
    void Function(int pname, Pointer<Uint8> data);
typedef PFNGLGETUNSIGNEDBYTEVEXTPROC =
    Void Function(Uint32 pname, Pointer<Uint8> data);

// typedef void (APIENTRYP PFNGLGETUNSIGNEDBYTEI_VEXTPROC) (GLenum target, GLuint index, GLubyte *data)
typedef PfnglgetunsignedbyteiVextprocDart =
    void Function(int target, int index, Pointer<Uint8> data);
typedef PfnglgetunsignedbyteiVextproc =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint8> data);

// typedef void (APIENTRYP PFNGLDELETEMEMORYOBJECTSEXTPROC) (GLsizei n, const GLuint *memoryObjects)
typedef PFNGLDELETEMEMORYOBJECTSEXTPROCDart =
    void Function(int n, Pointer<Uint32> memoryObjects);
typedef PFNGLDELETEMEMORYOBJECTSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> memoryObjects);

// typedef GLboolean (APIENTRYP PFNGLISMEMORYOBJECTEXTPROC) (GLuint memoryObject)
typedef PFNGLISMEMORYOBJECTEXTPROCDart = int Function(int memoryObject);
typedef PFNGLISMEMORYOBJECTEXTPROC = Int32 Function(Uint32 memoryObject);

// typedef void (APIENTRYP PFNGLCREATEMEMORYOBJECTSEXTPROC) (GLsizei n, GLuint *memoryObjects)
typedef PFNGLCREATEMEMORYOBJECTSEXTPROCDart =
    void Function(int n, Pointer<Uint32> memoryObjects);
typedef PFNGLCREATEMEMORYOBJECTSEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> memoryObjects);

// typedef void (APIENTRYP PFNGLMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, const GLint *params)
typedef PFNGLMEMORYOBJECTPARAMETERIVEXTPROCDart =
    void Function(int memoryObject, int pname, Pointer<Int32> params);
typedef PFNGLMEMORYOBJECTPARAMETERIVEXTPROC =
    Void Function(Uint32 memoryObject, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, GLint *params)
typedef PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROCDart =
    void Function(int memoryObject, int pname, Pointer<Int32> params);
typedef PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC =
    Void Function(Uint32 memoryObject, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXSTORAGEMEM2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
typedef PFNGLTEXSTORAGEMEM2DEXTPROCDart =
    void Function(
      int target,
      int levels,
      int internalFormat,
      int width,
      int height,
      int memory,
      int offset,
    );
typedef PFNGLTEXSTORAGEMEM2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
typedef PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROCDart =
    void Function(
      int target,
      int samples,
      int internalFormat,
      int width,
      int height,
      int fixedSampleLocations,
      int memory,
      int offset,
    );
typedef PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 fixedSampleLocations,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGEMEM3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
typedef PFNGLTEXSTORAGEMEM3DEXTPROCDart =
    void Function(
      int target,
      int levels,
      int internalFormat,
      int width,
      int height,
      int depth,
      int memory,
      int offset,
    );
typedef PFNGLTEXSTORAGEMEM3DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
typedef PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROCDart =
    void Function(
      int target,
      int samples,
      int internalFormat,
      int width,
      int height,
      int depth,
      int fixedSampleLocations,
      int memory,
      int offset,
    );
typedef PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 samples,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedSampleLocations,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLBUFFERSTORAGEMEMEXTPROC) (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
typedef PFNGLBUFFERSTORAGEMEMEXTPROCDart =
    void Function(int target, Pointer<Uint32> size, int memory, int offset);
typedef PFNGLBUFFERSTORAGEMEMEXTPROC =
    Void Function(
      Uint32 target,
      Pointer<Uint32> size,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM2DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTURESTORAGEMEM2DEXTPROCDart =
    void Function(
      int texture,
      int levels,
      int internalFormat,
      int width,
      int height,
      int memory,
      int offset,
    );
typedef PFNGLTEXTURESTORAGEMEM2DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROCDart =
    void Function(
      int texture,
      int samples,
      int internalFormat,
      int width,
      int height,
      int fixedSampleLocations,
      int memory,
      int offset,
    );
typedef PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 samples,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 fixedSampleLocations,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM3DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTURESTORAGEMEM3DEXTPROCDart =
    void Function(
      int texture,
      int levels,
      int internalFormat,
      int width,
      int height,
      int depth,
      int memory,
      int offset,
    );
typedef PFNGLTEXTURESTORAGEMEM3DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROCDart =
    void Function(
      int texture,
      int samples,
      int internalFormat,
      int width,
      int height,
      int depth,
      int fixedSampleLocations,
      int memory,
      int offset,
    );
typedef PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 samples,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedSampleLocations,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
typedef PFNGLNAMEDBUFFERSTORAGEMEMEXTPROCDart =
    void Function(int buffer, Pointer<Uint32> size, int memory, int offset);
typedef PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Uint32> size,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGEMEM1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
typedef PFNGLTEXSTORAGEMEM1DEXTPROCDart =
    void Function(
      int target,
      int levels,
      int internalFormat,
      int width,
      int memory,
      int offset,
    );
typedef PFNGLTEXSTORAGEMEM1DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLTEXTURESTORAGEMEM1DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTURESTORAGEMEM1DEXTPROCDart =
    void Function(
      int texture,
      int levels,
      int internalFormat,
      int width,
      int memory,
      int offset,
    );
typedef PFNGLTEXTURESTORAGEMEM1DEXTPROC =
    Void Function(
      Uint32 texture,
      Uint32 levels,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 memory,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLIMPORTMEMORYFDEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
typedef PFNGLIMPORTMEMORYFDEXTPROCDart =
    void Function(int memory, int size, int handleType, int fd);
typedef PFNGLIMPORTMEMORYFDEXTPROC =
    Void Function(Uint32 memory, Uint64 size, Uint32 handleType, Int32 fd);

// typedef void (APIENTRYP PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, void *handle)
typedef PFNGLIMPORTMEMORYWIN32HANDLEEXTPROCDart =
    void Function(
      int memory,
      int size,
      int handleType,
      Pointer<NativeType> handle,
    );
typedef PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC =
    Void Function(
      Uint32 memory,
      Uint64 size,
      Uint32 handleType,
      Pointer<NativeType> handle,
    );

// typedef void (APIENTRYP PFNGLIMPORTMEMORYWIN32NAMEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, const void *name)
typedef PFNGLIMPORTMEMORYWIN32NAMEEXTPROCDart =
    void Function(
      int memory,
      int size,
      int handleType,
      Pointer<NativeType> name,
    );
typedef PFNGLIMPORTMEMORYWIN32NAMEEXTPROC =
    Void Function(
      Uint32 memory,
      Uint64 size,
      Uint32 handleType,
      Pointer<NativeType> name,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
typedef PFNGLMULTIDRAWARRAYSEXTPROCDart =
    void Function(
      int mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      int primcount,
    );
typedef PFNGLMULTIDRAWARRAYSEXTPROC =
    Void Function(
      Uint32 mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)
typedef PFNGLMULTIDRAWELEMENTSEXTPROCDart =
    void Function(
      int mode,
      Pointer<Uint32> count,
      int type,
      Pointer<Pointer<NativeType>> indices,
      int primcount,
    );
typedef PFNGLMULTIDRAWELEMENTSEXTPROC =
    Void Function(
      Uint32 mode,
      Pointer<Uint32> count,
      Uint32 type,
      Pointer<Pointer<NativeType>> indices,
      Uint32 primcount,
    );

// typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert)
typedef PFNGLSAMPLEMASKEXTPROCDart = void Function(double value, int invert);
typedef PFNGLSAMPLEMASKEXTPROC = Void Function(Float value, Int32 invert);

// typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern)
typedef PFNGLSAMPLEPATTERNEXTPROCDart = void Function(int pattern);
typedef PFNGLSAMPLEPATTERNEXTPROC = Void Function(Uint32 pattern);

// typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table)
typedef PFNGLCOLORTABLEEXTPROCDart =
    void Function(
      int target,
      int internalFormat,
      int width,
      int format,
      int type,
      Pointer<NativeType> table,
    );
typedef PFNGLCOLORTABLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 internalFormat,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data)
typedef PFNGLGETCOLORTABLEEXTPROCDart =
    void Function(int target, int format, int type, Pointer<NativeType> data);
typedef PFNGLGETCOLORTABLEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETCOLORTABLEPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCOLORTABLEPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETCOLORTABLEPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETCOLORTABLEPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param)
typedef PFNGLPIXELTRANSFORMPARAMETERIEXTPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLPIXELTRANSFORMPARAMETERIEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param)
typedef PFNGLPIXELTRANSFORMPARAMETERFEXTPROCDart =
    void Function(int target, int pname, double param);
typedef PFNGLPIXELTRANSFORMPARAMETERFEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLPIXELTRANSFORMPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLPIXELTRANSFORMPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param)
typedef PFNGLPOINTPARAMETERFEXTPROCDart =
    void Function(int pname, double param);
typedef PFNGLPOINTPARAMETERFEXTPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLPOINTPARAMETERFVEXTPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLPOINTPARAMETERFVEXTPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias)
typedef PFNGLPOLYGONOFFSETEXTPROCDart =
    void Function(double factor, double bias);
typedef PFNGLPOLYGONOFFSETEXTPROC = Void Function(Float factor, Float bias);

// typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp)
typedef PFNGLPOLYGONOFFSETCLAMPEXTPROCDart =
    void Function(double factor, double units, double clamp);
typedef PFNGLPOLYGONOFFSETCLAMPEXTPROC =
    Void Function(Float factor, Float units, Float clamp);

// typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode)
typedef PFNGLPROVOKINGVERTEXEXTPROCDart = void Function(int mode);
typedef PFNGLPROVOKINGVERTEXEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations)
typedef PFNGLRASTERSAMPLESEXTPROCDart =
    void Function(int samples, int fixedsamplelocations);
typedef PFNGLRASTERSAMPLESEXTPROC =
    Void Function(Uint32 samples, Int32 fixedsamplelocations);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue)
typedef PFNGLSECONDARYCOLOR3BEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3BEXTPROC =
    Void Function(Int8 red, Int8 green, Int8 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v)
typedef PFNGLSECONDARYCOLOR3BVEXTPROCDart = void Function(Pointer<Utf8> v);
typedef PFNGLSECONDARYCOLOR3BVEXTPROC = Void Function(Pointer<Utf8> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue)
typedef PFNGLSECONDARYCOLOR3DEXTPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLSECONDARYCOLOR3DEXTPROC =
    Void Function(Double red, Double green, Double blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v)
typedef PFNGLSECONDARYCOLOR3DVEXTPROCDart = void Function(Pointer<Double> v);
typedef PFNGLSECONDARYCOLOR3DVEXTPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue)
typedef PFNGLSECONDARYCOLOR3FEXTPROCDart =
    void Function(double red, double green, double blue);
typedef PFNGLSECONDARYCOLOR3FEXTPROC =
    Void Function(Float red, Float green, Float blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v)
typedef PFNGLSECONDARYCOLOR3FVEXTPROCDart = void Function(Pointer<Float> v);
typedef PFNGLSECONDARYCOLOR3FVEXTPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue)
typedef PFNGLSECONDARYCOLOR3IEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3IEXTPROC =
    Void Function(Int32 red, Int32 green, Int32 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v)
typedef PFNGLSECONDARYCOLOR3IVEXTPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLSECONDARYCOLOR3IVEXTPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue)
typedef PFNGLSECONDARYCOLOR3SEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3SEXTPROC =
    Void Function(Int16 red, Int16 green, Int16 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v)
typedef PFNGLSECONDARYCOLOR3SVEXTPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLSECONDARYCOLOR3SVEXTPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue)
typedef PFNGLSECONDARYCOLOR3UBEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3UBEXTPROC =
    Void Function(Uint8 red, Uint8 green, Uint8 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v)
typedef PFNGLSECONDARYCOLOR3UBVEXTPROCDart = void Function(Pointer<Uint8> v);
typedef PFNGLSECONDARYCOLOR3UBVEXTPROC = Void Function(Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue)
typedef PFNGLSECONDARYCOLOR3UIEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3UIEXTPROC =
    Void Function(Uint32 red, Uint32 green, Uint32 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v)
typedef PFNGLSECONDARYCOLOR3UIVEXTPROCDart = void Function(Pointer<Uint32> v);
typedef PFNGLSECONDARYCOLOR3UIVEXTPROC = Void Function(Pointer<Uint32> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue)
typedef PFNGLSECONDARYCOLOR3USEXTPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3USEXTPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v)
typedef PFNGLSECONDARYCOLOR3USVEXTPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLSECONDARYCOLOR3USVEXTPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLSECONDARYCOLORPOINTEREXTPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLSECONDARYCOLORPOINTEREXTPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLGENSEMAPHORESEXTPROC) (GLsizei n, GLuint *semaphores)
typedef PFNGLGENSEMAPHORESEXTPROCDart =
    void Function(int n, Pointer<Uint32> semaphores);
typedef PFNGLGENSEMAPHORESEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> semaphores);

// typedef void (APIENTRYP PFNGLDELETESEMAPHORESEXTPROC) (GLsizei n, const GLuint *semaphores)
typedef PFNGLDELETESEMAPHORESEXTPROCDart =
    void Function(int n, Pointer<Uint32> semaphores);
typedef PFNGLDELETESEMAPHORESEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> semaphores);

// typedef GLboolean (APIENTRYP PFNGLISSEMAPHOREEXTPROC) (GLuint semaphore)
typedef PFNGLISSEMAPHOREEXTPROCDart = int Function(int semaphore);
typedef PFNGLISSEMAPHOREEXTPROC = Int32 Function(Uint32 semaphore);

// typedef void (APIENTRYP PFNGLSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, const GLuint64 *params)
typedef PFNGLSEMAPHOREPARAMETERUI64VEXTPROCDart =
    void Function(int semaphore, int pname, Pointer<Uint64> params);
typedef PFNGLSEMAPHOREPARAMETERUI64VEXTPROC =
    Void Function(Uint32 semaphore, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, GLuint64 *params)
typedef PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROCDart =
    void Function(int semaphore, int pname, Pointer<Uint64> params);
typedef PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC =
    Void Function(Uint32 semaphore, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLWAITSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
typedef PFNGLWAITSEMAPHOREEXTPROCDart =
    void Function(
      int semaphore,
      int numBufferBarriers,
      Pointer<Uint32> buffers,
      int numTextureBarriers,
      Pointer<Uint32> textures,
      Pointer<Uint32> srcLayouts,
    );
typedef PFNGLWAITSEMAPHOREEXTPROC =
    Void Function(
      Uint32 semaphore,
      Uint32 numBufferBarriers,
      Pointer<Uint32> buffers,
      Uint32 numTextureBarriers,
      Pointer<Uint32> textures,
      Pointer<Uint32> srcLayouts,
    );

// typedef void (APIENTRYP PFNGLSIGNALSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
typedef PFNGLSIGNALSEMAPHOREEXTPROCDart =
    void Function(
      int semaphore,
      int numBufferBarriers,
      Pointer<Uint32> buffers,
      int numTextureBarriers,
      Pointer<Uint32> textures,
      Pointer<Uint32> dstLayouts,
    );
typedef PFNGLSIGNALSEMAPHOREEXTPROC =
    Void Function(
      Uint32 semaphore,
      Uint32 numBufferBarriers,
      Pointer<Uint32> buffers,
      Uint32 numTextureBarriers,
      Pointer<Uint32> textures,
      Pointer<Uint32> dstLayouts,
    );

// typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREFDEXTPROC) (GLuint semaphore, GLenum handleType, GLint fd)
typedef PFNGLIMPORTSEMAPHOREFDEXTPROCDart =
    void Function(int semaphore, int handleType, int fd);
typedef PFNGLIMPORTSEMAPHOREFDEXTPROC =
    Void Function(Uint32 semaphore, Uint32 handleType, Int32 fd);

// typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC) (GLuint semaphore, GLenum handleType, void *handle)
typedef PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROCDart =
    void Function(int semaphore, int handleType, Pointer<NativeType> handle);
typedef PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC =
    Void Function(
      Uint32 semaphore,
      Uint32 handleType,
      Pointer<NativeType> handle,
    );

// typedef void (APIENTRYP PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC) (GLuint semaphore, GLenum handleType, const void *name)
typedef PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROCDart =
    void Function(int semaphore, int handleType, Pointer<NativeType> name);
typedef PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC =
    Void Function(
      Uint32 semaphore,
      Uint32 handleType,
      Pointer<NativeType> name,
    );

// typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program)
typedef PFNGLUSESHADERPROGRAMEXTPROCDart = void Function(int type, int program);
typedef PFNGLUSESHADERPROGRAMEXTPROC =
    Void Function(Uint32 type, Uint32 program);

// typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program)
typedef PFNGLACTIVEPROGRAMEXTPROCDart = void Function(int program);
typedef PFNGLACTIVEPROGRAMEXTPROC = Void Function(Uint32 program);

// typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string)
typedef PFNGLCREATESHADERPROGRAMEXTPROCDart =
    int Function(int type, Pointer<Utf8> string);
typedef PFNGLCREATESHADERPROGRAMEXTPROC =
    Uint32 Function(Uint32 type, Pointer<Utf8> string);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC) (void)
typedef PFNGLFRAMEBUFFERFETCHBARRIEREXTPROCDart = void Function();
typedef PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
typedef PFNGLBINDIMAGETEXTUREEXTPROCDart =
    void Function(
      int index,
      int texture,
      int level,
      int layered,
      int layer,
      int access,
      int format,
    );
typedef PFNGLBINDIMAGETEXTUREEXTPROC =
    Void Function(
      Uint32 index,
      Uint32 texture,
      Int32 level,
      Int32 layered,
      Int32 layer,
      Uint32 access,
      Int32 format,
    );

// typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers)
typedef PFNGLMEMORYBARRIEREXTPROCDart = void Function(int barriers);
typedef PFNGLMEMORYBARRIEREXTPROC = Void Function(Uint32 barriers);

// typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag)
typedef PFNGLSTENCILCLEARTAGEXTPROCDart =
    void Function(int stencilTagBits, int stencilClearTag);
typedef PFNGLSTENCILCLEARTAGEXTPROC =
    Void Function(Uint32 stencilTagBits, Uint32 stencilClearTag);

// typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face)
typedef PFNGLACTIVESTENCILFACEEXTPROCDart = void Function(int face);
typedef PFNGLACTIVESTENCILFACEEXTPROC = Void Function(Uint32 face);

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXSUBIMAGE1DEXTPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int width,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE1DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXSUBIMAGE2DEXTPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int width,
      int height,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE2DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Uint32 width,
      Uint32 height,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXIMAGE3DEXTPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXIMAGE3DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXSUBIMAGE3DEXTPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE3DEXTPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
typedef PFNGLFRAMEBUFFERTEXTURELAYEREXTPROCDart =
    void Function(
      int target,
      int attachment,
      int texture,
      int level,
      int layer,
    );
typedef PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 layer,
    );

// typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer)
typedef PFNGLTEXBUFFEREXTPROCDart =
    void Function(int target, int internalformat, int buffer);
typedef PFNGLTEXBUFFEREXTPROC =
    Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLTEXPARAMETERIIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLTEXPARAMETERIIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params)
typedef PFNGLTEXPARAMETERIUIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Uint32> params);
typedef PFNGLTEXPARAMETERIUIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETTEXPARAMETERIIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETTEXPARAMETERIIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params)
typedef PFNGLGETTEXPARAMETERIUIVEXTPROCDart =
    void Function(int target, int pname, Pointer<Uint32> params);
typedef PFNGLGETTEXPARAMETERIUIVEXTPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha)
typedef PFNGLCLEARCOLORIIEXTPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCLEARCOLORIIEXTPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha)
typedef PFNGLCLEARCOLORIUIEXTPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCLEARCOLORIUIEXTPROC =
    Void Function(Uint32 red, Uint32 green, Uint32 blue, Uint32 alpha);

// typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences)
typedef PFNGLARETEXTURESRESIDENTEXTPROCDart =
    int Function(int n, Pointer<Uint32> textures, Pointer<Int32> residences);
typedef PFNGLARETEXTURESRESIDENTEXTPROC =
    Int32 Function(
      Uint32 n,
      Pointer<Uint32> textures,
      Pointer<Int32> residences,
    );

// typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture)
typedef PFNGLBINDTEXTUREEXTPROCDart = void Function(int target, int texture);
typedef PFNGLBINDTEXTUREEXTPROC = Void Function(Uint32 target, Uint32 texture);

// typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures)
typedef PFNGLDELETETEXTURESEXTPROCDart =
    void Function(int n, Pointer<Uint32> textures);
typedef PFNGLDELETETEXTURESEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> textures);

// typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures)
typedef PFNGLGENTEXTURESEXTPROCDart =
    void Function(int n, Pointer<Uint32> textures);
typedef PFNGLGENTEXTURESEXTPROC =
    Void Function(Uint32 n, Pointer<Uint32> textures);

// typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture)
typedef PFNGLISTEXTUREEXTPROCDart = int Function(int texture);
typedef PFNGLISTEXTUREEXTPROC = Int32 Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities)
typedef PFNGLPRIORITIZETEXTURESEXTPROCDart =
    void Function(int n, Pointer<Uint32> textures, Pointer<Float> priorities);
typedef PFNGLPRIORITIZETEXTURESEXTPROC =
    Void Function(
      Uint32 n,
      Pointer<Uint32> textures,
      Pointer<Float> priorities,
    );

// typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode)
typedef PFNGLTEXTURENORMALEXTPROCDart = void Function(int mode);
typedef PFNGLTEXTURENORMALEXTPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
typedef PFNGLTEXSTORAGE1DEXTPROCDart =
    void Function(int target, int levels, int internalformat, int width);
typedef PFNGLTEXSTORAGE1DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLTEXSTORAGE2DEXTPROCDart =
    void Function(
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLTEXSTORAGE2DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLTEXSTORAGE3DEXTPROCDart =
    void Function(
      int target,
      int levels,
      int internalformat,
      int width,
      int height,
      int depth,
    );
typedef PFNGLTEXSTORAGE3DEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 levels,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params)
typedef PFNGLGETQUERYOBJECTI64VEXTPROCDart =
    void Function(int id, int pname, Pointer<Int64> params);
typedef PFNGLGETQUERYOBJECTI64VEXTPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params)
typedef PFNGLGETQUERYOBJECTUI64VEXTPROCDart =
    void Function(int id, int pname, Pointer<Uint64> params);
typedef PFNGLGETQUERYOBJECTUI64VEXTPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode)
typedef PFNGLBEGINTRANSFORMFEEDBACKEXTPROCDart =
    void Function(int primitiveMode);
typedef PFNGLBEGINTRANSFORMFEEDBACKEXTPROC =
    Void Function(Uint32 primitiveMode);

// typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void)
typedef PFNGLENDTRANSFORMFEEDBACKEXTPROCDart = void Function();
typedef PFNGLENDTRANSFORMFEEDBACKEXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLBINDBUFFERRANGEEXTPROCDart =
    void Function(
      int target,
      int index,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLBINDBUFFERRANGEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
typedef PFNGLBINDBUFFEROFFSETEXTPROCDart =
    void Function(
      int target,
      int index,
      int buffer,
      Pointer<NativeType> offset,
    );
typedef PFNGLBINDBUFFEROFFSETEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer)
typedef PFNGLBINDBUFFERBASEEXTPROCDart =
    void Function(int target, int index, int buffer);
typedef PFNGLBINDBUFFERBASEEXTPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
typedef PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROCDart =
    void Function(
      int program,
      int count,
      Pointer<Pointer<Int8>> varyings,
      int bufferMode,
    );
typedef PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 count,
      Pointer<Pointer<Int8>> varyings,
      Uint32 bufferMode,
    );

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROCDart =
    void Function(
      int program,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC =
    Void Function(
      Uint32 program,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i)
typedef PFNGLARRAYELEMENTEXTPROCDart = void Function(int i);
typedef PFNGLARRAYELEMENTEXTPROC = Void Function(Int32 i);

// typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
typedef PFNGLCOLORPOINTEREXTPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      int count,
      Pointer<NativeType> pointer,
    );
typedef PFNGLCOLORPOINTEREXTPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Uint32 count,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count)
typedef PFNGLDRAWARRAYSEXTPROCDart =
    void Function(int mode, int first, int count);
typedef PFNGLDRAWARRAYSEXTPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count);

// typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer)
typedef PFNGLEDGEFLAGPOINTEREXTPROCDart =
    void Function(int stride, int count, Pointer<Int32> pointer);
typedef PFNGLEDGEFLAGPOINTEREXTPROC =
    Void Function(Uint32 stride, Uint32 count, Pointer<Int32> pointer);

// typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, void **params)
typedef PFNGLGETPOINTERVEXTPROCDart =
    void Function(int pname, Pointer<Pointer<NativeType>> params);
typedef PFNGLGETPOINTERVEXTPROC =
    Void Function(Uint32 pname, Pointer<Pointer<NativeType>> params);

// typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
typedef PFNGLINDEXPOINTEREXTPROCDart =
    void Function(int type, int stride, int count, Pointer<NativeType> pointer);
typedef PFNGLINDEXPOINTEREXTPROC =
    Void Function(
      Uint32 type,
      Uint32 stride,
      Uint32 count,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
typedef PFNGLNORMALPOINTEREXTPROCDart =
    void Function(int type, int stride, int count, Pointer<NativeType> pointer);
typedef PFNGLNORMALPOINTEREXTPROC =
    Void Function(
      Uint32 type,
      Uint32 stride,
      Uint32 count,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
typedef PFNGLTEXCOORDPOINTEREXTPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      int count,
      Pointer<NativeType> pointer,
    );
typedef PFNGLTEXCOORDPOINTEREXTPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Uint32 count,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
typedef PFNGLVERTEXPOINTEREXTPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      int count,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXPOINTEREXTPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Uint32 count,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x)
typedef PFNGLVERTEXATTRIBL1DEXTPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIBL1DEXTPROC = Void Function(Uint32 index, Double x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y)
typedef PFNGLVERTEXATTRIBL2DEXTPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIBL2DEXTPROC =
    Void Function(Uint32 index, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXATTRIBL3DEXTPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIBL3DEXTPROC =
    Void Function(Uint32 index, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXATTRIBL4DEXTPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIBL4DEXTPROC =
    Void Function(Uint32 index, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL1DVEXTPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL1DVEXTPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL2DVEXTPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL2DVEXTPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL3DVEXTPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL3DVEXTPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIBL4DVEXTPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBL4DVEXTPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBLPOINTEREXTPROCDart =
    void Function(
      int index,
      int size,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBLPOINTEREXTPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETVERTEXATTRIBLDVEXTPROCDart =
    void Function(int index, int pname, Pointer<Double> params);
typedef PFNGLGETVERTEXATTRIBLDVEXTPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void)
typedef PFNGLBEGINVERTEXSHADEREXTPROCDart = void Function();
typedef PFNGLBEGINVERTEXSHADEREXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void)
typedef PFNGLENDVERTEXSHADEREXTPROCDart = void Function();
typedef PFNGLENDVERTEXSHADEREXTPROC = Void Function();

// typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id)
typedef PFNGLBINDVERTEXSHADEREXTPROCDart = void Function(int id);
typedef PFNGLBINDVERTEXSHADEREXTPROC = Void Function(Uint32 id);

// typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range)
typedef PFNGLGENVERTEXSHADERSEXTPROCDart = int Function(int range);
typedef PFNGLGENVERTEXSHADERSEXTPROC = Uint32 Function(Uint32 range);

// typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id)
typedef PFNGLDELETEVERTEXSHADEREXTPROCDart = void Function(int id);
typedef PFNGLDELETEVERTEXSHADEREXTPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1)
typedef PFNGLSHADEROP1EXTPROCDart = void Function(int op, int res, int arg1);
typedef PFNGLSHADEROP1EXTPROC =
    Void Function(Uint32 op, Uint32 res, Uint32 arg1);

// typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2)
typedef PFNGLSHADEROP2EXTPROCDart =
    void Function(int op, int res, int arg1, int arg2);
typedef PFNGLSHADEROP2EXTPROC =
    Void Function(Uint32 op, Uint32 res, Uint32 arg1, Uint32 arg2);

// typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
typedef PFNGLSHADEROP3EXTPROCDart =
    void Function(int op, int res, int arg1, int arg2, int arg3);
typedef PFNGLSHADEROP3EXTPROC =
    Void Function(Uint32 op, Uint32 res, Uint32 arg1, Uint32 arg2, Uint32 arg3);

// typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
typedef PFNGLSWIZZLEEXTPROCDart =
    void Function(int res, int in_, int outX, int outY, int outZ, int outW);
typedef PFNGLSWIZZLEEXTPROC =
    Void Function(
      Uint32 res,
      Uint32 in_,
      Uint32 outX,
      Uint32 outY,
      Uint32 outZ,
      Uint32 outW,
    );

// typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
typedef PFNGLWRITEMASKEXTPROCDart =
    void Function(int res, int in_, int outX, int outY, int outZ, int outW);
typedef PFNGLWRITEMASKEXTPROC =
    Void Function(
      Uint32 res,
      Uint32 in_,
      Uint32 outX,
      Uint32 outY,
      Uint32 outZ,
      Uint32 outW,
    );

// typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)
typedef PFNGLINSERTCOMPONENTEXTPROCDart =
    void Function(int res, int src, int num);
typedef PFNGLINSERTCOMPONENTEXTPROC =
    Void Function(Uint32 res, Uint32 src, Uint32 num);

// typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)
typedef PFNGLEXTRACTCOMPONENTEXTPROCDart =
    void Function(int res, int src, int num);
typedef PFNGLEXTRACTCOMPONENTEXTPROC =
    Void Function(Uint32 res, Uint32 src, Uint32 num);

// typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
typedef PFNGLGENSYMBOLSEXTPROCDart =
    int Function(int datatype, int storagetype, int range, int components);
typedef PFNGLGENSYMBOLSEXTPROC =
    Uint32 Function(
      Uint32 datatype,
      Uint32 storagetype,
      Uint32 range,
      Uint32 components,
    );

// typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const void *addr)
typedef PFNGLSETINVARIANTEXTPROCDart =
    void Function(int id, int type, Pointer<NativeType> addr);
typedef PFNGLSETINVARIANTEXTPROC =
    Void Function(Uint32 id, Uint32 type, Pointer<NativeType> addr);

// typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const void *addr)
typedef PFNGLSETLOCALCONSTANTEXTPROCDart =
    void Function(int id, int type, Pointer<NativeType> addr);
typedef PFNGLSETLOCALCONSTANTEXTPROC =
    Void Function(Uint32 id, Uint32 type, Pointer<NativeType> addr);

// typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr)
typedef PFNGLVARIANTBVEXTPROCDart = void Function(int id, Pointer<Utf8> addr);
typedef PFNGLVARIANTBVEXTPROC = Void Function(Uint32 id, Pointer<Utf8> addr);

// typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr)
typedef PFNGLVARIANTSVEXTPROCDart = void Function(int id, Pointer<Int16> addr);
typedef PFNGLVARIANTSVEXTPROC = Void Function(Uint32 id, Pointer<Int16> addr);

// typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr)
typedef PFNGLVARIANTIVEXTPROCDart = void Function(int id, Pointer<Int32> addr);
typedef PFNGLVARIANTIVEXTPROC = Void Function(Uint32 id, Pointer<Int32> addr);

// typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr)
typedef PFNGLVARIANTFVEXTPROCDart = void Function(int id, Pointer<Float> addr);
typedef PFNGLVARIANTFVEXTPROC = Void Function(Uint32 id, Pointer<Float> addr);

// typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr)
typedef PFNGLVARIANTDVEXTPROCDart = void Function(int id, Pointer<Double> addr);
typedef PFNGLVARIANTDVEXTPROC = Void Function(Uint32 id, Pointer<Double> addr);

// typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr)
typedef PFNGLVARIANTUBVEXTPROCDart = void Function(int id, Pointer<Uint8> addr);
typedef PFNGLVARIANTUBVEXTPROC = Void Function(Uint32 id, Pointer<Uint8> addr);

// typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr)
typedef PFNGLVARIANTUSVEXTPROCDart =
    void Function(int id, Pointer<Uint16> addr);
typedef PFNGLVARIANTUSVEXTPROC = Void Function(Uint32 id, Pointer<Uint16> addr);

// typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr)
typedef PFNGLVARIANTUIVEXTPROCDart =
    void Function(int id, Pointer<Uint32> addr);
typedef PFNGLVARIANTUIVEXTPROC = Void Function(Uint32 id, Pointer<Uint32> addr);

// typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const void *addr)
typedef PFNGLVARIANTPOINTEREXTPROCDart =
    void Function(int id, int type, int stride, Pointer<NativeType> addr);
typedef PFNGLVARIANTPOINTEREXTPROC =
    Void Function(
      Uint32 id,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> addr,
    );

// typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)
typedef PFNGLENABLEVARIANTCLIENTSTATEEXTPROCDart = void Function(int id);
typedef PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)
typedef PFNGLDISABLEVARIANTCLIENTSTATEEXTPROCDart = void Function(int id);
typedef PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = Void Function(Uint32 id);

// typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value)
typedef PFNGLBINDLIGHTPARAMETEREXTPROCDart = int Function(int light, int value);
typedef PFNGLBINDLIGHTPARAMETEREXTPROC =
    Uint32 Function(Uint32 light, Uint32 value);

// typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value)
typedef PFNGLBINDMATERIALPARAMETEREXTPROCDart =
    int Function(int face, int value);
typedef PFNGLBINDMATERIALPARAMETEREXTPROC =
    Uint32 Function(Uint32 face, Uint32 value);

// typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value)
typedef PFNGLBINDTEXGENPARAMETEREXTPROCDart =
    int Function(int unit, int coord, int value);
typedef PFNGLBINDTEXGENPARAMETEREXTPROC =
    Uint32 Function(Uint32 unit, Uint32 coord, Uint32 value);

// typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value)
typedef PFNGLBINDTEXTUREUNITPARAMETEREXTPROCDart =
    int Function(int unit, int value);
typedef PFNGLBINDTEXTUREUNITPARAMETEREXTPROC =
    Uint32 Function(Uint32 unit, Uint32 value);

// typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value)
typedef PFNGLBINDPARAMETEREXTPROCDart = int Function(int value);
typedef PFNGLBINDPARAMETEREXTPROC = Uint32 Function(Uint32 value);

// typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap)
typedef PFNGLISVARIANTENABLEDEXTPROCDart = int Function(int id, int cap);
typedef PFNGLISVARIANTENABLEDEXTPROC = Int32 Function(Uint32 id, Uint32 cap);

// typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
typedef PFNGLGETVARIANTBOOLEANVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETVARIANTBOOLEANVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
typedef PFNGLGETVARIANTINTEGERVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETVARIANTINTEGERVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
typedef PFNGLGETVARIANTFLOATVEXTPROCDart =
    void Function(int id, int value, Pointer<Float> data);
typedef PFNGLGETVARIANTFLOATVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Float> data);

// typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data)
typedef PFNGLGETVARIANTPOINTERVEXTPROCDart =
    void Function(int id, int value, Pointer<Pointer<NativeType>> data);
typedef PFNGLGETVARIANTPOINTERVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Pointer<NativeType>> data);

// typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
typedef PFNGLGETINVARIANTBOOLEANVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETINVARIANTBOOLEANVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
typedef PFNGLGETINVARIANTINTEGERVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETINVARIANTINTEGERVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
typedef PFNGLGETINVARIANTFLOATVEXTPROCDart =
    void Function(int id, int value, Pointer<Float> data);
typedef PFNGLGETINVARIANTFLOATVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Float> data);

// typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
typedef PFNGLGETLOCALCONSTANTBOOLEANVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
typedef PFNGLGETLOCALCONSTANTINTEGERVEXTPROCDart =
    void Function(int id, int value, Pointer<Int32> data);
typedef PFNGLGETLOCALCONSTANTINTEGERVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Int32> data);

// typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
typedef PFNGLGETLOCALCONSTANTFLOATVEXTPROCDart =
    void Function(int id, int value, Pointer<Float> data);
typedef PFNGLGETLOCALCONSTANTFLOATVEXTPROC =
    Void Function(Uint32 id, Uint32 value, Pointer<Float> data);

// typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight)
typedef PFNGLVERTEXWEIGHTFEXTPROCDart = void Function(double weight);
typedef PFNGLVERTEXWEIGHTFEXTPROC = Void Function(Float weight);

// typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight)
typedef PFNGLVERTEXWEIGHTFVEXTPROCDart = void Function(Pointer<Float> weight);
typedef PFNGLVERTEXWEIGHTFVEXTPROC = Void Function(Pointer<Float> weight);

// typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXWEIGHTPOINTEREXTPROCDart =
    void Function(int size, int type, int stride, Pointer<NativeType> pointer);
typedef PFNGLVERTEXWEIGHTPOINTEREXTPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef GLboolean (APIENTRYP PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key, GLuint timeout)
typedef PFNGLACQUIREKEYEDMUTEXWIN32EXTPROCDart =
    int Function(int memory, int key, int timeout);
typedef PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC =
    Int32 Function(Uint32 memory, Uint64 key, Uint32 timeout);

// typedef GLboolean (APIENTRYP PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key)
typedef PFNGLRELEASEKEYEDMUTEXWIN32EXTPROCDart =
    int Function(int memory, int key);
typedef PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC =
    Int32 Function(Uint32 memory, Uint64 key);

// typedef void (APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint *box)
typedef PFNGLWINDOWRECTANGLESEXTPROCDart =
    void Function(int mode, int count, Pointer<Int32> box);
typedef PFNGLWINDOWRECTANGLESEXTPROC =
    Void Function(Uint32 mode, Uint32 count, Pointer<Int32> box);

// typedef GLsync (APIENTRYP PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
typedef PFNGLIMPORTSYNCEXTPROCDart =
    Pointer<NativeType> Function(
      int externalSyncType,
      Pointer<NativeType> externalSync,
      int flags,
    );
typedef PFNGLIMPORTSYNCEXTPROC =
    Pointer<NativeType> Function(
      Uint32 externalSyncType,
      Pointer<NativeType> externalSync,
      Uint32 flags,
    );

// typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void)
typedef PFNGLFRAMETERMINATORGREMEDYPROCDart = void Function();
typedef PFNGLFRAMETERMINATORGREMEDYPROC = Void Function();

// typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string)
typedef PFNGLSTRINGMARKERGREMEDYPROCDart =
    void Function(int len, Pointer<NativeType> string);
typedef PFNGLSTRINGMARKERGREMEDYPROC =
    Void Function(Uint32 len, Pointer<NativeType> string);

// typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param)
typedef PFNGLIMAGETRANSFORMPARAMETERIHPPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLIMAGETRANSFORMPARAMETERIHPPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param)
typedef PFNGLIMAGETRANSFORMPARAMETERFHPPROCDart =
    void Function(int target, int pname, double param);
typedef PFNGLIMAGETRANSFORMPARAMETERFHPPROC =
    Void Function(Uint32 target, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLIMAGETRANSFORMPARAMETERIVHPPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLIMAGETRANSFORMPARAMETERIVHPPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLIMAGETRANSFORMPARAMETERFVHPPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLIMAGETRANSFORMPARAMETERFVHPPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
typedef PFNGLMULTIMODEDRAWARRAYSIBMPROCDart =
    void Function(
      Pointer<Uint32> mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      int primcount,
      int modestride,
    );
typedef PFNGLMULTIMODEDRAWARRAYSIBMPROC =
    Void Function(
      Pointer<Uint32> mode,
      Pointer<Int32> first,
      Pointer<Uint32> count,
      Uint32 primcount,
      Int32 modestride,
    );

// typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride)
typedef PFNGLMULTIMODEDRAWELEMENTSIBMPROCDart =
    void Function(
      Pointer<Uint32> mode,
      Pointer<Uint32> count,
      int type,
      Pointer<Pointer<NativeType>> indices,
      int primcount,
      int modestride,
    );
typedef PFNGLMULTIMODEDRAWELEMENTSIBMPROC =
    Void Function(
      Pointer<Uint32> mode,
      Pointer<Uint32> count,
      Uint32 type,
      Pointer<Pointer<NativeType>> indices,
      Uint32 primcount,
      Int32 modestride,
    );

// typedef void (APIENTRYP PFNGLFLUSHSTATICDATAIBMPROC) (GLenum target)
typedef PFNGLFLUSHSTATICDATAIBMPROCDart = void Function(int target);
typedef PFNGLFLUSHSTATICDATAIBMPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLCOLORPOINTERLISTIBMPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLCOLORPOINTERLISTIBMPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLSECONDARYCOLORPOINTERLISTIBMPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLSECONDARYCOLORPOINTERLISTIBMPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean **pointer, GLint ptrstride)
typedef PFNGLEDGEFLAGPOINTERLISTIBMPROCDart =
    void Function(int stride, Pointer<Pointer<Int32>> pointer, int ptrstride);
typedef PFNGLEDGEFLAGPOINTERLISTIBMPROC =
    Void Function(
      Int32 stride,
      Pointer<Pointer<Int32>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLFOGCOORDPOINTERLISTIBMPROCDart =
    void Function(
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLFOGCOORDPOINTERLISTIBMPROC =
    Void Function(
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLINDEXPOINTERLISTIBMPROCDart =
    void Function(
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLINDEXPOINTERLISTIBMPROC =
    Void Function(
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLNORMALPOINTERLISTIBMPROCDart =
    void Function(
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLNORMALPOINTERLISTIBMPROC =
    Void Function(
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLTEXCOORDPOINTERLISTIBMPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLTEXCOORDPOINTERLISTIBMPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)
typedef PFNGLVERTEXPOINTERLISTIBMPROCDart =
    void Function(
      int size,
      int type,
      int stride,
      Pointer<Pointer<NativeType>> pointer,
      int ptrstride,
    );
typedef PFNGLVERTEXPOINTERLISTIBMPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Int32 stride,
      Pointer<Pointer<NativeType>> pointer,
      Int32 ptrstride,
    );

// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
typedef PFNGLBLENDFUNCSEPARATEINGRPROCDart =
    void Function(
      int sfactorRgb,
      int dfactorRgb,
      int sfactorAlpha,
      int dfactorAlpha,
    );
typedef PFNGLBLENDFUNCSEPARATEINGRPROC =
    Void Function(
      Uint32 sfactorRgb,
      Uint32 dfactorRgb,
      Uint32 sfactorAlpha,
      Uint32 dfactorAlpha,
    );

// typedef void (APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void)
typedef PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROCDart = void Function();
typedef PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = Void Function();

// typedef void (APIENTRYP PFNGLSYNCTEXTUREINTELPROC) (GLuint texture)
typedef PFNGLSYNCTEXTUREINTELPROCDart = void Function(int texture);
typedef PFNGLSYNCTEXTUREINTELPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level)
typedef PFNGLUNMAPTEXTURE2DINTELPROCDart =
    void Function(int texture, int level);
typedef PFNGLUNMAPTEXTURE2DINTELPROC =
    Void Function(Uint32 texture, Int32 level);

// typedef void *(APIENTRYP PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
typedef PFNGLMAPTEXTURE2DINTELPROCDart =
    Pointer<NativeType> Function(
      int texture,
      int level,
      int access,
      Pointer<Int32> stride,
      Pointer<Uint32> layout,
    );
typedef PFNGLMAPTEXTURE2DINTELPROC =
    Pointer<NativeType> Function(
      Uint32 texture,
      Int32 level,
      Uint32 access,
      Pointer<Int32> stride,
      Pointer<Uint32> layout,
    );

// typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)
typedef PFNGLVERTEXPOINTERVINTELPROCDart =
    void Function(int size, int type, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLVERTEXPOINTERVINTELPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void **pointer)
typedef PFNGLNORMALPOINTERVINTELPROCDart =
    void Function(int type, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLNORMALPOINTERVINTELPROC =
    Void Function(Uint32 type, Pointer<Pointer<NativeType>> pointer);

// typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)
typedef PFNGLCOLORPOINTERVINTELPROCDart =
    void Function(int size, int type, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLCOLORPOINTERVINTELPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)
typedef PFNGLTEXCOORDPOINTERVINTELPROCDart =
    void Function(int size, int type, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLTEXCOORDPOINTERVINTELPROC =
    Void Function(
      Int32 size,
      Uint32 type,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef void (APIENTRYP PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle)
typedef PFNGLBEGINPERFQUERYINTELPROCDart = void Function(int queryHandle);
typedef PFNGLBEGINPERFQUERYINTELPROC = Void Function(Uint32 queryHandle);

// typedef void (APIENTRYP PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle)
typedef PFNGLCREATEPERFQUERYINTELPROCDart =
    void Function(int queryId, Pointer<Uint32> queryHandle);
typedef PFNGLCREATEPERFQUERYINTELPROC =
    Void Function(Uint32 queryId, Pointer<Uint32> queryHandle);

// typedef void (APIENTRYP PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle)
typedef PFNGLDELETEPERFQUERYINTELPROCDart = void Function(int queryHandle);
typedef PFNGLDELETEPERFQUERYINTELPROC = Void Function(Uint32 queryHandle);

// typedef void (APIENTRYP PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle)
typedef PFNGLENDPERFQUERYINTELPROCDart = void Function(int queryHandle);
typedef PFNGLENDPERFQUERYINTELPROC = Void Function(Uint32 queryHandle);

// typedef void (APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId)
typedef PFNGLGETFIRSTPERFQUERYIDINTELPROCDart =
    void Function(Pointer<Uint32> queryId);
typedef PFNGLGETFIRSTPERFQUERYIDINTELPROC =
    Void Function(Pointer<Uint32> queryId);

// typedef void (APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId)
typedef PFNGLGETNEXTPERFQUERYIDINTELPROCDart =
    void Function(int queryId, Pointer<Uint32> nextQueryId);
typedef PFNGLGETNEXTPERFQUERYIDINTELPROC =
    Void Function(Uint32 queryId, Pointer<Uint32> nextQueryId);

// typedef void (APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
typedef PFNGLGETPERFCOUNTERINFOINTELPROCDart =
    void Function(
      int queryId,
      int counterId,
      int counterNameLength,
      Pointer<Int8> counterName,
      int counterDescLength,
      Pointer<Int8> counterDesc,
      Pointer<Uint32> counterOffset,
      Pointer<Uint32> counterDataSize,
      Pointer<Uint32> counterTypeEnum,
      Pointer<Uint32> counterDataTypeEnum,
      Pointer<Uint64> rawCounterMaxValue,
    );
typedef PFNGLGETPERFCOUNTERINFOINTELPROC =
    Void Function(
      Uint32 queryId,
      Uint32 counterId,
      Uint32 counterNameLength,
      Pointer<Int8> counterName,
      Uint32 counterDescLength,
      Pointer<Int8> counterDesc,
      Pointer<Uint32> counterOffset,
      Pointer<Uint32> counterDataSize,
      Pointer<Uint32> counterTypeEnum,
      Pointer<Uint32> counterDataTypeEnum,
      Pointer<Uint64> rawCounterMaxValue,
    );

// typedef void (APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)
typedef PFNGLGETPERFQUERYDATAINTELPROCDart =
    void Function(
      int queryHandle,
      int flags,
      int dataSize,
      Pointer<NativeType> data,
      Pointer<Uint32> bytesWritten,
    );
typedef PFNGLGETPERFQUERYDATAINTELPROC =
    Void Function(
      Uint32 queryHandle,
      Uint32 flags,
      Uint32 dataSize,
      Pointer<NativeType> data,
      Pointer<Uint32> bytesWritten,
    );

// typedef void (APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId)
typedef PFNGLGETPERFQUERYIDBYNAMEINTELPROCDart =
    void Function(Pointer<Int8> queryName, Pointer<Uint32> queryId);
typedef PFNGLGETPERFQUERYIDBYNAMEINTELPROC =
    Void Function(Pointer<Int8> queryName, Pointer<Uint32> queryId);

// typedef void (APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
typedef PFNGLGETPERFQUERYINFOINTELPROCDart =
    void Function(
      int queryId,
      int queryNameLength,
      Pointer<Int8> queryName,
      Pointer<Uint32> dataSize,
      Pointer<Uint32> noCounters,
      Pointer<Uint32> noInstances,
      Pointer<Uint32> capsMask,
    );
typedef PFNGLGETPERFQUERYINFOINTELPROC =
    Void Function(
      Uint32 queryId,
      Uint32 queryNameLength,
      Pointer<Int8> queryName,
      Pointer<Uint32> dataSize,
      Pointer<Uint32> noCounters,
      Pointer<Uint32> noInstances,
      Pointer<Uint32> capsMask,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIMESAPROC) (GLenum target, GLenum pname, GLint param)
typedef PFNGLFRAMEBUFFERPARAMETERIMESAPROCDart =
    void Function(int target, int pname, int param);
typedef PFNGLFRAMEBUFFERPARAMETERIMESAPROC =
    Void Function(Uint32 target, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void)
typedef PFNGLRESIZEBUFFERSMESAPROCDart = void Function();
typedef PFNGLRESIZEBUFFERSMESAPROC = Void Function();

// typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y)
typedef PFNGLWINDOWPOS2DMESAPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2DMESAPROC = Void Function(Double x, Double y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS2DVMESAPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS2DVMESAPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y)
typedef PFNGLWINDOWPOS2FMESAPROCDart = void Function(double x, double y);
typedef PFNGLWINDOWPOS2FMESAPROC = Void Function(Float x, Float y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS2FVMESAPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS2FVMESAPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y)
typedef PFNGLWINDOWPOS2IMESAPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2IMESAPROC = Void Function(Int32 x, Int32 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v)
typedef PFNGLWINDOWPOS2IVMESAPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS2IVMESAPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y)
typedef PFNGLWINDOWPOS2SMESAPROCDart = void Function(int x, int y);
typedef PFNGLWINDOWPOS2SMESAPROC = Void Function(Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS2SVMESAPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS2SVMESAPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLWINDOWPOS3DMESAPROCDart =
    void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3DMESAPROC = Void Function(Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS3DVMESAPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS3DVMESAPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLWINDOWPOS3FMESAPROCDart =
    void Function(double x, double y, double z);
typedef PFNGLWINDOWPOS3FMESAPROC = Void Function(Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS3FVMESAPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS3FVMESAPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z)
typedef PFNGLWINDOWPOS3IMESAPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3IMESAPROC = Void Function(Int32 x, Int32 y, Int32 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v)
typedef PFNGLWINDOWPOS3IVMESAPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS3IVMESAPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z)
typedef PFNGLWINDOWPOS3SMESAPROCDart = void Function(int x, int y, int z);
typedef PFNGLWINDOWPOS3SMESAPROC = Void Function(Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS3SVMESAPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS3SVMESAPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLWINDOWPOS4DMESAPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLWINDOWPOS4DMESAPROC =
    Void Function(Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v)
typedef PFNGLWINDOWPOS4DVMESAPROCDart = void Function(Pointer<Double> v);
typedef PFNGLWINDOWPOS4DVMESAPROC = Void Function(Pointer<Double> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLWINDOWPOS4FMESAPROCDart =
    void Function(double x, double y, double z, double w);
typedef PFNGLWINDOWPOS4FMESAPROC =
    Void Function(Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v)
typedef PFNGLWINDOWPOS4FVMESAPROCDart = void Function(Pointer<Float> v);
typedef PFNGLWINDOWPOS4FVMESAPROC = Void Function(Pointer<Float> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w)
typedef PFNGLWINDOWPOS4IMESAPROCDart =
    void Function(int x, int y, int z, int w);
typedef PFNGLWINDOWPOS4IMESAPROC =
    Void Function(Int32 x, Int32 y, Int32 z, Int32 w);

// typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v)
typedef PFNGLWINDOWPOS4IVMESAPROCDart = void Function(Pointer<Int32> v);
typedef PFNGLWINDOWPOS4IVMESAPROC = Void Function(Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w)
typedef PFNGLWINDOWPOS4SMESAPROCDart =
    void Function(int x, int y, int z, int w);
typedef PFNGLWINDOWPOS4SMESAPROC =
    Void Function(Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v)
typedef PFNGLWINDOWPOS4SVMESAPROCDart = void Function(Pointer<Int16> v);
typedef PFNGLWINDOWPOS4SVMESAPROC = Void Function(Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id)
typedef PFNGLBEGINCONDITIONALRENDERNVXPROCDart = void Function(int id);
typedef PFNGLBEGINCONDITIONALRENDERNVXPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVXPROC) (void)
typedef PFNGLENDCONDITIONALRENDERNVXPROCDart = void Function();
typedef PFNGLENDCONDITIONALRENDERNVXPROC = Void Function();

// typedef void (APIENTRYP PFNGLUPLOADGPUMASKNVXPROC) (GLbitfield mask)
typedef PFNGLUPLOADGPUMASKNVXPROCDart = void Function(int mask);
typedef PFNGLUPLOADGPUMASKNVXPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLMULTICASTVIEWPORTARRAYVNVXPROC) (GLuint gpu, GLuint first, GLsizei count, const GLfloat *v)
typedef PFNGLMULTICASTVIEWPORTARRAYVNVXPROCDart =
    void Function(int gpu, int first, int count, Pointer<Float> v);
typedef PFNGLMULTICASTVIEWPORTARRAYVNVXPROC =
    Void Function(Uint32 gpu, Uint32 first, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC) (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff)
typedef PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROCDart =
    void Function(int gpu, int index, double xcoeff, double ycoeff);
typedef PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC =
    Void Function(Uint32 gpu, Uint32 index, Float xcoeff, Float ycoeff);

// typedef void (APIENTRYP PFNGLMULTICASTSCISSORARRAYVNVXPROC) (GLuint gpu, GLuint first, GLsizei count, const GLint *v)
typedef PFNGLMULTICASTSCISSORARRAYVNVXPROCDart =
    void Function(int gpu, int first, int count, Pointer<Int32> v);
typedef PFNGLMULTICASTSCISSORARRAYVNVXPROC =
    Void Function(Uint32 gpu, Uint32 first, Uint32 count, Pointer<Int32> v);

// typedef GLuint (APIENTRYP PFNGLASYNCCOPYBUFFERSUBDATANVXPROC) (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGPU, GLbitfield writeGPUMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray)
typedef PFNGLASYNCCOPYBUFFERSUBDATANVXPROCDart =
    int Function(
      int waitSemaphoreCount,
      Pointer<Uint32> waitSemaphoreArray,
      Pointer<Uint64> fenceValueArray,
      int readGpu,
      int writeGpuMask,
      int readBuffer,
      int writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
      int signalSemaphoreCount,
      Pointer<Uint32> signalSemaphoreArray,
      Pointer<Uint64> signalValueArray,
    );
typedef PFNGLASYNCCOPYBUFFERSUBDATANVXPROC =
    Uint32 Function(
      Uint32 waitSemaphoreCount,
      Pointer<Uint32> waitSemaphoreArray,
      Pointer<Uint64> fenceValueArray,
      Uint32 readGpu,
      Uint32 writeGpuMask,
      Uint32 readBuffer,
      Uint32 writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
      Uint32 signalSemaphoreCount,
      Pointer<Uint32> signalSemaphoreArray,
      Pointer<Uint64> signalValueArray,
    );

// typedef GLuint (APIENTRYP PFNGLASYNCCOPYIMAGESUBDATANVXPROC) (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGPU, GLbitfield dstGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray)
typedef PFNGLASYNCCOPYIMAGESUBDATANVXPROCDart =
    int Function(
      int waitSemaphoreCount,
      Pointer<Uint32> waitSemaphoreArray,
      Pointer<Uint64> waitValueArray,
      int srcGpu,
      int dstGpuMask,
      int srcName,
      int srcTarget,
      int srcLevel,
      int srcX,
      int srcY,
      int srcZ,
      int dstName,
      int dstTarget,
      int dstLevel,
      int dstX,
      int dstY,
      int dstZ,
      int srcWidth,
      int srcHeight,
      int srcDepth,
      int signalSemaphoreCount,
      Pointer<Uint32> signalSemaphoreArray,
      Pointer<Uint64> signalValueArray,
    );
typedef PFNGLASYNCCOPYIMAGESUBDATANVXPROC =
    Uint32 Function(
      Uint32 waitSemaphoreCount,
      Pointer<Uint32> waitSemaphoreArray,
      Pointer<Uint64> waitValueArray,
      Uint32 srcGpu,
      Uint32 dstGpuMask,
      Uint32 srcName,
      Uint32 srcTarget,
      Int32 srcLevel,
      Int32 srcX,
      Int32 srcY,
      Int32 srcZ,
      Uint32 dstName,
      Uint32 dstTarget,
      Int32 dstLevel,
      Int32 dstX,
      Int32 dstY,
      Int32 dstZ,
      Uint32 srcWidth,
      Uint32 srcHeight,
      Uint32 srcDepth,
      Uint32 signalSemaphoreCount,
      Pointer<Uint32> signalSemaphoreArray,
      Pointer<Uint64> signalValueArray,
    );

// typedef void (APIENTRYP PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
typedef PFNGLLGPUNAMEDBUFFERSUBDATANVXPROCDart =
    void Function(
      int gpuMask,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC =
    Void Function(
      Uint32 gpuMask,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLLGPUCOPYIMAGESUBDATANVXPROC) (GLuint sourceGPU, GLbitfield destinationGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLLGPUCOPYIMAGESUBDATANVXPROCDart =
    void Function(
      int sourceGpu,
      int destinationGpuMask,
      int srcName,
      int srcTarget,
      int srcLevel,
      int srcX,
      int srxY,
      int srcZ,
      int dstName,
      int dstTarget,
      int dstLevel,
      int dstX,
      int dstY,
      int dstZ,
      int width,
      int height,
      int depth,
    );
typedef PFNGLLGPUCOPYIMAGESUBDATANVXPROC =
    Void Function(
      Uint32 sourceGpu,
      Uint32 destinationGpuMask,
      Uint32 srcName,
      Uint32 srcTarget,
      Int32 srcLevel,
      Int32 srcX,
      Int32 srxY,
      Int32 srcZ,
      Uint32 dstName,
      Uint32 dstTarget,
      Int32 dstLevel,
      Int32 dstX,
      Int32 dstY,
      Int32 dstZ,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLLGPUINTERLOCKNVXPROC) (void)
typedef PFNGLLGPUINTERLOCKNVXPROCDart = void Function();
typedef PFNGLLGPUINTERLOCKNVXPROC = Void Function();

// typedef GLuint (APIENTRYP PFNGLCREATEPROGRESSFENCENVXPROC) (void)
typedef PFNGLCREATEPROGRESSFENCENVXPROCDart = int Function();
typedef PFNGLCREATEPROGRESSFENCENVXPROC = Uint32 Function();

// typedef void (APIENTRYP PFNGLSIGNALSEMAPHOREUI64NVXPROC) (GLuint signalGPU, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
typedef PFNGLSIGNALSEMAPHOREUI64NVXPROCDart =
    void Function(
      int signalGpu,
      int fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );
typedef PFNGLSIGNALSEMAPHOREUI64NVXPROC =
    Void Function(
      Uint32 signalGpu,
      Uint32 fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );

// typedef void (APIENTRYP PFNGLWAITSEMAPHOREUI64NVXPROC) (GLuint waitGPU, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
typedef PFNGLWAITSEMAPHOREUI64NVXPROCDart =
    void Function(
      int waitGpu,
      int fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );
typedef PFNGLWAITSEMAPHOREUI64NVXPROC =
    Void Function(
      Uint32 waitGpu,
      Uint32 fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );

// typedef void (APIENTRYP PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC) (GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray)
typedef PFNGLCLIENTWAITSEMAPHOREUI64NVXPROCDart =
    void Function(
      int fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );
typedef PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC =
    Void Function(
      Uint32 fenceObjectCount,
      Pointer<Uint32> semaphoreArray,
      Pointer<Uint64> fenceValueArray,
    );

// typedef void (APIENTRYP PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC) (GLenum mode)
typedef PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROCDart = void Function(int mode);
typedef PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      int drawCount,
      int stride,
      int vertexBufferCount,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Uint32 drawCount,
      Uint32 stride,
      Int32 vertexBufferCount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      int drawCount,
      int stride,
      int vertexBufferCount,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Uint32 drawCount,
      Uint32 stride,
      Int32 vertexBufferCount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROCDart =
    void Function(
      int mode,
      Pointer<NativeType> indirect,
      int drawCount,
      int maxDrawCount,
      int stride,
      int vertexBufferCount,
    );
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC =
    Void Function(
      Uint32 mode,
      Pointer<NativeType> indirect,
      Uint32 drawCount,
      Uint32 maxDrawCount,
      Uint32 stride,
      Int32 vertexBufferCount,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROCDart =
    void Function(
      int mode,
      int type,
      Pointer<NativeType> indirect,
      int drawCount,
      int maxDrawCount,
      int stride,
      int vertexBufferCount,
    );
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC =
    Void Function(
      Uint32 mode,
      Uint32 type,
      Pointer<NativeType> indirect,
      Uint32 drawCount,
      Uint32 maxDrawCount,
      Uint32 stride,
      Int32 vertexBufferCount,
    );

// typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture)
typedef PFNGLGETTEXTUREHANDLENVPROCDart = int Function(int texture);
typedef PFNGLGETTEXTUREHANDLENVPROC = Uint64 Function(Uint32 texture);

// typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler)
typedef PFNGLGETTEXTURESAMPLERHANDLENVPROCDart =
    int Function(int texture, int sampler);
typedef PFNGLGETTEXTURESAMPLERHANDLENVPROC =
    Uint64 Function(Uint32 texture, Uint32 sampler);

// typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)
typedef PFNGLMAKETEXTUREHANDLERESIDENTNVPROCDart = void Function(int handle);
typedef PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = Void Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle)
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROCDart = void Function(int handle);
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = Void Function(Uint64 handle);

// typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
typedef PFNGLGETIMAGEHANDLENVPROCDart =
    int Function(int texture, int level, int layered, int layer, int format);
typedef PFNGLGETIMAGEHANDLENVPROC =
    Uint64 Function(
      Uint32 texture,
      Int32 level,
      Int32 layered,
      Int32 layer,
      Uint32 format,
    );

// typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access)
typedef PFNGLMAKEIMAGEHANDLERESIDENTNVPROCDart =
    void Function(int handle, int access);
typedef PFNGLMAKEIMAGEHANDLERESIDENTNVPROC =
    Void Function(Uint64 handle, Uint32 access);

// typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle)
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROCDart = void Function(int handle);
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = Void Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value)
typedef PFNGLUNIFORMHANDLEUI64NVPROCDart =
    void Function(int location, int value);
typedef PFNGLUNIFORMHANDLEUI64NVPROC =
    Void Function(Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value)
typedef PFNGLUNIFORMHANDLEUI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORMHANDLEUI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value)
typedef PFNGLPROGRAMUNIFORMHANDLEUI64NVPROCDart =
    void Function(int program, int location, int value);
typedef PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC =
    Void Function(Uint32 program, Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> values);
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> values,
    );

// typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)
typedef PFNGLISTEXTUREHANDLERESIDENTNVPROCDart = int Function(int handle);
typedef PFNGLISTEXTUREHANDLERESIDENTNVPROC = Int32 Function(Uint64 handle);

// typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle)
typedef PFNGLISIMAGEHANDLERESIDENTNVPROCDart = int Function(int handle);
typedef PFNGLISIMAGEHANDLERESIDENTNVPROC = Int32 Function(Uint64 handle);

// typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value)
typedef PFNGLBLENDPARAMETERINVPROCDart = void Function(int pname, int value);
typedef PFNGLBLENDPARAMETERINVPROC = Void Function(Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) (void)
typedef PFNGLBLENDBARRIERNVPROCDart = void Function();
typedef PFNGLBLENDBARRIERNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff)
typedef PFNGLVIEWPORTPOSITIONWSCALENVPROCDart =
    void Function(int index, double xcoeff, double ycoeff);
typedef PFNGLVIEWPORTPOSITIONWSCALENVPROC =
    Void Function(Uint32 index, Float xcoeff, Float ycoeff);

// typedef void (APIENTRYP PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint *states)
typedef PFNGLCREATESTATESNVPROCDart =
    void Function(int n, Pointer<Uint32> states);
typedef PFNGLCREATESTATESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> states);

// typedef void (APIENTRYP PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint *states)
typedef PFNGLDELETESTATESNVPROCDart =
    void Function(int n, Pointer<Uint32> states);
typedef PFNGLDELETESTATESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> states);

// typedef GLboolean (APIENTRYP PFNGLISSTATENVPROC) (GLuint state)
typedef PFNGLISSTATENVPROCDart = int Function(int state);
typedef PFNGLISSTATENVPROC = Int32 Function(Uint32 state);

// typedef void (APIENTRYP PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode)
typedef PFNGLSTATECAPTURENVPROCDart = void Function(int state, int mode);
typedef PFNGLSTATECAPTURENVPROC = Void Function(Uint32 state, Uint32 mode);

// typedef GLuint (APIENTRYP PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size)
typedef PFNGLGETCOMMANDHEADERNVPROCDart = int Function(int tokenId, int size);
typedef PFNGLGETCOMMANDHEADERNVPROC =
    Uint32 Function(Uint32 tokenId, Uint32 size);

// typedef GLushort (APIENTRYP PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype)
typedef PFNGLGETSTAGEINDEXNVPROCDart = int Function(int shadertype);
typedef PFNGLGETSTAGEINDEXNVPROC = Uint16 Function(Uint32 shadertype);

// typedef void (APIENTRYP PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count)
typedef PFNGLDRAWCOMMANDSNVPROCDart =
    void Function(
      int primitiveMode,
      int buffer,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      int count,
    );
typedef PFNGLDRAWCOMMANDSNVPROC =
    Void Function(
      Uint32 primitiveMode,
      Uint32 buffer,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count)
typedef PFNGLDRAWCOMMANDSADDRESSNVPROCDart =
    void Function(
      int primitiveMode,
      Pointer<Uint64> indirects,
      Pointer<Uint32> sizes,
      int count,
    );
typedef PFNGLDRAWCOMMANDSADDRESSNVPROC =
    Void Function(
      Uint32 primitiveMode,
      Pointer<Uint64> indirects,
      Pointer<Uint32> sizes,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
typedef PFNGLDRAWCOMMANDSSTATESNVPROCDart =
    void Function(
      int buffer,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      int count,
    );
typedef PFNGLDRAWCOMMANDSSTATESNVPROC =
    Void Function(
      Uint32 buffer,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
typedef PFNGLDRAWCOMMANDSSTATESADDRESSNVPROCDart =
    void Function(
      Pointer<Uint64> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      int count,
    );
typedef PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC =
    Void Function(
      Pointer<Uint64> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint *lists)
typedef PFNGLCREATECOMMANDLISTSNVPROCDart =
    void Function(int n, Pointer<Uint32> lists);
typedef PFNGLCREATECOMMANDLISTSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> lists);

// typedef void (APIENTRYP PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint *lists)
typedef PFNGLDELETECOMMANDLISTSNVPROCDart =
    void Function(int n, Pointer<Uint32> lists);
typedef PFNGLDELETECOMMANDLISTSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> lists);

// typedef GLboolean (APIENTRYP PFNGLISCOMMANDLISTNVPROC) (GLuint list)
typedef PFNGLISCOMMANDLISTNVPROCDart = int Function(int list);
typedef PFNGLISCOMMANDLISTNVPROC = Int32 Function(Uint32 list);

// typedef void (APIENTRYP PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)
typedef PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROCDart =
    void Function(
      int list,
      int segment,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      int count,
    );
typedef PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC =
    Void Function(
      Uint32 list,
      Uint32 segment,
      Pointer<Pointer<NativeType>> indirects,
      Pointer<Uint32> sizes,
      Pointer<Uint32> states,
      Pointer<Uint32> fbos,
      Uint32 count,
    );

// typedef void (APIENTRYP PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments)
typedef PFNGLCOMMANDLISTSEGMENTSNVPROCDart =
    void Function(int list, int segments);
typedef PFNGLCOMMANDLISTSEGMENTSNVPROC =
    Void Function(Uint32 list, Uint32 segments);

// typedef void (APIENTRYP PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list)
typedef PFNGLCOMPILECOMMANDLISTNVPROCDart = void Function(int list);
typedef PFNGLCOMPILECOMMANDLISTNVPROC = Void Function(Uint32 list);

// typedef void (APIENTRYP PFNGLCALLCOMMANDLISTNVPROC) (GLuint list)
typedef PFNGLCALLCOMMANDLISTNVPROCDart = void Function(int list);
typedef PFNGLCALLCOMMANDLISTNVPROC = Void Function(Uint32 list);

// typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode)
typedef PFNGLBEGINCONDITIONALRENDERNVPROCDart = void Function(int id, int mode);
typedef PFNGLBEGINCONDITIONALRENDERNVPROC =
    Void Function(Uint32 id, Uint32 mode);

// typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void)
typedef PFNGLENDCONDITIONALRENDERNVPROCDart = void Function();
typedef PFNGLENDCONDITIONALRENDERNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits)
typedef PFNGLSUBPIXELPRECISIONBIASNVPROCDart =
    void Function(int xbits, int ybits);
typedef PFNGLSUBPIXELPRECISIONBIASNVPROC =
    Void Function(Uint32 xbits, Uint32 ybits);

// typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value)
typedef PFNGLCONSERVATIVERASTERPARAMETERFNVPROCDart =
    void Function(int pname, double value);
typedef PFNGLCONSERVATIVERASTERPARAMETERFNVPROC =
    Void Function(Uint32 pname, Float value);

// typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param)
typedef PFNGLCONSERVATIVERASTERPARAMETERINVPROCDart =
    void Function(int pname, int param);
typedef PFNGLCONSERVATIVERASTERPARAMETERINVPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
typedef PFNGLCOPYIMAGESUBDATANVPROCDart =
    void Function(
      int srcName,
      int srcTarget,
      int srcLevel,
      int srcX,
      int srcY,
      int srcZ,
      int dstName,
      int dstTarget,
      int dstLevel,
      int dstX,
      int dstY,
      int dstZ,
      int width,
      int height,
      int depth,
    );
typedef PFNGLCOPYIMAGESUBDATANVPROC =
    Void Function(
      Uint32 srcName,
      Uint32 srcTarget,
      Int32 srcLevel,
      Int32 srcX,
      Int32 srcY,
      Int32 srcZ,
      Uint32 dstName,
      Uint32 dstTarget,
      Int32 dstLevel,
      Int32 dstX,
      Int32 dstY,
      Int32 dstZ,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
    );

// typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar)
typedef PFNGLDEPTHRANGEDNVPROCDart = void Function(double zNear, double zFar);
typedef PFNGLDEPTHRANGEDNVPROC = Void Function(Double zNear, Double zFar);

// typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth)
typedef PFNGLCLEARDEPTHDNVPROCDart = void Function(double depth);
typedef PFNGLCLEARDEPTHDNVPROC = Void Function(Double depth);

// typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax)
typedef PFNGLDEPTHBOUNDSDNVPROCDart = void Function(double zmin, double zmax);
typedef PFNGLDEPTHBOUNDSDNVPROC = Void Function(Double zmin, Double zmax);

// typedef void (APIENTRYP PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
typedef PFNGLDRAWTEXTURENVPROCDart =
    void Function(
      int texture,
      int sampler,
      double x0,
      double y0,
      double x1,
      double y1,
      double z,
      double s0,
      double t0,
      double s1,
      double t1,
    );
typedef PFNGLDRAWTEXTURENVPROC =
    Void Function(
      Uint32 texture,
      Uint32 sampler,
      Float x0,
      Float y0,
      Float x1,
      Float y1,
      Float z,
      Float s0,
      Float t0,
      Float s1,
      Float t1,
    );

// typedef void (APIENTRY *GLVULKANPROCNV)(void)
typedef GLVULKANPROCNVDart = void Function();
typedef GLVULKANPROCNV = Void Function();

// typedef void (APIENTRYP PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
typedef PFNGLDRAWVKIMAGENVPROCDart =
    void Function(
      int vkImage,
      int sampler,
      double x0,
      double y0,
      double x1,
      double y1,
      double z,
      double s0,
      double t0,
      double s1,
      double t1,
    );
typedef PFNGLDRAWVKIMAGENVPROC =
    Void Function(
      Uint64 vkImage,
      Uint32 sampler,
      Float x0,
      Float y0,
      Float x1,
      Float y1,
      Float z,
      Float s0,
      Float t0,
      Float s1,
      Float t1,
    );

// typedef GLVULKANPROCNV (APIENTRYP PFNGLGETVKPROCADDRNVPROC) (const GLchar *name)
typedef PFNGLGETVKPROCADDRNVPROCDart =
    Pointer<NativeFunction<GLVULKANPROCNV>> Function(Pointer<Utf8> name);
typedef PFNGLGETVKPROCADDRNVPROC =
    Pointer<NativeFunction<GLVULKANPROCNV>> Function(Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)
typedef PFNGLWAITVKSEMAPHORENVPROCDart = void Function(int vkSemaphore);
typedef PFNGLWAITVKSEMAPHORENVPROC = Void Function(Uint64 vkSemaphore);

// typedef void (APIENTRYP PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)
typedef PFNGLSIGNALVKSEMAPHORENVPROCDart = void Function(int vkSemaphore);
typedef PFNGLSIGNALVKSEMAPHORENVPROC = Void Function(Uint64 vkSemaphore);

// typedef void (APIENTRYP PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence)
typedef PFNGLSIGNALVKFENCENVPROCDart = void Function(int vkFence);
typedef PFNGLSIGNALVKFENCENVPROC = Void Function(Uint64 vkFence);

// typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)
typedef PFNGLMAPCONTROLPOINTSNVPROCDart =
    void Function(
      int target,
      int index,
      int type,
      int ustride,
      int vstride,
      int uorder,
      int vorder,
      int packed,
      Pointer<NativeType> points,
    );
typedef PFNGLMAPCONTROLPOINTSNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 type,
      Uint32 ustride,
      Uint32 vstride,
      Int32 uorder,
      Int32 vorder,
      Int32 packed,
      Pointer<NativeType> points,
    );

// typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLMAPPARAMETERIVNVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLMAPPARAMETERIVNVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLMAPPARAMETERFVNVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLMAPPARAMETERFVNVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)
typedef PFNGLGETMAPCONTROLPOINTSNVPROCDart =
    void Function(
      int target,
      int index,
      int type,
      int ustride,
      int vstride,
      int packed,
      Pointer<NativeType> points,
    );
typedef PFNGLGETMAPCONTROLPOINTSNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 type,
      Uint32 ustride,
      Uint32 vstride,
      Int32 packed,
      Pointer<NativeType> points,
    );

// typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETMAPPARAMETERIVNVPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETMAPPARAMETERIVNVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETMAPPARAMETERFVNVPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETMAPPARAMETERFVNVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETMAPATTRIBPARAMETERIVNVPROCDart =
    void Function(int target, int index, int pname, Pointer<Int32> params);
typedef PFNGLGETMAPATTRIBPARAMETERIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETMAPATTRIBPARAMETERFVNVPROCDart =
    void Function(int target, int index, int pname, Pointer<Float> params);
typedef PFNGLGETMAPATTRIBPARAMETERFVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode)
typedef PFNGLEVALMAPSNVPROCDart = void Function(int target, int mode);
typedef PFNGLEVALMAPSNVPROC = Void Function(Uint32 target, Uint32 mode);

// typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val)
typedef PFNGLGETMULTISAMPLEFVNVPROCDart =
    void Function(int pname, int index, Pointer<Float> val);
typedef PFNGLGETMULTISAMPLEFVNVPROC =
    Void Function(Uint32 pname, Uint32 index, Pointer<Float> val);

// typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask)
typedef PFNGLSAMPLEMASKINDEXEDNVPROCDart = void Function(int index, int mask);
typedef PFNGLSAMPLEMASKINDEXEDNVPROC = Void Function(Uint32 index, Uint32 mask);

// typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer)
typedef PFNGLTEXRENDERBUFFERNVPROCDart =
    void Function(int target, int renderbuffer);
typedef PFNGLTEXRENDERBUFFERNVPROC =
    Void Function(Uint32 target, Uint32 renderbuffer);

// typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences)
typedef PFNGLDELETEFENCESNVPROCDart =
    void Function(int n, Pointer<Uint32> fences);
typedef PFNGLDELETEFENCESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> fences);

// typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences)
typedef PFNGLGENFENCESNVPROCDart = void Function(int n, Pointer<Uint32> fences);
typedef PFNGLGENFENCESNVPROC = Void Function(Uint32 n, Pointer<Uint32> fences);

// typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence)
typedef PFNGLISFENCENVPROCDart = int Function(int fence);
typedef PFNGLISFENCENVPROC = Int32 Function(Uint32 fence);

// typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence)
typedef PFNGLTESTFENCENVPROCDart = int Function(int fence);
typedef PFNGLTESTFENCENVPROC = Int32 Function(Uint32 fence);

// typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params)
typedef PFNGLGETFENCEIVNVPROCDart =
    void Function(int fence, int pname, Pointer<Int32> params);
typedef PFNGLGETFENCEIVNVPROC =
    Void Function(Uint32 fence, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence)
typedef PFNGLFINISHFENCENVPROCDart = void Function(int fence);
typedef PFNGLFINISHFENCENVPROC = Void Function(Uint32 fence);

// typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition)
typedef PFNGLSETFENCENVPROCDart = void Function(int fence, int condition);
typedef PFNGLSETFENCENVPROC = Void Function(Uint32 fence, Uint32 condition);

// typedef void (APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color)
typedef PFNGLFRAGMENTCOVERAGECOLORNVPROCDart = void Function(int color);
typedef PFNGLFRAGMENTCOVERAGECOLORNVPROC = Void Function(Uint32 color);

// typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLPROGRAMNAMEDPARAMETER4FNVPROCDart =
    void Function(
      int id,
      int len,
      Pointer<Uint8> name,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMNAMEDPARAMETER4FNVPROC =
    Void Function(
      Uint32 id,
      Uint32 len,
      Pointer<Uint8> name,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
typedef PFNGLPROGRAMNAMEDPARAMETER4FVNVPROCDart =
    void Function(int id, int len, Pointer<Uint8> name, Pointer<Float> v);
typedef PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC =
    Void Function(Uint32 id, Uint32 len, Pointer<Uint8> name, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLPROGRAMNAMEDPARAMETER4DNVPROCDart =
    void Function(
      int id,
      int len,
      Pointer<Uint8> name,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMNAMEDPARAMETER4DNVPROC =
    Void Function(
      Uint32 id,
      Uint32 len,
      Pointer<Uint8> name,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
typedef PFNGLPROGRAMNAMEDPARAMETER4DVNVPROCDart =
    void Function(int id, int len, Pointer<Uint8> name, Pointer<Double> v);
typedef PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC =
    Void Function(
      Uint32 id,
      Uint32 len,
      Pointer<Uint8> name,
      Pointer<Double> v,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
typedef PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROCDart =
    void Function(int id, int len, Pointer<Uint8> name, Pointer<Float> params);
typedef PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC =
    Void Function(
      Uint32 id,
      Uint32 len,
      Pointer<Uint8> name,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
typedef PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROCDart =
    void Function(int id, int len, Pointer<Uint8> name, Pointer<Double> params);
typedef PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC =
    Void Function(
      Uint32 id,
      Uint32 len,
      Pointer<Uint8> name,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat *v)
typedef PFNGLCOVERAGEMODULATIONTABLENVPROCDart =
    void Function(int n, Pointer<Float> v);
typedef PFNGLCOVERAGEMODULATIONTABLENVPROC =
    Void Function(Uint32 n, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufSize, GLfloat *v)
typedef PFNGLGETCOVERAGEMODULATIONTABLENVPROCDart =
    void Function(int bufSize, Pointer<Float> v);
typedef PFNGLGETCOVERAGEMODULATIONTABLENVPROC =
    Void Function(Uint32 bufSize, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components)
typedef PFNGLCOVERAGEMODULATIONNVPROCDart = void Function(int components);
typedef PFNGLCOVERAGEMODULATIONNVPROC = Void Function(Uint32 components);

// typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROCDart =
    void Function(
      int target,
      int coverageSamples,
      int colorSamples,
      int internalformat,
      int width,
      int height,
    );
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC =
    Void Function(
      Uint32 target,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
    );

// typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit)
typedef PFNGLPROGRAMVERTEXLIMITNVPROCDart =
    void Function(int target, int limit);
typedef PFNGLPROGRAMVERTEXLIMITNVPROC =
    Void Function(Uint32 target, Int32 limit);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
typedef PFNGLFRAMEBUFFERTEXTUREEXTPROCDart =
    void Function(int target, int attachment, int texture, int level);
typedef PFNGLFRAMEBUFFERTEXTUREEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
typedef PFNGLFRAMEBUFFERTEXTUREFACEEXTPROCDart =
    void Function(int target, int attachment, int texture, int level, int face);
typedef PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Uint32 face,
    );

// typedef void (APIENTRYP PFNGLRENDERGPUMASKNVPROC) (GLbitfield mask)
typedef PFNGLRENDERGPUMASKNVPROCDart = void Function(int mask);
typedef PFNGLRENDERGPUMASKNVPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLMULTICASTBUFFERSUBDATANVPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
typedef PFNGLMULTICASTBUFFERSUBDATANVPROCDart =
    void Function(
      int gpuMask,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );
typedef PFNGLMULTICASTBUFFERSUBDATANVPROC =
    Void Function(
      Uint32 gpuMask,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Pointer<NativeType> data,
    );

// typedef void (APIENTRYP PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC) (GLuint readGPU, GLbitfield writeGPUMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
typedef PFNGLMULTICASTCOPYBUFFERSUBDATANVPROCDart =
    void Function(
      int readGpu,
      int writeGpuMask,
      int readBuffer,
      int writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );
typedef PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC =
    Void Function(
      Uint32 readGpu,
      Uint32 writeGpuMask,
      Uint32 readBuffer,
      Uint32 writeBuffer,
      Pointer<NativeType> readOffset,
      Pointer<NativeType> writeOffset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLMULTICASTCOPYIMAGESUBDATANVPROC) (GLuint srcGPU, GLbitfield dstGPUMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
typedef PFNGLMULTICASTCOPYIMAGESUBDATANVPROCDart =
    void Function(
      int srcGpu,
      int dstGpuMask,
      int srcName,
      int srcTarget,
      int srcLevel,
      int srcX,
      int srcY,
      int srcZ,
      int dstName,
      int dstTarget,
      int dstLevel,
      int dstX,
      int dstY,
      int dstZ,
      int srcWidth,
      int srcHeight,
      int srcDepth,
    );
typedef PFNGLMULTICASTCOPYIMAGESUBDATANVPROC =
    Void Function(
      Uint32 srcGpu,
      Uint32 dstGpuMask,
      Uint32 srcName,
      Uint32 srcTarget,
      Int32 srcLevel,
      Int32 srcX,
      Int32 srcY,
      Int32 srcZ,
      Uint32 dstName,
      Uint32 dstTarget,
      Int32 dstLevel,
      Int32 dstX,
      Int32 dstY,
      Int32 dstZ,
      Uint32 srcWidth,
      Uint32 srcHeight,
      Uint32 srcDepth,
    );

// typedef void (APIENTRYP PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGPU, GLuint dstGPU, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
typedef PFNGLMULTICASTBLITFRAMEBUFFERNVPROCDart =
    void Function(
      int srcGpu,
      int dstGpu,
      int srcX0,
      int srcY0,
      int srcX1,
      int srcY1,
      int dstX0,
      int dstY0,
      int dstX1,
      int dstY1,
      int mask,
      int filter,
    );
typedef PFNGLMULTICASTBLITFRAMEBUFFERNVPROC =
    Void Function(
      Uint32 srcGpu,
      Uint32 dstGpu,
      Int32 srcX0,
      Int32 srcY0,
      Int32 srcX1,
      Int32 srcY1,
      Int32 dstX0,
      Int32 dstY0,
      Int32 dstX1,
      Int32 dstY1,
      Uint32 mask,
      Uint32 filter,
    );

// typedef void (APIENTRYP PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
typedef PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROCDart =
    void Function(
      int gpu,
      int framebuffer,
      int start,
      int count,
      Pointer<Float> v,
    );
typedef PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC =
    Void Function(
      Uint32 gpu,
      Uint32 framebuffer,
      Uint32 start,
      Uint32 count,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLMULTICASTBARRIERNVPROC) (void)
typedef PFNGLMULTICASTBARRIERNVPROCDart = void Function();
typedef PFNGLMULTICASTBARRIERNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGPU, GLbitfield waitGPUMask)
typedef PFNGLMULTICASTWAITSYNCNVPROCDart =
    void Function(int signalGpu, int waitGpuMask);
typedef PFNGLMULTICASTWAITSYNCNVPROC =
    Void Function(Uint32 signalGpu, Uint32 waitGpuMask);

// typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint *params)
typedef PFNGLMULTICASTGETQUERYOBJECTIVNVPROCDart =
    void Function(int gpu, int id, int pname, Pointer<Int32> params);
typedef PFNGLMULTICASTGETQUERYOBJECTIVNVPROC =
    Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint *params)
typedef PFNGLMULTICASTGETQUERYOBJECTUIVNVPROCDart =
    void Function(int gpu, int id, int pname, Pointer<Uint32> params);
typedef PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC =
    Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint64 *params)
typedef PFNGLMULTICASTGETQUERYOBJECTI64VNVPROCDart =
    void Function(int gpu, int id, int pname, Pointer<Int64> params);
typedef PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC =
    Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params)
typedef PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROCDart =
    void Function(int gpu, int id, int pname, Pointer<Uint64> params);
typedef PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC =
    Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLPROGRAMLOCALPARAMETERI4INVPROCDart =
    void Function(int target, int index, int x, int y, int z, int w);
typedef PFNGLPROGRAMLOCALPARAMETERI4INVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Int32 x,
      Int32 y,
      Int32 z,
      Int32 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)
typedef PFNGLPROGRAMLOCALPARAMETERI4IVNVPROCDart =
    void Function(int target, int index, Pointer<Int32> params);
typedef PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)
typedef PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Int32> params);
typedef PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
typedef PFNGLPROGRAMLOCALPARAMETERI4UINVPROCDart =
    void Function(int target, int index, int x, int y, int z, int w);
typedef PFNGLPROGRAMLOCALPARAMETERI4UINVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 x,
      Uint32 y,
      Uint32 z,
      Uint32 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)
typedef PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROCDart =
    void Function(int target, int index, Pointer<Uint32> params);
typedef PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)
typedef PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Uint32> params);
typedef PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
typedef PFNGLPROGRAMENVPARAMETERI4INVPROCDart =
    void Function(int target, int index, int x, int y, int z, int w);
typedef PFNGLPROGRAMENVPARAMETERI4INVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Int32 x,
      Int32 y,
      Int32 z,
      Int32 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)
typedef PFNGLPROGRAMENVPARAMETERI4IVNVPROCDart =
    void Function(int target, int index, Pointer<Int32> params);
typedef PFNGLPROGRAMENVPARAMETERI4IVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)
typedef PFNGLPROGRAMENVPARAMETERSI4IVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Int32> params);
typedef PFNGLPROGRAMENVPARAMETERSI4IVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
typedef PFNGLPROGRAMENVPARAMETERI4UINVPROCDart =
    void Function(int target, int index, int x, int y, int z, int w);
typedef PFNGLPROGRAMENVPARAMETERI4UINVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 x,
      Uint32 y,
      Uint32 z,
      Uint32 w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)
typedef PFNGLPROGRAMENVPARAMETERI4UIVNVPROCDart =
    void Function(int target, int index, Pointer<Uint32> params);
typedef PFNGLPROGRAMENVPARAMETERI4UIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)
typedef PFNGLPROGRAMENVPARAMETERSI4UIVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Uint32> params);
typedef PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 count,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params)
typedef PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROCDart =
    void Function(int target, int index, Pointer<Int32> params);
typedef PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params)
typedef PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROCDart =
    void Function(int target, int index, Pointer<Uint32> params);
typedef PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params)
typedef PFNGLGETPROGRAMENVPARAMETERIIVNVPROCDart =
    void Function(int target, int index, Pointer<Int32> params);
typedef PFNGLGETPROGRAMENVPARAMETERIIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params)
typedef PFNGLGETPROGRAMENVPARAMETERIUIVNVPROCDart =
    void Function(int target, int index, Pointer<Uint32> params);
typedef PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params)
typedef PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROCDart =
    void Function(int target, int count, Pointer<Uint32> params);
typedef PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC =
    Void Function(Uint32 target, Uint32 count, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param)
typedef PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROCDart =
    void Function(int target, int index, Pointer<Uint32> param);
typedef PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Uint32> param);

// typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y)
typedef PFNGLVERTEX2HNVPROCDart = void Function(int x, int y);
typedef PFNGLVERTEX2HNVPROC = Void Function(Uint16 x, Uint16 y);

// typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v)
typedef PFNGLVERTEX2HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLVERTEX2HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z)
typedef PFNGLVERTEX3HNVPROCDart = void Function(int x, int y, int z);
typedef PFNGLVERTEX3HNVPROC = Void Function(Uint16 x, Uint16 y, Uint16 z);

// typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v)
typedef PFNGLVERTEX3HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLVERTEX3HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
typedef PFNGLVERTEX4HNVPROCDart = void Function(int x, int y, int z, int w);
typedef PFNGLVERTEX4HNVPROC =
    Void Function(Uint16 x, Uint16 y, Uint16 z, Uint16 w);

// typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v)
typedef PFNGLVERTEX4HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLVERTEX4HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
typedef PFNGLNORMAL3HNVPROCDart = void Function(int nx, int ny, int nz);
typedef PFNGLNORMAL3HNVPROC = Void Function(Uint16 nx, Uint16 ny, Uint16 nz);

// typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v)
typedef PFNGLNORMAL3HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLNORMAL3HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
typedef PFNGLCOLOR3HNVPROCDart = void Function(int red, int green, int blue);
typedef PFNGLCOLOR3HNVPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue);

// typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v)
typedef PFNGLCOLOR3HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLCOLOR3HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
typedef PFNGLCOLOR4HNVPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLCOLOR4HNVPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue, Uint16 alpha);

// typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v)
typedef PFNGLCOLOR4HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLCOLOR4HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s)
typedef PFNGLTEXCOORD1HNVPROCDart = void Function(int s);
typedef PFNGLTEXCOORD1HNVPROC = Void Function(Uint16 s);

// typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v)
typedef PFNGLTEXCOORD1HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLTEXCOORD1HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t)
typedef PFNGLTEXCOORD2HNVPROCDart = void Function(int s, int t);
typedef PFNGLTEXCOORD2HNVPROC = Void Function(Uint16 s, Uint16 t);

// typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v)
typedef PFNGLTEXCOORD2HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLTEXCOORD2HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r)
typedef PFNGLTEXCOORD3HNVPROCDart = void Function(int s, int t, int r);
typedef PFNGLTEXCOORD3HNVPROC = Void Function(Uint16 s, Uint16 t, Uint16 r);

// typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v)
typedef PFNGLTEXCOORD3HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLTEXCOORD3HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
typedef PFNGLTEXCOORD4HNVPROCDart = void Function(int s, int t, int r, int q);
typedef PFNGLTEXCOORD4HNVPROC =
    Void Function(Uint16 s, Uint16 t, Uint16 r, Uint16 q);

// typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v)
typedef PFNGLTEXCOORD4HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLTEXCOORD4HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s)
typedef PFNGLMULTITEXCOORD1HNVPROCDart = void Function(int target, int s);
typedef PFNGLMULTITEXCOORD1HNVPROC = Void Function(Uint32 target, Uint16 s);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v)
typedef PFNGLMULTITEXCOORD1HVNVPROCDart =
    void Function(int target, Pointer<Uint16> v);
typedef PFNGLMULTITEXCOORD1HVNVPROC =
    Void Function(Uint32 target, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t)
typedef PFNGLMULTITEXCOORD2HNVPROCDart =
    void Function(int target, int s, int t);
typedef PFNGLMULTITEXCOORD2HNVPROC =
    Void Function(Uint32 target, Uint16 s, Uint16 t);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v)
typedef PFNGLMULTITEXCOORD2HVNVPROCDart =
    void Function(int target, Pointer<Uint16> v);
typedef PFNGLMULTITEXCOORD2HVNVPROC =
    Void Function(Uint32 target, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
typedef PFNGLMULTITEXCOORD3HNVPROCDart =
    void Function(int target, int s, int t, int r);
typedef PFNGLMULTITEXCOORD3HNVPROC =
    Void Function(Uint32 target, Uint16 s, Uint16 t, Uint16 r);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v)
typedef PFNGLMULTITEXCOORD3HVNVPROCDart =
    void Function(int target, Pointer<Uint16> v);
typedef PFNGLMULTITEXCOORD3HVNVPROC =
    Void Function(Uint32 target, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
typedef PFNGLMULTITEXCOORD4HNVPROCDart =
    void Function(int target, int s, int t, int r, int q);
typedef PFNGLMULTITEXCOORD4HNVPROC =
    Void Function(Uint32 target, Uint16 s, Uint16 t, Uint16 r, Uint16 q);

// typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v)
typedef PFNGLMULTITEXCOORD4HVNVPROCDart =
    void Function(int target, Pointer<Uint16> v);
typedef PFNGLMULTITEXCOORD4HVNVPROC =
    Void Function(Uint32 target, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog)
typedef PFNGLFOGCOORDHNVPROCDart = void Function(int fog);
typedef PFNGLFOGCOORDHNVPROC = Void Function(Uint16 fog);

// typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog)
typedef PFNGLFOGCOORDHVNVPROCDart = void Function(Pointer<Uint16> fog);
typedef PFNGLFOGCOORDHVNVPROC = Void Function(Pointer<Uint16> fog);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
typedef PFNGLSECONDARYCOLOR3HNVPROCDart =
    void Function(int red, int green, int blue);
typedef PFNGLSECONDARYCOLOR3HNVPROC =
    Void Function(Uint16 red, Uint16 green, Uint16 blue);

// typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v)
typedef PFNGLSECONDARYCOLOR3HVNVPROCDart = void Function(Pointer<Uint16> v);
typedef PFNGLSECONDARYCOLOR3HVNVPROC = Void Function(Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight)
typedef PFNGLVERTEXWEIGHTHNVPROCDart = void Function(int weight);
typedef PFNGLVERTEXWEIGHTHNVPROC = Void Function(Uint16 weight);

// typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight)
typedef PFNGLVERTEXWEIGHTHVNVPROCDart = void Function(Pointer<Uint16> weight);
typedef PFNGLVERTEXWEIGHTHVNVPROC = Void Function(Pointer<Uint16> weight);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x)
typedef PFNGLVERTEXATTRIB1HNVPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIB1HNVPROC = Void Function(Uint32 index, Uint16 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIB1HVNVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB1HVNVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y)
typedef PFNGLVERTEXATTRIB2HNVPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIB2HNVPROC =
    Void Function(Uint32 index, Uint16 x, Uint16 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIB2HVNVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB2HVNVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
typedef PFNGLVERTEXATTRIB3HNVPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIB3HNVPROC =
    Void Function(Uint32 index, Uint16 x, Uint16 y, Uint16 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIB3HVNVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB3HVNVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
typedef PFNGLVERTEXATTRIB4HNVPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4HNVPROC =
    Void Function(Uint32 index, Uint16 x, Uint16 y, Uint16 z, Uint16 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIB4HVNVPROCDart =
    void Function(int index, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIB4HVNVPROC =
    Void Function(Uint32 index, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIBS1HVNVPROCDart =
    void Function(int index, int n, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBS1HVNVPROC =
    Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIBS2HVNVPROCDart =
    void Function(int index, int n, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBS2HVNVPROC =
    Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIBS3HVNVPROCDart =
    void Function(int index, int n, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBS3HVNVPROC =
    Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)
typedef PFNGLVERTEXATTRIBS4HVNVPROCDart =
    void Function(int index, int n, Pointer<Uint16> v);
typedef PFNGLVERTEXATTRIBS4HVNVPROC =
    Void Function(Uint32 index, Uint32 n, Pointer<Uint16> v);

// typedef void (APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params)
typedef PFNGLGETINTERNALFORMATSAMPLEIVNVPROCDart =
    void Function(
      int target,
      int internalformat,
      int samples,
      int pname,
      int count,
      Pointer<Int32> params,
    );
typedef PFNGLGETINTERNALFORMATSAMPLEIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 samples,
      Uint32 pname,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC) (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params)
typedef PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROCDart =
    void Function(
      int memory,
      int pname,
      int first,
      int count,
      Pointer<Uint32> params,
    );
typedef PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC =
    Void Function(
      Uint32 memory,
      Uint32 pname,
      Int32 first,
      Uint32 count,
      Pointer<Uint32> params,
    );

// typedef void (APIENTRYP PFNGLRESETMEMORYOBJECTPARAMETERNVPROC) (GLuint memory, GLenum pname)
typedef PFNGLRESETMEMORYOBJECTPARAMETERNVPROCDart =
    void Function(int memory, int pname);
typedef PFNGLRESETMEMORYOBJECTPARAMETERNVPROC =
    Void Function(Uint32 memory, Uint32 pname);

// typedef void (APIENTRYP PFNGLTEXATTACHMEMORYNVPROC) (GLenum target, GLuint memory, GLuint64 offset)
typedef PFNGLTEXATTACHMEMORYNVPROCDart =
    void Function(int target, int memory, int offset);
typedef PFNGLTEXATTACHMEMORYNVPROC =
    Void Function(Uint32 target, Uint32 memory, Uint64 offset);

// typedef void (APIENTRYP PFNGLBUFFERATTACHMEMORYNVPROC) (GLenum target, GLuint memory, GLuint64 offset)
typedef PFNGLBUFFERATTACHMEMORYNVPROCDart =
    void Function(int target, int memory, int offset);
typedef PFNGLBUFFERATTACHMEMORYNVPROC =
    Void Function(Uint32 target, Uint32 memory, Uint64 offset);

// typedef void (APIENTRYP PFNGLTEXTUREATTACHMEMORYNVPROC) (GLuint texture, GLuint memory, GLuint64 offset)
typedef PFNGLTEXTUREATTACHMEMORYNVPROCDart =
    void Function(int texture, int memory, int offset);
typedef PFNGLTEXTUREATTACHMEMORYNVPROC =
    Void Function(Uint32 texture, Uint32 memory, Uint64 offset);

// typedef void (APIENTRYP PFNGLNAMEDBUFFERATTACHMEMORYNVPROC) (GLuint buffer, GLuint memory, GLuint64 offset)
typedef PFNGLNAMEDBUFFERATTACHMEMORYNVPROCDart =
    void Function(int buffer, int memory, int offset);
typedef PFNGLNAMEDBUFFERATTACHMEMORYNVPROC =
    Void Function(Uint32 buffer, Uint32 memory, Uint64 offset);

// typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTMEMNVPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
typedef PFNGLBUFFERPAGECOMMITMENTMEMNVPROCDart =
    void Function(
      int target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int memory,
      int memOffset,
      int commit,
    );
typedef PFNGLBUFFERPAGECOMMITMENTMEMNVPROC =
    Void Function(
      Uint32 target,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Uint32 memory,
      Uint64 memOffset,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTMEMNVPROC) (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)
typedef PFNGLTEXPAGECOMMITMENTMEMNVPROCDart =
    void Function(
      int target,
      int layer,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int memory,
      int offset,
      int commit,
    );
typedef PFNGLTEXPAGECOMMITMENTMEMNVPROC =
    Void Function(
      Uint32 target,
      Int32 layer,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 memory,
      Uint64 offset,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROCDart =
    void Function(
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      int memory,
      int memOffset,
      int commit,
    );
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC =
    Void Function(
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
      Uint32 memory,
      Uint64 memOffset,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC) (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)
typedef PFNGLTEXTUREPAGECOMMITMENTMEMNVPROCDart =
    void Function(
      int texture,
      int layer,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int width,
      int height,
      int depth,
      int memory,
      int offset,
      int commit,
    );
typedef PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC =
    Void Function(
      Uint32 texture,
      Int32 layer,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 memory,
      Uint64 offset,
      Int32 commit,
    );

// typedef void (APIENTRYP PFNGLDRAWMESHTASKSNVPROC) (GLuint first, GLuint count)
typedef PFNGLDRAWMESHTASKSNVPROCDart = void Function(int first, int count);
typedef PFNGLDRAWMESHTASKSNVPROC = Void Function(Uint32 first, Uint32 count);

// typedef void (APIENTRYP PFNGLDRAWMESHTASKSINDIRECTNVPROC) (GLintptr indirect)
typedef PFNGLDRAWMESHTASKSINDIRECTNVPROCDart =
    void Function(Pointer<NativeType> indirect);
typedef PFNGLDRAWMESHTASKSINDIRECTNVPROC =
    Void Function(Pointer<NativeType> indirect);

// typedef void (APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC) (GLintptr indirect, GLsizei drawcount, GLsizei stride)
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROCDart =
    void Function(Pointer<NativeType> indirect, int drawcount, int stride);
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC =
    Void Function(
      Pointer<NativeType> indirect,
      Uint32 drawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC) (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROCDart =
    void Function(
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      int maxdrawcount,
      int stride,
    );
typedef PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC =
    Void Function(
      Pointer<NativeType> indirect,
      Pointer<NativeType> drawcount,
      Uint32 maxdrawcount,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids)
typedef PFNGLGENOCCLUSIONQUERIESNVPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLGENOCCLUSIONQUERIESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids)
typedef PFNGLDELETEOCCLUSIONQUERIESNVPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLDELETEOCCLUSIONQUERIESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id)
typedef PFNGLISOCCLUSIONQUERYNVPROCDart = int Function(int id);
typedef PFNGLISOCCLUSIONQUERYNVPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id)
typedef PFNGLBEGINOCCLUSIONQUERYNVPROCDart = void Function(int id);
typedef PFNGLBEGINOCCLUSIONQUERYNVPROC = Void Function(Uint32 id);

// typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void)
typedef PFNGLENDOCCLUSIONQUERYNVPROCDart = void Function();
typedef PFNGLENDOCCLUSIONQUERYNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params)
typedef PFNGLGETOCCLUSIONQUERYIVNVPROCDart =
    void Function(int id, int pname, Pointer<Int32> params);
typedef PFNGLGETOCCLUSIONQUERYIVNVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params)
typedef PFNGLGETOCCLUSIONQUERYUIVNVPROCDart =
    void Function(int id, int pname, Pointer<Uint32> params);
typedef PFNGLGETOCCLUSIONQUERYUIVNVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params)
typedef PFNGLPROGRAMBUFFERPARAMETERSFVNVPROCDart =
    void Function(
      int target,
      int bindingIndex,
      int wordIndex,
      int count,
      Pointer<Float> params,
    );
typedef PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 bindingIndex,
      Uint32 wordIndex,
      Uint32 count,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params)
typedef PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROCDart =
    void Function(
      int target,
      int bindingIndex,
      int wordIndex,
      int count,
      Pointer<Int32> params,
    );
typedef PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 bindingIndex,
      Uint32 wordIndex,
      Uint32 count,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params)
typedef PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROCDart =
    void Function(
      int target,
      int bindingIndex,
      int wordIndex,
      int count,
      Pointer<Uint32> params,
    );
typedef PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 bindingIndex,
      Uint32 wordIndex,
      Uint32 count,
      Pointer<Uint32> params,
    );

// typedef GLuint (APIENTRYP PFNGLGENPATHSNVPROC) (GLsizei range)
typedef PFNGLGENPATHSNVPROCDart = int Function(int range);
typedef PFNGLGENPATHSNVPROC = Uint32 Function(Uint32 range);

// typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range)
typedef PFNGLDELETEPATHSNVPROCDart = void Function(int path, int range);
typedef PFNGLDELETEPATHSNVPROC = Void Function(Uint32 path, Uint32 range);

// typedef GLboolean (APIENTRYP PFNGLISPATHNVPROC) (GLuint path)
typedef PFNGLISPATHNVPROCDart = int Function(int path);
typedef PFNGLISPATHNVPROC = Int32 Function(Uint32 path);

// typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
typedef PFNGLPATHCOMMANDSNVPROCDart =
    void Function(
      int path,
      int numCommands,
      Pointer<Uint8> commands,
      int numCoords,
      int coordType,
      Pointer<NativeType> coords,
    );
typedef PFNGLPATHCOMMANDSNVPROC =
    Void Function(
      Uint32 path,
      Uint32 numCommands,
      Pointer<Uint8> commands,
      Uint32 numCoords,
      Uint32 coordType,
      Pointer<NativeType> coords,
    );

// typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)
typedef PFNGLPATHCOORDSNVPROCDart =
    void Function(
      int path,
      int numCoords,
      int coordType,
      Pointer<NativeType> coords,
    );
typedef PFNGLPATHCOORDSNVPROC =
    Void Function(
      Uint32 path,
      Uint32 numCoords,
      Uint32 coordType,
      Pointer<NativeType> coords,
    );

// typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
typedef PFNGLPATHSUBCOMMANDSNVPROCDart =
    void Function(
      int path,
      int commandStart,
      int commandsToDelete,
      int numCommands,
      Pointer<Uint8> commands,
      int numCoords,
      int coordType,
      Pointer<NativeType> coords,
    );
typedef PFNGLPATHSUBCOMMANDSNVPROC =
    Void Function(
      Uint32 path,
      Uint32 commandStart,
      Uint32 commandsToDelete,
      Uint32 numCommands,
      Pointer<Uint8> commands,
      Uint32 numCoords,
      Uint32 coordType,
      Pointer<NativeType> coords,
    );

// typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)
typedef PFNGLPATHSUBCOORDSNVPROCDart =
    void Function(
      int path,
      int coordStart,
      int numCoords,
      int coordType,
      Pointer<NativeType> coords,
    );
typedef PFNGLPATHSUBCOORDSNVPROC =
    Void Function(
      Uint32 path,
      Uint32 coordStart,
      Uint32 numCoords,
      Uint32 coordType,
      Pointer<NativeType> coords,
    );

// typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString)
typedef PFNGLPATHSTRINGNVPROCDart =
    void Function(
      int path,
      int format,
      int length,
      Pointer<NativeType> pathString,
    );
typedef PFNGLPATHSTRINGNVPROC =
    Void Function(
      Uint32 path,
      Uint32 format,
      Uint32 length,
      Pointer<NativeType> pathString,
    );

// typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
typedef PFNGLPATHGLYPHSNVPROCDart =
    void Function(
      int firstPathName,
      int fontTarget,
      Pointer<NativeType> fontName,
      int fontStyle,
      int numGlyphs,
      int type,
      Pointer<NativeType> charcodes,
      int handleMissingGlyphs,
      int pathParameterTemplate,
      double emScale,
    );
typedef PFNGLPATHGLYPHSNVPROC =
    Void Function(
      Uint32 firstPathName,
      Uint32 fontTarget,
      Pointer<NativeType> fontName,
      Uint32 fontStyle,
      Uint32 numGlyphs,
      Uint32 type,
      Pointer<NativeType> charcodes,
      Uint32 handleMissingGlyphs,
      Uint32 pathParameterTemplate,
      Float emScale,
    );

// typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
typedef PFNGLPATHGLYPHRANGENVPROCDart =
    void Function(
      int firstPathName,
      int fontTarget,
      Pointer<NativeType> fontName,
      int fontStyle,
      int firstGlyph,
      int numGlyphs,
      int handleMissingGlyphs,
      int pathParameterTemplate,
      double emScale,
    );
typedef PFNGLPATHGLYPHRANGENVPROC =
    Void Function(
      Uint32 firstPathName,
      Uint32 fontTarget,
      Pointer<NativeType> fontName,
      Uint32 fontStyle,
      Uint32 firstGlyph,
      Uint32 numGlyphs,
      Uint32 handleMissingGlyphs,
      Uint32 pathParameterTemplate,
      Float emScale,
    );

// typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
typedef PFNGLWEIGHTPATHSNVPROCDart =
    void Function(
      int resultPath,
      int numPaths,
      Pointer<Uint32> paths,
      Pointer<Float> weights,
    );
typedef PFNGLWEIGHTPATHSNVPROC =
    Void Function(
      Uint32 resultPath,
      Uint32 numPaths,
      Pointer<Uint32> paths,
      Pointer<Float> weights,
    );

// typedef void (APIENTRYP PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath)
typedef PFNGLCOPYPATHNVPROCDart = void Function(int resultPath, int srcPath);
typedef PFNGLCOPYPATHNVPROC = Void Function(Uint32 resultPath, Uint32 srcPath);

// typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
typedef PFNGLINTERPOLATEPATHSNVPROCDart =
    void Function(int resultPath, int pathA, int pathB, double weight);
typedef PFNGLINTERPOLATEPATHSNVPROC =
    Void Function(Uint32 resultPath, Uint32 pathA, Uint32 pathB, Float weight);

// typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLTRANSFORMPATHNVPROCDart =
    void Function(
      int resultPath,
      int srcPath,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLTRANSFORMPATHNVPROC =
    Void Function(
      Uint32 resultPath,
      Uint32 srcPath,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value)
typedef PFNGLPATHPARAMETERIVNVPROCDart =
    void Function(int path, int pname, Pointer<Int32> value);
typedef PFNGLPATHPARAMETERIVNVPROC =
    Void Function(Uint32 path, Uint32 pname, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value)
typedef PFNGLPATHPARAMETERINVPROCDart =
    void Function(int path, int pname, int value);
typedef PFNGLPATHPARAMETERINVPROC =
    Void Function(Uint32 path, Uint32 pname, Int32 value);

// typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value)
typedef PFNGLPATHPARAMETERFVNVPROCDart =
    void Function(int path, int pname, Pointer<Float> value);
typedef PFNGLPATHPARAMETERFVNVPROC =
    Void Function(Uint32 path, Uint32 pname, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value)
typedef PFNGLPATHPARAMETERFNVPROCDart =
    void Function(int path, int pname, double value);
typedef PFNGLPATHPARAMETERFNVPROC =
    Void Function(Uint32 path, Uint32 pname, Float value);

// typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray)
typedef PFNGLPATHDASHARRAYNVPROCDart =
    void Function(int path, int dashCount, Pointer<Float> dashArray);
typedef PFNGLPATHDASHARRAYNVPROC =
    Void Function(Uint32 path, Uint32 dashCount, Pointer<Float> dashArray);

// typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask)
typedef PFNGLPATHSTENCILFUNCNVPROCDart =
    void Function(int func, int ref, int mask);
typedef PFNGLPATHSTENCILFUNCNVPROC =
    Void Function(Uint32 func, Int32 ref, Uint32 mask);

// typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units)
typedef PFNGLPATHSTENCILDEPTHOFFSETNVPROCDart =
    void Function(double factor, double units);
typedef PFNGLPATHSTENCILDEPTHOFFSETNVPROC =
    Void Function(Float factor, Float units);

// typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask)
typedef PFNGLSTENCILFILLPATHNVPROCDart =
    void Function(int path, int fillMode, int mask);
typedef PFNGLSTENCILFILLPATHNVPROC =
    Void Function(Uint32 path, Uint32 fillMode, Uint32 mask);

// typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask)
typedef PFNGLSTENCILSTROKEPATHNVPROCDart =
    void Function(int path, int reference, int mask);
typedef PFNGLSTENCILSTROKEPATHNVPROC =
    Void Function(Uint32 path, Int32 reference, Uint32 mask);

// typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLSTENCILFILLPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int fillMode,
      int mask,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLSTENCILFILLPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Uint32 fillMode,
      Uint32 mask,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLSTENCILSTROKEPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int reference,
      int mask,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Int32 reference,
      Uint32 mask,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func)
typedef PFNGLPATHCOVERDEPTHFUNCNVPROCDart = void Function(int func);
typedef PFNGLPATHCOVERDEPTHFUNCNVPROC = Void Function(Uint32 func);

// typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode)
typedef PFNGLCOVERFILLPATHNVPROCDart = void Function(int path, int coverMode);
typedef PFNGLCOVERFILLPATHNVPROC = Void Function(Uint32 path, Uint32 coverMode);

// typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode)
typedef PFNGLCOVERSTROKEPATHNVPROCDart = void Function(int path, int coverMode);
typedef PFNGLCOVERSTROKEPATHNVPROC =
    Void Function(Uint32 path, Uint32 coverMode);

// typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLCOVERFILLPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int coverMode,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLCOVERFILLPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Uint32 coverMode,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLCOVERSTROKEPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int coverMode,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLCOVERSTROKEPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Uint32 coverMode,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value)
typedef PFNGLGETPATHPARAMETERIVNVPROCDart =
    void Function(int path, int pname, Pointer<Int32> value);
typedef PFNGLGETPATHPARAMETERIVNVPROC =
    Void Function(Uint32 path, Uint32 pname, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value)
typedef PFNGLGETPATHPARAMETERFVNVPROCDart =
    void Function(int path, int pname, Pointer<Float> value);
typedef PFNGLGETPATHPARAMETERFVNVPROC =
    Void Function(Uint32 path, Uint32 pname, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands)
typedef PFNGLGETPATHCOMMANDSNVPROCDart =
    void Function(int path, Pointer<Uint8> commands);
typedef PFNGLGETPATHCOMMANDSNVPROC =
    Void Function(Uint32 path, Pointer<Uint8> commands);

// typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords)
typedef PFNGLGETPATHCOORDSNVPROCDart =
    void Function(int path, Pointer<Float> coords);
typedef PFNGLGETPATHCOORDSNVPROC =
    Void Function(Uint32 path, Pointer<Float> coords);

// typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray)
typedef PFNGLGETPATHDASHARRAYNVPROCDart =
    void Function(int path, Pointer<Float> dashArray);
typedef PFNGLGETPATHDASHARRAYNVPROC =
    Void Function(Uint32 path, Pointer<Float> dashArray);

// typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
typedef PFNGLGETPATHMETRICSNVPROCDart =
    void Function(
      int metricQueryMask,
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int stride,
      Pointer<Float> metrics,
    );
typedef PFNGLGETPATHMETRICSNVPROC =
    Void Function(
      Uint32 metricQueryMask,
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Uint32 stride,
      Pointer<Float> metrics,
    );

// typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
typedef PFNGLGETPATHMETRICRANGENVPROCDart =
    void Function(
      int metricQueryMask,
      int firstPathName,
      int numPaths,
      int stride,
      Pointer<Float> metrics,
    );
typedef PFNGLGETPATHMETRICRANGENVPROC =
    Void Function(
      Uint32 metricQueryMask,
      Uint32 firstPathName,
      Uint32 numPaths,
      Uint32 stride,
      Pointer<Float> metrics,
    );

// typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
typedef PFNGLGETPATHSPACINGNVPROCDart =
    void Function(
      int pathListMode,
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      double advanceScale,
      double kerningScale,
      int transformType,
      Pointer<Float> returnedSpacing,
    );
typedef PFNGLGETPATHSPACINGNVPROC =
    Void Function(
      Uint32 pathListMode,
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Float advanceScale,
      Float kerningScale,
      Uint32 transformType,
      Pointer<Float> returnedSpacing,
    );

// typedef GLboolean (APIENTRYP PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y)
typedef PFNGLISPOINTINFILLPATHNVPROCDart =
    int Function(int path, int mask, double x, double y);
typedef PFNGLISPOINTINFILLPATHNVPROC =
    Int32 Function(Uint32 path, Uint32 mask, Float x, Float y);

// typedef GLboolean (APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y)
typedef PFNGLISPOINTINSTROKEPATHNVPROCDart =
    int Function(int path, double x, double y);
typedef PFNGLISPOINTINSTROKEPATHNVPROC =
    Int32 Function(Uint32 path, Float x, Float y);

// typedef GLfloat (APIENTRYP PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments)
typedef PFNGLGETPATHLENGTHNVPROCDart =
    double Function(int path, int startSegment, int numSegments);
typedef PFNGLGETPATHLENGTHNVPROC =
    Float Function(Uint32 path, Uint32 startSegment, Uint32 numSegments);

// typedef GLboolean (APIENTRYP PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
typedef PFNGLPOINTALONGPATHNVPROCDart =
    int Function(
      int path,
      int startSegment,
      int numSegments,
      double distance,
      Pointer<Float> x,
      Pointer<Float> y,
      Pointer<Float> tangentX,
      Pointer<Float> tangentY,
    );
typedef PFNGLPOINTALONGPATHNVPROC =
    Int32 Function(
      Uint32 path,
      Uint32 startSegment,
      Uint32 numSegments,
      Float distance,
      Pointer<Float> x,
      Pointer<Float> y,
      Pointer<Float> tangentX,
      Pointer<Float> tangentY,
    );

// typedef void (APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXLOAD3X2FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXLOAD3X2FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXLOAD3X3FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXLOAD3X3FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXLOADTRANSPOSE3X3FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXMULT3X2FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXMULT3X2FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXMULT3X3FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXMULT3X3FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)
typedef PFNGLMATRIXMULTTRANSPOSE3X3FNVPROCDart =
    void Function(int matrixMode, Pointer<Float> m);
typedef PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC =
    Void Function(Uint32 matrixMode, Pointer<Float> m);

// typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
typedef PFNGLSTENCILTHENCOVERFILLPATHNVPROCDart =
    void Function(int path, int fillMode, int mask, int coverMode);
typedef PFNGLSTENCILTHENCOVERFILLPATHNVPROC =
    Void Function(Uint32 path, Uint32 fillMode, Uint32 mask, Uint32 coverMode);

// typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
typedef PFNGLSTENCILTHENCOVERSTROKEPATHNVPROCDart =
    void Function(int path, int reference, int mask, int coverMode);
typedef PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC =
    Void Function(Uint32 path, Int32 reference, Uint32 mask, Uint32 coverMode);

// typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int fillMode,
      int mask,
      int coverMode,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Uint32 fillMode,
      Uint32 mask,
      Uint32 coverMode,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
typedef PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROCDart =
    void Function(
      int numPaths,
      int pathNameType,
      Pointer<NativeType> paths,
      int pathBase,
      int reference,
      int mask,
      int coverMode,
      int transformType,
      Pointer<Float> transformValues,
    );
typedef PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC =
    Void Function(
      Uint32 numPaths,
      Uint32 pathNameType,
      Pointer<NativeType> paths,
      Uint32 pathBase,
      Int32 reference,
      Uint32 mask,
      Uint32 coverMode,
      Uint32 transformType,
      Pointer<Float> transformValues,
    );

// typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount)
typedef PFNGLPATHGLYPHINDEXRANGENVPROCDart =
    int Function(
      int fontTarget,
      Pointer<NativeType> fontName,
      int fontStyle,
      int pathParameterTemplate,
      double emScale,
      Pointer<Uint32> baseAndCount,
    );
typedef PFNGLPATHGLYPHINDEXRANGENVPROC =
    Uint32 Function(
      Uint32 fontTarget,
      Pointer<NativeType> fontName,
      Uint32 fontStyle,
      Uint32 pathParameterTemplate,
      Float emScale,
      Pointer<Uint32> baseAndCount,
    );

// typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
typedef PFNGLPATHGLYPHINDEXARRAYNVPROCDart =
    int Function(
      int firstPathName,
      int fontTarget,
      Pointer<NativeType> fontName,
      int fontStyle,
      int firstGlyphIndex,
      int numGlyphs,
      int pathParameterTemplate,
      double emScale,
    );
typedef PFNGLPATHGLYPHINDEXARRAYNVPROC =
    Uint32 Function(
      Uint32 firstPathName,
      Uint32 fontTarget,
      Pointer<NativeType> fontName,
      Uint32 fontStyle,
      Uint32 firstGlyphIndex,
      Uint32 numGlyphs,
      Uint32 pathParameterTemplate,
      Float emScale,
    );

// typedef GLenum (APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
typedef PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROCDart =
    int Function(
      int firstPathName,
      int fontTarget,
      Pointer<Uint32> fontSize,
      Pointer<NativeType> fontData,
      int faceIndex,
      int firstGlyphIndex,
      int numGlyphs,
      int pathParameterTemplate,
      double emScale,
    );
typedef PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC =
    Uint32 Function(
      Uint32 firstPathName,
      Uint32 fontTarget,
      Pointer<Uint32> fontSize,
      Pointer<NativeType> fontData,
      Uint32 faceIndex,
      Uint32 firstGlyphIndex,
      Uint32 numGlyphs,
      Uint32 pathParameterTemplate,
      Float emScale,
    );

// typedef void (APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)
typedef PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROCDart =
    void Function(
      int program,
      int location,
      int genMode,
      int components,
      Pointer<Float> coeffs,
    );
typedef PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 genMode,
      Int32 components,
      Pointer<Float> coeffs,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params)
typedef PFNGLGETPROGRAMRESOURCEFVNVPROCDart =
    void Function(
      int program,
      int programInterface,
      int index,
      int propCount,
      Pointer<Uint32> props,
      int count,
      Pointer<Uint32> length,
      Pointer<Float> params,
    );
typedef PFNGLGETPROGRAMRESOURCEFVNVPROC =
    Void Function(
      Uint32 program,
      Uint32 programInterface,
      Uint32 index,
      Uint32 propCount,
      Pointer<Uint32> props,
      Uint32 count,
      Pointer<Uint32> length,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
typedef PFNGLPATHCOLORGENNVPROCDart =
    void Function(
      int color,
      int genMode,
      int colorFormat,
      Pointer<Float> coeffs,
    );
typedef PFNGLPATHCOLORGENNVPROC =
    Void Function(
      Uint32 color,
      Uint32 genMode,
      Uint32 colorFormat,
      Pointer<Float> coeffs,
    );

// typedef void (APIENTRYP PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
typedef PFNGLPATHTEXGENNVPROCDart =
    void Function(
      int texCoordSet,
      int genMode,
      int components,
      Pointer<Float> coeffs,
    );
typedef PFNGLPATHTEXGENNVPROC =
    Void Function(
      Uint32 texCoordSet,
      Uint32 genMode,
      Int32 components,
      Pointer<Float> coeffs,
    );

// typedef void (APIENTRYP PFNGLPATHFOGGENNVPROC) (GLenum genMode)
typedef PFNGLPATHFOGGENNVPROCDart = void Function(int genMode);
typedef PFNGLPATHFOGGENNVPROC = Void Function(Uint32 genMode);

// typedef void (APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value)
typedef PFNGLGETPATHCOLORGENIVNVPROCDart =
    void Function(int color, int pname, Pointer<Int32> value);
typedef PFNGLGETPATHCOLORGENIVNVPROC =
    Void Function(Uint32 color, Uint32 pname, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value)
typedef PFNGLGETPATHCOLORGENFVNVPROCDart =
    void Function(int color, int pname, Pointer<Float> value);
typedef PFNGLGETPATHCOLORGENFVNVPROC =
    Void Function(Uint32 color, Uint32 pname, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value)
typedef PFNGLGETPATHTEXGENIVNVPROCDart =
    void Function(int texCoordSet, int pname, Pointer<Int32> value);
typedef PFNGLGETPATHTEXGENIVNVPROC =
    Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Int32> value);

// typedef void (APIENTRYP PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value)
typedef PFNGLGETPATHTEXGENFVNVPROCDart =
    void Function(int texCoordSet, int pname, Pointer<Float> value);
typedef PFNGLGETPATHTEXGENFVNVPROC =
    Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Float> value);

// typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const void *pointer)
typedef PFNGLPIXELDATARANGENVPROCDart =
    void Function(int target, int length, Pointer<NativeType> pointer);
typedef PFNGLPIXELDATARANGENVPROC =
    Void Function(Uint32 target, Uint32 length, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target)
typedef PFNGLFLUSHPIXELDATARANGENVPROCDart = void Function(int target);
typedef PFNGLFLUSHPIXELDATARANGENVPROC = Void Function(Uint32 target);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param)
typedef PFNGLPOINTPARAMETERINVPROCDart = void Function(int pname, int param);
typedef PFNGLPOINTPARAMETERINVPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params)
typedef PFNGLPOINTPARAMETERIVNVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLPOINTPARAMETERIVNVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
typedef PFNGLPRESENTFRAMEKEYEDNVPROCDart =
    void Function(
      int videoSlot,
      int minPresentTime,
      int beginPresentTimeId,
      int presentDurationId,
      int type,
      int target0,
      int fill0,
      int key0,
      int target1,
      int fill1,
      int key1,
    );
typedef PFNGLPRESENTFRAMEKEYEDNVPROC =
    Void Function(
      Uint32 videoSlot,
      Uint64 minPresentTime,
      Uint32 beginPresentTimeId,
      Uint32 presentDurationId,
      Uint32 type,
      Uint32 target0,
      Uint32 fill0,
      Uint32 key0,
      Uint32 target1,
      Uint32 fill1,
      Uint32 key1,
    );

// typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
typedef PFNGLPRESENTFRAMEDUALFILLNVPROCDart =
    void Function(
      int videoSlot,
      int minPresentTime,
      int beginPresentTimeId,
      int presentDurationId,
      int type,
      int target0,
      int fill0,
      int target1,
      int fill1,
      int target2,
      int fill2,
      int target3,
      int fill3,
    );
typedef PFNGLPRESENTFRAMEDUALFILLNVPROC =
    Void Function(
      Uint32 videoSlot,
      Uint64 minPresentTime,
      Uint32 beginPresentTimeId,
      Uint32 presentDurationId,
      Uint32 type,
      Uint32 target0,
      Uint32 fill0,
      Uint32 target1,
      Uint32 fill1,
      Uint32 target2,
      Uint32 fill2,
      Uint32 target3,
      Uint32 fill3,
    );

// typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params)
typedef PFNGLGETVIDEOIVNVPROCDart =
    void Function(int videoSlot, int pname, Pointer<Int32> params);
typedef PFNGLGETVIDEOIVNVPROC =
    Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params)
typedef PFNGLGETVIDEOUIVNVPROCDart =
    void Function(int videoSlot, int pname, Pointer<Uint32> params);
typedef PFNGLGETVIDEOUIVNVPROC =
    Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Uint32> params);

// typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params)
typedef PFNGLGETVIDEOI64VNVPROCDart =
    void Function(int videoSlot, int pname, Pointer<Int64> params);
typedef PFNGLGETVIDEOI64VNVPROC =
    Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params)
typedef PFNGLGETVIDEOUI64VNVPROCDart =
    void Function(int videoSlot, int pname, Pointer<Uint64> params);
typedef PFNGLGETVIDEOUI64VNVPROC =
    Void Function(Uint32 videoSlot, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void)
typedef PFNGLPRIMITIVERESTARTNVPROCDart = void Function();
typedef PFNGLPRIMITIVERESTARTNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index)
typedef PFNGLPRIMITIVERESTARTINDEXNVPROCDart = void Function(int index);
typedef PFNGLPRIMITIVERESTARTINDEXNVPROC = Void Function(Uint32 index);

// typedef GLint (APIENTRYP PFNGLQUERYRESOURCENVPROC) (GLenum queryType, GLint tagId, GLuint count, GLint *buffer)
typedef PFNGLQUERYRESOURCENVPROCDart =
    int Function(int queryType, int tagId, int count, Pointer<Int32> buffer);
typedef PFNGLQUERYRESOURCENVPROC =
    Int32 Function(
      Uint32 queryType,
      Int32 tagId,
      Uint32 count,
      Pointer<Int32> buffer,
    );

// typedef void (APIENTRYP PFNGLGENQUERYRESOURCETAGNVPROC) (GLsizei n, GLint *tagIds)
typedef PFNGLGENQUERYRESOURCETAGNVPROCDart =
    void Function(int n, Pointer<Int32> tagIds);
typedef PFNGLGENQUERYRESOURCETAGNVPROC =
    Void Function(Uint32 n, Pointer<Int32> tagIds);

// typedef void (APIENTRYP PFNGLDELETEQUERYRESOURCETAGNVPROC) (GLsizei n, const GLint *tagIds)
typedef PFNGLDELETEQUERYRESOURCETAGNVPROCDart =
    void Function(int n, Pointer<Int32> tagIds);
typedef PFNGLDELETEQUERYRESOURCETAGNVPROC =
    Void Function(Uint32 n, Pointer<Int32> tagIds);

// typedef void (APIENTRYP PFNGLQUERYRESOURCETAGNVPROC) (GLint tagId, const GLchar *tagString)
typedef PFNGLQUERYRESOURCETAGNVPROCDart =
    void Function(int tagId, Pointer<Utf8> tagString);
typedef PFNGLQUERYRESOURCETAGNVPROC =
    Void Function(Int32 tagId, Pointer<Utf8> tagString);

// typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLCOMBINERPARAMETERFVNVPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLCOMBINERPARAMETERFVNVPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param)
typedef PFNGLCOMBINERPARAMETERFNVPROCDart =
    void Function(int pname, double param);
typedef PFNGLCOMBINERPARAMETERFNVPROC =
    Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params)
typedef PFNGLCOMBINERPARAMETERIVNVPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLCOMBINERPARAMETERIVNVPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param)
typedef PFNGLCOMBINERPARAMETERINVPROCDart = void Function(int pname, int param);
typedef PFNGLCOMBINERPARAMETERINVPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
typedef PFNGLCOMBINERINPUTNVPROCDart =
    void Function(
      int stage,
      int portion,
      int variable,
      int input,
      int mapping,
      int componentUsage,
    );
typedef PFNGLCOMBINERINPUTNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 variable,
      Uint32 input,
      Uint32 mapping,
      Uint32 componentUsage,
    );

// typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
typedef PFNGLCOMBINEROUTPUTNVPROCDart =
    void Function(
      int stage,
      int portion,
      int abOutput,
      int cdOutput,
      int sumOutput,
      int scale,
      int bias,
      int abDotProduct,
      int cdDotProduct,
      int muxSum,
    );
typedef PFNGLCOMBINEROUTPUTNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 abOutput,
      Uint32 cdOutput,
      Uint32 sumOutput,
      Uint32 scale,
      Uint32 bias,
      Int32 abDotProduct,
      Int32 cdDotProduct,
      Int32 muxSum,
    );

// typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
typedef PFNGLFINALCOMBINERINPUTNVPROCDart =
    void Function(int variable, int input, int mapping, int componentUsage);
typedef PFNGLFINALCOMBINERINPUTNVPROC =
    Void Function(
      Uint32 variable,
      Uint32 input,
      Uint32 mapping,
      Uint32 componentUsage,
    );

// typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
typedef PFNGLGETCOMBINERINPUTPARAMETERFVNVPROCDart =
    void Function(
      int stage,
      int portion,
      int variable,
      int pname,
      Pointer<Float> params,
    );
typedef PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 variable,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
typedef PFNGLGETCOMBINERINPUTPARAMETERIVNVPROCDart =
    void Function(
      int stage,
      int portion,
      int variable,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 variable,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
typedef PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROCDart =
    void Function(int stage, int portion, int pname, Pointer<Float> params);
typedef PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params)
typedef PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROCDart =
    void Function(int stage, int portion, int pname, Pointer<Int32> params);
typedef PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC =
    Void Function(
      Uint32 stage,
      Uint32 portion,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params)
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROCDart =
    void Function(int variable, int pname, Pointer<Float> params);
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC =
    Void Function(Uint32 variable, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params)
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROCDart =
    void Function(int variable, int pname, Pointer<Int32> params);
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC =
    Void Function(Uint32 variable, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params)
typedef PFNGLCOMBINERSTAGEPARAMETERFVNVPROCDart =
    void Function(int stage, int pname, Pointer<Float> params);
typedef PFNGLCOMBINERSTAGEPARAMETERFVNVPROC =
    Void Function(Uint32 stage, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params)
typedef PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROCDart =
    void Function(int stage, int pname, Pointer<Float> params);
typedef PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC =
    Void Function(Uint32 stage, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v)
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROCDart =
    void Function(int target, int start, int count, Pointer<Float> v);
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC =
    Void Function(Uint32 target, Uint32 start, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROCDart =
    void Function(int framebuffer, int start, int count, Pointer<Float> v);
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC =
    Void Function(
      Uint32 framebuffer,
      Uint32 start,
      Uint32 count,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC) (void)
typedef PFNGLRESOLVEDEPTHVALUESNVPROCDart = void Function();
typedef PFNGLRESOLVEDEPTHVALUESNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLSCISSOREXCLUSIVENVPROC) (GLint x, GLint y, GLsizei width, GLsizei height)
typedef PFNGLSCISSOREXCLUSIVENVPROCDart =
    void Function(int x, int y, int width, int height);
typedef PFNGLSCISSOREXCLUSIVENVPROC =
    Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height);

// typedef void (APIENTRYP PFNGLSCISSOREXCLUSIVEARRAYVNVPROC) (GLuint first, GLsizei count, const GLint *v)
typedef PFNGLSCISSOREXCLUSIVEARRAYVNVPROCDart =
    void Function(int first, int count, Pointer<Int32> v);
typedef PFNGLSCISSOREXCLUSIVEARRAYVNVPROC =
    Void Function(Uint32 first, Uint32 count, Pointer<Int32> v);

// typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access)
typedef PFNGLMAKEBUFFERRESIDENTNVPROCDart =
    void Function(int target, int access);
typedef PFNGLMAKEBUFFERRESIDENTNVPROC =
    Void Function(Uint32 target, Uint32 access);

// typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target)
typedef PFNGLMAKEBUFFERNONRESIDENTNVPROCDart = void Function(int target);
typedef PFNGLMAKEBUFFERNONRESIDENTNVPROC = Void Function(Uint32 target);

// typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target)
typedef PFNGLISBUFFERRESIDENTNVPROCDart = int Function(int target);
typedef PFNGLISBUFFERRESIDENTNVPROC = Int32 Function(Uint32 target);

// typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access)
typedef PFNGLMAKENAMEDBUFFERRESIDENTNVPROCDart =
    void Function(int buffer, int access);
typedef PFNGLMAKENAMEDBUFFERRESIDENTNVPROC =
    Void Function(Uint32 buffer, Uint32 access);

// typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer)
typedef PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROCDart = void Function(int buffer);
typedef PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = Void Function(Uint32 buffer);

// typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer)
typedef PFNGLISNAMEDBUFFERRESIDENTNVPROCDart = int Function(int buffer);
typedef PFNGLISNAMEDBUFFERRESIDENTNVPROC = Int32 Function(Uint32 buffer);

// typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params)
typedef PFNGLGETBUFFERPARAMETERUI64VNVPROCDart =
    void Function(int target, int pname, Pointer<Uint64> params);
typedef PFNGLGETBUFFERPARAMETERUI64VNVPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params)
typedef PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROCDart =
    void Function(int buffer, int pname, Pointer<Uint64> params);
typedef PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC =
    Void Function(Uint32 buffer, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result)
typedef PFNGLGETINTEGERUI64VNVPROCDart =
    void Function(int value, Pointer<Uint64> result);
typedef PFNGLGETINTEGERUI64VNVPROC =
    Void Function(Uint32 value, Pointer<Uint64> result);

// typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value)
typedef PFNGLUNIFORMUI64NVPROCDart = void Function(int location, int value);
typedef PFNGLUNIFORMUI64NVPROC = Void Function(Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLUNIFORMUI64VNVPROCDart =
    void Function(int location, int count, Pointer<Uint64> value);
typedef PFNGLUNIFORMUI64VNVPROC =
    Void Function(Int32 location, Uint32 count, Pointer<Uint64> value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value)
typedef PFNGLPROGRAMUNIFORMUI64NVPROCDart =
    void Function(int program, int location, int value);
typedef PFNGLPROGRAMUNIFORMUI64NVPROC =
    Void Function(Uint32 program, Int32 location, Uint64 value);

// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
typedef PFNGLPROGRAMUNIFORMUI64VNVPROCDart =
    void Function(int program, int location, int count, Pointer<Uint64> value);
typedef PFNGLPROGRAMUNIFORMUI64VNVPROC =
    Void Function(
      Uint32 program,
      Int32 location,
      Uint32 count,
      Pointer<Uint64> value,
    );

// typedef void (APIENTRYP PFNGLBINDSHADINGRATEIMAGENVPROC) (GLuint texture)
typedef PFNGLBINDSHADINGRATEIMAGENVPROCDart = void Function(int texture);
typedef PFNGLBINDSHADINGRATEIMAGENVPROC = Void Function(Uint32 texture);

// typedef void (APIENTRYP PFNGLGETSHADINGRATEIMAGEPALETTENVPROC) (GLuint viewport, GLuint entry, GLenum *rate)
typedef PFNGLGETSHADINGRATEIMAGEPALETTENVPROCDart =
    void Function(int viewport, int entry, Pointer<Uint32> rate);
typedef PFNGLGETSHADINGRATEIMAGEPALETTENVPROC =
    Void Function(Uint32 viewport, Uint32 entry, Pointer<Uint32> rate);

// typedef void (APIENTRYP PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC) (GLenum rate, GLuint samples, GLuint index, GLint *location)
typedef PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROCDart =
    void Function(int rate, int samples, int index, Pointer<Int32> location);
typedef PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC =
    Void Function(
      Uint32 rate,
      Uint32 samples,
      Uint32 index,
      Pointer<Int32> location,
    );

// typedef void (APIENTRYP PFNGLSHADINGRATEIMAGEBARRIERNVPROC) (GLboolean synchronize)
typedef PFNGLSHADINGRATEIMAGEBARRIERNVPROCDart = void Function(int synchronize);
typedef PFNGLSHADINGRATEIMAGEBARRIERNVPROC = Void Function(Int32 synchronize);

// typedef void (APIENTRYP PFNGLSHADINGRATEIMAGEPALETTENVPROC) (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates)
typedef PFNGLSHADINGRATEIMAGEPALETTENVPROCDart =
    void Function(int viewport, int first, int count, Pointer<Uint32> rates);
typedef PFNGLSHADINGRATEIMAGEPALETTENVPROC =
    Void Function(
      Uint32 viewport,
      Uint32 first,
      Uint32 count,
      Pointer<Uint32> rates,
    );

// typedef void (APIENTRYP PFNGLSHADINGRATESAMPLEORDERNVPROC) (GLenum order)
typedef PFNGLSHADINGRATESAMPLEORDERNVPROCDart = void Function(int order);
typedef PFNGLSHADINGRATESAMPLEORDERNVPROC = Void Function(Uint32 order);

// typedef void (APIENTRYP PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC) (GLenum rate, GLuint samples, const GLint *locations)
typedef PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROCDart =
    void Function(int rate, int samples, Pointer<Int32> locations);
typedef PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC =
    Void Function(Uint32 rate, Uint32 samples, Pointer<Int32> locations);

// typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void)
typedef PFNGLTEXTUREBARRIERNVPROCDart = void Function();
typedef PFNGLTEXTUREBARRIERNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
typedef PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROCDart =
    void Function(
      int target,
      int coverageSamples,
      int colorSamples,
      int internalFormat,
      int width,
      int height,
      int fixedSampleLocations,
    );
typedef PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC =
    Void Function(
      Uint32 target,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
typedef PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROCDart =
    void Function(
      int target,
      int coverageSamples,
      int colorSamples,
      int internalFormat,
      int width,
      int height,
      int depth,
      int fixedSampleLocations,
    );
typedef PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC =
    Void Function(
      Uint32 target,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROCDart =
    void Function(
      int texture,
      int target,
      int samples,
      int internalFormat,
      int width,
      int height,
      int fixedSampleLocations,
    );
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 samples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROCDart =
    void Function(
      int texture,
      int target,
      int samples,
      int internalFormat,
      int width,
      int height,
      int depth,
      int fixedSampleLocations,
    );
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 samples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROCDart =
    void Function(
      int texture,
      int target,
      int coverageSamples,
      int colorSamples,
      int internalFormat,
      int width,
      int height,
      int fixedSampleLocations,
    );
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROCDart =
    void Function(
      int texture,
      int target,
      int coverageSamples,
      int colorSamples,
      int internalFormat,
      int width,
      int height,
      int depth,
      int fixedSampleLocations,
    );
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC =
    Void Function(
      Uint32 texture,
      Uint32 target,
      Uint32 coverageSamples,
      Uint32 colorSamples,
      Int32 internalFormat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Int32 fixedSampleLocations,
    );

// typedef void (APIENTRYP PFNGLCREATESEMAPHORESNVPROC) (GLsizei n, GLuint *semaphores)
typedef PFNGLCREATESEMAPHORESNVPROCDart =
    void Function(int n, Pointer<Uint32> semaphores);
typedef PFNGLCREATESEMAPHORESNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> semaphores);

// typedef void (APIENTRYP PFNGLSEMAPHOREPARAMETERIVNVPROC) (GLuint semaphore, GLenum pname, const GLint *params)
typedef PFNGLSEMAPHOREPARAMETERIVNVPROCDart =
    void Function(int semaphore, int pname, Pointer<Int32> params);
typedef PFNGLSEMAPHOREPARAMETERIVNVPROC =
    Void Function(Uint32 semaphore, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETSEMAPHOREPARAMETERIVNVPROC) (GLuint semaphore, GLenum pname, GLint *params)
typedef PFNGLGETSEMAPHOREPARAMETERIVNVPROCDart =
    void Function(int semaphore, int pname, Pointer<Int32> params);
typedef PFNGLGETSEMAPHOREPARAMETERIVNVPROC =
    Void Function(Uint32 semaphore, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode)
typedef PFNGLBEGINTRANSFORMFEEDBACKNVPROCDart =
    void Function(int primitiveMode);
typedef PFNGLBEGINTRANSFORMFEEDBACKNVPROC = Void Function(Uint32 primitiveMode);

// typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void)
typedef PFNGLENDTRANSFORMFEEDBACKNVPROCDart = void Function();
typedef PFNGLENDTRANSFORMFEEDBACKNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLenum bufferMode)
typedef PFNGLTRANSFORMFEEDBACKATTRIBSNVPROCDart =
    void Function(int count, Pointer<Int32> attribs, int bufferMode);
typedef PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC =
    Void Function(Uint32 count, Pointer<Int32> attribs, Uint32 bufferMode);

// typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
typedef PFNGLBINDBUFFERRANGENVPROCDart =
    void Function(
      int target,
      int index,
      int buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );
typedef PFNGLBINDBUFFERRANGENVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
      Pointer<Uint32> size,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
typedef PFNGLBINDBUFFEROFFSETNVPROCDart =
    void Function(
      int target,
      int index,
      int buffer,
      Pointer<NativeType> offset,
    );
typedef PFNGLBINDBUFFEROFFSETNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 buffer,
      Pointer<NativeType> offset,
    );

// typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer)
typedef PFNGLBINDBUFFERBASENVPROCDart =
    void Function(int target, int index, int buffer);
typedef PFNGLBINDBUFFERBASENVPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 buffer);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
typedef PFNGLTRANSFORMFEEDBACKVARYINGSNVPROCDart =
    void Function(
      int program,
      int count,
      Pointer<Int32> locations,
      int bufferMode,
    );
typedef PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC =
    Void Function(
      Uint32 program,
      Uint32 count,
      Pointer<Int32> locations,
      Uint32 bufferMode,
    );

// typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name)
typedef PFNGLACTIVEVARYINGNVPROCDart =
    void Function(int program, Pointer<Utf8> name);
typedef PFNGLACTIVEVARYINGNVPROC =
    Void Function(Uint32 program, Pointer<Utf8> name);

// typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name)
typedef PFNGLGETVARYINGLOCATIONNVPROCDart =
    int Function(int program, Pointer<Utf8> name);
typedef PFNGLGETVARYINGLOCATIONNVPROC =
    Int32 Function(Uint32 program, Pointer<Utf8> name);

// typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
typedef PFNGLGETACTIVEVARYINGNVPROCDart =
    void Function(
      int program,
      int index,
      int bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );
typedef PFNGLGETACTIVEVARYINGNVPROC =
    Void Function(
      Uint32 program,
      Uint32 index,
      Uint32 bufSize,
      Pointer<Uint32> length,
      Pointer<Uint32> size,
      Pointer<Uint32> type,
      Pointer<Int8> name,
    );

// typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location)
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROCDart =
    void Function(int program, int index, Pointer<Int32> location);
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC =
    Void Function(Uint32 program, Uint32 index, Pointer<Int32> location);

// typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode)
typedef PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROCDart =
    void Function(
      int count,
      Pointer<Int32> attribs,
      int nbuffers,
      Pointer<Int32> bufstreams,
      int bufferMode,
    );
typedef PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC =
    Void Function(
      Uint32 count,
      Pointer<Int32> attribs,
      Uint32 nbuffers,
      Pointer<Int32> bufstreams,
      Uint32 bufferMode,
    );

// typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id)
typedef PFNGLBINDTRANSFORMFEEDBACKNVPROCDart =
    void Function(int target, int id);
typedef PFNGLBINDTRANSFORMFEEDBACKNVPROC =
    Void Function(Uint32 target, Uint32 id);

// typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids)
typedef PFNGLDELETETRANSFORMFEEDBACKSNVPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLDELETETRANSFORMFEEDBACKSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids)
typedef PFNGLGENTRANSFORMFEEDBACKSNVPROCDart =
    void Function(int n, Pointer<Uint32> ids);
typedef PFNGLGENTRANSFORMFEEDBACKSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> ids);

// typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id)
typedef PFNGLISTRANSFORMFEEDBACKNVPROCDart = int Function(int id);
typedef PFNGLISTRANSFORMFEEDBACKNVPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void)
typedef PFNGLPAUSETRANSFORMFEEDBACKNVPROCDart = void Function();
typedef PFNGLPAUSETRANSFORMFEEDBACKNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void)
typedef PFNGLRESUMETRANSFORMFEEDBACKNVPROCDart = void Function();
typedef PFNGLRESUMETRANSFORMFEEDBACKNVPROC = Void Function();

// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id)
typedef PFNGLDRAWTRANSFORMFEEDBACKNVPROCDart = void Function(int mode, int id);
typedef PFNGLDRAWTRANSFORMFEEDBACKNVPROC =
    Void Function(Uint32 mode, Uint32 id);

// typedef void (APIENTRYP PFNGLVDPAUINITNVPROC) (const void *vdpDevice, const void *getProcAddress)
typedef PFNGLVDPAUINITNVPROCDart =
    void Function(
      Pointer<NativeType> vdpDevice,
      Pointer<NativeType> getProcAddress,
    );
typedef PFNGLVDPAUINITNVPROC =
    Void Function(
      Pointer<NativeType> vdpDevice,
      Pointer<NativeType> getProcAddress,
    );

// typedef void (APIENTRYP PFNGLVDPAUFININVPROC) (void)
typedef PFNGLVDPAUFININVPROCDart = void Function();
typedef PFNGLVDPAUFININVPROC = Void Function();

// typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
typedef PFNGLVDPAUREGISTERVIDEOSURFACENVPROCDart =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      int target,
      int numTextureNames,
      Pointer<Uint32> textureNames,
    );
typedef PFNGLVDPAUREGISTERVIDEOSURFACENVPROC =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      Uint32 target,
      Uint32 numTextureNames,
      Pointer<Uint32> textureNames,
    );

// typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
typedef PFNGLVDPAUREGISTEROUTPUTSURFACENVPROCDart =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      int target,
      int numTextureNames,
      Pointer<Uint32> textureNames,
    );
typedef PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      Uint32 target,
      Uint32 numTextureNames,
      Pointer<Uint32> textureNames,
    );

// typedef GLboolean (APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface)
typedef PFNGLVDPAUISSURFACENVPROCDart =
    int Function(Pointer<NativeType> surface);
typedef PFNGLVDPAUISSURFACENVPROC = Int32 Function(Pointer<NativeType> surface);

// typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface)
typedef PFNGLVDPAUUNREGISTERSURFACENVPROCDart =
    void Function(Pointer<NativeType> surface);
typedef PFNGLVDPAUUNREGISTERSURFACENVPROC =
    Void Function(Pointer<NativeType> surface);

// typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values)
typedef PFNGLVDPAUGETSURFACEIVNVPROCDart =
    void Function(
      Pointer<NativeType> surface,
      int pname,
      int count,
      Pointer<Uint32> length,
      Pointer<Int32> values,
    );
typedef PFNGLVDPAUGETSURFACEIVNVPROC =
    Void Function(
      Pointer<NativeType> surface,
      Uint32 pname,
      Uint32 count,
      Pointer<Uint32> length,
      Pointer<Int32> values,
    );

// typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access)
typedef PFNGLVDPAUSURFACEACCESSNVPROCDart =
    void Function(Pointer<NativeType> surface, int access);
typedef PFNGLVDPAUSURFACEACCESSNVPROC =
    Void Function(Pointer<NativeType> surface, Uint32 access);

// typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
typedef PFNGLVDPAUMAPSURFACESNVPROCDart =
    void Function(int numSurfaces, Pointer<Pointer<NativeType>> surfaces);
typedef PFNGLVDPAUMAPSURFACESNVPROC =
    Void Function(Uint32 numSurfaces, Pointer<Pointer<NativeType>> surfaces);

// typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces)
typedef PFNGLVDPAUUNMAPSURFACESNVPROCDart =
    void Function(int numSurface, Pointer<Pointer<NativeType>> surfaces);
typedef PFNGLVDPAUUNMAPSURFACESNVPROC =
    Void Function(Uint32 numSurface, Pointer<Pointer<NativeType>> surfaces);

// typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure)
typedef PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROCDart =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      int target,
      int numTextureNames,
      Pointer<Uint32> textureNames,
      int isFrameStructure,
    );
typedef PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC =
    Pointer<NativeType> Function(
      Pointer<NativeType> vdpSurface,
      Uint32 target,
      Uint32 numTextureNames,
      Pointer<Uint32> textureNames,
      Int32 isFrameStructure,
    );

// typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void)
typedef PFNGLFLUSHVERTEXARRAYRANGENVPROCDart = void Function();
typedef PFNGLFLUSHVERTEXARRAYRANGENVPROC = Void Function();

// typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const void *pointer)
typedef PFNGLVERTEXARRAYRANGENVPROCDart =
    void Function(int length, Pointer<NativeType> pointer);
typedef PFNGLVERTEXARRAYRANGENVPROC =
    Void Function(Uint32 length, Pointer<NativeType> pointer);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x)
typedef PFNGLVERTEXATTRIBL1I64NVPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBL1I64NVPROC = Void Function(Uint32 index, Int64 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y)
typedef PFNGLVERTEXATTRIBL2I64NVPROCDart =
    void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBL2I64NVPROC =
    Void Function(Uint32 index, Int64 x, Int64 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
typedef PFNGLVERTEXATTRIBL3I64NVPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBL3I64NVPROC =
    Void Function(Uint32 index, Int64 x, Int64 y, Int64 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
typedef PFNGLVERTEXATTRIBL4I64NVPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBL4I64NVPROC =
    Void Function(Uint32 index, Int64 x, Int64 y, Int64 z, Int64 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v)
typedef PFNGLVERTEXATTRIBL1I64VNVPROCDart =
    void Function(int index, Pointer<Int64> v);
typedef PFNGLVERTEXATTRIBL1I64VNVPROC =
    Void Function(Uint32 index, Pointer<Int64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v)
typedef PFNGLVERTEXATTRIBL2I64VNVPROCDart =
    void Function(int index, Pointer<Int64> v);
typedef PFNGLVERTEXATTRIBL2I64VNVPROC =
    Void Function(Uint32 index, Pointer<Int64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v)
typedef PFNGLVERTEXATTRIBL3I64VNVPROCDart =
    void Function(int index, Pointer<Int64> v);
typedef PFNGLVERTEXATTRIBL3I64VNVPROC =
    Void Function(Uint32 index, Pointer<Int64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v)
typedef PFNGLVERTEXATTRIBL4I64VNVPROCDart =
    void Function(int index, Pointer<Int64> v);
typedef PFNGLVERTEXATTRIBL4I64VNVPROC =
    Void Function(Uint32 index, Pointer<Int64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x)
typedef PFNGLVERTEXATTRIBL1UI64NVPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIBL1UI64NVPROC = Void Function(Uint32 index, Uint64 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y)
typedef PFNGLVERTEXATTRIBL2UI64NVPROCDart =
    void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIBL2UI64NVPROC =
    Void Function(Uint32 index, Uint64 x, Uint64 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
typedef PFNGLVERTEXATTRIBL3UI64NVPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIBL3UI64NVPROC =
    Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
typedef PFNGLVERTEXATTRIBL4UI64NVPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIBL4UI64NVPROC =
    Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z, Uint64 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v)
typedef PFNGLVERTEXATTRIBL1UI64VNVPROCDart =
    void Function(int index, Pointer<Uint64> v);
typedef PFNGLVERTEXATTRIBL1UI64VNVPROC =
    Void Function(Uint32 index, Pointer<Uint64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v)
typedef PFNGLVERTEXATTRIBL2UI64VNVPROCDart =
    void Function(int index, Pointer<Uint64> v);
typedef PFNGLVERTEXATTRIBL2UI64VNVPROC =
    Void Function(Uint32 index, Pointer<Uint64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v)
typedef PFNGLVERTEXATTRIBL3UI64VNVPROCDart =
    void Function(int index, Pointer<Uint64> v);
typedef PFNGLVERTEXATTRIBL3UI64VNVPROC =
    Void Function(Uint32 index, Pointer<Uint64> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v)
typedef PFNGLVERTEXATTRIBL4UI64VNVPROCDart =
    void Function(int index, Pointer<Uint64> v);
typedef PFNGLVERTEXATTRIBL4UI64VNVPROC =
    Void Function(Uint32 index, Pointer<Uint64> v);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params)
typedef PFNGLGETVERTEXATTRIBLI64VNVPROCDart =
    void Function(int index, int pname, Pointer<Int64> params);
typedef PFNGLGETVERTEXATTRIBLI64VNVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int64> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params)
typedef PFNGLGETVERTEXATTRIBLUI64VNVPROCDart =
    void Function(int index, int pname, Pointer<Uint64> params);
typedef PFNGLGETVERTEXATTRIBLUI64VNVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Uint64> params);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)
typedef PFNGLVERTEXATTRIBLFORMATNVPROCDart =
    void Function(int index, int size, int type, int stride);
typedef PFNGLVERTEXATTRIBLFORMATNVPROC =
    Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
typedef PFNGLBUFFERADDRESSRANGENVPROCDart =
    void Function(int pname, int index, int address, Pointer<Uint32> length);
typedef PFNGLBUFFERADDRESSRANGENVPROC =
    Void Function(
      Uint32 pname,
      Uint32 index,
      Uint64 address,
      Pointer<Uint32> length,
    );

// typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
typedef PFNGLVERTEXFORMATNVPROCDart =
    void Function(int size, int type, int stride);
typedef PFNGLVERTEXFORMATNVPROC =
    Void Function(Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride)
typedef PFNGLNORMALFORMATNVPROCDart = void Function(int type, int stride);
typedef PFNGLNORMALFORMATNVPROC = Void Function(Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
typedef PFNGLCOLORFORMATNVPROCDart =
    void Function(int size, int type, int stride);
typedef PFNGLCOLORFORMATNVPROC =
    Void Function(Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride)
typedef PFNGLINDEXFORMATNVPROCDart = void Function(int type, int stride);
typedef PFNGLINDEXFORMATNVPROC = Void Function(Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
typedef PFNGLTEXCOORDFORMATNVPROCDart =
    void Function(int size, int type, int stride);
typedef PFNGLTEXCOORDFORMATNVPROC =
    Void Function(Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride)
typedef PFNGLEDGEFLAGFORMATNVPROCDart = void Function(int stride);
typedef PFNGLEDGEFLAGFORMATNVPROC = Void Function(Uint32 stride);

// typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
typedef PFNGLSECONDARYCOLORFORMATNVPROCDart =
    void Function(int size, int type, int stride);
typedef PFNGLSECONDARYCOLORFORMATNVPROC =
    Void Function(Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride)
typedef PFNGLFOGCOORDFORMATNVPROCDart = void Function(int type, int stride);
typedef PFNGLFOGCOORDFORMATNVPROC = Void Function(Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
typedef PFNGLVERTEXATTRIBFORMATNVPROCDart =
    void Function(int index, int size, int type, int normalized, int stride);
typedef PFNGLVERTEXATTRIBFORMATNVPROC =
    Void Function(
      Uint32 index,
      Int32 size,
      Uint32 type,
      Int32 normalized,
      Uint32 stride,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)
typedef PFNGLVERTEXATTRIBIFORMATNVPROCDart =
    void Function(int index, int size, int type, int stride);
typedef PFNGLVERTEXATTRIBIFORMATNVPROC =
    Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride);

// typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result)
typedef Pfnglgetintegerui64IVnvprocDart =
    void Function(int value, int index, Pointer<Uint64> result);
typedef Pfnglgetintegerui64IVnvproc =
    Void Function(Uint32 value, Uint32 index, Pointer<Uint64> result);

// typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences)
typedef PFNGLAREPROGRAMSRESIDENTNVPROCDart =
    int Function(int n, Pointer<Uint32> programs, Pointer<Int32> residences);
typedef PFNGLAREPROGRAMSRESIDENTNVPROC =
    Int32 Function(
      Uint32 n,
      Pointer<Uint32> programs,
      Pointer<Int32> residences,
    );

// typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id)
typedef PFNGLBINDPROGRAMNVPROCDart = void Function(int target, int id);
typedef PFNGLBINDPROGRAMNVPROC = Void Function(Uint32 target, Uint32 id);

// typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs)
typedef PFNGLDELETEPROGRAMSNVPROCDart =
    void Function(int n, Pointer<Uint32> programs);
typedef PFNGLDELETEPROGRAMSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> programs);

// typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params)
typedef PFNGLEXECUTEPROGRAMNVPROCDart =
    void Function(int target, int id, Pointer<Float> params);
typedef PFNGLEXECUTEPROGRAMNVPROC =
    Void Function(Uint32 target, Uint32 id, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs)
typedef PFNGLGENPROGRAMSNVPROCDart =
    void Function(int n, Pointer<Uint32> programs);
typedef PFNGLGENPROGRAMSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> programs);

// typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETPROGRAMPARAMETERDVNVPROCDart =
    void Function(int target, int index, int pname, Pointer<Double> params);
typedef PFNGLGETPROGRAMPARAMETERDVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 pname,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETPROGRAMPARAMETERFVNVPROCDart =
    void Function(int target, int index, int pname, Pointer<Float> params);
typedef PFNGLGETPROGRAMPARAMETERFVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params)
typedef PFNGLGETPROGRAMIVNVPROCDart =
    void Function(int id, int pname, Pointer<Int32> params);
typedef PFNGLGETPROGRAMIVNVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program)
typedef PFNGLGETPROGRAMSTRINGNVPROCDart =
    void Function(int id, int pname, Pointer<Uint8> program);
typedef PFNGLGETPROGRAMSTRINGNVPROC =
    Void Function(Uint32 id, Uint32 pname, Pointer<Uint8> program);

// typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params)
typedef PFNGLGETTRACKMATRIXIVNVPROCDart =
    void Function(int target, int address, int pname, Pointer<Int32> params);
typedef PFNGLGETTRACKMATRIXIVNVPROC =
    Void Function(
      Uint32 target,
      Uint32 address,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params)
typedef PFNGLGETVERTEXATTRIBDVNVPROCDart =
    void Function(int index, int pname, Pointer<Double> params);
typedef PFNGLGETVERTEXATTRIBDVNVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Double> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params)
typedef PFNGLGETVERTEXATTRIBFVNVPROCDart =
    void Function(int index, int pname, Pointer<Float> params);
typedef PFNGLGETVERTEXATTRIBFVNVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params)
typedef PFNGLGETVERTEXATTRIBIVNVPROCDart =
    void Function(int index, int pname, Pointer<Int32> params);
typedef PFNGLGETVERTEXATTRIBIVNVPROC =
    Void Function(Uint32 index, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void **pointer)
typedef PFNGLGETVERTEXATTRIBPOINTERVNVPROCDart =
    void Function(int index, int pname, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLGETVERTEXATTRIBPOINTERVNVPROC =
    Void Function(
      Uint32 index,
      Uint32 pname,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id)
typedef PFNGLISPROGRAMNVPROCDart = int Function(int id);
typedef PFNGLISPROGRAMNVPROC = Int32 Function(Uint32 id);

// typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program)
typedef PFNGLLOADPROGRAMNVPROCDart =
    void Function(int target, int id, int len, Pointer<Uint8> program);
typedef PFNGLLOADPROGRAMNVPROC =
    Void Function(Uint32 target, Uint32 id, Uint32 len, Pointer<Uint8> program);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLPROGRAMPARAMETER4DNVPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMPARAMETER4DNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Double x,
      Double y,
      Double z,
      Double w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v)
typedef PFNGLPROGRAMPARAMETER4DVNVPROCDart =
    void Function(int target, int index, Pointer<Double> v);
typedef PFNGLPROGRAMPARAMETER4DVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLPROGRAMPARAMETER4FNVPROCDart =
    void Function(
      int target,
      int index,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLPROGRAMPARAMETER4FNVPROC =
    Void Function(
      Uint32 target,
      Uint32 index,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v)
typedef PFNGLPROGRAMPARAMETER4FVNVPROCDart =
    void Function(int target, int index, Pointer<Float> v);
typedef PFNGLPROGRAMPARAMETER4FVNVPROC =
    Void Function(Uint32 target, Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v)
typedef PFNGLPROGRAMPARAMETERS4DVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Double> v);
typedef PFNGLPROGRAMPARAMETERS4DVNVPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v)
typedef PFNGLPROGRAMPARAMETERS4FVNVPROCDart =
    void Function(int target, int index, int count, Pointer<Float> v);
typedef PFNGLPROGRAMPARAMETERS4FVNVPROC =
    Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs)
typedef PFNGLREQUESTRESIDENTPROGRAMSNVPROCDart =
    void Function(int n, Pointer<Uint32> programs);
typedef PFNGLREQUESTRESIDENTPROGRAMSNVPROC =
    Void Function(Uint32 n, Pointer<Uint32> programs);

// typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform)
typedef PFNGLTRACKMATRIXNVPROCDart =
    void Function(int target, int address, int matrix, int transform);
typedef PFNGLTRACKMATRIXNVPROC =
    Void Function(
      Uint32 target,
      Uint32 address,
      Uint32 matrix,
      Uint32 transform,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer)
typedef PFNGLVERTEXATTRIBPOINTERNVPROCDart =
    void Function(
      int index,
      int fsize,
      int type,
      int stride,
      Pointer<NativeType> pointer,
    );
typedef PFNGLVERTEXATTRIBPOINTERNVPROC =
    Void Function(
      Uint32 index,
      Int32 fsize,
      Uint32 type,
      Uint32 stride,
      Pointer<NativeType> pointer,
    );

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x)
typedef PFNGLVERTEXATTRIB1DNVPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1DNVPROC = Void Function(Uint32 index, Double x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB1DVNVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB1DVNVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x)
typedef PFNGLVERTEXATTRIB1FNVPROCDart = void Function(int index, double x);
typedef PFNGLVERTEXATTRIB1FNVPROC = Void Function(Uint32 index, Float x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB1FVNVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB1FVNVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x)
typedef PFNGLVERTEXATTRIB1SNVPROCDart = void Function(int index, int x);
typedef PFNGLVERTEXATTRIB1SNVPROC = Void Function(Uint32 index, Int16 x);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB1SVNVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB1SVNVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y)
typedef PFNGLVERTEXATTRIB2DNVPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2DNVPROC =
    Void Function(Uint32 index, Double x, Double y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB2DVNVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB2DVNVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y)
typedef PFNGLVERTEXATTRIB2FNVPROCDart =
    void Function(int index, double x, double y);
typedef PFNGLVERTEXATTRIB2FNVPROC =
    Void Function(Uint32 index, Float x, Float y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB2FVNVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB2FVNVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y)
typedef PFNGLVERTEXATTRIB2SNVPROCDart = void Function(int index, int x, int y);
typedef PFNGLVERTEXATTRIB2SNVPROC =
    Void Function(Uint32 index, Int16 x, Int16 y);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB2SVNVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB2SVNVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
typedef PFNGLVERTEXATTRIB3DNVPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3DNVPROC =
    Void Function(Uint32 index, Double x, Double y, Double z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB3DVNVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB3DVNVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLVERTEXATTRIB3FNVPROCDart =
    void Function(int index, double x, double y, double z);
typedef PFNGLVERTEXATTRIB3FNVPROC =
    Void Function(Uint32 index, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB3FVNVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB3FVNVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
typedef PFNGLVERTEXATTRIB3SNVPROCDart =
    void Function(int index, int x, int y, int z);
typedef PFNGLVERTEXATTRIB3SNVPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB3SVNVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB3SVNVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
typedef PFNGLVERTEXATTRIB4DNVPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4DNVPROC =
    Void Function(Uint32 index, Double x, Double y, Double z, Double w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v)
typedef PFNGLVERTEXATTRIB4DVNVPROCDart =
    void Function(int index, Pointer<Double> v);
typedef PFNGLVERTEXATTRIB4DVNVPROC =
    Void Function(Uint32 index, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLVERTEXATTRIB4FNVPROCDart =
    void Function(int index, double x, double y, double z, double w);
typedef PFNGLVERTEXATTRIB4FNVPROC =
    Void Function(Uint32 index, Float x, Float y, Float z, Float w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v)
typedef PFNGLVERTEXATTRIB4FVNVPROCDart =
    void Function(int index, Pointer<Float> v);
typedef PFNGLVERTEXATTRIB4FVNVPROC =
    Void Function(Uint32 index, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
typedef PFNGLVERTEXATTRIB4SNVPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4SNVPROC =
    Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v)
typedef PFNGLVERTEXATTRIB4SVNVPROCDart =
    void Function(int index, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIB4SVNVPROC =
    Void Function(Uint32 index, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
typedef PFNGLVERTEXATTRIB4UBNVPROCDart =
    void Function(int index, int x, int y, int z, int w);
typedef PFNGLVERTEXATTRIB4UBNVPROC =
    Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w);

// typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v)
typedef PFNGLVERTEXATTRIB4UBVNVPROCDart =
    void Function(int index, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIB4UBVNVPROC =
    Void Function(Uint32 index, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)
typedef PFNGLVERTEXATTRIBS1DVNVPROCDart =
    void Function(int index, int count, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBS1DVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)
typedef PFNGLVERTEXATTRIBS1FVNVPROCDart =
    void Function(int index, int count, Pointer<Float> v);
typedef PFNGLVERTEXATTRIBS1FVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)
typedef PFNGLVERTEXATTRIBS1SVNVPROCDart =
    void Function(int index, int count, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBS1SVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)
typedef PFNGLVERTEXATTRIBS2DVNVPROCDart =
    void Function(int index, int count, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBS2DVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)
typedef PFNGLVERTEXATTRIBS2FVNVPROCDart =
    void Function(int index, int count, Pointer<Float> v);
typedef PFNGLVERTEXATTRIBS2FVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)
typedef PFNGLVERTEXATTRIBS2SVNVPROCDart =
    void Function(int index, int count, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBS2SVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)
typedef PFNGLVERTEXATTRIBS3DVNVPROCDart =
    void Function(int index, int count, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBS3DVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)
typedef PFNGLVERTEXATTRIBS3FVNVPROCDart =
    void Function(int index, int count, Pointer<Float> v);
typedef PFNGLVERTEXATTRIBS3FVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)
typedef PFNGLVERTEXATTRIBS3SVNVPROCDart =
    void Function(int index, int count, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBS3SVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)
typedef PFNGLVERTEXATTRIBS4DVNVPROCDart =
    void Function(int index, int count, Pointer<Double> v);
typedef PFNGLVERTEXATTRIBS4DVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Double> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)
typedef PFNGLVERTEXATTRIBS4FVNVPROCDart =
    void Function(int index, int count, Pointer<Float> v);
typedef PFNGLVERTEXATTRIBS4FVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)
typedef PFNGLVERTEXATTRIBS4SVNVPROCDart =
    void Function(int index, int count, Pointer<Int16> v);
typedef PFNGLVERTEXATTRIBS4SVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Int16> v);

// typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v)
typedef PFNGLVERTEXATTRIBS4UBVNVPROCDart =
    void Function(int index, int count, Pointer<Uint8> v);
typedef PFNGLVERTEXATTRIBS4UBVNVPROC =
    Void Function(Uint32 index, Uint32 count, Pointer<Uint8> v);

// typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot)
typedef PFNGLBEGINVIDEOCAPTURENVPROCDart = void Function(int videoCaptureSlot);
typedef PFNGLBEGINVIDEOCAPTURENVPROC = Void Function(Uint32 videoCaptureSlot);

// typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
typedef PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int frameRegion,
      int offset,
    );
typedef PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 frameRegion,
      Uint64 offset,
    );

// typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
typedef PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int frameRegion,
      int target,
      int texture,
    );
typedef PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 frameRegion,
      Uint32 target,
      Uint32 texture,
    );

// typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot)
typedef PFNGLENDVIDEOCAPTURENVPROCDart = void Function(int videoCaptureSlot);
typedef PFNGLENDVIDEOCAPTURENVPROC = Void Function(Uint32 videoCaptureSlot);

// typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params)
typedef PFNGLGETVIDEOCAPTUREIVNVPROCDart =
    void Function(int videoCaptureSlot, int pname, Pointer<Int32> params);
typedef PFNGLGETVIDEOCAPTUREIVNVPROC =
    Void Function(Uint32 videoCaptureSlot, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
typedef PFNGLGETVIDEOCAPTURESTREAMIVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLGETVIDEOCAPTURESTREAMIVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
typedef PFNGLGETVIDEOCAPTURESTREAMFVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Float> params,
    );
typedef PFNGLGETVIDEOCAPTURESTREAMFVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
typedef PFNGLGETVIDEOCAPTURESTREAMDVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Double> params,
    );
typedef PFNGLGETVIDEOCAPTURESTREAMDVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Double> params,
    );

// typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
typedef PFNGLVIDEOCAPTURENVPROCDart =
    int Function(
      int videoCaptureSlot,
      Pointer<Uint32> sequenceNum,
      Pointer<Uint64> captureTime,
    );
typedef PFNGLVIDEOCAPTURENVPROC =
    Uint32 Function(
      Uint32 videoCaptureSlot,
      Pointer<Uint32> sequenceNum,
      Pointer<Uint64> captureTime,
    );

// typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Int32> params,
    );
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Int32> params,
    );

// typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Float> params,
    );
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Float> params,
    );

// typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROCDart =
    void Function(
      int videoCaptureSlot,
      int stream,
      int pname,
      Pointer<Double> params,
    );
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC =
    Void Function(
      Uint32 videoCaptureSlot,
      Uint32 stream,
      Uint32 pname,
      Pointer<Double> params,
    );

// typedef void (APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
typedef PFNGLVIEWPORTSWIZZLENVPROCDart =
    void Function(
      int index,
      int swizzlex,
      int swizzley,
      int swizzlez,
      int swizzlew,
    );
typedef PFNGLVIEWPORTSWIZZLENVPROC =
    Void Function(
      Uint32 index,
      Uint32 swizzlex,
      Uint32 swizzley,
      Uint32 swizzlez,
      Uint32 swizzlew,
    );

// typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
typedef PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROCDart =
    void Function(
      int target,
      int attachment,
      int texture,
      int level,
      int baseViewIndex,
      int numViews,
    );
typedef PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC =
    Void Function(
      Uint32 target,
      Uint32 attachment,
      Uint32 texture,
      Int32 level,
      Int32 baseViewIndex,
      Uint32 numViews,
    );

// typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode)
typedef PFNGLHINTPGIPROCDart = void Function(int target, int mode);
typedef PFNGLHINTPGIPROC = Void Function(Uint32 target, Int32 mode);

// typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points)
typedef PFNGLDETAILTEXFUNCSGISPROCDart =
    void Function(int target, int n, Pointer<Float> points);
typedef PFNGLDETAILTEXFUNCSGISPROC =
    Void Function(Uint32 target, Uint32 n, Pointer<Float> points);

// typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points)
typedef PFNGLGETDETAILTEXFUNCSGISPROCDart =
    void Function(int target, Pointer<Float> points);
typedef PFNGLGETDETAILTEXFUNCSGISPROC =
    Void Function(Uint32 target, Pointer<Float> points);

// typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points)
typedef PFNGLFOGFUNCSGISPROCDart = void Function(int n, Pointer<Float> points);
typedef PFNGLFOGFUNCSGISPROC = Void Function(Uint32 n, Pointer<Float> points);

// typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points)
typedef PFNGLGETFOGFUNCSGISPROCDart = void Function(Pointer<Float> points);
typedef PFNGLGETFOGFUNCSGISPROC = Void Function(Pointer<Float> points);

// typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert)
typedef PFNGLSAMPLEMASKSGISPROCDart = void Function(double value, int invert);
typedef PFNGLSAMPLEMASKSGISPROC = Void Function(Float value, Int32 invert);

// typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern)
typedef PFNGLSAMPLEPATTERNSGISPROCDart = void Function(int pattern);
typedef PFNGLSAMPLEPATTERNSGISPROC = Void Function(Uint32 pattern);

// typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param)
typedef PFNGLPIXELTEXGENPARAMETERISGISPROCDart =
    void Function(int pname, int param);
typedef PFNGLPIXELTEXGENPARAMETERISGISPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params)
typedef PFNGLPIXELTEXGENPARAMETERIVSGISPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLPIXELTEXGENPARAMETERIVSGISPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param)
typedef PFNGLPIXELTEXGENPARAMETERFSGISPROCDart =
    void Function(int pname, double param);
typedef PFNGLPIXELTEXGENPARAMETERFSGISPROC =
    Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLPIXELTEXGENPARAMETERFVSGISPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLPIXELTEXGENPARAMETERFVSGISPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params)
typedef PFNGLGETPIXELTEXGENPARAMETERIVSGISPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params)
typedef PFNGLGETPIXELTEXGENPARAMETERFVSGISPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param)
typedef PFNGLPOINTPARAMETERFSGISPROCDart =
    void Function(int pname, double param);
typedef PFNGLPOINTPARAMETERFSGISPROC = Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLPOINTPARAMETERFVSGISPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLPOINTPARAMETERFVSGISPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points)
typedef PFNGLSHARPENTEXFUNCSGISPROCDart =
    void Function(int target, int n, Pointer<Float> points);
typedef PFNGLSHARPENTEXFUNCSGISPROC =
    Void Function(Uint32 target, Uint32 n, Pointer<Float> points);

// typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points)
typedef PFNGLGETSHARPENTEXFUNCSGISPROCDart =
    void Function(int target, Pointer<Float> points);
typedef PFNGLGETSHARPENTEXFUNCSGISPROC =
    Void Function(Uint32 target, Pointer<Float> points);

// typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXIMAGE4DSGISPROCDart =
    void Function(
      int target,
      int level,
      int internalformat,
      int width,
      int height,
      int depth,
      int size4d,
      int border,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXIMAGE4DSGISPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Uint32 internalformat,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 size4d,
      Int32 border,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels)
typedef PFNGLTEXSUBIMAGE4DSGISPROCDart =
    void Function(
      int target,
      int level,
      int xoffset,
      int yoffset,
      int zoffset,
      int woffset,
      int width,
      int height,
      int depth,
      int size4d,
      int format,
      int type,
      Pointer<NativeType> pixels,
    );
typedef PFNGLTEXSUBIMAGE4DSGISPROC =
    Void Function(
      Uint32 target,
      Int32 level,
      Int32 xoffset,
      Int32 yoffset,
      Int32 zoffset,
      Int32 woffset,
      Uint32 width,
      Uint32 height,
      Uint32 depth,
      Uint32 size4d,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> pixels,
    );

// typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
typedef PFNGLTEXTURECOLORMASKSGISPROCDart =
    void Function(int red, int green, int blue, int alpha);
typedef PFNGLTEXTURECOLORMASKSGISPROC =
    Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha);

// typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights)
typedef PFNGLGETTEXFILTERFUNCSGISPROCDart =
    void Function(int target, int filter, Pointer<Float> weights);
typedef PFNGLGETTEXFILTERFUNCSGISPROC =
    Void Function(Uint32 target, Uint32 filter, Pointer<Float> weights);

// typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
typedef PFNGLTEXFILTERFUNCSGISPROCDart =
    void Function(int target, int filter, int n, Pointer<Float> weights);
typedef PFNGLTEXFILTERFUNCSGISPROC =
    Void Function(
      Uint32 target,
      Uint32 filter,
      Uint32 n,
      Pointer<Float> weights,
    );

// typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker)
typedef PFNGLASYNCMARKERSGIXPROCDart = void Function(int marker);
typedef PFNGLASYNCMARKERSGIXPROC = Void Function(Uint32 marker);

// typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp)
typedef PFNGLFINISHASYNCSGIXPROCDart = int Function(Pointer<Uint32> markerp);
typedef PFNGLFINISHASYNCSGIXPROC = Int32 Function(Pointer<Uint32> markerp);

// typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp)
typedef PFNGLPOLLASYNCSGIXPROCDart = int Function(Pointer<Uint32> markerp);
typedef PFNGLPOLLASYNCSGIXPROC = Int32 Function(Pointer<Uint32> markerp);

// typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range)
typedef PFNGLGENASYNCMARKERSSGIXPROCDart = int Function(int range);
typedef PFNGLGENASYNCMARKERSSGIXPROC = Uint32 Function(Uint32 range);

// typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range)
typedef PFNGLDELETEASYNCMARKERSSGIXPROCDart =
    void Function(int marker, int range);
typedef PFNGLDELETEASYNCMARKERSSGIXPROC =
    Void Function(Uint32 marker, Uint32 range);

// typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker)
typedef PFNGLISASYNCMARKERSGIXPROCDart = int Function(int marker);
typedef PFNGLISASYNCMARKERSGIXPROC = Int32 Function(Uint32 marker);

// typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void)
typedef PFNGLFLUSHRASTERSGIXPROCDart = void Function();
typedef PFNGLFLUSHRASTERSGIXPROC = Void Function();

// typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode)
typedef PFNGLFRAGMENTCOLORMATERIALSGIXPROCDart =
    void Function(int face, int mode);
typedef PFNGLFRAGMENTCOLORMATERIALSGIXPROC =
    Void Function(Uint32 face, Uint32 mode);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param)
typedef PFNGLFRAGMENTLIGHTFSGIXPROCDart =
    void Function(int light, int pname, double param);
typedef PFNGLFRAGMENTLIGHTFSGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params)
typedef PFNGLFRAGMENTLIGHTFVSGIXPROCDart =
    void Function(int light, int pname, Pointer<Float> params);
typedef PFNGLFRAGMENTLIGHTFVSGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param)
typedef PFNGLFRAGMENTLIGHTISGIXPROCDart =
    void Function(int light, int pname, int param);
typedef PFNGLFRAGMENTLIGHTISGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params)
typedef PFNGLFRAGMENTLIGHTIVSGIXPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLFRAGMENTLIGHTIVSGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param)
typedef PFNGLFRAGMENTLIGHTMODELFSGIXPROCDart =
    void Function(int pname, double param);
typedef PFNGLFRAGMENTLIGHTMODELFSGIXPROC =
    Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLFRAGMENTLIGHTMODELFVSGIXPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLFRAGMENTLIGHTMODELFVSGIXPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param)
typedef PFNGLFRAGMENTLIGHTMODELISGIXPROCDart =
    void Function(int pname, int param);
typedef PFNGLFRAGMENTLIGHTMODELISGIXPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params)
typedef PFNGLFRAGMENTLIGHTMODELIVSGIXPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLFRAGMENTLIGHTMODELIVSGIXPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param)
typedef PFNGLFRAGMENTMATERIALFSGIXPROCDart =
    void Function(int face, int pname, double param);
typedef PFNGLFRAGMENTMATERIALFSGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params)
typedef PFNGLFRAGMENTMATERIALFVSGIXPROCDart =
    void Function(int face, int pname, Pointer<Float> params);
typedef PFNGLFRAGMENTMATERIALFVSGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param)
typedef PFNGLFRAGMENTMATERIALISGIXPROCDart =
    void Function(int face, int pname, int param);
typedef PFNGLFRAGMENTMATERIALISGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params)
typedef PFNGLFRAGMENTMATERIALIVSGIXPROCDart =
    void Function(int face, int pname, Pointer<Int32> params);
typedef PFNGLFRAGMENTMATERIALIVSGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params)
typedef PFNGLGETFRAGMENTLIGHTFVSGIXPROCDart =
    void Function(int light, int pname, Pointer<Float> params);
typedef PFNGLGETFRAGMENTLIGHTFVSGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params)
typedef PFNGLGETFRAGMENTLIGHTIVSGIXPROCDart =
    void Function(int light, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAGMENTLIGHTIVSGIXPROC =
    Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params)
typedef PFNGLGETFRAGMENTMATERIALFVSGIXPROCDart =
    void Function(int face, int pname, Pointer<Float> params);
typedef PFNGLGETFRAGMENTMATERIALFVSGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params)
typedef PFNGLGETFRAGMENTMATERIALIVSGIXPROCDart =
    void Function(int face, int pname, Pointer<Int32> params);
typedef PFNGLGETFRAGMENTMATERIALIVSGIXPROC =
    Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param)
typedef PFNGLLIGHTENVISGIXPROCDart = void Function(int pname, int param);
typedef PFNGLLIGHTENVISGIXPROC = Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor)
typedef PFNGLFRAMEZOOMSGIXPROCDart = void Function(int factor);
typedef PFNGLFRAMEZOOMSGIXPROC = Void Function(Int32 factor);

// typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const void *params)
typedef PFNGLIGLOOINTERFACESGIXPROCDart =
    void Function(int pname, Pointer<NativeType> params);
typedef PFNGLIGLOOINTERFACESGIXPROC =
    Void Function(Uint32 pname, Pointer<NativeType> params);

// typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void)
typedef PFNGLGETINSTRUMENTSSGIXPROCDart = int Function();
typedef PFNGLGETINSTRUMENTSSGIXPROC = Int32 Function();

// typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer)
typedef PFNGLINSTRUMENTSBUFFERSGIXPROCDart =
    void Function(int size, Pointer<Int32> buffer);
typedef PFNGLINSTRUMENTSBUFFERSGIXPROC =
    Void Function(Uint32 size, Pointer<Int32> buffer);

// typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p)
typedef PFNGLPOLLINSTRUMENTSSGIXPROCDart = int Function(Pointer<Int32> markerP);
typedef PFNGLPOLLINSTRUMENTSSGIXPROC = Int32 Function(Pointer<Int32> markerP);

// typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker)
typedef PFNGLREADINSTRUMENTSSGIXPROCDart = void Function(int marker);
typedef PFNGLREADINSTRUMENTSSGIXPROC = Void Function(Int32 marker);

// typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void)
typedef PFNGLSTARTINSTRUMENTSSGIXPROCDart = void Function();
typedef PFNGLSTARTINSTRUMENTSSGIXPROC = Void Function();

// typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker)
typedef PFNGLSTOPINSTRUMENTSSGIXPROCDart = void Function(int marker);
typedef PFNGLSTOPINSTRUMENTSSGIXPROC = Void Function(Int32 marker);

// typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params)
typedef PFNGLGETLISTPARAMETERFVSGIXPROCDart =
    void Function(int list, int pname, Pointer<Float> params);
typedef PFNGLGETLISTPARAMETERFVSGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params)
typedef PFNGLGETLISTPARAMETERIVSGIXPROCDart =
    void Function(int list, int pname, Pointer<Int32> params);
typedef PFNGLGETLISTPARAMETERIVSGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param)
typedef PFNGLLISTPARAMETERFSGIXPROCDart =
    void Function(int list, int pname, double param);
typedef PFNGLLISTPARAMETERFSGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params)
typedef PFNGLLISTPARAMETERFVSGIXPROCDart =
    void Function(int list, int pname, Pointer<Float> params);
typedef PFNGLLISTPARAMETERFVSGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param)
typedef PFNGLLISTPARAMETERISGIXPROCDart =
    void Function(int list, int pname, int param);
typedef PFNGLLISTPARAMETERISGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params)
typedef PFNGLLISTPARAMETERIVSGIXPROCDart =
    void Function(int list, int pname, Pointer<Int32> params);
typedef PFNGLLISTPARAMETERIVSGIXPROC =
    Void Function(Uint32 list, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode)
typedef PFNGLPIXELTEXGENSGIXPROCDart = void Function(int mode);
typedef PFNGLPIXELTEXGENSGIXPROC = Void Function(Uint32 mode);

// typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
typedef PFNGLDEFORMATIONMAP3DSGIXPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      double w1,
      double w2,
      int wstride,
      int worder,
      Pointer<Double> points,
    );
typedef PFNGLDEFORMATIONMAP3DSGIXPROC =
    Void Function(
      Uint32 target,
      Double u1,
      Double u2,
      Int32 ustride,
      Int32 uorder,
      Double v1,
      Double v2,
      Int32 vstride,
      Int32 vorder,
      Double w1,
      Double w2,
      Int32 wstride,
      Int32 worder,
      Pointer<Double> points,
    );

// typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
typedef PFNGLDEFORMATIONMAP3FSGIXPROCDart =
    void Function(
      int target,
      double u1,
      double u2,
      int ustride,
      int uorder,
      double v1,
      double v2,
      int vstride,
      int vorder,
      double w1,
      double w2,
      int wstride,
      int worder,
      Pointer<Float> points,
    );
typedef PFNGLDEFORMATIONMAP3FSGIXPROC =
    Void Function(
      Uint32 target,
      Float u1,
      Float u2,
      Int32 ustride,
      Int32 uorder,
      Float v1,
      Float v2,
      Int32 vstride,
      Int32 vorder,
      Float w1,
      Float w2,
      Int32 wstride,
      Int32 worder,
      Pointer<Float> points,
    );

// typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask)
typedef PFNGLDEFORMSGIXPROCDart = void Function(int mask);
typedef PFNGLDEFORMSGIXPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask)
typedef PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROCDart = void Function(int mask);
typedef PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = Void Function(Uint32 mask);

// typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation)
typedef PFNGLREFERENCEPLANESGIXPROCDart =
    void Function(Pointer<Double> equation);
typedef PFNGLREFERENCEPLANESGIXPROC = Void Function(Pointer<Double> equation);

// typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param)
typedef PFNGLSPRITEPARAMETERFSGIXPROCDart =
    void Function(int pname, double param);
typedef PFNGLSPRITEPARAMETERFSGIXPROC =
    Void Function(Uint32 pname, Float param);

// typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params)
typedef PFNGLSPRITEPARAMETERFVSGIXPROCDart =
    void Function(int pname, Pointer<Float> params);
typedef PFNGLSPRITEPARAMETERFVSGIXPROC =
    Void Function(Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param)
typedef PFNGLSPRITEPARAMETERISGIXPROCDart = void Function(int pname, int param);
typedef PFNGLSPRITEPARAMETERISGIXPROC =
    Void Function(Uint32 pname, Int32 param);

// typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params)
typedef PFNGLSPRITEPARAMETERIVSGIXPROCDart =
    void Function(int pname, Pointer<Int32> params);
typedef PFNGLSPRITEPARAMETERIVSGIXPROC =
    Void Function(Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void)
typedef PFNGLTAGSAMPLEBUFFERSGIXPROCDart = void Function();
typedef PFNGLTAGSAMPLEBUFFERSGIXPROC = Void Function();

// typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)
typedef PFNGLCOLORTABLESGIPROCDart =
    void Function(
      int target,
      int internalformat,
      int width,
      int format,
      int type,
      Pointer<NativeType> table,
    );
typedef PFNGLCOLORTABLESGIPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Uint32 width,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params)
typedef PFNGLCOLORTABLEPARAMETERFVSGIPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLCOLORTABLEPARAMETERFVSGIPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params)
typedef PFNGLCOLORTABLEPARAMETERIVSGIPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLCOLORTABLEPARAMETERIVSGIPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
typedef PFNGLCOPYCOLORTABLESGIPROCDart =
    void Function(int target, int internalformat, int x, int y, int width);
typedef PFNGLCOPYCOLORTABLESGIPROC =
    Void Function(
      Uint32 target,
      Uint32 internalformat,
      Int32 x,
      Int32 y,
      Uint32 width,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table)
typedef PFNGLGETCOLORTABLESGIPROCDart =
    void Function(int target, int format, int type, Pointer<NativeType> table);
typedef PFNGLGETCOLORTABLESGIPROC =
    Void Function(
      Uint32 target,
      Uint32 format,
      Uint32 type,
      Pointer<NativeType> table,
    );

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params)
typedef PFNGLGETCOLORTABLEPARAMETERFVSGIPROCDart =
    void Function(int target, int pname, Pointer<Float> params);
typedef PFNGLGETCOLORTABLEPARAMETERFVSGIPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Float> params);

// typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params)
typedef PFNGLGETCOLORTABLEPARAMETERIVSGIPROCDart =
    void Function(int target, int pname, Pointer<Int32> params);
typedef PFNGLGETCOLORTABLEPARAMETERIVSGIPROC =
    Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params);

// typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void)
typedef PFNGLFINISHTEXTURESUNXPROCDart = void Function();
typedef PFNGLFINISHTEXTURESUNXPROC = Void Function();

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor)
typedef PFNGLGLOBALALPHAFACTORBSUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORBSUNPROC = Void Function(Int8 factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor)
typedef PFNGLGLOBALALPHAFACTORSSUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORSSUNPROC = Void Function(Int16 factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor)
typedef PFNGLGLOBALALPHAFACTORISUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORISUNPROC = Void Function(Int32 factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor)
typedef PFNGLGLOBALALPHAFACTORFSUNPROCDart = void Function(double factor);
typedef PFNGLGLOBALALPHAFACTORFSUNPROC = Void Function(Float factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor)
typedef PFNGLGLOBALALPHAFACTORDSUNPROCDart = void Function(double factor);
typedef PFNGLGLOBALALPHAFACTORDSUNPROC = Void Function(Double factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor)
typedef PFNGLGLOBALALPHAFACTORUBSUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORUBSUNPROC = Void Function(Uint8 factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor)
typedef PFNGLGLOBALALPHAFACTORUSSUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORUSSUNPROC = Void Function(Uint16 factor);

// typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor)
typedef PFNGLGLOBALALPHAFACTORUISUNPROCDart = void Function(int factor);
typedef PFNGLGLOBALALPHAFACTORUISUNPROC = Void Function(Uint32 factor);

// typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width)
typedef PFNGLDRAWMESHARRAYSSUNPROCDart =
    void Function(int mode, int first, int count, int width);
typedef PFNGLDRAWMESHARRAYSSUNPROC =
    Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 width);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code)
typedef PFNGLREPLACEMENTCODEUISUNPROCDart = void Function(int code);
typedef PFNGLREPLACEMENTCODEUISUNPROC = Void Function(Uint32 code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code)
typedef PFNGLREPLACEMENTCODEUSSUNPROCDart = void Function(int code);
typedef PFNGLREPLACEMENTCODEUSSUNPROC = Void Function(Uint16 code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code)
typedef PFNGLREPLACEMENTCODEUBSUNPROCDart = void Function(int code);
typedef PFNGLREPLACEMENTCODEUBSUNPROC = Void Function(Uint8 code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code)
typedef PFNGLREPLACEMENTCODEUIVSUNPROCDart =
    void Function(Pointer<Uint32> code);
typedef PFNGLREPLACEMENTCODEUIVSUNPROC = Void Function(Pointer<Uint32> code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code)
typedef PFNGLREPLACEMENTCODEUSVSUNPROCDart =
    void Function(Pointer<Uint16> code);
typedef PFNGLREPLACEMENTCODEUSVSUNPROC = Void Function(Pointer<Uint16> code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code)
typedef PFNGLREPLACEMENTCODEUBVSUNPROCDart = void Function(Pointer<Uint8> code);
typedef PFNGLREPLACEMENTCODEUBVSUNPROC = Void Function(Pointer<Uint8> code);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void **pointer)
typedef PFNGLREPLACEMENTCODEPOINTERSUNPROCDart =
    void Function(int type, int stride, Pointer<Pointer<NativeType>> pointer);
typedef PFNGLREPLACEMENTCODEPOINTERSUNPROC =
    Void Function(
      Uint32 type,
      Uint32 stride,
      Pointer<Pointer<NativeType>> pointer,
    );

// typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
typedef PFNGLCOLOR4UBVERTEX2FSUNPROCDart =
    void Function(int r, int g, int b, int a, double x, double y);
typedef PFNGLCOLOR4UBVERTEX2FSUNPROC =
    Void Function(Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y);

// typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v)
typedef PFNGLCOLOR4UBVERTEX2FVSUNPROCDart =
    void Function(Pointer<Uint8> c, Pointer<Float> v);
typedef PFNGLCOLOR4UBVERTEX2FVSUNPROC =
    Void Function(Pointer<Uint8> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLCOLOR4UBVERTEX3FSUNPROCDart =
    void Function(int r, int g, int b, int a, double x, double y, double z);
typedef PFNGLCOLOR4UBVERTEX3FSUNPROC =
    Void Function(
      Uint8 r,
      Uint8 g,
      Uint8 b,
      Uint8 a,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v)
typedef PFNGLCOLOR4UBVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint8> c, Pointer<Float> v);
typedef PFNGLCOLOR4UBVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint8> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLCOLOR3FVERTEX3FSUNPROCDart =
    void Function(double r, double g, double b, double x, double y, double z);
typedef PFNGLCOLOR3FVERTEX3FSUNPROC =
    Void Function(Float r, Float g, Float b, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v)
typedef PFNGLCOLOR3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> c, Pointer<Float> v);
typedef PFNGLCOLOR3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLNORMAL3FVERTEX3FSUNPROC =
    Void Function(Float nx, Float ny, Float nz, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v)
typedef PFNGLNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> n, Pointer<Float> v);
typedef PFNGLNORMAL3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> n, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      double r,
      double g,
      double b,
      double a,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Float r,
      Float g,
      Float b,
      Float a,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v)
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> c, Pointer<Float> n, Pointer<Float> v);
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> c, Pointer<Float> n, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLTEXCOORD2FVERTEX3FSUNPROCDart =
    void Function(double s, double t, double x, double y, double z);
typedef PFNGLTEXCOORD2FVERTEX3FSUNPROC =
    Void Function(Float s, Float t, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v)
typedef PFNGLTEXCOORD2FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> tc, Pointer<Float> v);
typedef PFNGLTEXCOORD2FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> tc, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLTEXCOORD4FVERTEX4FSUNPROCDart =
    void Function(
      double s,
      double t,
      double p,
      double q,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLTEXCOORD4FVERTEX4FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Float p,
      Float q,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v)
typedef PFNGLTEXCOORD4FVERTEX4FVSUNPROCDart =
    void Function(Pointer<Float> tc, Pointer<Float> v);
typedef PFNGLTEXCOORD4FVERTEX4FVSUNPROC =
    Void Function(Pointer<Float> tc, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROCDart =
    void Function(
      double s,
      double t,
      int r,
      int g,
      int b,
      int a,
      double x,
      double y,
      double z,
    );
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Uint8 r,
      Uint8 g,
      Uint8 b,
      Uint8 a,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v)
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> tc, Pointer<Uint8> c, Pointer<Float> v);
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> tc, Pointer<Uint8> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROCDart =
    void Function(
      double s,
      double t,
      double r,
      double g,
      double b,
      double x,
      double y,
      double z,
    );
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Float r,
      Float g,
      Float b,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v)
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> v);
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> tc, Pointer<Float> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      double s,
      double t,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v)
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Float> tc, Pointer<Float> n, Pointer<Float> v);
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Float> tc, Pointer<Float> n, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      double s,
      double t,
      double r,
      double g,
      double b,
      double a,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Float r,
      Float g,
      Float b,
      Float a,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROCDart =
    void Function(
      double s,
      double t,
      double p,
      double q,
      double r,
      double g,
      double b,
      double a,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
      double w,
    );
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC =
    Void Function(
      Float s,
      Float t,
      Float p,
      Float q,
      Float r,
      Float g,
      Float b,
      Float a,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
      Float w,
    );

// typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROCDart =
    void Function(
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC =
    Void Function(
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROCDart =
    void Function(int rc, double x, double y, double z);
typedef PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC =
    Void Function(Uint32 rc, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint32> rc, Pointer<Float> v);
typedef PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint32> rc, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      int r,
      int g,
      int b,
      int a,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Uint8 r,
      Uint8 g,
      Uint8 b,
      Uint8 a,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint32> rc, Pointer<Uint8> c, Pointer<Float> v);
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint32> rc, Pointer<Uint8> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      double r,
      double g,
      double b,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Float r,
      Float g,
      Float b,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint32> rc, Pointer<Float> c, Pointer<Float> v);
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint32> rc, Pointer<Float> c, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint32> rc, Pointer<Float> n, Pointer<Float> v);
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint32> rc, Pointer<Float> n, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      double r,
      double g,
      double b,
      double a,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Float r,
      Float g,
      Float b,
      Float a,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(
      Pointer<Uint32> rc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(
      Pointer<Uint32> rc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROCDart =
    void Function(int rc, double s, double t, double x, double y, double z);
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC =
    Void Function(Uint32 rc, Float s, Float t, Float x, Float y, Float z);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROCDart =
    void Function(Pointer<Uint32> rc, Pointer<Float> tc, Pointer<Float> v);
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC =
    Void Function(Pointer<Uint32> rc, Pointer<Float> tc, Pointer<Float> v);

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      double s,
      double t,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Float s,
      Float t,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(
      Pointer<Uint32> rc,
      Pointer<Float> tc,
      Pointer<Float> n,
      Pointer<Float> v,
    );
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(
      Pointer<Uint32> rc,
      Pointer<Float> tc,
      Pointer<Float> n,
      Pointer<Float> v,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROCDart =
    void Function(
      int rc,
      double s,
      double t,
      double r,
      double g,
      double b,
      double a,
      double nx,
      double ny,
      double nz,
      double x,
      double y,
      double z,
    );
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC =
    Void Function(
      Uint32 rc,
      Float s,
      Float t,
      Float r,
      Float g,
      Float b,
      Float a,
      Float nx,
      Float ny,
      Float nz,
      Float x,
      Float y,
      Float z,
    );

// typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROCDart =
    void Function(
      Pointer<Uint32> rc,
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC =
    Void Function(
      Pointer<Uint32> rc,
      Pointer<Float> tc,
      Pointer<Float> c,
      Pointer<Float> n,
      Pointer<Float> v,
    );

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearIndex;

/// ```c
/// GLAPI void GLAPIENTRY glClearIndex( GLfloat c )
/// ```
/// {@category opengl}
void glClearIndex(double c) {
  final glClearIndexAsFunction = _glClearIndex
      .cast<NativeFunction<Void Function(Float c)>>()
      .asFunction<void Function(double c)>();
  return glClearIndexAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearColor;

/// ```c
/// GLAPI void GLAPIENTRY glClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
/// ```
/// {@category opengl}
void glClearColor(double red, double green, double blue, double alpha) {
  final glClearColorAsFunction = _glClearColor
      .cast<
        NativeFunction<
          Void Function(Float red, Float green, Float blue, Float alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glClearColorAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClear;

/// ```c
/// GLAPI void GLAPIENTRY glClear( GLbitfield mask )
/// ```
/// {@category opengl}
void glClear(int mask) {
  final glClearAsFunction = _glClear
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glClearAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexMask;

/// ```c
/// GLAPI void GLAPIENTRY glIndexMask( GLuint mask )
/// ```
/// {@category opengl}
void glIndexMask(int mask) {
  final glIndexMaskAsFunction = _glIndexMask
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glIndexMaskAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorMask;

/// ```c
/// GLAPI void GLAPIENTRY glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
/// ```
/// {@category opengl}
void glColorMask(int red, int green, int blue, int alpha) {
  final glColorMaskAsFunction = _glColorMask
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColorMaskAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAlphaFunc;

/// ```c
/// GLAPI void GLAPIENTRY glAlphaFunc( GLenum func, GLclampf ref )
/// ```
/// {@category opengl}
void glAlphaFunc(int func, double ref) {
  final glAlphaFuncAsFunction = _glAlphaFunc
      .cast<NativeFunction<Void Function(Uint32 func, Float ref)>>()
      .asFunction<void Function(int func, double ref)>();
  return glAlphaFuncAsFunction(func, ref);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendFunc;

/// ```c
/// GLAPI void GLAPIENTRY glBlendFunc( GLenum sfactor, GLenum dfactor )
/// ```
/// {@category opengl}
void glBlendFunc(int sfactor, int dfactor) {
  final glBlendFuncAsFunction = _glBlendFunc
      .cast<NativeFunction<Void Function(Uint32 sfactor, Uint32 dfactor)>>()
      .asFunction<void Function(int sfactor, int dfactor)>();
  return glBlendFuncAsFunction(sfactor, dfactor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLogicOp;

/// ```c
/// GLAPI void GLAPIENTRY glLogicOp( GLenum opcode )
/// ```
/// {@category opengl}
void glLogicOp(int opcode) {
  final glLogicOpAsFunction = _glLogicOp
      .cast<NativeFunction<Void Function(Uint32 opcode)>>()
      .asFunction<void Function(int opcode)>();
  return glLogicOpAsFunction(opcode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCullFace;

/// ```c
/// GLAPI void GLAPIENTRY glCullFace( GLenum mode )
/// ```
/// {@category opengl}
void glCullFace(int mode) {
  final glCullFaceAsFunction = _glCullFace
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glCullFaceAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrontFace;

/// ```c
/// GLAPI void GLAPIENTRY glFrontFace( GLenum mode )
/// ```
/// {@category opengl}
void glFrontFace(int mode) {
  final glFrontFaceAsFunction = _glFrontFace
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glFrontFaceAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPointSize;

/// ```c
/// GLAPI void GLAPIENTRY glPointSize( GLfloat size )
/// ```
/// {@category opengl}
void glPointSize(double size) {
  final glPointSizeAsFunction = _glPointSize
      .cast<NativeFunction<Void Function(Float size)>>()
      .asFunction<void Function(double size)>();
  return glPointSizeAsFunction(size);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLineWidth;

/// ```c
/// GLAPI void GLAPIENTRY glLineWidth( GLfloat width )
/// ```
/// {@category opengl}
void glLineWidth(double width) {
  final glLineWidthAsFunction = _glLineWidth
      .cast<NativeFunction<Void Function(Float width)>>()
      .asFunction<void Function(double width)>();
  return glLineWidthAsFunction(width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLineStipple;

/// ```c
/// GLAPI void GLAPIENTRY glLineStipple( GLint factor, GLushort pattern )
/// ```
/// {@category opengl}
void glLineStipple(int factor, int pattern) {
  final glLineStippleAsFunction = _glLineStipple
      .cast<NativeFunction<Void Function(Int32 factor, Uint16 pattern)>>()
      .asFunction<void Function(int factor, int pattern)>();
  return glLineStippleAsFunction(factor, pattern);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonMode;

/// ```c
/// GLAPI void GLAPIENTRY glPolygonMode( GLenum face, GLenum mode )
/// ```
/// {@category opengl}
void glPolygonMode(int face, int mode) {
  final glPolygonModeAsFunction = _glPolygonMode
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return glPolygonModeAsFunction(face, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonOffset;

/// ```c
/// GLAPI void GLAPIENTRY glPolygonOffset( GLfloat factor, GLfloat units )
/// ```
/// {@category opengl}
void glPolygonOffset(double factor, double units) {
  final glPolygonOffsetAsFunction = _glPolygonOffset
      .cast<NativeFunction<Void Function(Float factor, Float units)>>()
      .asFunction<void Function(double factor, double units)>();
  return glPolygonOffsetAsFunction(factor, units);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPolygonStipple;

/// ```c
/// GLAPI void GLAPIENTRY glPolygonStipple( const GLubyte *mask )
/// ```
/// {@category opengl}
void glPolygonStipple(Pointer<Uint8> mask) {
  final glPolygonStippleAsFunction = _glPolygonStipple
      .cast<NativeFunction<Void Function(Pointer<Uint8> mask)>>()
      .asFunction<void Function(Pointer<Uint8> mask)>();
  return glPolygonStippleAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPolygonStipple;

/// ```c
/// GLAPI void GLAPIENTRY glGetPolygonStipple( GLubyte *mask )
/// ```
/// {@category opengl}
void glGetPolygonStipple(Pointer<Uint8> mask) {
  final glGetPolygonStippleAsFunction = _glGetPolygonStipple
      .cast<NativeFunction<Void Function(Pointer<Uint8> mask)>>()
      .asFunction<void Function(Pointer<Uint8> mask)>();
  return glGetPolygonStippleAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlag;

/// ```c
/// GLAPI void GLAPIENTRY glEdgeFlag( GLboolean flag )
/// ```
/// {@category opengl}
void glEdgeFlag(int flag) {
  final glEdgeFlagAsFunction = _glEdgeFlag
      .cast<NativeFunction<Void Function(Int32 flag)>>()
      .asFunction<void Function(int flag)>();
  return glEdgeFlagAsFunction(flag);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlagv;

/// ```c
/// GLAPI void GLAPIENTRY glEdgeFlagv( const GLboolean *flag )
/// ```
/// {@category opengl}
void glEdgeFlagv(Pointer<Int32> flag) {
  final glEdgeFlagvAsFunction = _glEdgeFlagv
      .cast<NativeFunction<Void Function(Pointer<Int32> flag)>>()
      .asFunction<void Function(Pointer<Int32> flag)>();
  return glEdgeFlagvAsFunction(flag);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScissor;

/// ```c
/// GLAPI void GLAPIENTRY glScissor( GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
/// {@category opengl}
void glScissor(int x, int y, int width, int height) {
  final glScissorAsFunction = _glScissor
      .cast<
        NativeFunction<
          Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height)
        >
      >()
      .asFunction<void Function(int x, int y, int width, int height)>();
  return glScissorAsFunction(x, y, width, height);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClipPlane;

/// ```c
/// GLAPI void GLAPIENTRY glClipPlane( GLenum plane, const GLdouble *equation )
/// ```
/// {@category opengl}
void glClipPlane(int plane, Pointer<Double> equation) {
  final glClipPlaneAsFunction = _glClipPlane
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Double> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Double> equation)>();
  return glClipPlaneAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetClipPlane;

/// ```c
/// GLAPI void GLAPIENTRY glGetClipPlane( GLenum plane, GLdouble *equation )
/// ```
/// {@category opengl}
void glGetClipPlane(int plane, Pointer<Double> equation) {
  final glGetClipPlaneAsFunction = _glGetClipPlane
      .cast<
        NativeFunction<Void Function(Uint32 plane, Pointer<Double> equation)>
      >()
      .asFunction<void Function(int plane, Pointer<Double> equation)>();
  return glGetClipPlaneAsFunction(plane, equation);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawBuffer;

/// ```c
/// GLAPI void GLAPIENTRY glDrawBuffer( GLenum mode )
/// ```
/// {@category opengl}
void glDrawBuffer(int mode) {
  final glDrawBufferAsFunction = _glDrawBuffer
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glDrawBufferAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReadBuffer;

/// ```c
/// GLAPI void GLAPIENTRY glReadBuffer( GLenum mode )
/// ```
/// {@category opengl}
void glReadBuffer(int mode) {
  final glReadBufferAsFunction = _glReadBuffer
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glReadBufferAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnable;

/// ```c
/// GLAPI void GLAPIENTRY glEnable( GLenum cap )
/// ```
/// {@category opengl}
void glEnable(int cap) {
  final glEnableAsFunction = _glEnable
      .cast<NativeFunction<Void Function(Uint32 cap)>>()
      .asFunction<void Function(int cap)>();
  return glEnableAsFunction(cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisable;

/// ```c
/// GLAPI void GLAPIENTRY glDisable( GLenum cap )
/// ```
/// {@category opengl}
void glDisable(int cap) {
  final glDisableAsFunction = _glDisable
      .cast<NativeFunction<Void Function(Uint32 cap)>>()
      .asFunction<void Function(int cap)>();
  return glDisableAsFunction(cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsEnabled;

/// ```c
/// GLAPI GLboolean GLAPIENTRY glIsEnabled( GLenum cap )
/// ```
/// {@category opengl}
int glIsEnabled(int cap) {
  final glIsEnabledAsFunction = _glIsEnabled
      .cast<NativeFunction<Int32 Function(Uint32 cap)>>()
      .asFunction<int Function(int cap)>();
  return glIsEnabledAsFunction(cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnableClientState;

/// ```c
/// GLAPI void GLAPIENTRY glEnableClientState( GLenum cap )
/// ```
/// {@category opengl}
void glEnableClientState(int cap) {
  final glEnableClientStateAsFunction = _glEnableClientState
      .cast<NativeFunction<Void Function(Uint32 cap)>>()
      .asFunction<void Function(int cap)>();
  return glEnableClientStateAsFunction(cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDisableClientState;

/// ```c
/// GLAPI void GLAPIENTRY glDisableClientState( GLenum cap )
/// ```
/// {@category opengl}
void glDisableClientState(int cap) {
  final glDisableClientStateAsFunction = _glDisableClientState
      .cast<NativeFunction<Void Function(Uint32 cap)>>()
      .asFunction<void Function(int cap)>();
  return glDisableClientStateAsFunction(cap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetBooleanv;

/// ```c
/// GLAPI void GLAPIENTRY glGetBooleanv( GLenum pname, GLboolean *params )
/// ```
/// {@category opengl}
void glGetBooleanv(int pname, Pointer<Int32> params) {
  final glGetBooleanvAsFunction = _glGetBooleanv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glGetBooleanvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetDoublev;

/// ```c
/// GLAPI void GLAPIENTRY glGetDoublev( GLenum pname, GLdouble *params )
/// ```
/// {@category opengl}
void glGetDoublev(int pname, Pointer<Double> params) {
  final glGetDoublevAsFunction = _glGetDoublev
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Double> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Double> params)>();
  return glGetDoublevAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetFloatv;

/// ```c
/// GLAPI void GLAPIENTRY glGetFloatv( GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetFloatv(int pname, Pointer<Float> params) {
  final glGetFloatvAsFunction = _glGetFloatv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glGetFloatvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetIntegerv;

/// ```c
/// GLAPI void GLAPIENTRY glGetIntegerv( GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetIntegerv(int pname, Pointer<Int32> params) {
  final glGetIntegervAsFunction = _glGetIntegerv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glGetIntegervAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushAttrib;

/// ```c
/// GLAPI void GLAPIENTRY glPushAttrib( GLbitfield mask )
/// ```
/// {@category opengl}
void glPushAttrib(int mask) {
  final glPushAttribAsFunction = _glPushAttrib
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glPushAttribAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopAttrib;

/// ```c
/// GLAPI void GLAPIENTRY glPopAttrib( void )
/// ```
/// {@category opengl}
void glPopAttrib() {
  final glPopAttribAsFunction = _glPopAttrib
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopAttribAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushClientAttrib;

/// ```c
/// GLAPI void GLAPIENTRY glPushClientAttrib( GLbitfield mask )
/// ```
/// {@category opengl}
void glPushClientAttrib(int mask) {
  final glPushClientAttribAsFunction = _glPushClientAttrib
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glPushClientAttribAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopClientAttrib;

/// ```c
/// GLAPI void GLAPIENTRY glPopClientAttrib( void )
/// ```
/// {@category opengl}
void glPopClientAttrib() {
  final glPopClientAttribAsFunction = _glPopClientAttrib
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopClientAttribAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRenderMode;

/// ```c
/// GLAPI GLint GLAPIENTRY glRenderMode( GLenum mode )
/// ```
/// {@category opengl}
int glRenderMode(int mode) {
  final glRenderModeAsFunction = _glRenderMode
      .cast<NativeFunction<Int32 Function(Uint32 mode)>>()
      .asFunction<int Function(int mode)>();
  return glRenderModeAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetError;

/// ```c
/// GLAPI GLenum GLAPIENTRY glGetError( void )
/// ```
/// {@category opengl}
int glGetError() {
  final glGetErrorAsFunction = _glGetError
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return glGetErrorAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetString;

/// ```c
/// GLAPI const GLubyte * GLAPIENTRY glGetString( GLenum name )
/// ```
/// {@category opengl}
Pointer<Uint8> glGetString(int name) {
  final glGetStringAsFunction = _glGetString
      .cast<NativeFunction<Pointer<Uint8> Function(Uint32 name)>>()
      .asFunction<Pointer<Uint8> Function(int name)>();
  return glGetStringAsFunction(name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFinish;

/// ```c
/// GLAPI void GLAPIENTRY glFinish( void )
/// ```
/// {@category opengl}
void glFinish() {
  final glFinishAsFunction = _glFinish
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFinishAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFlush;

/// ```c
/// GLAPI void GLAPIENTRY glFlush( void )
/// ```
/// {@category opengl}
void glFlush() {
  final glFlushAsFunction = _glFlush
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glFlushAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glHint;

/// ```c
/// GLAPI void GLAPIENTRY glHint( GLenum target, GLenum mode )
/// ```
/// {@category opengl}
void glHint(int target, int mode) {
  final glHintAsFunction = _glHint
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 mode)>>()
      .asFunction<void Function(int target, int mode)>();
  return glHintAsFunction(target, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearDepth;

/// ```c
/// GLAPI void GLAPIENTRY glClearDepth( GLclampd depth )
/// ```
/// {@category opengl}
void glClearDepth(double depth) {
  final glClearDepthAsFunction = _glClearDepth
      .cast<NativeFunction<Void Function(Double depth)>>()
      .asFunction<void Function(double depth)>();
  return glClearDepthAsFunction(depth);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthFunc;

/// ```c
/// GLAPI void GLAPIENTRY glDepthFunc( GLenum func )
/// ```
/// {@category opengl}
void glDepthFunc(int func) {
  final glDepthFuncAsFunction = _glDepthFunc
      .cast<NativeFunction<Void Function(Uint32 func)>>()
      .asFunction<void Function(int func)>();
  return glDepthFuncAsFunction(func);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthMask;

/// ```c
/// GLAPI void GLAPIENTRY glDepthMask( GLboolean flag )
/// ```
/// {@category opengl}
void glDepthMask(int flag) {
  final glDepthMaskAsFunction = _glDepthMask
      .cast<NativeFunction<Void Function(Int32 flag)>>()
      .asFunction<void Function(int flag)>();
  return glDepthMaskAsFunction(flag);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDepthRange;

/// ```c
/// GLAPI void GLAPIENTRY glDepthRange( GLclampd near_val, GLclampd far_val )
/// ```
/// {@category opengl}
void glDepthRange(double nearVal, double farVal) {
  final glDepthRangeAsFunction = _glDepthRange
      .cast<NativeFunction<Void Function(Double nearVal, Double farVal)>>()
      .asFunction<void Function(double nearVal, double farVal)>();
  return glDepthRangeAsFunction(nearVal, farVal);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearAccum;

/// ```c
/// GLAPI void GLAPIENTRY glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
/// ```
/// {@category opengl}
void glClearAccum(double red, double green, double blue, double alpha) {
  final glClearAccumAsFunction = _glClearAccum
      .cast<
        NativeFunction<
          Void Function(Float red, Float green, Float blue, Float alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glClearAccumAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAccum;

/// ```c
/// GLAPI void GLAPIENTRY glAccum( GLenum op, GLfloat value )
/// ```
/// {@category opengl}
void glAccum(int op, double value) {
  final glAccumAsFunction = _glAccum
      .cast<NativeFunction<Void Function(Uint32 op, Float value)>>()
      .asFunction<void Function(int op, double value)>();
  return glAccumAsFunction(op, value);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMatrixMode;

/// ```c
/// GLAPI void GLAPIENTRY glMatrixMode( GLenum mode )
/// ```
/// {@category opengl}
void glMatrixMode(int mode) {
  final glMatrixModeAsFunction = _glMatrixMode
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glMatrixModeAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glOrtho;

/// ```c
/// GLAPI void GLAPIENTRY glOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
/// ```
/// {@category opengl}
void glOrtho(
  double left,
  double right,
  double bottom,
  double top,
  double nearVal,
  double farVal,
) {
  final glOrthoAsFunction = _glOrtho
      .cast<
        NativeFunction<
          Void Function(
            Double left,
            Double right,
            Double bottom,
            Double top,
            Double nearVal,
            Double farVal,
          )
        >
      >()
      .asFunction<
        void Function(
          double left,
          double right,
          double bottom,
          double top,
          double nearVal,
          double farVal,
        )
      >();
  return glOrthoAsFunction(left, right, bottom, top, nearVal, farVal);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFrustum;

/// ```c
/// GLAPI void GLAPIENTRY glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
/// ```
/// {@category opengl}
void glFrustum(
  double left,
  double right,
  double bottom,
  double top,
  double nearVal,
  double farVal,
) {
  final glFrustumAsFunction = _glFrustum
      .cast<
        NativeFunction<
          Void Function(
            Double left,
            Double right,
            Double bottom,
            Double top,
            Double nearVal,
            Double farVal,
          )
        >
      >()
      .asFunction<
        void Function(
          double left,
          double right,
          double bottom,
          double top,
          double nearVal,
          double farVal,
        )
      >();
  return glFrustumAsFunction(left, right, bottom, top, nearVal, farVal);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glViewport;

/// ```c
/// GLAPI void GLAPIENTRY glViewport( GLint x, GLint y, GLsizei width, GLsizei height )
/// ```
/// {@category opengl}
void glViewport(int x, int y, int width, int height) {
  final glViewportAsFunction = _glViewport
      .cast<
        NativeFunction<
          Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height)
        >
      >()
      .asFunction<void Function(int x, int y, int width, int height)>();
  return glViewportAsFunction(x, y, width, height);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushMatrix;

/// ```c
/// GLAPI void GLAPIENTRY glPushMatrix( void )
/// ```
/// {@category opengl}
void glPushMatrix() {
  final glPushMatrixAsFunction = _glPushMatrix
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPushMatrixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopMatrix;

/// ```c
/// GLAPI void GLAPIENTRY glPopMatrix( void )
/// ```
/// {@category opengl}
void glPopMatrix() {
  final glPopMatrixAsFunction = _glPopMatrix
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopMatrixAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadIdentity;

/// ```c
/// GLAPI void GLAPIENTRY glLoadIdentity( void )
/// ```
/// {@category opengl}
void glLoadIdentity() {
  final glLoadIdentityAsFunction = _glLoadIdentity
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glLoadIdentityAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadMatrixd;

/// ```c
/// GLAPI void GLAPIENTRY glLoadMatrixd( const GLdouble *m )
/// ```
/// {@category opengl}
void glLoadMatrixd(Pointer<Double> m) {
  final glLoadMatrixdAsFunction = _glLoadMatrixd
      .cast<NativeFunction<Void Function(Pointer<Double> m)>>()
      .asFunction<void Function(Pointer<Double> m)>();
  return glLoadMatrixdAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadMatrixf;

/// ```c
/// GLAPI void GLAPIENTRY glLoadMatrixf( const GLfloat *m )
/// ```
/// {@category opengl}
void glLoadMatrixf(Pointer<Float> m) {
  final glLoadMatrixfAsFunction = _glLoadMatrixf
      .cast<NativeFunction<Void Function(Pointer<Float> m)>>()
      .asFunction<void Function(Pointer<Float> m)>();
  return glLoadMatrixfAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultMatrixd;

/// ```c
/// GLAPI void GLAPIENTRY glMultMatrixd( const GLdouble *m )
/// ```
/// {@category opengl}
void glMultMatrixd(Pointer<Double> m) {
  final glMultMatrixdAsFunction = _glMultMatrixd
      .cast<NativeFunction<Void Function(Pointer<Double> m)>>()
      .asFunction<void Function(Pointer<Double> m)>();
  return glMultMatrixdAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultMatrixf;

/// ```c
/// GLAPI void GLAPIENTRY glMultMatrixf( const GLfloat *m )
/// ```
/// {@category opengl}
void glMultMatrixf(Pointer<Float> m) {
  final glMultMatrixfAsFunction = _glMultMatrixf
      .cast<NativeFunction<Void Function(Pointer<Float> m)>>()
      .asFunction<void Function(Pointer<Float> m)>();
  return glMultMatrixfAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRotated;

/// ```c
/// GLAPI void GLAPIENTRY glRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z )
/// ```
/// {@category opengl}
void glRotated(double angle, double x, double y, double z) {
  final glRotatedAsFunction = _glRotated
      .cast<
        NativeFunction<
          Void Function(Double angle, Double x, Double y, Double z)
        >
      >()
      .asFunction<void Function(double angle, double x, double y, double z)>();
  return glRotatedAsFunction(angle, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRotatef;

/// ```c
/// GLAPI void GLAPIENTRY glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z )
/// ```
/// {@category opengl}
void glRotatef(double angle, double x, double y, double z) {
  final glRotatefAsFunction = _glRotatef
      .cast<
        NativeFunction<Void Function(Float angle, Float x, Float y, Float z)>
      >()
      .asFunction<void Function(double angle, double x, double y, double z)>();
  return glRotatefAsFunction(angle, x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScaled;

/// ```c
/// GLAPI void GLAPIENTRY glScaled( GLdouble x, GLdouble y, GLdouble z )
/// ```
/// {@category opengl}
void glScaled(double x, double y, double z) {
  final glScaledAsFunction = _glScaled
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glScaledAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glScalef;

/// ```c
/// GLAPI void GLAPIENTRY glScalef( GLfloat x, GLfloat y, GLfloat z )
/// ```
/// {@category opengl}
void glScalef(double x, double y, double z) {
  final glScalefAsFunction = _glScalef
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glScalefAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTranslated;

/// ```c
/// GLAPI void GLAPIENTRY glTranslated( GLdouble x, GLdouble y, GLdouble z )
/// ```
/// {@category opengl}
void glTranslated(double x, double y, double z) {
  final glTranslatedAsFunction = _glTranslated
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glTranslatedAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTranslatef;

/// ```c
/// GLAPI void GLAPIENTRY glTranslatef( GLfloat x, GLfloat y, GLfloat z )
/// ```
/// {@category opengl}
void glTranslatef(double x, double y, double z) {
  final glTranslatefAsFunction = _glTranslatef
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glTranslatefAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsList;

/// ```c
/// GLAPI GLboolean GLAPIENTRY glIsList( GLuint list )
/// ```
/// {@category opengl}
int glIsList(int list) {
  final glIsListAsFunction = _glIsList
      .cast<NativeFunction<Int32 Function(Uint32 list)>>()
      .asFunction<int Function(int list)>();
  return glIsListAsFunction(list);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteLists;

/// ```c
/// GLAPI void GLAPIENTRY glDeleteLists( GLuint list, GLsizei range )
/// ```
/// {@category opengl}
void glDeleteLists(int list, int range) {
  final glDeleteListsAsFunction = _glDeleteLists
      .cast<NativeFunction<Void Function(Uint32 list, Uint32 range)>>()
      .asFunction<void Function(int list, int range)>();
  return glDeleteListsAsFunction(list, range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenLists;

/// ```c
/// GLAPI GLuint GLAPIENTRY glGenLists( GLsizei range )
/// ```
/// {@category opengl}
int glGenLists(int range) {
  final glGenListsAsFunction = _glGenLists
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return glGenListsAsFunction(range);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNewList;

/// ```c
/// GLAPI void GLAPIENTRY glNewList( GLuint list, GLenum mode )
/// ```
/// {@category opengl}
void glNewList(int list, int mode) {
  final glNewListAsFunction = _glNewList
      .cast<NativeFunction<Void Function(Uint32 list, Uint32 mode)>>()
      .asFunction<void Function(int list, int mode)>();
  return glNewListAsFunction(list, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEndList;

/// ```c
/// GLAPI void GLAPIENTRY glEndList( void )
/// ```
/// {@category opengl}
void glEndList() {
  final glEndListAsFunction = _glEndList
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndListAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCallList;

/// ```c
/// GLAPI void GLAPIENTRY glCallList( GLuint list )
/// ```
/// {@category opengl}
void glCallList(int list) {
  final glCallListAsFunction = _glCallList
      .cast<NativeFunction<Void Function(Uint32 list)>>()
      .asFunction<void Function(int list)>();
  return glCallListAsFunction(list);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCallLists;

/// ```c
/// GLAPI void GLAPIENTRY glCallLists( GLsizei n, GLenum type, const GLvoid *lists )
/// ```
/// {@category opengl}
void glCallLists(int n, int type, Pointer<NativeType> lists) {
  final glCallListsAsFunction = _glCallLists
      .cast<
        NativeFunction<
          Void Function(Uint32 n, Uint32 type, Pointer<NativeType> lists)
        >
      >()
      .asFunction<void Function(int n, int type, Pointer<NativeType> lists)>();
  return glCallListsAsFunction(n, type, lists);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glListBase;

/// ```c
/// GLAPI void GLAPIENTRY glListBase( GLuint base )
/// ```
/// {@category opengl}
void glListBase(int base) {
  final glListBaseAsFunction = _glListBase
      .cast<NativeFunction<Void Function(Uint32 base)>>()
      .asFunction<void Function(int base)>();
  return glListBaseAsFunction(base);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBegin;

/// ```c
/// GLAPI void GLAPIENTRY glBegin( GLenum mode )
/// ```
/// {@category opengl}
void glBegin(int mode) {
  final glBeginAsFunction = _glBegin
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glBeginAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEnd;

/// ```c
/// GLAPI void GLAPIENTRY glEnd( void )
/// ```
/// {@category opengl}
void glEnd() {
  final glEndAsFunction = _glEnd
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glEndAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2d;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2d( GLdouble x, GLdouble y )
/// ```
/// {@category opengl}
void glVertex2d(double x, double y) {
  final glVertex2dAsFunction = _glVertex2d
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return glVertex2dAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2f;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2f( GLfloat x, GLfloat y )
/// ```
/// {@category opengl}
void glVertex2f(double x, double y) {
  final glVertex2fAsFunction = _glVertex2f
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return glVertex2fAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2i;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2i( GLint x, GLint y )
/// ```
/// {@category opengl}
void glVertex2i(int x, int y) {
  final glVertex2iAsFunction = _glVertex2i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glVertex2iAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2s;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2s( GLshort x, GLshort y )
/// ```
/// {@category opengl}
void glVertex2s(int x, int y) {
  final glVertex2sAsFunction = _glVertex2s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glVertex2sAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3d;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3d( GLdouble x, GLdouble y, GLdouble z )
/// ```
/// {@category opengl}
void glVertex3d(double x, double y, double z) {
  final glVertex3dAsFunction = _glVertex3d
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glVertex3dAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3f;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3f( GLfloat x, GLfloat y, GLfloat z )
/// ```
/// {@category opengl}
void glVertex3f(double x, double y, double z) {
  final glVertex3fAsFunction = _glVertex3f
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glVertex3fAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3i;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3i( GLint x, GLint y, GLint z )
/// ```
/// {@category opengl}
void glVertex3i(int x, int y, int z) {
  final glVertex3iAsFunction = _glVertex3i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glVertex3iAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3s;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3s( GLshort x, GLshort y, GLshort z )
/// ```
/// {@category opengl}
void glVertex3s(int x, int y, int z) {
  final glVertex3sAsFunction = _glVertex3s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glVertex3sAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4d;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
/// ```
/// {@category opengl}
void glVertex4d(double x, double y, double z, double w) {
  final glVertex4dAsFunction = _glVertex4d
      .cast<
        NativeFunction<Void Function(Double x, Double y, Double z, Double w)>
      >()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glVertex4dAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4f;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
/// ```
/// {@category opengl}
void glVertex4f(double x, double y, double z, double w) {
  final glVertex4fAsFunction = _glVertex4f
      .cast<NativeFunction<Void Function(Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glVertex4fAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4i;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4i( GLint x, GLint y, GLint z, GLint w )
/// ```
/// {@category opengl}
void glVertex4i(int x, int y, int z, int w) {
  final glVertex4iAsFunction = _glVertex4i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glVertex4iAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4s;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
/// ```
/// {@category opengl}
void glVertex4s(int x, int y, int z, int w) {
  final glVertex4sAsFunction = _glVertex4s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glVertex4sAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2dv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glVertex2dv(Pointer<Double> v) {
  final glVertex2dvAsFunction = _glVertex2dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glVertex2dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2fv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glVertex2fv(Pointer<Float> v) {
  final glVertex2fvAsFunction = _glVertex2fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glVertex2fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2iv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2iv( const GLint *v )
/// ```
/// {@category opengl}
void glVertex2iv(Pointer<Int32> v) {
  final glVertex2ivAsFunction = _glVertex2iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glVertex2ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex2sv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex2sv( const GLshort *v )
/// ```
/// {@category opengl}
void glVertex2sv(Pointer<Int16> v) {
  final glVertex2svAsFunction = _glVertex2sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glVertex2svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3dv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glVertex3dv(Pointer<Double> v) {
  final glVertex3dvAsFunction = _glVertex3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glVertex3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3fv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glVertex3fv(Pointer<Float> v) {
  final glVertex3fvAsFunction = _glVertex3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glVertex3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3iv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3iv( const GLint *v )
/// ```
/// {@category opengl}
void glVertex3iv(Pointer<Int32> v) {
  final glVertex3ivAsFunction = _glVertex3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glVertex3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex3sv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex3sv( const GLshort *v )
/// ```
/// {@category opengl}
void glVertex3sv(Pointer<Int16> v) {
  final glVertex3svAsFunction = _glVertex3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glVertex3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4dv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glVertex4dv(Pointer<Double> v) {
  final glVertex4dvAsFunction = _glVertex4dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glVertex4dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4fv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glVertex4fv(Pointer<Float> v) {
  final glVertex4fvAsFunction = _glVertex4fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glVertex4fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4iv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4iv( const GLint *v )
/// ```
/// {@category opengl}
void glVertex4iv(Pointer<Int32> v) {
  final glVertex4ivAsFunction = _glVertex4iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glVertex4ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertex4sv;

/// ```c
/// GLAPI void GLAPIENTRY glVertex4sv( const GLshort *v )
/// ```
/// {@category opengl}
void glVertex4sv(Pointer<Int16> v) {
  final glVertex4svAsFunction = _glVertex4sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glVertex4svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3b;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz )
/// ```
/// {@category opengl}
void glNormal3b(int nx, int ny, int nz) {
  final glNormal3bAsFunction = _glNormal3b
      .cast<NativeFunction<Void Function(Int8 nx, Int8 ny, Int8 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return glNormal3bAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3d;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz )
/// ```
/// {@category opengl}
void glNormal3d(double nx, double ny, double nz) {
  final glNormal3dAsFunction = _glNormal3d
      .cast<NativeFunction<Void Function(Double nx, Double ny, Double nz)>>()
      .asFunction<void Function(double nx, double ny, double nz)>();
  return glNormal3dAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3f;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz )
/// ```
/// {@category opengl}
void glNormal3f(double nx, double ny, double nz) {
  final glNormal3fAsFunction = _glNormal3f
      .cast<NativeFunction<Void Function(Float nx, Float ny, Float nz)>>()
      .asFunction<void Function(double nx, double ny, double nz)>();
  return glNormal3fAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3i;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3i( GLint nx, GLint ny, GLint nz )
/// ```
/// {@category opengl}
void glNormal3i(int nx, int ny, int nz) {
  final glNormal3iAsFunction = _glNormal3i
      .cast<NativeFunction<Void Function(Int32 nx, Int32 ny, Int32 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return glNormal3iAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3s;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3s( GLshort nx, GLshort ny, GLshort nz )
/// ```
/// {@category opengl}
void glNormal3s(int nx, int ny, int nz) {
  final glNormal3sAsFunction = _glNormal3s
      .cast<NativeFunction<Void Function(Int16 nx, Int16 ny, Int16 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return glNormal3sAsFunction(nx, ny, nz);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3bv;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3bv( const GLbyte *v )
/// ```
/// {@category opengl}
void glNormal3bv(String v) {
  final glNormal3bvAsFunction = _glNormal3bv
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glNormal3bvAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3dv;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glNormal3dv(Pointer<Double> v) {
  final glNormal3dvAsFunction = _glNormal3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glNormal3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3fv;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glNormal3fv(Pointer<Float> v) {
  final glNormal3fvAsFunction = _glNormal3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glNormal3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3iv;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3iv( const GLint *v )
/// ```
/// {@category opengl}
void glNormal3iv(Pointer<Int32> v) {
  final glNormal3ivAsFunction = _glNormal3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glNormal3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormal3sv;

/// ```c
/// GLAPI void GLAPIENTRY glNormal3sv( const GLshort *v )
/// ```
/// {@category opengl}
void glNormal3sv(Pointer<Int16> v) {
  final glNormal3svAsFunction = _glNormal3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glNormal3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexd;

/// ```c
/// GLAPI void GLAPIENTRY glIndexd( GLdouble c )
/// ```
/// {@category opengl}
void glIndexd(double c) {
  final glIndexdAsFunction = _glIndexd
      .cast<NativeFunction<Void Function(Double c)>>()
      .asFunction<void Function(double c)>();
  return glIndexdAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexf;

/// ```c
/// GLAPI void GLAPIENTRY glIndexf( GLfloat c )
/// ```
/// {@category opengl}
void glIndexf(double c) {
  final glIndexfAsFunction = _glIndexf
      .cast<NativeFunction<Void Function(Float c)>>()
      .asFunction<void Function(double c)>();
  return glIndexfAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexi;

/// ```c
/// GLAPI void GLAPIENTRY glIndexi( GLint c )
/// ```
/// {@category opengl}
void glIndexi(int c) {
  final glIndexiAsFunction = _glIndexi
      .cast<NativeFunction<Void Function(Int32 c)>>()
      .asFunction<void Function(int c)>();
  return glIndexiAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexs;

/// ```c
/// GLAPI void GLAPIENTRY glIndexs( GLshort c )
/// ```
/// {@category opengl}
void glIndexs(int c) {
  final glIndexsAsFunction = _glIndexs
      .cast<NativeFunction<Void Function(Int16 c)>>()
      .asFunction<void Function(int c)>();
  return glIndexsAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexub;

/// ```c
/// GLAPI void GLAPIENTRY glIndexub( GLubyte c )
/// ```
/// {@category opengl}
void glIndexub(int c) {
  final glIndexubAsFunction = _glIndexub
      .cast<NativeFunction<Void Function(Uint8 c)>>()
      .asFunction<void Function(int c)>();
  return glIndexubAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexdv;

/// ```c
/// GLAPI void GLAPIENTRY glIndexdv( const GLdouble *c )
/// ```
/// {@category opengl}
void glIndexdv(Pointer<Double> c) {
  final glIndexdvAsFunction = _glIndexdv
      .cast<NativeFunction<Void Function(Pointer<Double> c)>>()
      .asFunction<void Function(Pointer<Double> c)>();
  return glIndexdvAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexfv;

/// ```c
/// GLAPI void GLAPIENTRY glIndexfv( const GLfloat *c )
/// ```
/// {@category opengl}
void glIndexfv(Pointer<Float> c) {
  final glIndexfvAsFunction = _glIndexfv
      .cast<NativeFunction<Void Function(Pointer<Float> c)>>()
      .asFunction<void Function(Pointer<Float> c)>();
  return glIndexfvAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexiv;

/// ```c
/// GLAPI void GLAPIENTRY glIndexiv( const GLint *c )
/// ```
/// {@category opengl}
void glIndexiv(Pointer<Int32> c) {
  final glIndexivAsFunction = _glIndexiv
      .cast<NativeFunction<Void Function(Pointer<Int32> c)>>()
      .asFunction<void Function(Pointer<Int32> c)>();
  return glIndexivAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexsv;

/// ```c
/// GLAPI void GLAPIENTRY glIndexsv( const GLshort *c )
/// ```
/// {@category opengl}
void glIndexsv(Pointer<Int16> c) {
  final glIndexsvAsFunction = _glIndexsv
      .cast<NativeFunction<Void Function(Pointer<Int16> c)>>()
      .asFunction<void Function(Pointer<Int16> c)>();
  return glIndexsvAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexubv;

/// ```c
/// GLAPI void GLAPIENTRY glIndexubv( const GLubyte *c )
/// ```
/// {@category opengl}
void glIndexubv(Pointer<Uint8> c) {
  final glIndexubvAsFunction = _glIndexubv
      .cast<NativeFunction<Void Function(Pointer<Uint8> c)>>()
      .asFunction<void Function(Pointer<Uint8> c)>();
  return glIndexubvAsFunction(c);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3b;

/// ```c
/// GLAPI void GLAPIENTRY glColor3b( GLbyte red, GLbyte green, GLbyte blue )
/// ```
/// {@category opengl}
void glColor3b(int red, int green, int blue) {
  final glColor3bAsFunction = _glColor3b
      .cast<NativeFunction<Void Function(Int8 red, Int8 green, Int8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3bAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3d;

/// ```c
/// GLAPI void GLAPIENTRY glColor3d( GLdouble red, GLdouble green, GLdouble blue )
/// ```
/// {@category opengl}
void glColor3d(double red, double green, double blue) {
  final glColor3dAsFunction = _glColor3d
      .cast<
        NativeFunction<Void Function(Double red, Double green, Double blue)>
      >()
      .asFunction<void Function(double red, double green, double blue)>();
  return glColor3dAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3f;

/// ```c
/// GLAPI void GLAPIENTRY glColor3f( GLfloat red, GLfloat green, GLfloat blue )
/// ```
/// {@category opengl}
void glColor3f(double red, double green, double blue) {
  final glColor3fAsFunction = _glColor3f
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return glColor3fAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3i;

/// ```c
/// GLAPI void GLAPIENTRY glColor3i( GLint red, GLint green, GLint blue )
/// ```
/// {@category opengl}
void glColor3i(int red, int green, int blue) {
  final glColor3iAsFunction = _glColor3i
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3iAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3s;

/// ```c
/// GLAPI void GLAPIENTRY glColor3s( GLshort red, GLshort green, GLshort blue )
/// ```
/// {@category opengl}
void glColor3s(int red, int green, int blue) {
  final glColor3sAsFunction = _glColor3s
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3sAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3ub;

/// ```c
/// GLAPI void GLAPIENTRY glColor3ub( GLubyte red, GLubyte green, GLubyte blue )
/// ```
/// {@category opengl}
void glColor3ub(int red, int green, int blue) {
  final glColor3ubAsFunction = _glColor3ub
      .cast<NativeFunction<Void Function(Uint8 red, Uint8 green, Uint8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3ubAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3ui;

/// ```c
/// GLAPI void GLAPIENTRY glColor3ui( GLuint red, GLuint green, GLuint blue )
/// ```
/// {@category opengl}
void glColor3ui(int red, int green, int blue) {
  final glColor3uiAsFunction = _glColor3ui
      .cast<
        NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3uiAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3us;

/// ```c
/// GLAPI void GLAPIENTRY glColor3us( GLushort red, GLushort green, GLushort blue )
/// ```
/// {@category opengl}
void glColor3us(int red, int green, int blue) {
  final glColor3usAsFunction = _glColor3us
      .cast<
        NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>
      >()
      .asFunction<void Function(int red, int green, int blue)>();
  return glColor3usAsFunction(red, green, blue);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4b;

/// ```c
/// GLAPI void GLAPIENTRY glColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha )
/// ```
/// {@category opengl}
void glColor4b(int red, int green, int blue, int alpha) {
  final glColor4bAsFunction = _glColor4b
      .cast<
        NativeFunction<
          Void Function(Int8 red, Int8 green, Int8 blue, Int8 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4bAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4d;

/// ```c
/// GLAPI void GLAPIENTRY glColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha )
/// ```
/// {@category opengl}
void glColor4d(double red, double green, double blue, double alpha) {
  final glColor4dAsFunction = _glColor4d
      .cast<
        NativeFunction<
          Void Function(Double red, Double green, Double blue, Double alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glColor4dAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4f;

/// ```c
/// GLAPI void GLAPIENTRY glColor4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
/// ```
/// {@category opengl}
void glColor4f(double red, double green, double blue, double alpha) {
  final glColor4fAsFunction = _glColor4f
      .cast<
        NativeFunction<
          Void Function(Float red, Float green, Float blue, Float alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glColor4fAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4i;

/// ```c
/// GLAPI void GLAPIENTRY glColor4i( GLint red, GLint green, GLint blue, GLint alpha )
/// ```
/// {@category opengl}
void glColor4i(int red, int green, int blue, int alpha) {
  final glColor4iAsFunction = _glColor4i
      .cast<
        NativeFunction<
          Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4iAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4s;

/// ```c
/// GLAPI void GLAPIENTRY glColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha )
/// ```
/// {@category opengl}
void glColor4s(int red, int green, int blue, int alpha) {
  final glColor4sAsFunction = _glColor4s
      .cast<
        NativeFunction<
          Void Function(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4sAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ub;

/// ```c
/// GLAPI void GLAPIENTRY glColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
/// ```
/// {@category opengl}
void glColor4ub(int red, int green, int blue, int alpha) {
  final glColor4ubAsFunction = _glColor4ub
      .cast<
        NativeFunction<
          Void Function(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4ubAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ui;

/// ```c
/// GLAPI void GLAPIENTRY glColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha )
/// ```
/// {@category opengl}
void glColor4ui(int red, int green, int blue, int alpha) {
  final glColor4uiAsFunction = _glColor4ui
      .cast<
        NativeFunction<
          Void Function(Uint32 red, Uint32 green, Uint32 blue, Uint32 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4uiAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4us;

/// ```c
/// GLAPI void GLAPIENTRY glColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha )
/// ```
/// {@category opengl}
void glColor4us(int red, int green, int blue, int alpha) {
  final glColor4usAsFunction = _glColor4us
      .cast<
        NativeFunction<
          Void Function(Uint16 red, Uint16 green, Uint16 blue, Uint16 alpha)
        >
      >()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return glColor4usAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3bv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3bv( const GLbyte *v )
/// ```
/// {@category opengl}
void glColor3bv(String v) {
  final glColor3bvAsFunction = _glColor3bv
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glColor3bvAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3dv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glColor3dv(Pointer<Double> v) {
  final glColor3dvAsFunction = _glColor3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glColor3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3fv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glColor3fv(Pointer<Float> v) {
  final glColor3fvAsFunction = _glColor3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glColor3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3iv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3iv( const GLint *v )
/// ```
/// {@category opengl}
void glColor3iv(Pointer<Int32> v) {
  final glColor3ivAsFunction = _glColor3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glColor3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3sv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3sv( const GLshort *v )
/// ```
/// {@category opengl}
void glColor3sv(Pointer<Int16> v) {
  final glColor3svAsFunction = _glColor3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glColor3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3ubv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3ubv( const GLubyte *v )
/// ```
/// {@category opengl}
void glColor3ubv(Pointer<Uint8> v) {
  final glColor3ubvAsFunction = _glColor3ubv
      .cast<NativeFunction<Void Function(Pointer<Uint8> v)>>()
      .asFunction<void Function(Pointer<Uint8> v)>();
  return glColor3ubvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3uiv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3uiv( const GLuint *v )
/// ```
/// {@category opengl}
void glColor3uiv(Pointer<Uint32> v) {
  final glColor3uivAsFunction = _glColor3uiv
      .cast<NativeFunction<Void Function(Pointer<Uint32> v)>>()
      .asFunction<void Function(Pointer<Uint32> v)>();
  return glColor3uivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor3usv;

/// ```c
/// GLAPI void GLAPIENTRY glColor3usv( const GLushort *v )
/// ```
/// {@category opengl}
void glColor3usv(Pointer<Uint16> v) {
  final glColor3usvAsFunction = _glColor3usv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glColor3usvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4bv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4bv( const GLbyte *v )
/// ```
/// {@category opengl}
void glColor4bv(String v) {
  final glColor4bvAsFunction = _glColor4bv
      .cast<NativeFunction<Void Function(Pointer<Utf8> v)>>()
      .asFunction<void Function(Pointer<Utf8> v)>();
  final vPointer = v.toNativeUtf8();
  final result = glColor4bvAsFunction(vPointer);
  calloc.free(vPointer);
  return result;
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4dv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glColor4dv(Pointer<Double> v) {
  final glColor4dvAsFunction = _glColor4dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glColor4dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4fv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glColor4fv(Pointer<Float> v) {
  final glColor4fvAsFunction = _glColor4fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glColor4fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4iv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4iv( const GLint *v )
/// ```
/// {@category opengl}
void glColor4iv(Pointer<Int32> v) {
  final glColor4ivAsFunction = _glColor4iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glColor4ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4sv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4sv( const GLshort *v )
/// ```
/// {@category opengl}
void glColor4sv(Pointer<Int16> v) {
  final glColor4svAsFunction = _glColor4sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glColor4svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4ubv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4ubv( const GLubyte *v )
/// ```
/// {@category opengl}
void glColor4ubv(Pointer<Uint8> v) {
  final glColor4ubvAsFunction = _glColor4ubv
      .cast<NativeFunction<Void Function(Pointer<Uint8> v)>>()
      .asFunction<void Function(Pointer<Uint8> v)>();
  return glColor4ubvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4uiv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4uiv( const GLuint *v )
/// ```
/// {@category opengl}
void glColor4uiv(Pointer<Uint32> v) {
  final glColor4uivAsFunction = _glColor4uiv
      .cast<NativeFunction<Void Function(Pointer<Uint32> v)>>()
      .asFunction<void Function(Pointer<Uint32> v)>();
  return glColor4uivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColor4usv;

/// ```c
/// GLAPI void GLAPIENTRY glColor4usv( const GLushort *v )
/// ```
/// {@category opengl}
void glColor4usv(Pointer<Uint16> v) {
  final glColor4usvAsFunction = _glColor4usv
      .cast<NativeFunction<Void Function(Pointer<Uint16> v)>>()
      .asFunction<void Function(Pointer<Uint16> v)>();
  return glColor4usvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1d;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1d( GLdouble s )
/// ```
/// {@category opengl}
void glTexCoord1d(double s) {
  final glTexCoord1dAsFunction = _glTexCoord1d
      .cast<NativeFunction<Void Function(Double s)>>()
      .asFunction<void Function(double s)>();
  return glTexCoord1dAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1f;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1f( GLfloat s )
/// ```
/// {@category opengl}
void glTexCoord1f(double s) {
  final glTexCoord1fAsFunction = _glTexCoord1f
      .cast<NativeFunction<Void Function(Float s)>>()
      .asFunction<void Function(double s)>();
  return glTexCoord1fAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1i;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1i( GLint s )
/// ```
/// {@category opengl}
void glTexCoord1i(int s) {
  final glTexCoord1iAsFunction = _glTexCoord1i
      .cast<NativeFunction<Void Function(Int32 s)>>()
      .asFunction<void Function(int s)>();
  return glTexCoord1iAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1s;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1s( GLshort s )
/// ```
/// {@category opengl}
void glTexCoord1s(int s) {
  final glTexCoord1sAsFunction = _glTexCoord1s
      .cast<NativeFunction<Void Function(Int16 s)>>()
      .asFunction<void Function(int s)>();
  return glTexCoord1sAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2d;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2d( GLdouble s, GLdouble t )
/// ```
/// {@category opengl}
void glTexCoord2d(double s, double t) {
  final glTexCoord2dAsFunction = _glTexCoord2d
      .cast<NativeFunction<Void Function(Double s, Double t)>>()
      .asFunction<void Function(double s, double t)>();
  return glTexCoord2dAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2f;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2f( GLfloat s, GLfloat t )
/// ```
/// {@category opengl}
void glTexCoord2f(double s, double t) {
  final glTexCoord2fAsFunction = _glTexCoord2f
      .cast<NativeFunction<Void Function(Float s, Float t)>>()
      .asFunction<void Function(double s, double t)>();
  return glTexCoord2fAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2i;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2i( GLint s, GLint t )
/// ```
/// {@category opengl}
void glTexCoord2i(int s, int t) {
  final glTexCoord2iAsFunction = _glTexCoord2i
      .cast<NativeFunction<Void Function(Int32 s, Int32 t)>>()
      .asFunction<void Function(int s, int t)>();
  return glTexCoord2iAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2s;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2s( GLshort s, GLshort t )
/// ```
/// {@category opengl}
void glTexCoord2s(int s, int t) {
  final glTexCoord2sAsFunction = _glTexCoord2s
      .cast<NativeFunction<Void Function(Int16 s, Int16 t)>>()
      .asFunction<void Function(int s, int t)>();
  return glTexCoord2sAsFunction(s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3d;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3d( GLdouble s, GLdouble t, GLdouble r )
/// ```
/// {@category opengl}
void glTexCoord3d(double s, double t, double r) {
  final glTexCoord3dAsFunction = _glTexCoord3d
      .cast<NativeFunction<Void Function(Double s, Double t, Double r)>>()
      .asFunction<void Function(double s, double t, double r)>();
  return glTexCoord3dAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3f;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3f( GLfloat s, GLfloat t, GLfloat r )
/// ```
/// {@category opengl}
void glTexCoord3f(double s, double t, double r) {
  final glTexCoord3fAsFunction = _glTexCoord3f
      .cast<NativeFunction<Void Function(Float s, Float t, Float r)>>()
      .asFunction<void Function(double s, double t, double r)>();
  return glTexCoord3fAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3i;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3i( GLint s, GLint t, GLint r )
/// ```
/// {@category opengl}
void glTexCoord3i(int s, int t, int r) {
  final glTexCoord3iAsFunction = _glTexCoord3i
      .cast<NativeFunction<Void Function(Int32 s, Int32 t, Int32 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return glTexCoord3iAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3s;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3s( GLshort s, GLshort t, GLshort r )
/// ```
/// {@category opengl}
void glTexCoord3s(int s, int t, int r) {
  final glTexCoord3sAsFunction = _glTexCoord3s
      .cast<NativeFunction<Void Function(Int16 s, Int16 t, Int16 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return glTexCoord3sAsFunction(s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4d;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
/// ```
/// {@category opengl}
void glTexCoord4d(double s, double t, double r, double q) {
  final glTexCoord4dAsFunction = _glTexCoord4d
      .cast<
        NativeFunction<Void Function(Double s, Double t, Double r, Double q)>
      >()
      .asFunction<void Function(double s, double t, double r, double q)>();
  return glTexCoord4dAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4f;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q )
/// ```
/// {@category opengl}
void glTexCoord4f(double s, double t, double r, double q) {
  final glTexCoord4fAsFunction = _glTexCoord4f
      .cast<NativeFunction<Void Function(Float s, Float t, Float r, Float q)>>()
      .asFunction<void Function(double s, double t, double r, double q)>();
  return glTexCoord4fAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4i;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4i( GLint s, GLint t, GLint r, GLint q )
/// ```
/// {@category opengl}
void glTexCoord4i(int s, int t, int r, int q) {
  final glTexCoord4iAsFunction = _glTexCoord4i
      .cast<NativeFunction<Void Function(Int32 s, Int32 t, Int32 r, Int32 q)>>()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return glTexCoord4iAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4s;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
/// ```
/// {@category opengl}
void glTexCoord4s(int s, int t, int r, int q) {
  final glTexCoord4sAsFunction = _glTexCoord4s
      .cast<NativeFunction<Void Function(Int16 s, Int16 t, Int16 r, Int16 q)>>()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return glTexCoord4sAsFunction(s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1dv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glTexCoord1dv(Pointer<Double> v) {
  final glTexCoord1dvAsFunction = _glTexCoord1dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glTexCoord1dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1fv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glTexCoord1fv(Pointer<Float> v) {
  final glTexCoord1fvAsFunction = _glTexCoord1fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glTexCoord1fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1iv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1iv( const GLint *v )
/// ```
/// {@category opengl}
void glTexCoord1iv(Pointer<Int32> v) {
  final glTexCoord1ivAsFunction = _glTexCoord1iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glTexCoord1ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord1sv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord1sv( const GLshort *v )
/// ```
/// {@category opengl}
void glTexCoord1sv(Pointer<Int16> v) {
  final glTexCoord1svAsFunction = _glTexCoord1sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glTexCoord1svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2dv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glTexCoord2dv(Pointer<Double> v) {
  final glTexCoord2dvAsFunction = _glTexCoord2dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glTexCoord2dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2fv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glTexCoord2fv(Pointer<Float> v) {
  final glTexCoord2fvAsFunction = _glTexCoord2fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glTexCoord2fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2iv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2iv( const GLint *v )
/// ```
/// {@category opengl}
void glTexCoord2iv(Pointer<Int32> v) {
  final glTexCoord2ivAsFunction = _glTexCoord2iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glTexCoord2ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord2sv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord2sv( const GLshort *v )
/// ```
/// {@category opengl}
void glTexCoord2sv(Pointer<Int16> v) {
  final glTexCoord2svAsFunction = _glTexCoord2sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glTexCoord2svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3dv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glTexCoord3dv(Pointer<Double> v) {
  final glTexCoord3dvAsFunction = _glTexCoord3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glTexCoord3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3fv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glTexCoord3fv(Pointer<Float> v) {
  final glTexCoord3fvAsFunction = _glTexCoord3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glTexCoord3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3iv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3iv( const GLint *v )
/// ```
/// {@category opengl}
void glTexCoord3iv(Pointer<Int32> v) {
  final glTexCoord3ivAsFunction = _glTexCoord3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glTexCoord3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord3sv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord3sv( const GLshort *v )
/// ```
/// {@category opengl}
void glTexCoord3sv(Pointer<Int16> v) {
  final glTexCoord3svAsFunction = _glTexCoord3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glTexCoord3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4dv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glTexCoord4dv(Pointer<Double> v) {
  final glTexCoord4dvAsFunction = _glTexCoord4dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glTexCoord4dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4fv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glTexCoord4fv(Pointer<Float> v) {
  final glTexCoord4fvAsFunction = _glTexCoord4fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glTexCoord4fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4iv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4iv( const GLint *v )
/// ```
/// {@category opengl}
void glTexCoord4iv(Pointer<Int32> v) {
  final glTexCoord4ivAsFunction = _glTexCoord4iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glTexCoord4ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoord4sv;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoord4sv( const GLshort *v )
/// ```
/// {@category opengl}
void glTexCoord4sv(Pointer<Int16> v) {
  final glTexCoord4svAsFunction = _glTexCoord4sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glTexCoord4svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2d;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2d( GLdouble x, GLdouble y )
/// ```
/// {@category opengl}
void glRasterPos2d(double x, double y) {
  final glRasterPos2dAsFunction = _glRasterPos2d
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return glRasterPos2dAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2f;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2f( GLfloat x, GLfloat y )
/// ```
/// {@category opengl}
void glRasterPos2f(double x, double y) {
  final glRasterPos2fAsFunction = _glRasterPos2f
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return glRasterPos2fAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2i;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2i( GLint x, GLint y )
/// ```
/// {@category opengl}
void glRasterPos2i(int x, int y) {
  final glRasterPos2iAsFunction = _glRasterPos2i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glRasterPos2iAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2s;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2s( GLshort x, GLshort y )
/// ```
/// {@category opengl}
void glRasterPos2s(int x, int y) {
  final glRasterPos2sAsFunction = _glRasterPos2s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return glRasterPos2sAsFunction(x, y);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3d;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3d( GLdouble x, GLdouble y, GLdouble z )
/// ```
/// {@category opengl}
void glRasterPos3d(double x, double y, double z) {
  final glRasterPos3dAsFunction = _glRasterPos3d
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glRasterPos3dAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3f;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3f( GLfloat x, GLfloat y, GLfloat z )
/// ```
/// {@category opengl}
void glRasterPos3f(double x, double y, double z) {
  final glRasterPos3fAsFunction = _glRasterPos3f
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return glRasterPos3fAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3i;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3i( GLint x, GLint y, GLint z )
/// ```
/// {@category opengl}
void glRasterPos3i(int x, int y, int z) {
  final glRasterPos3iAsFunction = _glRasterPos3i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glRasterPos3iAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3s;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3s( GLshort x, GLshort y, GLshort z )
/// ```
/// {@category opengl}
void glRasterPos3s(int x, int y, int z) {
  final glRasterPos3sAsFunction = _glRasterPos3s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return glRasterPos3sAsFunction(x, y, z);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4d;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
/// ```
/// {@category opengl}
void glRasterPos4d(double x, double y, double z, double w) {
  final glRasterPos4dAsFunction = _glRasterPos4d
      .cast<
        NativeFunction<Void Function(Double x, Double y, Double z, Double w)>
      >()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glRasterPos4dAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4f;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
/// ```
/// {@category opengl}
void glRasterPos4f(double x, double y, double z, double w) {
  final glRasterPos4fAsFunction = _glRasterPos4f
      .cast<NativeFunction<Void Function(Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return glRasterPos4fAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4i;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4i( GLint x, GLint y, GLint z, GLint w )
/// ```
/// {@category opengl}
void glRasterPos4i(int x, int y, int z, int w) {
  final glRasterPos4iAsFunction = _glRasterPos4i
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glRasterPos4iAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4s;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w )
/// ```
/// {@category opengl}
void glRasterPos4s(int x, int y, int z, int w) {
  final glRasterPos4sAsFunction = _glRasterPos4s
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return glRasterPos4sAsFunction(x, y, z, w);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2dv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glRasterPos2dv(Pointer<Double> v) {
  final glRasterPos2dvAsFunction = _glRasterPos2dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glRasterPos2dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2fv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glRasterPos2fv(Pointer<Float> v) {
  final glRasterPos2fvAsFunction = _glRasterPos2fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glRasterPos2fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2iv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2iv( const GLint *v )
/// ```
/// {@category opengl}
void glRasterPos2iv(Pointer<Int32> v) {
  final glRasterPos2ivAsFunction = _glRasterPos2iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glRasterPos2ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos2sv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos2sv( const GLshort *v )
/// ```
/// {@category opengl}
void glRasterPos2sv(Pointer<Int16> v) {
  final glRasterPos2svAsFunction = _glRasterPos2sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glRasterPos2svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3dv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glRasterPos3dv(Pointer<Double> v) {
  final glRasterPos3dvAsFunction = _glRasterPos3dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glRasterPos3dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3fv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glRasterPos3fv(Pointer<Float> v) {
  final glRasterPos3fvAsFunction = _glRasterPos3fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glRasterPos3fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3iv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3iv( const GLint *v )
/// ```
/// {@category opengl}
void glRasterPos3iv(Pointer<Int32> v) {
  final glRasterPos3ivAsFunction = _glRasterPos3iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glRasterPos3ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos3sv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos3sv( const GLshort *v )
/// ```
/// {@category opengl}
void glRasterPos3sv(Pointer<Int16> v) {
  final glRasterPos3svAsFunction = _glRasterPos3sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glRasterPos3svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4dv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4dv( const GLdouble *v )
/// ```
/// {@category opengl}
void glRasterPos4dv(Pointer<Double> v) {
  final glRasterPos4dvAsFunction = _glRasterPos4dv
      .cast<NativeFunction<Void Function(Pointer<Double> v)>>()
      .asFunction<void Function(Pointer<Double> v)>();
  return glRasterPos4dvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4fv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4fv( const GLfloat *v )
/// ```
/// {@category opengl}
void glRasterPos4fv(Pointer<Float> v) {
  final glRasterPos4fvAsFunction = _glRasterPos4fv
      .cast<NativeFunction<Void Function(Pointer<Float> v)>>()
      .asFunction<void Function(Pointer<Float> v)>();
  return glRasterPos4fvAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4iv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4iv( const GLint *v )
/// ```
/// {@category opengl}
void glRasterPos4iv(Pointer<Int32> v) {
  final glRasterPos4ivAsFunction = _glRasterPos4iv
      .cast<NativeFunction<Void Function(Pointer<Int32> v)>>()
      .asFunction<void Function(Pointer<Int32> v)>();
  return glRasterPos4ivAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRasterPos4sv;

/// ```c
/// GLAPI void GLAPIENTRY glRasterPos4sv( const GLshort *v )
/// ```
/// {@category opengl}
void glRasterPos4sv(Pointer<Int16> v) {
  final glRasterPos4svAsFunction = _glRasterPos4sv
      .cast<NativeFunction<Void Function(Pointer<Int16> v)>>()
      .asFunction<void Function(Pointer<Int16> v)>();
  return glRasterPos4svAsFunction(v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectd;

/// ```c
/// GLAPI void GLAPIENTRY glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 )
/// ```
/// {@category opengl}
void glRectd(double x1, double y1, double x2, double y2) {
  final glRectdAsFunction = _glRectd
      .cast<
        NativeFunction<
          Void Function(Double x1, Double y1, Double x2, Double y2)
        >
      >()
      .asFunction<void Function(double x1, double y1, double x2, double y2)>();
  return glRectdAsFunction(x1, y1, x2, y2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectf;

/// ```c
/// GLAPI void GLAPIENTRY glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
/// ```
/// {@category opengl}
void glRectf(double x1, double y1, double x2, double y2) {
  final glRectfAsFunction = _glRectf
      .cast<
        NativeFunction<Void Function(Float x1, Float y1, Float x2, Float y2)>
      >()
      .asFunction<void Function(double x1, double y1, double x2, double y2)>();
  return glRectfAsFunction(x1, y1, x2, y2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRecti;

/// ```c
/// GLAPI void GLAPIENTRY glRecti( GLint x1, GLint y1, GLint x2, GLint y2 )
/// ```
/// {@category opengl}
void glRecti(int x1, int y1, int x2, int y2) {
  final glRectiAsFunction = _glRecti
      .cast<
        NativeFunction<Void Function(Int32 x1, Int32 y1, Int32 x2, Int32 y2)>
      >()
      .asFunction<void Function(int x1, int y1, int x2, int y2)>();
  return glRectiAsFunction(x1, y1, x2, y2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRects;

/// ```c
/// GLAPI void GLAPIENTRY glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 )
/// ```
/// {@category opengl}
void glRects(int x1, int y1, int x2, int y2) {
  final glRectsAsFunction = _glRects
      .cast<
        NativeFunction<Void Function(Int16 x1, Int16 y1, Int16 x2, Int16 y2)>
      >()
      .asFunction<void Function(int x1, int y1, int x2, int y2)>();
  return glRectsAsFunction(x1, y1, x2, y2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectdv;

/// ```c
/// GLAPI void GLAPIENTRY glRectdv( const GLdouble *v1, const GLdouble *v2 )
/// ```
/// {@category opengl}
void glRectdv(Pointer<Double> v1, Pointer<Double> v2) {
  final glRectdvAsFunction = _glRectdv
      .cast<
        NativeFunction<Void Function(Pointer<Double> v1, Pointer<Double> v2)>
      >()
      .asFunction<void Function(Pointer<Double> v1, Pointer<Double> v2)>();
  return glRectdvAsFunction(v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectfv;

/// ```c
/// GLAPI void GLAPIENTRY glRectfv( const GLfloat *v1, const GLfloat *v2 )
/// ```
/// {@category opengl}
void glRectfv(Pointer<Float> v1, Pointer<Float> v2) {
  final glRectfvAsFunction = _glRectfv
      .cast<
        NativeFunction<Void Function(Pointer<Float> v1, Pointer<Float> v2)>
      >()
      .asFunction<void Function(Pointer<Float> v1, Pointer<Float> v2)>();
  return glRectfvAsFunction(v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectiv;

/// ```c
/// GLAPI void GLAPIENTRY glRectiv( const GLint *v1, const GLint *v2 )
/// ```
/// {@category opengl}
void glRectiv(Pointer<Int32> v1, Pointer<Int32> v2) {
  final glRectivAsFunction = _glRectiv
      .cast<
        NativeFunction<Void Function(Pointer<Int32> v1, Pointer<Int32> v2)>
      >()
      .asFunction<void Function(Pointer<Int32> v1, Pointer<Int32> v2)>();
  return glRectivAsFunction(v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glRectsv;

/// ```c
/// GLAPI void GLAPIENTRY glRectsv( const GLshort *v1, const GLshort *v2 )
/// ```
/// {@category opengl}
void glRectsv(Pointer<Int16> v1, Pointer<Int16> v2) {
  final glRectsvAsFunction = _glRectsv
      .cast<
        NativeFunction<Void Function(Pointer<Int16> v1, Pointer<Int16> v2)>
      >()
      .asFunction<void Function(Pointer<Int16> v1, Pointer<Int16> v2)>();
  return glRectsvAsFunction(v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glVertexPointer;

/// ```c
/// GLAPI void GLAPIENTRY glVertexPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glVertexPointer(int size, int type, int stride, Pointer<NativeType> ptr) {
  final glVertexPointerAsFunction = _glVertexPointer
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> ptr,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, int stride, Pointer<NativeType> ptr)
      >();
  return glVertexPointerAsFunction(size, type, stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glNormalPointer;

/// ```c
/// GLAPI void GLAPIENTRY glNormalPointer( GLenum type, GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glNormalPointer(int type, int stride, Pointer<NativeType> ptr) {
  final glNormalPointerAsFunction = _glNormalPointer
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> ptr)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> ptr)
      >();
  return glNormalPointerAsFunction(type, stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorPointer;

/// ```c
/// GLAPI void GLAPIENTRY glColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glColorPointer(int size, int type, int stride, Pointer<NativeType> ptr) {
  final glColorPointerAsFunction = _glColorPointer
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> ptr,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, int stride, Pointer<NativeType> ptr)
      >();
  return glColorPointerAsFunction(size, type, stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIndexPointer;

/// ```c
/// GLAPI void GLAPIENTRY glIndexPointer( GLenum type, GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glIndexPointer(int type, int stride, Pointer<NativeType> ptr) {
  final glIndexPointerAsFunction = _glIndexPointer
      .cast<
        NativeFunction<
          Void Function(Uint32 type, Uint32 stride, Pointer<NativeType> ptr)
        >
      >()
      .asFunction<
        void Function(int type, int stride, Pointer<NativeType> ptr)
      >();
  return glIndexPointerAsFunction(type, stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexCoordPointer;

/// ```c
/// GLAPI void GLAPIENTRY glTexCoordPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glTexCoordPointer(
  int size,
  int type,
  int stride,
  Pointer<NativeType> ptr,
) {
  final glTexCoordPointerAsFunction = _glTexCoordPointer
      .cast<
        NativeFunction<
          Void Function(
            Int32 size,
            Uint32 type,
            Uint32 stride,
            Pointer<NativeType> ptr,
          )
        >
      >()
      .asFunction<
        void Function(int size, int type, int stride, Pointer<NativeType> ptr)
      >();
  return glTexCoordPointerAsFunction(size, type, stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEdgeFlagPointer;

/// ```c
/// GLAPI void GLAPIENTRY glEdgeFlagPointer( GLsizei stride, const GLvoid *ptr )
/// ```
/// {@category opengl}
void glEdgeFlagPointer(int stride, Pointer<NativeType> ptr) {
  final glEdgeFlagPointerAsFunction = _glEdgeFlagPointer
      .cast<
        NativeFunction<Void Function(Uint32 stride, Pointer<NativeType> ptr)>
      >()
      .asFunction<void Function(int stride, Pointer<NativeType> ptr)>();
  return glEdgeFlagPointerAsFunction(stride, ptr);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPointerv;

/// ```c
/// GLAPI void GLAPIENTRY glGetPointerv( GLenum pname, GLvoid **params )
/// ```
/// {@category opengl}
void glGetPointerv(int pname, Pointer<Pointer<NativeType>> params) {
  final glGetPointervAsFunction = _glGetPointerv
      .cast<
        NativeFunction<
          Void Function(Uint32 pname, Pointer<Pointer<NativeType>> params)
        >
      >()
      .asFunction<
        void Function(int pname, Pointer<Pointer<NativeType>> params)
      >();
  return glGetPointervAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glArrayElement;

/// ```c
/// GLAPI void GLAPIENTRY glArrayElement( GLint i )
/// ```
/// {@category opengl}
void glArrayElement(int i) {
  final glArrayElementAsFunction = _glArrayElement
      .cast<NativeFunction<Void Function(Int32 i)>>()
      .asFunction<void Function(int i)>();
  return glArrayElementAsFunction(i);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawArrays;

/// ```c
/// GLAPI void GLAPIENTRY glDrawArrays( GLenum mode, GLint first, GLsizei count )
/// ```
/// {@category opengl}
void glDrawArrays(int mode, int first, int count) {
  final glDrawArraysAsFunction = _glDrawArrays
      .cast<
        NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count)>
      >()
      .asFunction<void Function(int mode, int first, int count)>();
  return glDrawArraysAsFunction(mode, first, count);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawElements;

/// ```c
/// GLAPI void GLAPIENTRY glDrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices )
/// ```
/// {@category opengl}
void glDrawElements(
  int mode,
  int count,
  int type,
  Pointer<NativeType> indices,
) {
  final glDrawElementsAsFunction = _glDrawElements
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int count,
          int type,
          Pointer<NativeType> indices,
        )
      >();
  return glDrawElementsAsFunction(mode, count, type, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInterleavedArrays;

/// ```c
/// GLAPI void GLAPIENTRY glInterleavedArrays( GLenum format, GLsizei stride, const GLvoid *pointer )
/// ```
/// {@category opengl}
void glInterleavedArrays(int format, int stride, Pointer<NativeType> pointer) {
  final glInterleavedArraysAsFunction = _glInterleavedArrays
      .cast<
        NativeFunction<
          Void Function(
            Uint32 format,
            Uint32 stride,
            Pointer<NativeType> pointer,
          )
        >
      >()
      .asFunction<
        void Function(int format, int stride, Pointer<NativeType> pointer)
      >();
  return glInterleavedArraysAsFunction(format, stride, pointer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glShadeModel;

/// ```c
/// GLAPI void GLAPIENTRY glShadeModel( GLenum mode )
/// ```
/// {@category opengl}
void glShadeModel(int mode) {
  final glShadeModelAsFunction = _glShadeModel
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glShadeModelAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightf;

/// ```c
/// GLAPI void GLAPIENTRY glLightf( GLenum light, GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glLightf(int light, int pname, double param) {
  final glLightfAsFunction = _glLightf
      .cast<
        NativeFunction<Void Function(Uint32 light, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int light, int pname, double param)>();
  return glLightfAsFunction(light, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLighti;

/// ```c
/// GLAPI void GLAPIENTRY glLighti( GLenum light, GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glLighti(int light, int pname, int param) {
  final glLightiAsFunction = _glLighti
      .cast<
        NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int light, int pname, int param)>();
  return glLightiAsFunction(light, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightfv;

/// ```c
/// GLAPI void GLAPIENTRY glLightfv( GLenum light, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glLightfv(int light, int pname, Pointer<Float> params) {
  final glLightfvAsFunction = _glLightfv
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Float> params)>();
  return glLightfvAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightiv;

/// ```c
/// GLAPI void GLAPIENTRY glLightiv( GLenum light, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glLightiv(int light, int pname, Pointer<Int32> params) {
  final glLightivAsFunction = _glLightiv
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glLightivAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLightfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetLightfv( GLenum light, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetLightfv(int light, int pname, Pointer<Float> params) {
  final glGetLightfvAsFunction = _glGetLightfv
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Float> params)>();
  return glGetLightfvAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetLightiv;

/// ```c
/// GLAPI void GLAPIENTRY glGetLightiv( GLenum light, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetLightiv(int light, int pname, Pointer<Int32> params) {
  final glGetLightivAsFunction = _glGetLightiv
      .cast<
        NativeFunction<
          Void Function(Uint32 light, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int light, int pname, Pointer<Int32> params)>();
  return glGetLightivAsFunction(light, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModelf;

/// ```c
/// GLAPI void GLAPIENTRY glLightModelf( GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glLightModelf(int pname, double param) {
  final glLightModelfAsFunction = _glLightModelf
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glLightModelfAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModeli;

/// ```c
/// GLAPI void GLAPIENTRY glLightModeli( GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glLightModeli(int pname, int param) {
  final glLightModeliAsFunction = _glLightModeli
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glLightModeliAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModelfv;

/// ```c
/// GLAPI void GLAPIENTRY glLightModelfv( GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glLightModelfv(int pname, Pointer<Float> params) {
  final glLightModelfvAsFunction = _glLightModelfv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glLightModelfvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLightModeliv;

/// ```c
/// GLAPI void GLAPIENTRY glLightModeliv( GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glLightModeliv(int pname, Pointer<Int32> params) {
  final glLightModelivAsFunction = _glLightModeliv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glLightModelivAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaterialf;

/// ```c
/// GLAPI void GLAPIENTRY glMaterialf( GLenum face, GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glMaterialf(int face, int pname, double param) {
  final glMaterialfAsFunction = _glMaterialf
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int face, int pname, double param)>();
  return glMaterialfAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMateriali;

/// ```c
/// GLAPI void GLAPIENTRY glMateriali( GLenum face, GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glMateriali(int face, int pname, int param) {
  final glMaterialiAsFunction = _glMateriali
      .cast<
        NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int face, int pname, int param)>();
  return glMaterialiAsFunction(face, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaterialfv;

/// ```c
/// GLAPI void GLAPIENTRY glMaterialfv( GLenum face, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glMaterialfv(int face, int pname, Pointer<Float> params) {
  final glMaterialfvAsFunction = _glMaterialfv
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Float> params)>();
  return glMaterialfvAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMaterialiv;

/// ```c
/// GLAPI void GLAPIENTRY glMaterialiv( GLenum face, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glMaterialiv(int face, int pname, Pointer<Int32> params) {
  final glMaterialivAsFunction = _glMaterialiv
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Int32> params)>();
  return glMaterialivAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMaterialfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetMaterialfv(int face, int pname, Pointer<Float> params) {
  final glGetMaterialfvAsFunction = _glGetMaterialfv
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Float> params)>();
  return glGetMaterialfvAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMaterialiv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMaterialiv( GLenum face, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetMaterialiv(int face, int pname, Pointer<Int32> params) {
  final glGetMaterialivAsFunction = _glGetMaterialiv
      .cast<
        NativeFunction<
          Void Function(Uint32 face, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int face, int pname, Pointer<Int32> params)>();
  return glGetMaterialivAsFunction(face, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorMaterial;

/// ```c
/// GLAPI void GLAPIENTRY glColorMaterial( GLenum face, GLenum mode )
/// ```
/// {@category opengl}
void glColorMaterial(int face, int mode) {
  final glColorMaterialAsFunction = _glColorMaterial
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return glColorMaterialAsFunction(face, mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelZoom;

/// ```c
/// GLAPI void GLAPIENTRY glPixelZoom( GLfloat xfactor, GLfloat yfactor )
/// ```
/// {@category opengl}
void glPixelZoom(double xfactor, double yfactor) {
  final glPixelZoomAsFunction = _glPixelZoom
      .cast<NativeFunction<Void Function(Float xfactor, Float yfactor)>>()
      .asFunction<void Function(double xfactor, double yfactor)>();
  return glPixelZoomAsFunction(xfactor, yfactor);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelStoref;

/// ```c
/// GLAPI void GLAPIENTRY glPixelStoref( GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glPixelStoref(int pname, double param) {
  final glPixelStorefAsFunction = _glPixelStoref
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPixelStorefAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelStorei;

/// ```c
/// GLAPI void GLAPIENTRY glPixelStorei( GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glPixelStorei(int pname, int param) {
  final glPixelStoreiAsFunction = _glPixelStorei
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPixelStoreiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransferf;

/// ```c
/// GLAPI void GLAPIENTRY glPixelTransferf( GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glPixelTransferf(int pname, double param) {
  final glPixelTransferfAsFunction = _glPixelTransferf
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glPixelTransferfAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelTransferi;

/// ```c
/// GLAPI void GLAPIENTRY glPixelTransferi( GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glPixelTransferi(int pname, int param) {
  final glPixelTransferiAsFunction = _glPixelTransferi
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glPixelTransferiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelMapfv;

/// ```c
/// GLAPI void GLAPIENTRY glPixelMapfv( GLenum map, GLsizei mapsize, const GLfloat *values )
/// ```
/// {@category opengl}
void glPixelMapfv(int map, int mapsize, Pointer<Float> values) {
  final glPixelMapfvAsFunction = _glPixelMapfv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 mapsize, Pointer<Float> values)
        >
      >()
      .asFunction<void Function(int map, int mapsize, Pointer<Float> values)>();
  return glPixelMapfvAsFunction(map, mapsize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelMapuiv;

/// ```c
/// GLAPI void GLAPIENTRY glPixelMapuiv( GLenum map, GLsizei mapsize, const GLuint *values )
/// ```
/// {@category opengl}
void glPixelMapuiv(int map, int mapsize, Pointer<Uint32> values) {
  final glPixelMapuivAsFunction = _glPixelMapuiv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 mapsize, Pointer<Uint32> values)
        >
      >()
      .asFunction<
        void Function(int map, int mapsize, Pointer<Uint32> values)
      >();
  return glPixelMapuivAsFunction(map, mapsize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPixelMapusv;

/// ```c
/// GLAPI void GLAPIENTRY glPixelMapusv( GLenum map, GLsizei mapsize, const GLushort *values )
/// ```
/// {@category opengl}
void glPixelMapusv(int map, int mapsize, Pointer<Uint16> values) {
  final glPixelMapusvAsFunction = _glPixelMapusv
      .cast<
        NativeFunction<
          Void Function(Uint32 map, Uint32 mapsize, Pointer<Uint16> values)
        >
      >()
      .asFunction<
        void Function(int map, int mapsize, Pointer<Uint16> values)
      >();
  return glPixelMapusvAsFunction(map, mapsize, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelMapfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetPixelMapfv( GLenum map, GLfloat *values )
/// ```
/// {@category opengl}
void glGetPixelMapfv(int map, Pointer<Float> values) {
  final glGetPixelMapfvAsFunction = _glGetPixelMapfv
      .cast<NativeFunction<Void Function(Uint32 map, Pointer<Float> values)>>()
      .asFunction<void Function(int map, Pointer<Float> values)>();
  return glGetPixelMapfvAsFunction(map, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelMapuiv;

/// ```c
/// GLAPI void GLAPIENTRY glGetPixelMapuiv( GLenum map, GLuint *values )
/// ```
/// {@category opengl}
void glGetPixelMapuiv(int map, Pointer<Uint32> values) {
  final glGetPixelMapuivAsFunction = _glGetPixelMapuiv
      .cast<NativeFunction<Void Function(Uint32 map, Pointer<Uint32> values)>>()
      .asFunction<void Function(int map, Pointer<Uint32> values)>();
  return glGetPixelMapuivAsFunction(map, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetPixelMapusv;

/// ```c
/// GLAPI void GLAPIENTRY glGetPixelMapusv( GLenum map, GLushort *values )
/// ```
/// {@category opengl}
void glGetPixelMapusv(int map, Pointer<Uint16> values) {
  final glGetPixelMapusvAsFunction = _glGetPixelMapusv
      .cast<NativeFunction<Void Function(Uint32 map, Pointer<Uint16> values)>>()
      .asFunction<void Function(int map, Pointer<Uint16> values)>();
  return glGetPixelMapusvAsFunction(map, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBitmap;

/// ```c
/// GLAPI void GLAPIENTRY glBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap )
/// ```
/// {@category opengl}
void glBitmap(
  int width,
  int height,
  double xorig,
  double yorig,
  double xmove,
  double ymove,
  Pointer<Uint8> bitmap,
) {
  final glBitmapAsFunction = _glBitmap
      .cast<
        NativeFunction<
          Void Function(
            Uint32 width,
            Uint32 height,
            Float xorig,
            Float yorig,
            Float xmove,
            Float ymove,
            Pointer<Uint8> bitmap,
          )
        >
      >()
      .asFunction<
        void Function(
          int width,
          int height,
          double xorig,
          double yorig,
          double xmove,
          double ymove,
          Pointer<Uint8> bitmap,
        )
      >();
  return glBitmapAsFunction(width, height, xorig, yorig, xmove, ymove, bitmap);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glReadPixels;

/// ```c
/// GLAPI void GLAPIENTRY glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels )
/// ```
/// {@category opengl}
void glReadPixels(
  int x,
  int y,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glReadPixelsAsFunction = _glReadPixels
      .cast<
        NativeFunction<
          Void Function(
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int x,
          int y,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glReadPixelsAsFunction(x, y, width, height, format, type, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawPixels;

/// ```c
/// GLAPI void GLAPIENTRY glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glDrawPixels(
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glDrawPixelsAsFunction = _glDrawPixels
      .cast<
        NativeFunction<
          Void Function(
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glDrawPixelsAsFunction(width, height, format, type, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyPixels;

/// ```c
/// GLAPI void GLAPIENTRY glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type )
/// ```
/// {@category opengl}
void glCopyPixels(int x, int y, int width, int height, int type) {
  final glCopyPixelsAsFunction = _glCopyPixels
      .cast<
        NativeFunction<
          Void Function(
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Uint32 type,
          )
        >
      >()
      .asFunction<
        void Function(int x, int y, int width, int height, int type)
      >();
  return glCopyPixelsAsFunction(x, y, width, height, type);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilFunc;

/// ```c
/// GLAPI void GLAPIENTRY glStencilFunc( GLenum func, GLint ref, GLuint mask )
/// ```
/// {@category opengl}
void glStencilFunc(int func, int ref, int mask) {
  final glStencilFuncAsFunction = _glStencilFunc
      .cast<
        NativeFunction<Void Function(Uint32 func, Int32 ref, Uint32 mask)>
      >()
      .asFunction<void Function(int func, int ref, int mask)>();
  return glStencilFuncAsFunction(func, ref, mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilMask;

/// ```c
/// GLAPI void GLAPIENTRY glStencilMask( GLuint mask )
/// ```
/// {@category opengl}
void glStencilMask(int mask) {
  final glStencilMaskAsFunction = _glStencilMask
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return glStencilMaskAsFunction(mask);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glStencilOp;

/// ```c
/// GLAPI void GLAPIENTRY glStencilOp( GLenum fail, GLenum zfail, GLenum zpass )
/// ```
/// {@category opengl}
void glStencilOp(int fail, int zfail, int zpass) {
  final glStencilOpAsFunction = _glStencilOp
      .cast<
        NativeFunction<Void Function(Uint32 fail, Uint32 zfail, Uint32 zpass)>
      >()
      .asFunction<void Function(int fail, int zfail, int zpass)>();
  return glStencilOpAsFunction(fail, zfail, zpass);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClearStencil;

/// ```c
/// GLAPI void GLAPIENTRY glClearStencil( GLint s )
/// ```
/// {@category opengl}
void glClearStencil(int s) {
  final glClearStencilAsFunction = _glClearStencil
      .cast<NativeFunction<Void Function(Int32 s)>>()
      .asFunction<void Function(int s)>();
  return glClearStencilAsFunction(s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGend;

/// ```c
/// GLAPI void GLAPIENTRY glTexGend( GLenum coord, GLenum pname, GLdouble param )
/// ```
/// {@category opengl}
void glTexGend(int coord, int pname, double param) {
  final glTexGendAsFunction = _glTexGend
      .cast<
        NativeFunction<Void Function(Uint32 coord, Uint32 pname, Double param)>
      >()
      .asFunction<void Function(int coord, int pname, double param)>();
  return glTexGendAsFunction(coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGenf;

/// ```c
/// GLAPI void GLAPIENTRY glTexGenf( GLenum coord, GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glTexGenf(int coord, int pname, double param) {
  final glTexGenfAsFunction = _glTexGenf
      .cast<
        NativeFunction<Void Function(Uint32 coord, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int coord, int pname, double param)>();
  return glTexGenfAsFunction(coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGeni;

/// ```c
/// GLAPI void GLAPIENTRY glTexGeni( GLenum coord, GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glTexGeni(int coord, int pname, int param) {
  final glTexGeniAsFunction = _glTexGeni
      .cast<
        NativeFunction<Void Function(Uint32 coord, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int coord, int pname, int param)>();
  return glTexGeniAsFunction(coord, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGendv;

/// ```c
/// GLAPI void GLAPIENTRY glTexGendv( GLenum coord, GLenum pname, const GLdouble *params )
/// ```
/// {@category opengl}
void glTexGendv(int coord, int pname, Pointer<Double> params) {
  final glTexGendvAsFunction = _glTexGendv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int coord, int pname, Pointer<Double> params)
      >();
  return glTexGendvAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGenfv;

/// ```c
/// GLAPI void GLAPIENTRY glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glTexGenfv(int coord, int pname, Pointer<Float> params) {
  final glTexGenfvAsFunction = _glTexGenfv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Float> params)>();
  return glTexGenfvAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexGeniv;

/// ```c
/// GLAPI void GLAPIENTRY glTexGeniv( GLenum coord, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glTexGeniv(int coord, int pname, Pointer<Int32> params) {
  final glTexGenivAsFunction = _glTexGeniv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Int32> params)>();
  return glTexGenivAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexGendv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params )
/// ```
/// {@category opengl}
void glGetTexGendv(int coord, int pname, Pointer<Double> params) {
  final glGetTexGendvAsFunction = _glGetTexGendv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Double> params)
        >
      >()
      .asFunction<
        void Function(int coord, int pname, Pointer<Double> params)
      >();
  return glGetTexGendvAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexGenfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetTexGenfv(int coord, int pname, Pointer<Float> params) {
  final glGetTexGenfvAsFunction = _glGetTexGenfv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Float> params)>();
  return glGetTexGenfvAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexGeniv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexGeniv( GLenum coord, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetTexGeniv(int coord, int pname, Pointer<Int32> params) {
  final glGetTexGenivAsFunction = _glGetTexGeniv
      .cast<
        NativeFunction<
          Void Function(Uint32 coord, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<void Function(int coord, int pname, Pointer<Int32> params)>();
  return glGetTexGenivAsFunction(coord, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnvf;

/// ```c
/// GLAPI void GLAPIENTRY glTexEnvf( GLenum target, GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glTexEnvf(int target, int pname, double param) {
  final glTexEnvfAsFunction = _glTexEnvf
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int target, int pname, double param)>();
  return glTexEnvfAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnvi;

/// ```c
/// GLAPI void GLAPIENTRY glTexEnvi( GLenum target, GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glTexEnvi(int target, int pname, int param) {
  final glTexEnviAsFunction = _glTexEnvi
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glTexEnviAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnvfv;

/// ```c
/// GLAPI void GLAPIENTRY glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glTexEnvfv(int target, int pname, Pointer<Float> params) {
  final glTexEnvfvAsFunction = _glTexEnvfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glTexEnvfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexEnviv;

/// ```c
/// GLAPI void GLAPIENTRY glTexEnviv( GLenum target, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glTexEnviv(int target, int pname, Pointer<Int32> params) {
  final glTexEnvivAsFunction = _glTexEnviv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexEnvivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexEnvfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetTexEnvfv(int target, int pname, Pointer<Float> params) {
  final glGetTexEnvfvAsFunction = _glGetTexEnvfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetTexEnvfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexEnviv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexEnviv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetTexEnviv(int target, int pname, Pointer<Int32> params) {
  final glGetTexEnvivAsFunction = _glGetTexEnviv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexEnvivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterf;

/// ```c
/// GLAPI void GLAPIENTRY glTexParameterf( GLenum target, GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glTexParameterf(int target, int pname, double param) {
  final glTexParameterfAsFunction = _glTexParameterf
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>
      >()
      .asFunction<void Function(int target, int pname, double param)>();
  return glTexParameterfAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameteri;

/// ```c
/// GLAPI void GLAPIENTRY glTexParameteri( GLenum target, GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glTexParameteri(int target, int pname, int param) {
  final glTexParameteriAsFunction = _glTexParameteri
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>
      >()
      .asFunction<void Function(int target, int pname, int param)>();
  return glTexParameteriAsFunction(target, pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glTexParameterfv( GLenum target, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glTexParameterfv(int target, int pname, Pointer<Float> params) {
  final glTexParameterfvAsFunction = _glTexParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glTexParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glTexParameteriv( GLenum target, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glTexParameteriv(int target, int pname, Pointer<Int32> params) {
  final glTexParameterivAsFunction = _glTexParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glTexParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexParameterfv( GLenum target, GLenum pname, GLfloat *params)
/// ```
/// {@category opengl}
void glGetTexParameterfv(int target, int pname, Pointer<Float> params) {
  final glGetTexParameterfvAsFunction = _glGetTexParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetTexParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexParameteriv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetTexParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetTexParameterivAsFunction = _glGetTexParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetTexParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexLevelParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetTexLevelParameterfv(
  int target,
  int level,
  int pname,
  Pointer<Float> params,
) {
  final glGetTexLevelParameterfvAsFunction = _glGetTexLevelParameterfv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 pname,
            Pointer<Float> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int level, int pname, Pointer<Float> params)
      >();
  return glGetTexLevelParameterfvAsFunction(target, level, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexLevelParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetTexLevelParameteriv(
  int target,
  int level,
  int pname,
  Pointer<Int32> params,
) {
  final glGetTexLevelParameterivAsFunction = _glGetTexLevelParameteriv
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 pname,
            Pointer<Int32> params,
          )
        >
      >()
      .asFunction<
        void Function(int target, int level, int pname, Pointer<Int32> params)
      >();
  return glGetTexLevelParameterivAsFunction(target, level, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glTexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glTexImage1D(
  int target,
  int level,
  int internalFormat,
  int width,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexImage1DAsFunction = _glTexImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 internalFormat,
            Uint32 width,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalFormat,
          int width,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexImage1DAsFunction(
    target,
    level,
    internalFormat,
    width,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glTexImage2D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glTexImage2D(
  int target,
  int level,
  int internalFormat,
  int width,
  int height,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexImage2DAsFunction = _glTexImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 internalFormat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalFormat,
          int width,
          int height,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexImage2DAsFunction(
    target,
    level,
    internalFormat,
    width,
    height,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetTexImage;

/// ```c
/// GLAPI void GLAPIENTRY glGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels )
/// ```
/// {@category opengl}
void glGetTexImage(
  int target,
  int level,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glGetTexImageAsFunction = _glGetTexImage
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glGetTexImageAsFunction(target, level, format, type, pixels);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGenTextures;

/// ```c
/// GLAPI void GLAPIENTRY glGenTextures( GLsizei n, GLuint *textures )
/// ```
/// {@category opengl}
void glGenTextures(int n, Pointer<Uint32> textures) {
  final glGenTexturesAsFunction = _glGenTextures
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32> textures)>();
  return glGenTexturesAsFunction(n, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDeleteTextures;

/// ```c
/// GLAPI void GLAPIENTRY glDeleteTextures( GLsizei n, const GLuint *textures)
/// ```
/// {@category opengl}
void glDeleteTextures(int n, Pointer<Uint32> textures) {
  final glDeleteTexturesAsFunction = _glDeleteTextures
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32> textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32> textures)>();
  return glDeleteTexturesAsFunction(n, textures);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBindTexture;

/// ```c
/// GLAPI void GLAPIENTRY glBindTexture( GLenum target, GLuint texture )
/// ```
/// {@category opengl}
void glBindTexture(int target, int texture) {
  final glBindTextureAsFunction = _glBindTexture
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 texture)>>()
      .asFunction<void Function(int target, int texture)>();
  return glBindTextureAsFunction(target, texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPrioritizeTextures;

/// ```c
/// GLAPI void GLAPIENTRY glPrioritizeTextures( GLsizei n, const GLuint *textures, const GLclampf *priorities )
/// ```
/// {@category opengl}
void glPrioritizeTextures(
  int n,
  Pointer<Uint32> textures,
  Pointer<Float> priorities,
) {
  final glPrioritizeTexturesAsFunction = _glPrioritizeTextures
      .cast<
        NativeFunction<
          Void Function(
            Uint32 n,
            Pointer<Uint32> textures,
            Pointer<Float> priorities,
          )
        >
      >()
      .asFunction<
        void Function(
          int n,
          Pointer<Uint32> textures,
          Pointer<Float> priorities,
        )
      >();
  return glPrioritizeTexturesAsFunction(n, textures, priorities);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glAreTexturesResident;

/// ```c
/// GLAPI GLboolean GLAPIENTRY glAreTexturesResident( GLsizei n, const GLuint *textures, GLboolean *residences )
/// ```
/// {@category opengl}
int glAreTexturesResident(
  int n,
  Pointer<Uint32> textures,
  Pointer<Int32> residences,
) {
  final glAreTexturesResidentAsFunction = _glAreTexturesResident
      .cast<
        NativeFunction<
          Int32 Function(
            Uint32 n,
            Pointer<Uint32> textures,
            Pointer<Int32> residences,
          )
        >
      >()
      .asFunction<
        int Function(int n, Pointer<Uint32> textures, Pointer<Int32> residences)
      >();
  return glAreTexturesResidentAsFunction(n, textures, residences);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glIsTexture;

/// ```c
/// GLAPI GLboolean GLAPIENTRY glIsTexture( GLuint texture )
/// ```
/// {@category opengl}
int glIsTexture(int texture) {
  final glIsTextureAsFunction = _glIsTexture
      .cast<NativeFunction<Int32 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return glIsTextureAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glTexSubImage1D(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage1DAsFunction = _glTexSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage1DAsFunction(
    target,
    level,
    xoffset,
    width,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glTexSubImage2D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage2DAsFunction = _glTexSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage2DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyTexImage1D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border )
/// ```
/// {@category opengl}
void glCopyTexImage1D(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int border,
) {
  final glCopyTexImage1DAsFunction = _glCopyTexImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int border,
        )
      >();
  return glCopyTexImage1DAsFunction(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border )
/// ```
/// {@category opengl}
void glCopyTexImage2D(
  int target,
  int level,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
  int border,
) {
  final glCopyTexImage2DAsFunction = _glCopyTexImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
            Int32 border,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
          int border,
        )
      >();
  return glCopyTexImage2DAsFunction(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width )
/// ```
/// {@category opengl}
void glCopyTexSubImage1D(
  int target,
  int level,
  int xoffset,
  int x,
  int y,
  int width,
) {
  final glCopyTexSubImage1DAsFunction = _glCopyTexSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int x,
          int y,
          int width,
        )
      >();
  return glCopyTexSubImage1DAsFunction(target, level, xoffset, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height )
/// ```
/// {@category opengl}
void glCopyTexSubImage2D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTexSubImage2DAsFunction = _glCopyTexSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTexSubImage2DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap1d;

/// ```c
/// GLAPI void GLAPIENTRY glMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points )
/// ```
/// {@category opengl}
void glMap1d(
  int target,
  double u1,
  double u2,
  int stride,
  int order,
  Pointer<Double> points,
) {
  final glMap1dAsFunction = _glMap1d
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Double u1,
            Double u2,
            Int32 stride,
            Int32 order,
            Pointer<Double> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int stride,
          int order,
          Pointer<Double> points,
        )
      >();
  return glMap1dAsFunction(target, u1, u2, stride, order, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap1f;

/// ```c
/// GLAPI void GLAPIENTRY glMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points )
/// ```
/// {@category opengl}
void glMap1f(
  int target,
  double u1,
  double u2,
  int stride,
  int order,
  Pointer<Float> points,
) {
  final glMap1fAsFunction = _glMap1f
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Float u1,
            Float u2,
            Int32 stride,
            Int32 order,
            Pointer<Float> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int stride,
          int order,
          Pointer<Float> points,
        )
      >();
  return glMap1fAsFunction(target, u1, u2, stride, order, points);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap2d;

/// ```c
/// GLAPI void GLAPIENTRY glMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points )
/// ```
/// {@category opengl}
void glMap2d(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  Pointer<Double> points,
) {
  final glMap2dAsFunction = _glMap2d
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Double u1,
            Double u2,
            Int32 ustride,
            Int32 uorder,
            Double v1,
            Double v2,
            Int32 vstride,
            Int32 vorder,
            Pointer<Double> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          Pointer<Double> points,
        )
      >();
  return glMap2dAsFunction(
    target,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMap2f;

/// ```c
/// GLAPI void GLAPIENTRY glMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points )
/// ```
/// {@category opengl}
void glMap2f(
  int target,
  double u1,
  double u2,
  int ustride,
  int uorder,
  double v1,
  double v2,
  int vstride,
  int vorder,
  Pointer<Float> points,
) {
  final glMap2fAsFunction = _glMap2f
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Float u1,
            Float u2,
            Int32 ustride,
            Int32 uorder,
            Float v1,
            Float v2,
            Int32 vstride,
            Int32 vorder,
            Pointer<Float> points,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          double u1,
          double u2,
          int ustride,
          int uorder,
          double v1,
          double v2,
          int vstride,
          int vorder,
          Pointer<Float> points,
        )
      >();
  return glMap2fAsFunction(
    target,
    u1,
    u2,
    ustride,
    uorder,
    v1,
    v2,
    vstride,
    vorder,
    points,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapdv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMapdv( GLenum target, GLenum query, GLdouble *v )
/// ```
/// {@category opengl}
void glGetMapdv(int target, int query, Pointer<Double> v) {
  final glGetMapdvAsFunction = _glGetMapdv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 query, Pointer<Double> v)
        >
      >()
      .asFunction<void Function(int target, int query, Pointer<Double> v)>();
  return glGetMapdvAsFunction(target, query, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMapfv( GLenum target, GLenum query, GLfloat *v )
/// ```
/// {@category opengl}
void glGetMapfv(int target, int query, Pointer<Float> v) {
  final glGetMapfvAsFunction = _glGetMapfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 query, Pointer<Float> v)
        >
      >()
      .asFunction<void Function(int target, int query, Pointer<Float> v)>();
  return glGetMapfvAsFunction(target, query, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMapiv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMapiv( GLenum target, GLenum query, GLint *v )
/// ```
/// {@category opengl}
void glGetMapiv(int target, int query, Pointer<Int32> v) {
  final glGetMapivAsFunction = _glGetMapiv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 query, Pointer<Int32> v)
        >
      >()
      .asFunction<void Function(int target, int query, Pointer<Int32> v)>();
  return glGetMapivAsFunction(target, query, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1d;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord1d( GLdouble u )
/// ```
/// {@category opengl}
void glEvalCoord1d(double u) {
  final glEvalCoord1dAsFunction = _glEvalCoord1d
      .cast<NativeFunction<Void Function(Double u)>>()
      .asFunction<void Function(double u)>();
  return glEvalCoord1dAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1f;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord1f( GLfloat u )
/// ```
/// {@category opengl}
void glEvalCoord1f(double u) {
  final glEvalCoord1fAsFunction = _glEvalCoord1f
      .cast<NativeFunction<Void Function(Float u)>>()
      .asFunction<void Function(double u)>();
  return glEvalCoord1fAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1dv;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord1dv( const GLdouble *u )
/// ```
/// {@category opengl}
void glEvalCoord1dv(Pointer<Double> u) {
  final glEvalCoord1dvAsFunction = _glEvalCoord1dv
      .cast<NativeFunction<Void Function(Pointer<Double> u)>>()
      .asFunction<void Function(Pointer<Double> u)>();
  return glEvalCoord1dvAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord1fv;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord1fv( const GLfloat *u )
/// ```
/// {@category opengl}
void glEvalCoord1fv(Pointer<Float> u) {
  final glEvalCoord1fvAsFunction = _glEvalCoord1fv
      .cast<NativeFunction<Void Function(Pointer<Float> u)>>()
      .asFunction<void Function(Pointer<Float> u)>();
  return glEvalCoord1fvAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2d;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord2d( GLdouble u, GLdouble v )
/// ```
/// {@category opengl}
void glEvalCoord2d(double u, double v) {
  final glEvalCoord2dAsFunction = _glEvalCoord2d
      .cast<NativeFunction<Void Function(Double u, Double v)>>()
      .asFunction<void Function(double u, double v)>();
  return glEvalCoord2dAsFunction(u, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2f;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord2f( GLfloat u, GLfloat v )
/// ```
/// {@category opengl}
void glEvalCoord2f(double u, double v) {
  final glEvalCoord2fAsFunction = _glEvalCoord2f
      .cast<NativeFunction<Void Function(Float u, Float v)>>()
      .asFunction<void Function(double u, double v)>();
  return glEvalCoord2fAsFunction(u, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2dv;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord2dv( const GLdouble *u )
/// ```
/// {@category opengl}
void glEvalCoord2dv(Pointer<Double> u) {
  final glEvalCoord2dvAsFunction = _glEvalCoord2dv
      .cast<NativeFunction<Void Function(Pointer<Double> u)>>()
      .asFunction<void Function(Pointer<Double> u)>();
  return glEvalCoord2dvAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalCoord2fv;

/// ```c
/// GLAPI void GLAPIENTRY glEvalCoord2fv( const GLfloat *u )
/// ```
/// {@category opengl}
void glEvalCoord2fv(Pointer<Float> u) {
  final glEvalCoord2fvAsFunction = _glEvalCoord2fv
      .cast<NativeFunction<Void Function(Pointer<Float> u)>>()
      .asFunction<void Function(Pointer<Float> u)>();
  return glEvalCoord2fvAsFunction(u);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid1d;

/// ```c
/// GLAPI void GLAPIENTRY glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 )
/// ```
/// {@category opengl}
void glMapGrid1d(int un, double u1, double u2) {
  final glMapGrid1dAsFunction = _glMapGrid1d
      .cast<NativeFunction<Void Function(Int32 un, Double u1, Double u2)>>()
      .asFunction<void Function(int un, double u1, double u2)>();
  return glMapGrid1dAsFunction(un, u1, u2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid1f;

/// ```c
/// GLAPI void GLAPIENTRY glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 )
/// ```
/// {@category opengl}
void glMapGrid1f(int un, double u1, double u2) {
  final glMapGrid1fAsFunction = _glMapGrid1f
      .cast<NativeFunction<Void Function(Int32 un, Float u1, Float u2)>>()
      .asFunction<void Function(int un, double u1, double u2)>();
  return glMapGrid1fAsFunction(un, u1, u2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid2d;

/// ```c
/// GLAPI void GLAPIENTRY glMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 )
/// ```
/// {@category opengl}
void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) {
  final glMapGrid2dAsFunction = _glMapGrid2d
      .cast<
        NativeFunction<
          Void Function(
            Int32 un,
            Double u1,
            Double u2,
            Int32 vn,
            Double v1,
            Double v2,
          )
        >
      >()
      .asFunction<
        void Function(
          int un,
          double u1,
          double u2,
          int vn,
          double v1,
          double v2,
        )
      >();
  return glMapGrid2dAsFunction(un, u1, u2, vn, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMapGrid2f;

/// ```c
/// GLAPI void GLAPIENTRY glMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 )
/// ```
/// {@category opengl}
void glMapGrid2f(int un, double u1, double u2, int vn, double v1, double v2) {
  final glMapGrid2fAsFunction = _glMapGrid2f
      .cast<
        NativeFunction<
          Void Function(
            Int32 un,
            Float u1,
            Float u2,
            Int32 vn,
            Float v1,
            Float v2,
          )
        >
      >()
      .asFunction<
        void Function(
          int un,
          double u1,
          double u2,
          int vn,
          double v1,
          double v2,
        )
      >();
  return glMapGrid2fAsFunction(un, u1, u2, vn, v1, v2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalPoint1;

/// ```c
/// GLAPI void GLAPIENTRY glEvalPoint1( GLint i )
/// ```
/// {@category opengl}
void glEvalPoint1(int i) {
  final glEvalPoint1AsFunction = _glEvalPoint1
      .cast<NativeFunction<Void Function(Int32 i)>>()
      .asFunction<void Function(int i)>();
  return glEvalPoint1AsFunction(i);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalPoint2;

/// ```c
/// GLAPI void GLAPIENTRY glEvalPoint2( GLint i, GLint j )
/// ```
/// {@category opengl}
void glEvalPoint2(int i, int j) {
  final glEvalPoint2AsFunction = _glEvalPoint2
      .cast<NativeFunction<Void Function(Int32 i, Int32 j)>>()
      .asFunction<void Function(int i, int j)>();
  return glEvalPoint2AsFunction(i, j);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalMesh1;

/// ```c
/// GLAPI void GLAPIENTRY glEvalMesh1( GLenum mode, GLint i1, GLint i2 )
/// ```
/// {@category opengl}
void glEvalMesh1(int mode, int i1, int i2) {
  final glEvalMesh1AsFunction = _glEvalMesh1
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 i1, Int32 i2)>>()
      .asFunction<void Function(int mode, int i1, int i2)>();
  return glEvalMesh1AsFunction(mode, i1, i2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glEvalMesh2;

/// ```c
/// GLAPI void GLAPIENTRY glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )
/// ```
/// {@category opengl}
void glEvalMesh2(int mode, int i1, int i2, int j1, int j2) {
  final glEvalMesh2AsFunction = _glEvalMesh2
      .cast<
        NativeFunction<
          Void Function(Uint32 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        >
      >()
      .asFunction<void Function(int mode, int i1, int i2, int j1, int j2)>();
  return glEvalMesh2AsFunction(mode, i1, i2, j1, j2);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogf;

/// ```c
/// GLAPI void GLAPIENTRY glFogf( GLenum pname, GLfloat param )
/// ```
/// {@category opengl}
void glFogf(int pname, double param) {
  final glFogfAsFunction = _glFogf
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return glFogfAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogi;

/// ```c
/// GLAPI void GLAPIENTRY glFogi( GLenum pname, GLint param )
/// ```
/// {@category opengl}
void glFogi(int pname, int param) {
  final glFogiAsFunction = _glFogi
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return glFogiAsFunction(pname, param);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogfv;

/// ```c
/// GLAPI void GLAPIENTRY glFogfv( GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glFogfv(int pname, Pointer<Float> params) {
  final glFogfvAsFunction = _glFogfv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Float> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Float> params)>();
  return glFogfvAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFogiv;

/// ```c
/// GLAPI void GLAPIENTRY glFogiv( GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glFogiv(int pname, Pointer<Int32> params) {
  final glFogivAsFunction = _glFogiv
      .cast<
        NativeFunction<Void Function(Uint32 pname, Pointer<Int32> params)>
      >()
      .asFunction<void Function(int pname, Pointer<Int32> params)>();
  return glFogivAsFunction(pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glFeedbackBuffer;

/// ```c
/// GLAPI void GLAPIENTRY glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer )
/// ```
/// {@category opengl}
void glFeedbackBuffer(int size, int type, Pointer<Float> buffer) {
  final glFeedbackBufferAsFunction = _glFeedbackBuffer
      .cast<
        NativeFunction<
          Void Function(Uint32 size, Uint32 type, Pointer<Float> buffer)
        >
      >()
      .asFunction<void Function(int size, int type, Pointer<Float> buffer)>();
  return glFeedbackBufferAsFunction(size, type, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPassThrough;

/// ```c
/// GLAPI void GLAPIENTRY glPassThrough( GLfloat token )
/// ```
/// {@category opengl}
void glPassThrough(double token) {
  final glPassThroughAsFunction = _glPassThrough
      .cast<NativeFunction<Void Function(Float token)>>()
      .asFunction<void Function(double token)>();
  return glPassThroughAsFunction(token);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSelectBuffer;

/// ```c
/// GLAPI void GLAPIENTRY glSelectBuffer( GLsizei size, GLuint *buffer )
/// ```
/// {@category opengl}
void glSelectBuffer(int size, Pointer<Uint32> buffer) {
  final glSelectBufferAsFunction = _glSelectBuffer
      .cast<
        NativeFunction<Void Function(Uint32 size, Pointer<Uint32> buffer)>
      >()
      .asFunction<void Function(int size, Pointer<Uint32> buffer)>();
  return glSelectBufferAsFunction(size, buffer);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glInitNames;

/// ```c
/// GLAPI void GLAPIENTRY glInitNames( void )
/// ```
/// {@category opengl}
void glInitNames() {
  final glInitNamesAsFunction = _glInitNames
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glInitNamesAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadName;

/// ```c
/// GLAPI void GLAPIENTRY glLoadName( GLuint name )
/// ```
/// {@category opengl}
void glLoadName(int name) {
  final glLoadNameAsFunction = _glLoadName
      .cast<NativeFunction<Void Function(Uint32 name)>>()
      .asFunction<void Function(int name)>();
  return glLoadNameAsFunction(name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPushName;

/// ```c
/// GLAPI void GLAPIENTRY glPushName( GLuint name )
/// ```
/// {@category opengl}
void glPushName(int name) {
  final glPushNameAsFunction = _glPushName
      .cast<NativeFunction<Void Function(Uint32 name)>>()
      .asFunction<void Function(int name)>();
  return glPushNameAsFunction(name);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glPopName;

/// ```c
/// GLAPI void GLAPIENTRY glPopName( void )
/// ```
/// {@category opengl}
void glPopName() {
  final glPopNameAsFunction = _glPopName
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return glPopNameAsFunction();
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glDrawRangeElements;

/// ```c
/// GLAPI void GLAPIENTRY glDrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices )
/// ```
/// {@category opengl}
void glDrawRangeElements(
  int mode,
  int start,
  int end,
  int count,
  int type,
  Pointer<NativeType> indices,
) {
  final glDrawRangeElementsAsFunction = _glDrawRangeElements
      .cast<
        NativeFunction<
          Void Function(
            Uint32 mode,
            Uint32 start,
            Uint32 end,
            Uint32 count,
            Uint32 type,
            Pointer<NativeType> indices,
          )
        >
      >()
      .asFunction<
        void Function(
          int mode,
          int start,
          int end,
          int count,
          int type,
          Pointer<NativeType> indices,
        )
      >();
  return glDrawRangeElementsAsFunction(mode, start, end, count, type, indices);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexImage3D;

/// ```c
/// GLAPI void GLAPIENTRY glTexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels )
/// ```
/// {@category opengl}
void glTexImage3D(
  int target,
  int level,
  int internalFormat,
  int width,
  int height,
  int depth,
  int border,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexImage3DAsFunction = _glTexImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 internalFormat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalFormat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexImage3DAsFunction(
    target,
    level,
    internalFormat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glTexSubImage3D;

/// ```c
/// GLAPI void GLAPIENTRY glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
/// ```
/// {@category opengl}
void glTexSubImage3D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int type,
  Pointer<NativeType> pixels,
) {
  final glTexSubImage3DAsFunction = _glTexSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> pixels,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          Pointer<NativeType> pixels,
        )
      >();
  return glTexSubImage3DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyTexSubImage3D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height )
/// ```
/// {@category opengl}
void glCopyTexSubImage3D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyTexSubImage3DAsFunction = _glCopyTexSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyTexSubImage3DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTable;

/// ```c
/// GLAPI void GLAPIENTRY glColorTable( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table )
/// ```
/// {@category opengl}
void glColorTable(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  Pointer<NativeType> table,
) {
  final glColorTableAsFunction = _glColorTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int format,
          int type,
          Pointer<NativeType> table,
        )
      >();
  return glColorTableAsFunction(
    target,
    internalformat,
    width,
    format,
    type,
    table,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorSubTable;

/// ```c
/// GLAPI void GLAPIENTRY glColorSubTable( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data )
/// ```
/// {@category opengl}
void glColorSubTable(
  int target,
  int start,
  int count,
  int format,
  int type,
  Pointer<NativeType> data,
) {
  final glColorSubTableAsFunction = _glColorSubTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 start,
            Uint32 count,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int start,
          int count,
          int format,
          int type,
          Pointer<NativeType> data,
        )
      >();
  return glColorSubTableAsFunction(target, start, count, format, type, data);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
/// ```
/// {@category opengl}
void glColorTableParameteriv(int target, int pname, Pointer<Int32> params) {
  final glColorTableParameterivAsFunction = _glColorTableParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glColorTableParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glColorTableParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
/// ```
/// {@category opengl}
void glColorTableParameterfv(int target, int pname, Pointer<Float> params) {
  final glColorTableParameterfvAsFunction = _glColorTableParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glColorTableParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyColorSubTable;

/// ```c
/// GLAPI void GLAPIENTRY glCopyColorSubTable( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width )
/// ```
/// {@category opengl}
void glCopyColorSubTable(int target, int start, int x, int y, int width) {
  final glCopyColorSubTableAsFunction = _glCopyColorSubTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 start,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int start, int x, int y, int width)
      >();
  return glCopyColorSubTableAsFunction(target, start, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyColorTable;

/// ```c
/// GLAPI void GLAPIENTRY glCopyColorTable( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
/// ```
/// {@category opengl}
void glCopyColorTable(int target, int internalformat, int x, int y, int width) {
  final glCopyColorTableAsFunction = _glCopyColorTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int x, int y, int width)
      >();
  return glCopyColorTableAsFunction(target, internalformat, x, y, width);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTable;

/// ```c
/// GLAPI void GLAPIENTRY glGetColorTable( GLenum target, GLenum format, GLenum type, GLvoid *table )
/// ```
/// {@category opengl}
void glGetColorTable(
  int target,
  int format,
  int type,
  Pointer<NativeType> table,
) {
  final glGetColorTableAsFunction = _glGetColorTable
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> table,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> table,
        )
      >();
  return glGetColorTableAsFunction(target, format, type, table);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetColorTableParameterfv( GLenum target, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetColorTableParameterfv(int target, int pname, Pointer<Float> params) {
  final glGetColorTableParameterfvAsFunction = _glGetColorTableParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetColorTableParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetColorTableParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetColorTableParameteriv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetColorTableParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetColorTableParameterivAsFunction = _glGetColorTableParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetColorTableParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendEquation;

/// ```c
/// GLAPI void GLAPIENTRY glBlendEquation( GLenum mode )
/// ```
/// {@category opengl}
void glBlendEquation(int mode) {
  final glBlendEquationAsFunction = _glBlendEquation
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return glBlendEquationAsFunction(mode);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glBlendColor;

/// ```c
/// GLAPI void GLAPIENTRY glBlendColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
/// ```
/// {@category opengl}
void glBlendColor(double red, double green, double blue, double alpha) {
  final glBlendColorAsFunction = _glBlendColor
      .cast<
        NativeFunction<
          Void Function(Float red, Float green, Float blue, Float alpha)
        >
      >()
      .asFunction<
        void Function(double red, double green, double blue, double alpha)
      >();
  return glBlendColorAsFunction(red, green, blue, alpha);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glHistogram;

/// ```c
/// GLAPI void GLAPIENTRY glHistogram( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink )
/// ```
/// {@category opengl}
void glHistogram(int target, int width, int internalformat, int sink) {
  final glHistogramAsFunction = _glHistogram
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 width,
            Uint32 internalformat,
            Int32 sink,
          )
        >
      >()
      .asFunction<
        void Function(int target, int width, int internalformat, int sink)
      >();
  return glHistogramAsFunction(target, width, internalformat, sink);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResetHistogram;

/// ```c
/// GLAPI void GLAPIENTRY glResetHistogram( GLenum target )
/// ```
/// {@category opengl}
void glResetHistogram(int target) {
  final glResetHistogramAsFunction = _glResetHistogram
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glResetHistogramAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogram;

/// ```c
/// GLAPI void GLAPIENTRY glGetHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values )
/// ```
/// {@category opengl}
void glGetHistogram(
  int target,
  int reset,
  int format,
  int type,
  Pointer<NativeType> values,
) {
  final glGetHistogramAsFunction = _glGetHistogram
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int type,
          Pointer<NativeType> values,
        )
      >();
  return glGetHistogramAsFunction(target, reset, format, type, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetHistogramParameterfv( GLenum target, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetHistogramParameterfv(int target, int pname, Pointer<Float> params) {
  final glGetHistogramParameterfvAsFunction = _glGetHistogramParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetHistogramParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetHistogramParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetHistogramParameteriv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetHistogramParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetHistogramParameterivAsFunction = _glGetHistogramParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetHistogramParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMinmax;

/// ```c
/// GLAPI void GLAPIENTRY glMinmax( GLenum target, GLenum internalformat, GLboolean sink )
/// ```
/// {@category opengl}
void glMinmax(int target, int internalformat, int sink) {
  final glMinmaxAsFunction = _glMinmax
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 internalformat, Int32 sink)
        >
      >()
      .asFunction<void Function(int target, int internalformat, int sink)>();
  return glMinmaxAsFunction(target, internalformat, sink);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glResetMinmax;

/// ```c
/// GLAPI void GLAPIENTRY glResetMinmax( GLenum target )
/// ```
/// {@category opengl}
void glResetMinmax(int target) {
  final glResetMinmaxAsFunction = _glResetMinmax
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return glResetMinmaxAsFunction(target);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmax;

/// ```c
/// GLAPI void GLAPIENTRY glGetMinmax( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values )
/// ```
/// {@category opengl}
void glGetMinmax(
  int target,
  int reset,
  int format,
  int types,
  Pointer<NativeType> values,
) {
  final glGetMinmaxAsFunction = _glGetMinmax
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 reset,
            Uint32 format,
            Uint32 types,
            Pointer<NativeType> values,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int reset,
          int format,
          int types,
          Pointer<NativeType> values,
        )
      >();
  return glGetMinmaxAsFunction(target, reset, format, types, values);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmaxParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMinmaxParameterfv( GLenum target, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetMinmaxParameterfv(int target, int pname, Pointer<Float> params) {
  final glGetMinmaxParameterfvAsFunction = _glGetMinmaxParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetMinmaxParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetMinmaxParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetMinmaxParameteriv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetMinmaxParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetMinmaxParameterivAsFunction = _glGetMinmaxParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetMinmaxParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionFilter1D;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionFilter1D( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image )
/// ```
/// {@category opengl}
void glConvolutionFilter1D(
  int target,
  int internalformat,
  int width,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glConvolutionFilter1DAsFunction = _glConvolutionFilter1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glConvolutionFilter1DAsFunction(
    target,
    internalformat,
    width,
    format,
    type,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionFilter2D;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image )
/// ```
/// {@category opengl}
void glConvolutionFilter2D(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glConvolutionFilter2DAsFunction = _glConvolutionFilter2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glConvolutionFilter2DAsFunction(
    target,
    internalformat,
    width,
    height,
    format,
    type,
    image,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterf;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionParameterf( GLenum target, GLenum pname, GLfloat params )
/// ```
/// {@category opengl}
void glConvolutionParameterf(int target, int pname, double params) {
  final glConvolutionParameterfAsFunction = _glConvolutionParameterf
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Float params)>
      >()
      .asFunction<void Function(int target, int pname, double params)>();
  return glConvolutionParameterfAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionParameterfv( GLenum target, GLenum pname, const GLfloat *params )
/// ```
/// {@category opengl}
void glConvolutionParameterfv(int target, int pname, Pointer<Float> params) {
  final glConvolutionParameterfvAsFunction = _glConvolutionParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glConvolutionParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameteri;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionParameteri( GLenum target, GLenum pname, GLint params )
/// ```
/// {@category opengl}
void glConvolutionParameteri(int target, int pname, int params) {
  final glConvolutionParameteriAsFunction = _glConvolutionParameteri
      .cast<
        NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 params)>
      >()
      .asFunction<void Function(int target, int pname, int params)>();
  return glConvolutionParameteriAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glConvolutionParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glConvolutionParameteriv( GLenum target, GLenum pname, const GLint *params )
/// ```
/// {@category opengl}
void glConvolutionParameteriv(int target, int pname, Pointer<Int32> params) {
  final glConvolutionParameterivAsFunction = _glConvolutionParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glConvolutionParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyConvolutionFilter1D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyConvolutionFilter1D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
/// ```
/// {@category opengl}
void glCopyConvolutionFilter1D(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
) {
  final glCopyConvolutionFilter1DAsFunction = _glCopyConvolutionFilter1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
          )
        >
      >()
      .asFunction<
        void Function(int target, int internalformat, int x, int y, int width)
      >();
  return glCopyConvolutionFilter1DAsFunction(
    target,
    internalformat,
    x,
    y,
    width,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCopyConvolutionFilter2D;

/// ```c
/// GLAPI void GLAPIENTRY glCopyConvolutionFilter2D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
/// {@category opengl}
void glCopyConvolutionFilter2D(
  int target,
  int internalformat,
  int x,
  int y,
  int width,
  int height,
) {
  final glCopyConvolutionFilter2DAsFunction = _glCopyConvolutionFilter2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Int32 x,
            Int32 y,
            Uint32 width,
            Uint32 height,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int x,
          int y,
          int width,
          int height,
        )
      >();
  return glCopyConvolutionFilter2DAsFunction(
    target,
    internalformat,
    x,
    y,
    width,
    height,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionFilter;

/// ```c
/// GLAPI void GLAPIENTRY glGetConvolutionFilter( GLenum target, GLenum format, GLenum type, GLvoid *image )
/// ```
/// {@category opengl}
void glGetConvolutionFilter(
  int target,
  int format,
  int type,
  Pointer<NativeType> image,
) {
  final glGetConvolutionFilterAsFunction = _glGetConvolutionFilter
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> image,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> image,
        )
      >();
  return glGetConvolutionFilterAsFunction(target, format, type, image);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionParameterfv;

/// ```c
/// GLAPI void GLAPIENTRY glGetConvolutionParameterfv( GLenum target, GLenum pname, GLfloat *params )
/// ```
/// {@category opengl}
void glGetConvolutionParameterfv(int target, int pname, Pointer<Float> params) {
  final glGetConvolutionParameterfvAsFunction = _glGetConvolutionParameterfv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Float> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Float> params)
      >();
  return glGetConvolutionParameterfvAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetConvolutionParameteriv;

/// ```c
/// GLAPI void GLAPIENTRY glGetConvolutionParameteriv( GLenum target, GLenum pname, GLint *params )
/// ```
/// {@category opengl}
void glGetConvolutionParameteriv(int target, int pname, Pointer<Int32> params) {
  final glGetConvolutionParameterivAsFunction = _glGetConvolutionParameteriv
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Uint32 pname, Pointer<Int32> params)
        >
      >()
      .asFunction<
        void Function(int target, int pname, Pointer<Int32> params)
      >();
  return glGetConvolutionParameterivAsFunction(target, pname, params);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSeparableFilter2D;

/// ```c
/// GLAPI void GLAPIENTRY glSeparableFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column )
/// ```
/// {@category opengl}
void glSeparableFilter2D(
  int target,
  int internalformat,
  int width,
  int height,
  int format,
  int type,
  Pointer<NativeType> row,
  Pointer<NativeType> column,
) {
  final glSeparableFilter2DAsFunction = _glSeparableFilter2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> row,
            Pointer<NativeType> column,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int internalformat,
          int width,
          int height,
          int format,
          int type,
          Pointer<NativeType> row,
          Pointer<NativeType> column,
        )
      >();
  return glSeparableFilter2DAsFunction(
    target,
    internalformat,
    width,
    height,
    format,
    type,
    row,
    column,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetSeparableFilter;

/// ```c
/// GLAPI void GLAPIENTRY glGetSeparableFilter( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span )
/// ```
/// {@category opengl}
void glGetSeparableFilter(
  int target,
  int format,
  int type,
  Pointer<NativeType> row,
  Pointer<NativeType> column,
  Pointer<NativeType> span,
) {
  final glGetSeparableFilterAsFunction = _glGetSeparableFilter
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Uint32 format,
            Uint32 type,
            Pointer<NativeType> row,
            Pointer<NativeType> column,
            Pointer<NativeType> span,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int format,
          int type,
          Pointer<NativeType> row,
          Pointer<NativeType> column,
          Pointer<NativeType> span,
        )
      >();
  return glGetSeparableFilterAsFunction(
    target,
    format,
    type,
    row,
    column,
    span,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveTexture;

/// ```c
/// GLAPI void GLAPIENTRY glActiveTexture( GLenum texture )
/// ```
/// {@category opengl}
void glActiveTexture(int texture) {
  final glActiveTextureAsFunction = _glActiveTexture
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glActiveTextureAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientActiveTexture;

/// ```c
/// GLAPI void GLAPIENTRY glClientActiveTexture( GLenum texture )
/// ```
/// {@category opengl}
void glClientActiveTexture(int texture) {
  final glClientActiveTextureAsFunction = _glClientActiveTexture
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glClientActiveTextureAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexImage1D(
  int target,
  int level,
  int internalformat,
  int width,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage1DAsFunction = _glCompressedTexImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage1DAsFunction(
    target,
    level,
    internalformat,
    width,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexImage2D(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage2DAsFunction = _glCompressedTexImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage2DAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexImage3D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexImage3D(
  int target,
  int level,
  int internalformat,
  int width,
  int height,
  int depth,
  int border,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexImage3DAsFunction = _glCompressedTexImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Uint32 internalformat,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Int32 border,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexImage3DAsFunction(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage1D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexSubImage1D(
  int target,
  int level,
  int xoffset,
  int width,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage1DAsFunction = _glCompressedTexSubImage1D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Uint32 width,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int width,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage1DAsFunction(
    target,
    level,
    xoffset,
    width,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage2D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexSubImage2D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int width,
  int height,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage2DAsFunction = _glCompressedTexSubImage2D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Uint32 width,
            Uint32 height,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage2DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glCompressedTexSubImage3D;

/// ```c
/// GLAPI void GLAPIENTRY glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data )
/// ```
/// {@category opengl}
void glCompressedTexSubImage3D(
  int target,
  int level,
  int xoffset,
  int yoffset,
  int zoffset,
  int width,
  int height,
  int depth,
  int format,
  int imageSize,
  Pointer<NativeType> data,
) {
  final glCompressedTexSubImage3DAsFunction = _glCompressedTexSubImage3D
      .cast<
        NativeFunction<
          Void Function(
            Uint32 target,
            Int32 level,
            Int32 xoffset,
            Int32 yoffset,
            Int32 zoffset,
            Uint32 width,
            Uint32 height,
            Uint32 depth,
            Uint32 format,
            Uint32 imageSize,
            Pointer<NativeType> data,
          )
        >
      >()
      .asFunction<
        void Function(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int imageSize,
          Pointer<NativeType> data,
        )
      >();
  return glCompressedTexSubImage3DAsFunction(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    data,
  );
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glGetCompressedTexImage;

/// ```c
/// GLAPI void GLAPIENTRY glGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img )
/// ```
/// {@category opengl}
void glGetCompressedTexImage(int target, int lod, Pointer<NativeType> img) {
  final glGetCompressedTexImageAsFunction = _glGetCompressedTexImage
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int32 lod, Pointer<NativeType> img)
        >
      >()
      .asFunction<
        void Function(int target, int lod, Pointer<NativeType> img)
      >();
  return glGetCompressedTexImageAsFunction(target, lod, img);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1d;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1d( GLenum target, GLdouble s )
/// ```
/// {@category opengl}
void glMultiTexCoord1d(int target, double s) {
  final glMultiTexCoord1dAsFunction = _glMultiTexCoord1d
      .cast<NativeFunction<Void Function(Uint32 target, Double s)>>()
      .asFunction<void Function(int target, double s)>();
  return glMultiTexCoord1dAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1dv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1dv( GLenum target, const GLdouble *v )
/// ```
/// {@category opengl}
void glMultiTexCoord1dv(int target, Pointer<Double> v) {
  final glMultiTexCoord1dvAsFunction = _glMultiTexCoord1dv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord1dvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1f;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1f( GLenum target, GLfloat s )
/// ```
/// {@category opengl}
void glMultiTexCoord1f(int target, double s) {
  final glMultiTexCoord1fAsFunction = _glMultiTexCoord1f
      .cast<NativeFunction<Void Function(Uint32 target, Float s)>>()
      .asFunction<void Function(int target, double s)>();
  return glMultiTexCoord1fAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1fv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1fv( GLenum target, const GLfloat *v )
/// ```
/// {@category opengl}
void glMultiTexCoord1fv(int target, Pointer<Float> v) {
  final glMultiTexCoord1fvAsFunction = _glMultiTexCoord1fv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord1fvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1i;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1i( GLenum target, GLint s )
/// ```
/// {@category opengl}
void glMultiTexCoord1i(int target, int s) {
  final glMultiTexCoord1iAsFunction = _glMultiTexCoord1i
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s)>>()
      .asFunction<void Function(int target, int s)>();
  return glMultiTexCoord1iAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1iv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1iv( GLenum target, const GLint *v )
/// ```
/// {@category opengl}
void glMultiTexCoord1iv(int target, Pointer<Int32> v) {
  final glMultiTexCoord1ivAsFunction = _glMultiTexCoord1iv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord1ivAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1s;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1s( GLenum target, GLshort s )
/// ```
/// {@category opengl}
void glMultiTexCoord1s(int target, int s) {
  final glMultiTexCoord1sAsFunction = _glMultiTexCoord1s
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return glMultiTexCoord1sAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1sv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1sv( GLenum target, const GLshort *v )
/// ```
/// {@category opengl}
void glMultiTexCoord1sv(int target, Pointer<Int16> v) {
  final glMultiTexCoord1svAsFunction = _glMultiTexCoord1sv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord1svAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2d;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t )
/// ```
/// {@category opengl}
void glMultiTexCoord2d(int target, double s, double t) {
  final glMultiTexCoord2dAsFunction = _glMultiTexCoord2d
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return glMultiTexCoord2dAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2dv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2dv( GLenum target, const GLdouble *v )
/// ```
/// {@category opengl}
void glMultiTexCoord2dv(int target, Pointer<Double> v) {
  final glMultiTexCoord2dvAsFunction = _glMultiTexCoord2dv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord2dvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2f;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t )
/// ```
/// {@category opengl}
void glMultiTexCoord2f(int target, double s, double t) {
  final glMultiTexCoord2fAsFunction = _glMultiTexCoord2f
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return glMultiTexCoord2fAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2fv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2fv( GLenum target, const GLfloat *v )
/// ```
/// {@category opengl}
void glMultiTexCoord2fv(int target, Pointer<Float> v) {
  final glMultiTexCoord2fvAsFunction = _glMultiTexCoord2fv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord2fvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2i;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2i( GLenum target, GLint s, GLint t )
/// ```
/// {@category opengl}
void glMultiTexCoord2i(int target, int s, int t) {
  final glMultiTexCoord2iAsFunction = _glMultiTexCoord2i
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return glMultiTexCoord2iAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2iv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2iv( GLenum target, const GLint *v )
/// ```
/// {@category opengl}
void glMultiTexCoord2iv(int target, Pointer<Int32> v) {
  final glMultiTexCoord2ivAsFunction = _glMultiTexCoord2iv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord2ivAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2s;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2s( GLenum target, GLshort s, GLshort t )
/// ```
/// {@category opengl}
void glMultiTexCoord2s(int target, int s, int t) {
  final glMultiTexCoord2sAsFunction = _glMultiTexCoord2s
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return glMultiTexCoord2sAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2sv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2sv( GLenum target, const GLshort *v )
/// ```
/// {@category opengl}
void glMultiTexCoord2sv(int target, Pointer<Int16> v) {
  final glMultiTexCoord2svAsFunction = _glMultiTexCoord2sv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord2svAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3d;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r )
/// ```
/// {@category opengl}
void glMultiTexCoord3d(int target, double s, double t, double r) {
  final glMultiTexCoord3dAsFunction = _glMultiTexCoord3d
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Double s, Double t, Double r)
        >
      >()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return glMultiTexCoord3dAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3dv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3dv( GLenum target, const GLdouble *v )
/// ```
/// {@category opengl}
void glMultiTexCoord3dv(int target, Pointer<Double> v) {
  final glMultiTexCoord3dvAsFunction = _glMultiTexCoord3dv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord3dvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3f;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r )
/// ```
/// {@category opengl}
void glMultiTexCoord3f(int target, double s, double t, double r) {
  final glMultiTexCoord3fAsFunction = _glMultiTexCoord3f
      .cast<
        NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r)>
      >()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return glMultiTexCoord3fAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3fv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3fv( GLenum target, const GLfloat *v )
/// ```
/// {@category opengl}
void glMultiTexCoord3fv(int target, Pointer<Float> v) {
  final glMultiTexCoord3fvAsFunction = _glMultiTexCoord3fv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord3fvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3i;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r )
/// ```
/// {@category opengl}
void glMultiTexCoord3i(int target, int s, int t, int r) {
  final glMultiTexCoord3iAsFunction = _glMultiTexCoord3i
      .cast<
        NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r)>
      >()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return glMultiTexCoord3iAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3iv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3iv( GLenum target, const GLint *v )
/// ```
/// {@category opengl}
void glMultiTexCoord3iv(int target, Pointer<Int32> v) {
  final glMultiTexCoord3ivAsFunction = _glMultiTexCoord3iv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord3ivAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3s;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r )
/// ```
/// {@category opengl}
void glMultiTexCoord3s(int target, int s, int t, int r) {
  final glMultiTexCoord3sAsFunction = _glMultiTexCoord3s
      .cast<
        NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r)>
      >()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return glMultiTexCoord3sAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3sv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3sv( GLenum target, const GLshort *v )
/// ```
/// {@category opengl}
void glMultiTexCoord3sv(int target, Pointer<Int16> v) {
  final glMultiTexCoord3svAsFunction = _glMultiTexCoord3sv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord3svAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4d;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q )
/// ```
/// {@category opengl}
void glMultiTexCoord4d(int target, double s, double t, double r, double q) {
  final glMultiTexCoord4dAsFunction = _glMultiTexCoord4d
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Double s, Double t, Double r, Double q)
        >
      >()
      .asFunction<
        void Function(int target, double s, double t, double r, double q)
      >();
  return glMultiTexCoord4dAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4dv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4dv( GLenum target, const GLdouble *v )
/// ```
/// {@category opengl}
void glMultiTexCoord4dv(int target, Pointer<Double> v) {
  final glMultiTexCoord4dvAsFunction = _glMultiTexCoord4dv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord4dvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4f;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q )
/// ```
/// {@category opengl}
void glMultiTexCoord4f(int target, double s, double t, double r, double q) {
  final glMultiTexCoord4fAsFunction = _glMultiTexCoord4f
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Float s, Float t, Float r, Float q)
        >
      >()
      .asFunction<
        void Function(int target, double s, double t, double r, double q)
      >();
  return glMultiTexCoord4fAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4fv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4fv( GLenum target, const GLfloat *v )
/// ```
/// {@category opengl}
void glMultiTexCoord4fv(int target, Pointer<Float> v) {
  final glMultiTexCoord4fvAsFunction = _glMultiTexCoord4fv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord4fvAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4i;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q )
/// ```
/// {@category opengl}
void glMultiTexCoord4i(int target, int s, int t, int r, int q) {
  final glMultiTexCoord4iAsFunction = _glMultiTexCoord4i
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return glMultiTexCoord4iAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4iv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4iv( GLenum target, const GLint *v )
/// ```
/// {@category opengl}
void glMultiTexCoord4iv(int target, Pointer<Int32> v) {
  final glMultiTexCoord4ivAsFunction = _glMultiTexCoord4iv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord4ivAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4s;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q )
/// ```
/// {@category opengl}
void glMultiTexCoord4s(int target, int s, int t, int r, int q) {
  final glMultiTexCoord4sAsFunction = _glMultiTexCoord4s
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return glMultiTexCoord4sAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4sv;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4sv( GLenum target, const GLshort *v )
/// ```
/// {@category opengl}
void glMultiTexCoord4sv(int target, Pointer<Int16> v) {
  final glMultiTexCoord4svAsFunction = _glMultiTexCoord4sv
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord4svAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadTransposeMatrixd;

/// ```c
/// GLAPI void GLAPIENTRY glLoadTransposeMatrixd( const GLdouble m[16] )
/// ```
/// {@category opengl}
void glLoadTransposeMatrixd(double m) {
  final glLoadTransposeMatrixdAsFunction = _glLoadTransposeMatrixd
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return glLoadTransposeMatrixdAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glLoadTransposeMatrixf;

/// ```c
/// GLAPI void GLAPIENTRY glLoadTransposeMatrixf( const GLfloat m[16] )
/// ```
/// {@category opengl}
void glLoadTransposeMatrixf(double m) {
  final glLoadTransposeMatrixfAsFunction = _glLoadTransposeMatrixf
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return glLoadTransposeMatrixfAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultTransposeMatrixd;

/// ```c
/// GLAPI void GLAPIENTRY glMultTransposeMatrixd( const GLdouble m[16] )
/// ```
/// {@category opengl}
void glMultTransposeMatrixd(double m) {
  final glMultTransposeMatrixdAsFunction = _glMultTransposeMatrixd
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return glMultTransposeMatrixdAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultTransposeMatrixf;

/// ```c
/// GLAPI void GLAPIENTRY glMultTransposeMatrixf( const GLfloat m[16] )
/// ```
/// {@category opengl}
void glMultTransposeMatrixf(double m) {
  final glMultTransposeMatrixfAsFunction = _glMultTransposeMatrixf
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return glMultTransposeMatrixfAsFunction(m);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glSampleCoverage;

/// ```c
/// GLAPI void GLAPIENTRY glSampleCoverage( GLclampf value, GLboolean invert )
/// ```
/// {@category opengl}
void glSampleCoverage(double value, int invert) {
  final glSampleCoverageAsFunction = _glSampleCoverage
      .cast<NativeFunction<Void Function(Float value, Int32 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return glSampleCoverageAsFunction(value, invert);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glActiveTextureArb;

/// ```c
/// GLAPI void GLAPIENTRY glActiveTextureARB(GLenum texture)
/// ```
/// {@category opengl}
void glActiveTextureArb(int texture) {
  final glActiveTextureArbAsFunction = _glActiveTextureArb
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glActiveTextureArbAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glClientActiveTextureArb;

/// ```c
/// GLAPI void GLAPIENTRY glClientActiveTextureARB(GLenum texture)
/// ```
/// {@category opengl}
void glClientActiveTextureArb(int texture) {
  final glClientActiveTextureArbAsFunction = _glClientActiveTextureArb
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return glClientActiveTextureArbAsFunction(texture);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1dArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1dARB(GLenum target, GLdouble s)
/// ```
/// {@category opengl}
void glMultiTexCoord1dArb(int target, double s) {
  final glMultiTexCoord1dArbAsFunction = _glMultiTexCoord1dArb
      .cast<NativeFunction<Void Function(Uint32 target, Double s)>>()
      .asFunction<void Function(int target, double s)>();
  return glMultiTexCoord1dArbAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1dvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
/// ```
/// {@category opengl}
void glMultiTexCoord1dvArb(int target, Pointer<Double> v) {
  final glMultiTexCoord1dvArbAsFunction = _glMultiTexCoord1dvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord1dvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1fArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1fARB(GLenum target, GLfloat s)
/// ```
/// {@category opengl}
void glMultiTexCoord1fArb(int target, double s) {
  final glMultiTexCoord1fArbAsFunction = _glMultiTexCoord1fArb
      .cast<NativeFunction<Void Function(Uint32 target, Float s)>>()
      .asFunction<void Function(int target, double s)>();
  return glMultiTexCoord1fArbAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1fvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
/// ```
/// {@category opengl}
void glMultiTexCoord1fvArb(int target, Pointer<Float> v) {
  final glMultiTexCoord1fvArbAsFunction = _glMultiTexCoord1fvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord1fvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1iArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1iARB(GLenum target, GLint s)
/// ```
/// {@category opengl}
void glMultiTexCoord1iArb(int target, int s) {
  final glMultiTexCoord1iArbAsFunction = _glMultiTexCoord1iArb
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s)>>()
      .asFunction<void Function(int target, int s)>();
  return glMultiTexCoord1iArbAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1ivArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1ivARB(GLenum target, const GLint *v)
/// ```
/// {@category opengl}
void glMultiTexCoord1ivArb(int target, Pointer<Int32> v) {
  final glMultiTexCoord1ivArbAsFunction = _glMultiTexCoord1ivArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord1ivArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1sArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1sARB(GLenum target, GLshort s)
/// ```
/// {@category opengl}
void glMultiTexCoord1sArb(int target, int s) {
  final glMultiTexCoord1sArbAsFunction = _glMultiTexCoord1sArb
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return glMultiTexCoord1sArbAsFunction(target, s);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord1svArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord1svARB(GLenum target, const GLshort *v)
/// ```
/// {@category opengl}
void glMultiTexCoord1svArb(int target, Pointer<Int16> v) {
  final glMultiTexCoord1svArbAsFunction = _glMultiTexCoord1svArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord1svArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2dArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
/// ```
/// {@category opengl}
void glMultiTexCoord2dArb(int target, double s, double t) {
  final glMultiTexCoord2dArbAsFunction = _glMultiTexCoord2dArb
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return glMultiTexCoord2dArbAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2dvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
/// ```
/// {@category opengl}
void glMultiTexCoord2dvArb(int target, Pointer<Double> v) {
  final glMultiTexCoord2dvArbAsFunction = _glMultiTexCoord2dvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord2dvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2fArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
/// ```
/// {@category opengl}
void glMultiTexCoord2fArb(int target, double s, double t) {
  final glMultiTexCoord2fArbAsFunction = _glMultiTexCoord2fArb
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return glMultiTexCoord2fArbAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2fvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
/// ```
/// {@category opengl}
void glMultiTexCoord2fvArb(int target, Pointer<Float> v) {
  final glMultiTexCoord2fvArbAsFunction = _glMultiTexCoord2fvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord2fvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2iArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
/// ```
/// {@category opengl}
void glMultiTexCoord2iArb(int target, int s, int t) {
  final glMultiTexCoord2iArbAsFunction = _glMultiTexCoord2iArb
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return glMultiTexCoord2iArbAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2ivArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2ivARB(GLenum target, const GLint *v)
/// ```
/// {@category opengl}
void glMultiTexCoord2ivArb(int target, Pointer<Int32> v) {
  final glMultiTexCoord2ivArbAsFunction = _glMultiTexCoord2ivArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord2ivArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2sArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
/// ```
/// {@category opengl}
void glMultiTexCoord2sArb(int target, int s, int t) {
  final glMultiTexCoord2sArbAsFunction = _glMultiTexCoord2sArb
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return glMultiTexCoord2sArbAsFunction(target, s, t);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord2svArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord2svARB(GLenum target, const GLshort *v)
/// ```
/// {@category opengl}
void glMultiTexCoord2svArb(int target, Pointer<Int16> v) {
  final glMultiTexCoord2svArbAsFunction = _glMultiTexCoord2svArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord2svArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3dArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
/// ```
/// {@category opengl}
void glMultiTexCoord3dArb(int target, double s, double t, double r) {
  final glMultiTexCoord3dArbAsFunction = _glMultiTexCoord3dArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Double s, Double t, Double r)
        >
      >()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return glMultiTexCoord3dArbAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3dvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
/// ```
/// {@category opengl}
void glMultiTexCoord3dvArb(int target, Pointer<Double> v) {
  final glMultiTexCoord3dvArbAsFunction = _glMultiTexCoord3dvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord3dvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3fArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
/// ```
/// {@category opengl}
void glMultiTexCoord3fArb(int target, double s, double t, double r) {
  final glMultiTexCoord3fArbAsFunction = _glMultiTexCoord3fArb
      .cast<
        NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r)>
      >()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return glMultiTexCoord3fArbAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3fvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
/// ```
/// {@category opengl}
void glMultiTexCoord3fvArb(int target, Pointer<Float> v) {
  final glMultiTexCoord3fvArbAsFunction = _glMultiTexCoord3fvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord3fvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3iArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
/// ```
/// {@category opengl}
void glMultiTexCoord3iArb(int target, int s, int t, int r) {
  final glMultiTexCoord3iArbAsFunction = _glMultiTexCoord3iArb
      .cast<
        NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r)>
      >()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return glMultiTexCoord3iArbAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3ivArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3ivARB(GLenum target, const GLint *v)
/// ```
/// {@category opengl}
void glMultiTexCoord3ivArb(int target, Pointer<Int32> v) {
  final glMultiTexCoord3ivArbAsFunction = _glMultiTexCoord3ivArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord3ivArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3sArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
/// ```
/// {@category opengl}
void glMultiTexCoord3sArb(int target, int s, int t, int r) {
  final glMultiTexCoord3sArbAsFunction = _glMultiTexCoord3sArb
      .cast<
        NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r)>
      >()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return glMultiTexCoord3sArbAsFunction(target, s, t, r);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord3svArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord3svARB(GLenum target, const GLshort *v)
/// ```
/// {@category opengl}
void glMultiTexCoord3svArb(int target, Pointer<Int16> v) {
  final glMultiTexCoord3svArbAsFunction = _glMultiTexCoord3svArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord3svArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4dArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
/// ```
/// {@category opengl}
void glMultiTexCoord4dArb(int target, double s, double t, double r, double q) {
  final glMultiTexCoord4dArbAsFunction = _glMultiTexCoord4dArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Double s, Double t, Double r, Double q)
        >
      >()
      .asFunction<
        void Function(int target, double s, double t, double r, double q)
      >();
  return glMultiTexCoord4dArbAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4dvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
/// ```
/// {@category opengl}
void glMultiTexCoord4dvArb(int target, Pointer<Double> v) {
  final glMultiTexCoord4dvArbAsFunction = _glMultiTexCoord4dvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double> v)>>()
      .asFunction<void Function(int target, Pointer<Double> v)>();
  return glMultiTexCoord4dvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4fArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
/// ```
/// {@category opengl}
void glMultiTexCoord4fArb(int target, double s, double t, double r, double q) {
  final glMultiTexCoord4fArbAsFunction = _glMultiTexCoord4fArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Float s, Float t, Float r, Float q)
        >
      >()
      .asFunction<
        void Function(int target, double s, double t, double r, double q)
      >();
  return glMultiTexCoord4fArbAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4fvArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
/// ```
/// {@category opengl}
void glMultiTexCoord4fvArb(int target, Pointer<Float> v) {
  final glMultiTexCoord4fvArbAsFunction = _glMultiTexCoord4fvArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float> v)>>()
      .asFunction<void Function(int target, Pointer<Float> v)>();
  return glMultiTexCoord4fvArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4iArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
/// ```
/// {@category opengl}
void glMultiTexCoord4iArb(int target, int s, int t, int r, int q) {
  final glMultiTexCoord4iArbAsFunction = _glMultiTexCoord4iArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return glMultiTexCoord4iArbAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4ivArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4ivARB(GLenum target, const GLint *v)
/// ```
/// {@category opengl}
void glMultiTexCoord4ivArb(int target, Pointer<Int32> v) {
  final glMultiTexCoord4ivArbAsFunction = _glMultiTexCoord4ivArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32> v)>>()
      .asFunction<void Function(int target, Pointer<Int32> v)>();
  return glMultiTexCoord4ivArbAsFunction(target, v);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4sArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
/// ```
/// {@category opengl}
void glMultiTexCoord4sArb(int target, int s, int t, int r, int q) {
  final glMultiTexCoord4sArbAsFunction = _glMultiTexCoord4sArb
      .cast<
        NativeFunction<
          Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q)
        >
      >()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return glMultiTexCoord4sArbAsFunction(target, s, t, r, q);
}

/// @nodoc
late Pointer<NativeFunction<Void Function()>> _glMultiTexCoord4svArb;

/// ```c
/// GLAPI void GLAPIENTRY glMultiTexCoord4svARB(GLenum target, const GLshort *v)
/// ```
/// {@category opengl}
void glMultiTexCoord4svArb(int target, Pointer<Int16> v) {
  final glMultiTexCoord4svArbAsFunction = _glMultiTexCoord4svArb
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16> v)>>()
      .asFunction<void Function(int target, Pointer<Int16> v)>();
  return glMultiTexCoord4svArbAsFunction(target, v);
}

void _sdlOpenglLoader() {
  _glClearIndex = sdlGlGetProcAddressEx('glClearIndex');
  _glClearColor = sdlGlGetProcAddressEx('glClearColor');
  _glClear = sdlGlGetProcAddressEx('glClear');
  _glIndexMask = sdlGlGetProcAddressEx('glIndexMask');
  _glColorMask = sdlGlGetProcAddressEx('glColorMask');
  _glAlphaFunc = sdlGlGetProcAddressEx('glAlphaFunc');
  _glBlendFunc = sdlGlGetProcAddressEx('glBlendFunc');
  _glLogicOp = sdlGlGetProcAddressEx('glLogicOp');
  _glCullFace = sdlGlGetProcAddressEx('glCullFace');
  _glFrontFace = sdlGlGetProcAddressEx('glFrontFace');
  _glPointSize = sdlGlGetProcAddressEx('glPointSize');
  _glLineWidth = sdlGlGetProcAddressEx('glLineWidth');
  _glLineStipple = sdlGlGetProcAddressEx('glLineStipple');
  _glPolygonMode = sdlGlGetProcAddressEx('glPolygonMode');
  _glPolygonOffset = sdlGlGetProcAddressEx('glPolygonOffset');
  _glPolygonStipple = sdlGlGetProcAddressEx('glPolygonStipple');
  _glGetPolygonStipple = sdlGlGetProcAddressEx('glGetPolygonStipple');
  _glEdgeFlag = sdlGlGetProcAddressEx('glEdgeFlag');
  _glEdgeFlagv = sdlGlGetProcAddressEx('glEdgeFlagv');
  _glScissor = sdlGlGetProcAddressEx('glScissor');
  _glClipPlane = sdlGlGetProcAddressEx('glClipPlane');
  _glGetClipPlane = sdlGlGetProcAddressEx('glGetClipPlane');
  _glDrawBuffer = sdlGlGetProcAddressEx('glDrawBuffer');
  _glReadBuffer = sdlGlGetProcAddressEx('glReadBuffer');
  _glEnable = sdlGlGetProcAddressEx('glEnable');
  _glDisable = sdlGlGetProcAddressEx('glDisable');
  _glIsEnabled = sdlGlGetProcAddressEx('glIsEnabled');
  _glEnableClientState = sdlGlGetProcAddressEx('glEnableClientState');
  _glDisableClientState = sdlGlGetProcAddressEx('glDisableClientState');
  _glGetBooleanv = sdlGlGetProcAddressEx('glGetBooleanv');
  _glGetDoublev = sdlGlGetProcAddressEx('glGetDoublev');
  _glGetFloatv = sdlGlGetProcAddressEx('glGetFloatv');
  _glGetIntegerv = sdlGlGetProcAddressEx('glGetIntegerv');
  _glPushAttrib = sdlGlGetProcAddressEx('glPushAttrib');
  _glPopAttrib = sdlGlGetProcAddressEx('glPopAttrib');
  _glPushClientAttrib = sdlGlGetProcAddressEx('glPushClientAttrib');
  _glPopClientAttrib = sdlGlGetProcAddressEx('glPopClientAttrib');
  _glRenderMode = sdlGlGetProcAddressEx('glRenderMode');
  _glGetError = sdlGlGetProcAddressEx('glGetError');
  _glGetString = sdlGlGetProcAddressEx('glGetString');
  _glFinish = sdlGlGetProcAddressEx('glFinish');
  _glFlush = sdlGlGetProcAddressEx('glFlush');
  _glHint = sdlGlGetProcAddressEx('glHint');
  _glClearDepth = sdlGlGetProcAddressEx('glClearDepth');
  _glDepthFunc = sdlGlGetProcAddressEx('glDepthFunc');
  _glDepthMask = sdlGlGetProcAddressEx('glDepthMask');
  _glDepthRange = sdlGlGetProcAddressEx('glDepthRange');
  _glClearAccum = sdlGlGetProcAddressEx('glClearAccum');
  _glAccum = sdlGlGetProcAddressEx('glAccum');
  _glMatrixMode = sdlGlGetProcAddressEx('glMatrixMode');
  _glOrtho = sdlGlGetProcAddressEx('glOrtho');
  _glFrustum = sdlGlGetProcAddressEx('glFrustum');
  _glViewport = sdlGlGetProcAddressEx('glViewport');
  _glPushMatrix = sdlGlGetProcAddressEx('glPushMatrix');
  _glPopMatrix = sdlGlGetProcAddressEx('glPopMatrix');
  _glLoadIdentity = sdlGlGetProcAddressEx('glLoadIdentity');
  _glLoadMatrixd = sdlGlGetProcAddressEx('glLoadMatrixd');
  _glLoadMatrixf = sdlGlGetProcAddressEx('glLoadMatrixf');
  _glMultMatrixd = sdlGlGetProcAddressEx('glMultMatrixd');
  _glMultMatrixf = sdlGlGetProcAddressEx('glMultMatrixf');
  _glRotated = sdlGlGetProcAddressEx('glRotated');
  _glRotatef = sdlGlGetProcAddressEx('glRotatef');
  _glScaled = sdlGlGetProcAddressEx('glScaled');
  _glScalef = sdlGlGetProcAddressEx('glScalef');
  _glTranslated = sdlGlGetProcAddressEx('glTranslated');
  _glTranslatef = sdlGlGetProcAddressEx('glTranslatef');
  _glIsList = sdlGlGetProcAddressEx('glIsList');
  _glDeleteLists = sdlGlGetProcAddressEx('glDeleteLists');
  _glGenLists = sdlGlGetProcAddressEx('glGenLists');
  _glNewList = sdlGlGetProcAddressEx('glNewList');
  _glEndList = sdlGlGetProcAddressEx('glEndList');
  _glCallList = sdlGlGetProcAddressEx('glCallList');
  _glCallLists = sdlGlGetProcAddressEx('glCallLists');
  _glListBase = sdlGlGetProcAddressEx('glListBase');
  _glBegin = sdlGlGetProcAddressEx('glBegin');
  _glEnd = sdlGlGetProcAddressEx('glEnd');
  _glVertex2d = sdlGlGetProcAddressEx('glVertex2d');
  _glVertex2f = sdlGlGetProcAddressEx('glVertex2f');
  _glVertex2i = sdlGlGetProcAddressEx('glVertex2i');
  _glVertex2s = sdlGlGetProcAddressEx('glVertex2s');
  _glVertex3d = sdlGlGetProcAddressEx('glVertex3d');
  _glVertex3f = sdlGlGetProcAddressEx('glVertex3f');
  _glVertex3i = sdlGlGetProcAddressEx('glVertex3i');
  _glVertex3s = sdlGlGetProcAddressEx('glVertex3s');
  _glVertex4d = sdlGlGetProcAddressEx('glVertex4d');
  _glVertex4f = sdlGlGetProcAddressEx('glVertex4f');
  _glVertex4i = sdlGlGetProcAddressEx('glVertex4i');
  _glVertex4s = sdlGlGetProcAddressEx('glVertex4s');
  _glVertex2dv = sdlGlGetProcAddressEx('glVertex2dv');
  _glVertex2fv = sdlGlGetProcAddressEx('glVertex2fv');
  _glVertex2iv = sdlGlGetProcAddressEx('glVertex2iv');
  _glVertex2sv = sdlGlGetProcAddressEx('glVertex2sv');
  _glVertex3dv = sdlGlGetProcAddressEx('glVertex3dv');
  _glVertex3fv = sdlGlGetProcAddressEx('glVertex3fv');
  _glVertex3iv = sdlGlGetProcAddressEx('glVertex3iv');
  _glVertex3sv = sdlGlGetProcAddressEx('glVertex3sv');
  _glVertex4dv = sdlGlGetProcAddressEx('glVertex4dv');
  _glVertex4fv = sdlGlGetProcAddressEx('glVertex4fv');
  _glVertex4iv = sdlGlGetProcAddressEx('glVertex4iv');
  _glVertex4sv = sdlGlGetProcAddressEx('glVertex4sv');
  _glNormal3b = sdlGlGetProcAddressEx('glNormal3b');
  _glNormal3d = sdlGlGetProcAddressEx('glNormal3d');
  _glNormal3f = sdlGlGetProcAddressEx('glNormal3f');
  _glNormal3i = sdlGlGetProcAddressEx('glNormal3i');
  _glNormal3s = sdlGlGetProcAddressEx('glNormal3s');
  _glNormal3bv = sdlGlGetProcAddressEx('glNormal3bv');
  _glNormal3dv = sdlGlGetProcAddressEx('glNormal3dv');
  _glNormal3fv = sdlGlGetProcAddressEx('glNormal3fv');
  _glNormal3iv = sdlGlGetProcAddressEx('glNormal3iv');
  _glNormal3sv = sdlGlGetProcAddressEx('glNormal3sv');
  _glIndexd = sdlGlGetProcAddressEx('glIndexd');
  _glIndexf = sdlGlGetProcAddressEx('glIndexf');
  _glIndexi = sdlGlGetProcAddressEx('glIndexi');
  _glIndexs = sdlGlGetProcAddressEx('glIndexs');
  _glIndexub = sdlGlGetProcAddressEx('glIndexub');
  _glIndexdv = sdlGlGetProcAddressEx('glIndexdv');
  _glIndexfv = sdlGlGetProcAddressEx('glIndexfv');
  _glIndexiv = sdlGlGetProcAddressEx('glIndexiv');
  _glIndexsv = sdlGlGetProcAddressEx('glIndexsv');
  _glIndexubv = sdlGlGetProcAddressEx('glIndexubv');
  _glColor3b = sdlGlGetProcAddressEx('glColor3b');
  _glColor3d = sdlGlGetProcAddressEx('glColor3d');
  _glColor3f = sdlGlGetProcAddressEx('glColor3f');
  _glColor3i = sdlGlGetProcAddressEx('glColor3i');
  _glColor3s = sdlGlGetProcAddressEx('glColor3s');
  _glColor3ub = sdlGlGetProcAddressEx('glColor3ub');
  _glColor3ui = sdlGlGetProcAddressEx('glColor3ui');
  _glColor3us = sdlGlGetProcAddressEx('glColor3us');
  _glColor4b = sdlGlGetProcAddressEx('glColor4b');
  _glColor4d = sdlGlGetProcAddressEx('glColor4d');
  _glColor4f = sdlGlGetProcAddressEx('glColor4f');
  _glColor4i = sdlGlGetProcAddressEx('glColor4i');
  _glColor4s = sdlGlGetProcAddressEx('glColor4s');
  _glColor4ub = sdlGlGetProcAddressEx('glColor4ub');
  _glColor4ui = sdlGlGetProcAddressEx('glColor4ui');
  _glColor4us = sdlGlGetProcAddressEx('glColor4us');
  _glColor3bv = sdlGlGetProcAddressEx('glColor3bv');
  _glColor3dv = sdlGlGetProcAddressEx('glColor3dv');
  _glColor3fv = sdlGlGetProcAddressEx('glColor3fv');
  _glColor3iv = sdlGlGetProcAddressEx('glColor3iv');
  _glColor3sv = sdlGlGetProcAddressEx('glColor3sv');
  _glColor3ubv = sdlGlGetProcAddressEx('glColor3ubv');
  _glColor3uiv = sdlGlGetProcAddressEx('glColor3uiv');
  _glColor3usv = sdlGlGetProcAddressEx('glColor3usv');
  _glColor4bv = sdlGlGetProcAddressEx('glColor4bv');
  _glColor4dv = sdlGlGetProcAddressEx('glColor4dv');
  _glColor4fv = sdlGlGetProcAddressEx('glColor4fv');
  _glColor4iv = sdlGlGetProcAddressEx('glColor4iv');
  _glColor4sv = sdlGlGetProcAddressEx('glColor4sv');
  _glColor4ubv = sdlGlGetProcAddressEx('glColor4ubv');
  _glColor4uiv = sdlGlGetProcAddressEx('glColor4uiv');
  _glColor4usv = sdlGlGetProcAddressEx('glColor4usv');
  _glTexCoord1d = sdlGlGetProcAddressEx('glTexCoord1d');
  _glTexCoord1f = sdlGlGetProcAddressEx('glTexCoord1f');
  _glTexCoord1i = sdlGlGetProcAddressEx('glTexCoord1i');
  _glTexCoord1s = sdlGlGetProcAddressEx('glTexCoord1s');
  _glTexCoord2d = sdlGlGetProcAddressEx('glTexCoord2d');
  _glTexCoord2f = sdlGlGetProcAddressEx('glTexCoord2f');
  _glTexCoord2i = sdlGlGetProcAddressEx('glTexCoord2i');
  _glTexCoord2s = sdlGlGetProcAddressEx('glTexCoord2s');
  _glTexCoord3d = sdlGlGetProcAddressEx('glTexCoord3d');
  _glTexCoord3f = sdlGlGetProcAddressEx('glTexCoord3f');
  _glTexCoord3i = sdlGlGetProcAddressEx('glTexCoord3i');
  _glTexCoord3s = sdlGlGetProcAddressEx('glTexCoord3s');
  _glTexCoord4d = sdlGlGetProcAddressEx('glTexCoord4d');
  _glTexCoord4f = sdlGlGetProcAddressEx('glTexCoord4f');
  _glTexCoord4i = sdlGlGetProcAddressEx('glTexCoord4i');
  _glTexCoord4s = sdlGlGetProcAddressEx('glTexCoord4s');
  _glTexCoord1dv = sdlGlGetProcAddressEx('glTexCoord1dv');
  _glTexCoord1fv = sdlGlGetProcAddressEx('glTexCoord1fv');
  _glTexCoord1iv = sdlGlGetProcAddressEx('glTexCoord1iv');
  _glTexCoord1sv = sdlGlGetProcAddressEx('glTexCoord1sv');
  _glTexCoord2dv = sdlGlGetProcAddressEx('glTexCoord2dv');
  _glTexCoord2fv = sdlGlGetProcAddressEx('glTexCoord2fv');
  _glTexCoord2iv = sdlGlGetProcAddressEx('glTexCoord2iv');
  _glTexCoord2sv = sdlGlGetProcAddressEx('glTexCoord2sv');
  _glTexCoord3dv = sdlGlGetProcAddressEx('glTexCoord3dv');
  _glTexCoord3fv = sdlGlGetProcAddressEx('glTexCoord3fv');
  _glTexCoord3iv = sdlGlGetProcAddressEx('glTexCoord3iv');
  _glTexCoord3sv = sdlGlGetProcAddressEx('glTexCoord3sv');
  _glTexCoord4dv = sdlGlGetProcAddressEx('glTexCoord4dv');
  _glTexCoord4fv = sdlGlGetProcAddressEx('glTexCoord4fv');
  _glTexCoord4iv = sdlGlGetProcAddressEx('glTexCoord4iv');
  _glTexCoord4sv = sdlGlGetProcAddressEx('glTexCoord4sv');
  _glRasterPos2d = sdlGlGetProcAddressEx('glRasterPos2d');
  _glRasterPos2f = sdlGlGetProcAddressEx('glRasterPos2f');
  _glRasterPos2i = sdlGlGetProcAddressEx('glRasterPos2i');
  _glRasterPos2s = sdlGlGetProcAddressEx('glRasterPos2s');
  _glRasterPos3d = sdlGlGetProcAddressEx('glRasterPos3d');
  _glRasterPos3f = sdlGlGetProcAddressEx('glRasterPos3f');
  _glRasterPos3i = sdlGlGetProcAddressEx('glRasterPos3i');
  _glRasterPos3s = sdlGlGetProcAddressEx('glRasterPos3s');
  _glRasterPos4d = sdlGlGetProcAddressEx('glRasterPos4d');
  _glRasterPos4f = sdlGlGetProcAddressEx('glRasterPos4f');
  _glRasterPos4i = sdlGlGetProcAddressEx('glRasterPos4i');
  _glRasterPos4s = sdlGlGetProcAddressEx('glRasterPos4s');
  _glRasterPos2dv = sdlGlGetProcAddressEx('glRasterPos2dv');
  _glRasterPos2fv = sdlGlGetProcAddressEx('glRasterPos2fv');
  _glRasterPos2iv = sdlGlGetProcAddressEx('glRasterPos2iv');
  _glRasterPos2sv = sdlGlGetProcAddressEx('glRasterPos2sv');
  _glRasterPos3dv = sdlGlGetProcAddressEx('glRasterPos3dv');
  _glRasterPos3fv = sdlGlGetProcAddressEx('glRasterPos3fv');
  _glRasterPos3iv = sdlGlGetProcAddressEx('glRasterPos3iv');
  _glRasterPos3sv = sdlGlGetProcAddressEx('glRasterPos3sv');
  _glRasterPos4dv = sdlGlGetProcAddressEx('glRasterPos4dv');
  _glRasterPos4fv = sdlGlGetProcAddressEx('glRasterPos4fv');
  _glRasterPos4iv = sdlGlGetProcAddressEx('glRasterPos4iv');
  _glRasterPos4sv = sdlGlGetProcAddressEx('glRasterPos4sv');
  _glRectd = sdlGlGetProcAddressEx('glRectd');
  _glRectf = sdlGlGetProcAddressEx('glRectf');
  _glRecti = sdlGlGetProcAddressEx('glRecti');
  _glRects = sdlGlGetProcAddressEx('glRects');
  _glRectdv = sdlGlGetProcAddressEx('glRectdv');
  _glRectfv = sdlGlGetProcAddressEx('glRectfv');
  _glRectiv = sdlGlGetProcAddressEx('glRectiv');
  _glRectsv = sdlGlGetProcAddressEx('glRectsv');
  _glVertexPointer = sdlGlGetProcAddressEx('glVertexPointer');
  _glNormalPointer = sdlGlGetProcAddressEx('glNormalPointer');
  _glColorPointer = sdlGlGetProcAddressEx('glColorPointer');
  _glIndexPointer = sdlGlGetProcAddressEx('glIndexPointer');
  _glTexCoordPointer = sdlGlGetProcAddressEx('glTexCoordPointer');
  _glEdgeFlagPointer = sdlGlGetProcAddressEx('glEdgeFlagPointer');
  _glGetPointerv = sdlGlGetProcAddressEx('glGetPointerv');
  _glArrayElement = sdlGlGetProcAddressEx('glArrayElement');
  _glDrawArrays = sdlGlGetProcAddressEx('glDrawArrays');
  _glDrawElements = sdlGlGetProcAddressEx('glDrawElements');
  _glInterleavedArrays = sdlGlGetProcAddressEx('glInterleavedArrays');
  _glShadeModel = sdlGlGetProcAddressEx('glShadeModel');
  _glLightf = sdlGlGetProcAddressEx('glLightf');
  _glLighti = sdlGlGetProcAddressEx('glLighti');
  _glLightfv = sdlGlGetProcAddressEx('glLightfv');
  _glLightiv = sdlGlGetProcAddressEx('glLightiv');
  _glGetLightfv = sdlGlGetProcAddressEx('glGetLightfv');
  _glGetLightiv = sdlGlGetProcAddressEx('glGetLightiv');
  _glLightModelf = sdlGlGetProcAddressEx('glLightModelf');
  _glLightModeli = sdlGlGetProcAddressEx('glLightModeli');
  _glLightModelfv = sdlGlGetProcAddressEx('glLightModelfv');
  _glLightModeliv = sdlGlGetProcAddressEx('glLightModeliv');
  _glMaterialf = sdlGlGetProcAddressEx('glMaterialf');
  _glMateriali = sdlGlGetProcAddressEx('glMateriali');
  _glMaterialfv = sdlGlGetProcAddressEx('glMaterialfv');
  _glMaterialiv = sdlGlGetProcAddressEx('glMaterialiv');
  _glGetMaterialfv = sdlGlGetProcAddressEx('glGetMaterialfv');
  _glGetMaterialiv = sdlGlGetProcAddressEx('glGetMaterialiv');
  _glColorMaterial = sdlGlGetProcAddressEx('glColorMaterial');
  _glPixelZoom = sdlGlGetProcAddressEx('glPixelZoom');
  _glPixelStoref = sdlGlGetProcAddressEx('glPixelStoref');
  _glPixelStorei = sdlGlGetProcAddressEx('glPixelStorei');
  _glPixelTransferf = sdlGlGetProcAddressEx('glPixelTransferf');
  _glPixelTransferi = sdlGlGetProcAddressEx('glPixelTransferi');
  _glPixelMapfv = sdlGlGetProcAddressEx('glPixelMapfv');
  _glPixelMapuiv = sdlGlGetProcAddressEx('glPixelMapuiv');
  _glPixelMapusv = sdlGlGetProcAddressEx('glPixelMapusv');
  _glGetPixelMapfv = sdlGlGetProcAddressEx('glGetPixelMapfv');
  _glGetPixelMapuiv = sdlGlGetProcAddressEx('glGetPixelMapuiv');
  _glGetPixelMapusv = sdlGlGetProcAddressEx('glGetPixelMapusv');
  _glBitmap = sdlGlGetProcAddressEx('glBitmap');
  _glReadPixels = sdlGlGetProcAddressEx('glReadPixels');
  _glDrawPixels = sdlGlGetProcAddressEx('glDrawPixels');
  _glCopyPixels = sdlGlGetProcAddressEx('glCopyPixels');
  _glStencilFunc = sdlGlGetProcAddressEx('glStencilFunc');
  _glStencilMask = sdlGlGetProcAddressEx('glStencilMask');
  _glStencilOp = sdlGlGetProcAddressEx('glStencilOp');
  _glClearStencil = sdlGlGetProcAddressEx('glClearStencil');
  _glTexGend = sdlGlGetProcAddressEx('glTexGend');
  _glTexGenf = sdlGlGetProcAddressEx('glTexGenf');
  _glTexGeni = sdlGlGetProcAddressEx('glTexGeni');
  _glTexGendv = sdlGlGetProcAddressEx('glTexGendv');
  _glTexGenfv = sdlGlGetProcAddressEx('glTexGenfv');
  _glTexGeniv = sdlGlGetProcAddressEx('glTexGeniv');
  _glGetTexGendv = sdlGlGetProcAddressEx('glGetTexGendv');
  _glGetTexGenfv = sdlGlGetProcAddressEx('glGetTexGenfv');
  _glGetTexGeniv = sdlGlGetProcAddressEx('glGetTexGeniv');
  _glTexEnvf = sdlGlGetProcAddressEx('glTexEnvf');
  _glTexEnvi = sdlGlGetProcAddressEx('glTexEnvi');
  _glTexEnvfv = sdlGlGetProcAddressEx('glTexEnvfv');
  _glTexEnviv = sdlGlGetProcAddressEx('glTexEnviv');
  _glGetTexEnvfv = sdlGlGetProcAddressEx('glGetTexEnvfv');
  _glGetTexEnviv = sdlGlGetProcAddressEx('glGetTexEnviv');
  _glTexParameterf = sdlGlGetProcAddressEx('glTexParameterf');
  _glTexParameteri = sdlGlGetProcAddressEx('glTexParameteri');
  _glTexParameterfv = sdlGlGetProcAddressEx('glTexParameterfv');
  _glTexParameteriv = sdlGlGetProcAddressEx('glTexParameteriv');
  _glGetTexParameterfv = sdlGlGetProcAddressEx('glGetTexParameterfv');
  _glGetTexParameteriv = sdlGlGetProcAddressEx('glGetTexParameteriv');
  _glGetTexLevelParameterfv = sdlGlGetProcAddressEx('glGetTexLevelParameterfv');
  _glGetTexLevelParameteriv = sdlGlGetProcAddressEx('glGetTexLevelParameteriv');
  _glTexImage1D = sdlGlGetProcAddressEx('glTexImage1D');
  _glTexImage2D = sdlGlGetProcAddressEx('glTexImage2D');
  _glGetTexImage = sdlGlGetProcAddressEx('glGetTexImage');
  _glGenTextures = sdlGlGetProcAddressEx('glGenTextures');
  _glDeleteTextures = sdlGlGetProcAddressEx('glDeleteTextures');
  _glBindTexture = sdlGlGetProcAddressEx('glBindTexture');
  _glPrioritizeTextures = sdlGlGetProcAddressEx('glPrioritizeTextures');
  _glAreTexturesResident = sdlGlGetProcAddressEx('glAreTexturesResident');
  _glIsTexture = sdlGlGetProcAddressEx('glIsTexture');
  _glTexSubImage1D = sdlGlGetProcAddressEx('glTexSubImage1D');
  _glTexSubImage2D = sdlGlGetProcAddressEx('glTexSubImage2D');
  _glCopyTexImage1D = sdlGlGetProcAddressEx('glCopyTexImage1D');
  _glCopyTexImage2D = sdlGlGetProcAddressEx('glCopyTexImage2D');
  _glCopyTexSubImage1D = sdlGlGetProcAddressEx('glCopyTexSubImage1D');
  _glCopyTexSubImage2D = sdlGlGetProcAddressEx('glCopyTexSubImage2D');
  _glMap1d = sdlGlGetProcAddressEx('glMap1d');
  _glMap1f = sdlGlGetProcAddressEx('glMap1f');
  _glMap2d = sdlGlGetProcAddressEx('glMap2d');
  _glMap2f = sdlGlGetProcAddressEx('glMap2f');
  _glGetMapdv = sdlGlGetProcAddressEx('glGetMapdv');
  _glGetMapfv = sdlGlGetProcAddressEx('glGetMapfv');
  _glGetMapiv = sdlGlGetProcAddressEx('glGetMapiv');
  _glEvalCoord1d = sdlGlGetProcAddressEx('glEvalCoord1d');
  _glEvalCoord1f = sdlGlGetProcAddressEx('glEvalCoord1f');
  _glEvalCoord1dv = sdlGlGetProcAddressEx('glEvalCoord1dv');
  _glEvalCoord1fv = sdlGlGetProcAddressEx('glEvalCoord1fv');
  _glEvalCoord2d = sdlGlGetProcAddressEx('glEvalCoord2d');
  _glEvalCoord2f = sdlGlGetProcAddressEx('glEvalCoord2f');
  _glEvalCoord2dv = sdlGlGetProcAddressEx('glEvalCoord2dv');
  _glEvalCoord2fv = sdlGlGetProcAddressEx('glEvalCoord2fv');
  _glMapGrid1d = sdlGlGetProcAddressEx('glMapGrid1d');
  _glMapGrid1f = sdlGlGetProcAddressEx('glMapGrid1f');
  _glMapGrid2d = sdlGlGetProcAddressEx('glMapGrid2d');
  _glMapGrid2f = sdlGlGetProcAddressEx('glMapGrid2f');
  _glEvalPoint1 = sdlGlGetProcAddressEx('glEvalPoint1');
  _glEvalPoint2 = sdlGlGetProcAddressEx('glEvalPoint2');
  _glEvalMesh1 = sdlGlGetProcAddressEx('glEvalMesh1');
  _glEvalMesh2 = sdlGlGetProcAddressEx('glEvalMesh2');
  _glFogf = sdlGlGetProcAddressEx('glFogf');
  _glFogi = sdlGlGetProcAddressEx('glFogi');
  _glFogfv = sdlGlGetProcAddressEx('glFogfv');
  _glFogiv = sdlGlGetProcAddressEx('glFogiv');
  _glFeedbackBuffer = sdlGlGetProcAddressEx('glFeedbackBuffer');
  _glPassThrough = sdlGlGetProcAddressEx('glPassThrough');
  _glSelectBuffer = sdlGlGetProcAddressEx('glSelectBuffer');
  _glInitNames = sdlGlGetProcAddressEx('glInitNames');
  _glLoadName = sdlGlGetProcAddressEx('glLoadName');
  _glPushName = sdlGlGetProcAddressEx('glPushName');
  _glPopName = sdlGlGetProcAddressEx('glPopName');
  _glDrawRangeElements = sdlGlGetProcAddressEx('glDrawRangeElements');
  _glTexImage3D = sdlGlGetProcAddressEx('glTexImage3D');
  _glTexSubImage3D = sdlGlGetProcAddressEx('glTexSubImage3D');
  _glCopyTexSubImage3D = sdlGlGetProcAddressEx('glCopyTexSubImage3D');
  _glColorTable = sdlGlGetProcAddressEx('glColorTable');
  _glColorSubTable = sdlGlGetProcAddressEx('glColorSubTable');
  _glColorTableParameteriv = sdlGlGetProcAddressEx('glColorTableParameteriv');
  _glColorTableParameterfv = sdlGlGetProcAddressEx('glColorTableParameterfv');
  _glCopyColorSubTable = sdlGlGetProcAddressEx('glCopyColorSubTable');
  _glCopyColorTable = sdlGlGetProcAddressEx('glCopyColorTable');
  _glGetColorTable = sdlGlGetProcAddressEx('glGetColorTable');
  _glGetColorTableParameterfv = sdlGlGetProcAddressEx(
    'glGetColorTableParameterfv',
  );
  _glGetColorTableParameteriv = sdlGlGetProcAddressEx(
    'glGetColorTableParameteriv',
  );
  _glBlendEquation = sdlGlGetProcAddressEx('glBlendEquation');
  _glBlendColor = sdlGlGetProcAddressEx('glBlendColor');
  _glHistogram = sdlGlGetProcAddressEx('glHistogram');
  _glResetHistogram = sdlGlGetProcAddressEx('glResetHistogram');
  _glGetHistogram = sdlGlGetProcAddressEx('glGetHistogram');
  _glGetHistogramParameterfv = sdlGlGetProcAddressEx(
    'glGetHistogramParameterfv',
  );
  _glGetHistogramParameteriv = sdlGlGetProcAddressEx(
    'glGetHistogramParameteriv',
  );
  _glMinmax = sdlGlGetProcAddressEx('glMinmax');
  _glResetMinmax = sdlGlGetProcAddressEx('glResetMinmax');
  _glGetMinmax = sdlGlGetProcAddressEx('glGetMinmax');
  _glGetMinmaxParameterfv = sdlGlGetProcAddressEx('glGetMinmaxParameterfv');
  _glGetMinmaxParameteriv = sdlGlGetProcAddressEx('glGetMinmaxParameteriv');
  _glConvolutionFilter1D = sdlGlGetProcAddressEx('glConvolutionFilter1D');
  _glConvolutionFilter2D = sdlGlGetProcAddressEx('glConvolutionFilter2D');
  _glConvolutionParameterf = sdlGlGetProcAddressEx('glConvolutionParameterf');
  _glConvolutionParameterfv = sdlGlGetProcAddressEx('glConvolutionParameterfv');
  _glConvolutionParameteri = sdlGlGetProcAddressEx('glConvolutionParameteri');
  _glConvolutionParameteriv = sdlGlGetProcAddressEx('glConvolutionParameteriv');
  _glCopyConvolutionFilter1D = sdlGlGetProcAddressEx(
    'glCopyConvolutionFilter1D',
  );
  _glCopyConvolutionFilter2D = sdlGlGetProcAddressEx(
    'glCopyConvolutionFilter2D',
  );
  _glGetConvolutionFilter = sdlGlGetProcAddressEx('glGetConvolutionFilter');
  _glGetConvolutionParameterfv = sdlGlGetProcAddressEx(
    'glGetConvolutionParameterfv',
  );
  _glGetConvolutionParameteriv = sdlGlGetProcAddressEx(
    'glGetConvolutionParameteriv',
  );
  _glSeparableFilter2D = sdlGlGetProcAddressEx('glSeparableFilter2D');
  _glGetSeparableFilter = sdlGlGetProcAddressEx('glGetSeparableFilter');
  _glActiveTexture = sdlGlGetProcAddressEx('glActiveTexture');
  _glClientActiveTexture = sdlGlGetProcAddressEx('glClientActiveTexture');
  _glCompressedTexImage1D = sdlGlGetProcAddressEx('glCompressedTexImage1D');
  _glCompressedTexImage2D = sdlGlGetProcAddressEx('glCompressedTexImage2D');
  _glCompressedTexImage3D = sdlGlGetProcAddressEx('glCompressedTexImage3D');
  _glCompressedTexSubImage1D = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage1D',
  );
  _glCompressedTexSubImage2D = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage2D',
  );
  _glCompressedTexSubImage3D = sdlGlGetProcAddressEx(
    'glCompressedTexSubImage3D',
  );
  _glGetCompressedTexImage = sdlGlGetProcAddressEx('glGetCompressedTexImage');
  _glMultiTexCoord1d = sdlGlGetProcAddressEx('glMultiTexCoord1d');
  _glMultiTexCoord1dv = sdlGlGetProcAddressEx('glMultiTexCoord1dv');
  _glMultiTexCoord1f = sdlGlGetProcAddressEx('glMultiTexCoord1f');
  _glMultiTexCoord1fv = sdlGlGetProcAddressEx('glMultiTexCoord1fv');
  _glMultiTexCoord1i = sdlGlGetProcAddressEx('glMultiTexCoord1i');
  _glMultiTexCoord1iv = sdlGlGetProcAddressEx('glMultiTexCoord1iv');
  _glMultiTexCoord1s = sdlGlGetProcAddressEx('glMultiTexCoord1s');
  _glMultiTexCoord1sv = sdlGlGetProcAddressEx('glMultiTexCoord1sv');
  _glMultiTexCoord2d = sdlGlGetProcAddressEx('glMultiTexCoord2d');
  _glMultiTexCoord2dv = sdlGlGetProcAddressEx('glMultiTexCoord2dv');
  _glMultiTexCoord2f = sdlGlGetProcAddressEx('glMultiTexCoord2f');
  _glMultiTexCoord2fv = sdlGlGetProcAddressEx('glMultiTexCoord2fv');
  _glMultiTexCoord2i = sdlGlGetProcAddressEx('glMultiTexCoord2i');
  _glMultiTexCoord2iv = sdlGlGetProcAddressEx('glMultiTexCoord2iv');
  _glMultiTexCoord2s = sdlGlGetProcAddressEx('glMultiTexCoord2s');
  _glMultiTexCoord2sv = sdlGlGetProcAddressEx('glMultiTexCoord2sv');
  _glMultiTexCoord3d = sdlGlGetProcAddressEx('glMultiTexCoord3d');
  _glMultiTexCoord3dv = sdlGlGetProcAddressEx('glMultiTexCoord3dv');
  _glMultiTexCoord3f = sdlGlGetProcAddressEx('glMultiTexCoord3f');
  _glMultiTexCoord3fv = sdlGlGetProcAddressEx('glMultiTexCoord3fv');
  _glMultiTexCoord3i = sdlGlGetProcAddressEx('glMultiTexCoord3i');
  _glMultiTexCoord3iv = sdlGlGetProcAddressEx('glMultiTexCoord3iv');
  _glMultiTexCoord3s = sdlGlGetProcAddressEx('glMultiTexCoord3s');
  _glMultiTexCoord3sv = sdlGlGetProcAddressEx('glMultiTexCoord3sv');
  _glMultiTexCoord4d = sdlGlGetProcAddressEx('glMultiTexCoord4d');
  _glMultiTexCoord4dv = sdlGlGetProcAddressEx('glMultiTexCoord4dv');
  _glMultiTexCoord4f = sdlGlGetProcAddressEx('glMultiTexCoord4f');
  _glMultiTexCoord4fv = sdlGlGetProcAddressEx('glMultiTexCoord4fv');
  _glMultiTexCoord4i = sdlGlGetProcAddressEx('glMultiTexCoord4i');
  _glMultiTexCoord4iv = sdlGlGetProcAddressEx('glMultiTexCoord4iv');
  _glMultiTexCoord4s = sdlGlGetProcAddressEx('glMultiTexCoord4s');
  _glMultiTexCoord4sv = sdlGlGetProcAddressEx('glMultiTexCoord4sv');
  _glLoadTransposeMatrixd = sdlGlGetProcAddressEx('glLoadTransposeMatrixd');
  _glLoadTransposeMatrixf = sdlGlGetProcAddressEx('glLoadTransposeMatrixf');
  _glMultTransposeMatrixd = sdlGlGetProcAddressEx('glMultTransposeMatrixd');
  _glMultTransposeMatrixf = sdlGlGetProcAddressEx('glMultTransposeMatrixf');
  _glSampleCoverage = sdlGlGetProcAddressEx('glSampleCoverage');
  _glActiveTextureArb = sdlGlGetProcAddressEx('glActiveTextureArb');
  _glClientActiveTextureArb = sdlGlGetProcAddressEx('glClientActiveTextureArb');
  _glMultiTexCoord1dArb = sdlGlGetProcAddressEx('glMultiTexCoord1dArb');
  _glMultiTexCoord1dvArb = sdlGlGetProcAddressEx('glMultiTexCoord1dvArb');
  _glMultiTexCoord1fArb = sdlGlGetProcAddressEx('glMultiTexCoord1fArb');
  _glMultiTexCoord1fvArb = sdlGlGetProcAddressEx('glMultiTexCoord1fvArb');
  _glMultiTexCoord1iArb = sdlGlGetProcAddressEx('glMultiTexCoord1iArb');
  _glMultiTexCoord1ivArb = sdlGlGetProcAddressEx('glMultiTexCoord1ivArb');
  _glMultiTexCoord1sArb = sdlGlGetProcAddressEx('glMultiTexCoord1sArb');
  _glMultiTexCoord1svArb = sdlGlGetProcAddressEx('glMultiTexCoord1svArb');
  _glMultiTexCoord2dArb = sdlGlGetProcAddressEx('glMultiTexCoord2dArb');
  _glMultiTexCoord2dvArb = sdlGlGetProcAddressEx('glMultiTexCoord2dvArb');
  _glMultiTexCoord2fArb = sdlGlGetProcAddressEx('glMultiTexCoord2fArb');
  _glMultiTexCoord2fvArb = sdlGlGetProcAddressEx('glMultiTexCoord2fvArb');
  _glMultiTexCoord2iArb = sdlGlGetProcAddressEx('glMultiTexCoord2iArb');
  _glMultiTexCoord2ivArb = sdlGlGetProcAddressEx('glMultiTexCoord2ivArb');
  _glMultiTexCoord2sArb = sdlGlGetProcAddressEx('glMultiTexCoord2sArb');
  _glMultiTexCoord2svArb = sdlGlGetProcAddressEx('glMultiTexCoord2svArb');
  _glMultiTexCoord3dArb = sdlGlGetProcAddressEx('glMultiTexCoord3dArb');
  _glMultiTexCoord3dvArb = sdlGlGetProcAddressEx('glMultiTexCoord3dvArb');
  _glMultiTexCoord3fArb = sdlGlGetProcAddressEx('glMultiTexCoord3fArb');
  _glMultiTexCoord3fvArb = sdlGlGetProcAddressEx('glMultiTexCoord3fvArb');
  _glMultiTexCoord3iArb = sdlGlGetProcAddressEx('glMultiTexCoord3iArb');
  _glMultiTexCoord3ivArb = sdlGlGetProcAddressEx('glMultiTexCoord3ivArb');
  _glMultiTexCoord3sArb = sdlGlGetProcAddressEx('glMultiTexCoord3sArb');
  _glMultiTexCoord3svArb = sdlGlGetProcAddressEx('glMultiTexCoord3svArb');
  _glMultiTexCoord4dArb = sdlGlGetProcAddressEx('glMultiTexCoord4dArb');
  _glMultiTexCoord4dvArb = sdlGlGetProcAddressEx('glMultiTexCoord4dvArb');
  _glMultiTexCoord4fArb = sdlGlGetProcAddressEx('glMultiTexCoord4fArb');
  _glMultiTexCoord4fvArb = sdlGlGetProcAddressEx('glMultiTexCoord4fvArb');
  _glMultiTexCoord4iArb = sdlGlGetProcAddressEx('glMultiTexCoord4iArb');
  _glMultiTexCoord4ivArb = sdlGlGetProcAddressEx('glMultiTexCoord4ivArb');
  _glMultiTexCoord4sArb = sdlGlGetProcAddressEx('glMultiTexCoord4sArb');
  _glMultiTexCoord4svArb = sdlGlGetProcAddressEx('glMultiTexCoord4svArb');
}
